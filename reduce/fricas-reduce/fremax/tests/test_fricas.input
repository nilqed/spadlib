--)lisp (setf saved-readtable *readtable*)
--)lisp (in-package :cl-user)
--)lisp (load "bootstrap")
--)lisp (load "test")
--)lisp (in-package :boot)
--)lisp (setf *readtable* saved-readtable)

-- after calling (sl::standard-lisp) we have to reset the readtable:
-- )lisp (setf *readtable* saved-readtable)
-- each time!


----- use "on defn" in REDUCE to see SL code ******

macro sys(cmd) == systemCommand(cmd)$MoreSystemCommands

macro standardLisp == sys "lisp (sl::standard-lisp)"

macro saveReadtable == sys "lisp (setf saved-readtable *readtable*)"

macro backToFricas == 
  sys "lisp (cl::in-package :boot)"
  sys "lisp (setf *readtable* saved-readtable)"
  
-- nosman -eval ")r test_fricas.input" 


saveReadtable
standardLisp

)lisp (load-package 'excalc)
)lisp (pform (list (list 'equal 'x 0)))
)lisp (aeval (list 'd 'x))
)lisp (aeval (list 'd (list 'd 'x)))
)lisp (setk 'z (aeval 123))
)lisp (setk 'w (aeval (list 'expt 'z 'z)))

)lisp (setq r 123)
)lisp (setk 'y (aeval (list 'expt (list 'plus 1 'x) 3)))
)lisp (aeval 'y)
)lisp (aeval (list 'df 'y 'x))
)lisp (assgnpri (aeval 'y) nil 'only)




backToFricas

y:=D(log x,x)

standardLisp
)lisp (aeval 'w)
)lisp (aeval 'z)
)lisp (aeval 'x)


)lisp (setk 'w (aeval (list 'quotient (list 'difference 1 'z) (list 'plus 1 'z))))
)lisp (reval 'w)
)lisp (reval 'y)

)lisp (setk '|t| (aeval (list 'plus 2 '|z|)))
)lisp (aeval '|t|)
)lisp (reval '|t|)


backToFricas





  


