(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'SIMP)) 
(FLUID '(*ALLFAC *DIV)) 
(FLUID
 '(*ASYMP* *COMPLEX *EXP *GCD *IFACTOR *KEEPSQRTS *MCD *MODE *MODULAR
   *NOTSEPARATE *NUMVAL *PRECISE *PRECISE_COMPLEX *RATIONALIZE *REDUCED *RESIMP
   *SUB2 *UNCACHED ALGLIST* DMD* DMODE* VARSTACK* *COMBINELOGS *EXPANDEXPT *MSG
   FRLIS* SUBFG* *NORATIONALGI FACTORBOUND* NCMP* POWLIS1* *NOSPURP *NCMP
   *INSIDE-INT*)) 
(GLOBAL '(*MATCH DEN* INITL* MUL* SIMPCOUNT* SIMPLIMIT* TSTACK* WS)) 
(SWITCH (LIST (LIST 'EQUAL 'EXPANDEXPT 'ON))) 
(SETQ *INSIDE-INT* NIL) 
(SETQ FACTORBOUND* 10000) 
(PUT 'IFACTOR 'SIMPFG '((T (RMSUBS)))) 
(PUT 'ALGLIST* 'INITL '(CONS NIL NIL)) 
(PUT 'SIMPCOUNT* 'INITL 0) 
(SETQ INITL* (UNION '(ALGLIST* SIMPCOUNT*) INITL*)) 
(SETQ SIMPLIMIT* 1000) 
(PUT 'NONCOM 'NUMBER-OF-ARGS 1) 
(PUT 'NONCOM 'DEFINED-ON-LINE '79) 
(PUT 'NONCOM 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'NONCOM 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE NONCOM (U)
    (PROGN
     (RMSUBS)
     (PROG (J)
       (SETQ J U)
      LAB
       (COND ((NULL J) (RETURN NIL)))
       ((LAMBDA (J) (NONCOM1 J)) (CAR J))
       (SETQ J (CDR J))
       (GO LAB)))) 
(PUT 'NONCOM1 'NUMBER-OF-ARGS 1) 
(PUT 'NONCOM1 'DEFINED-ON-LINE '83) 
(PUT 'NONCOM1 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'NONCOM1 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE NONCOM1 (U) (PROGN (SETQ *NCMP T) (FLAG (LIST U) 'NONCOM))) 
(PUT 'NONCOM 'STAT 'RLIS) 
(PUT 'SIMP* 'NUMBER-OF-ARGS 1) 
(PUT 'SIMP* 'DEFINED-ON-LINE '88) 
(PUT 'SIMP* 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'SIMP* 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMP* (U)
    (PROG (*ASYMP* X)
      (COND ((AND (EQCAR U '*SQ) (CADDR U) (NULL *RESIMP)) (RETURN (CADR U))))
      (SETQ X (CONS MUL* *SUB2))
      (SETQ MUL* NIL)
      (SETQ U (SIMP U))
      (COND (*NOSPURP (SETQ MUL* (UNION MUL* '(ISIMPQ)))))
      (PROG (J)
        (SETQ J MUL*)
       LAB
        (COND ((NULL J) (RETURN NIL)))
        ((LAMBDA (J) (SETQ U (APPLY1 J U))) (CAR J))
        (SETQ J (CDR J))
        (GO LAB))
      (SETQ MUL* (CAR X))
      (SETQ U (SUBS2 U))
      (COND (*COMBINELOGS (SETQ U (CLOGSQ* U))))
      (COND
       ((AND (EQ DMODE* '|:GI:|) (NOT *NORATIONALGI))
        (SETQ U (|GIRATIONALIZE:| U)))
       (*RATIONALIZE (SETQ U (RATIONALIZESQ U))) (T (SETQ U (RATIONALIZEI U))))
      (SETQ *SUB2 (CDR X))
      (COND ((AND *ASYMP* *RATIONALIZE) (SETQ U (GCDCHK U))))
      (RETURN U))) 
(PUT 'RATIONALIZEI 'NUMBER-OF-ARGS 1) 
(PUT 'RATIONALIZEI 'DEFINED-ON-LINE '112) 
(PUT 'RATIONALIZEI 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'RATIONALIZEI 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RATIONALIZEI (U)
    (PROG (V W)
      (COND
       ((OR ((LAMBDA (U) (OR (ATOM U) (ATOM (CAR U)))) (SETQ V (CDR U)))
            (NOT (SMEMQ 'I V)))
        (RETURN U)))
      ((LAMBDA (KORD*) (SETQ V (REORDSQ U))) (CONS 'I KORD*))
      (RETURN
       (COND
        ((AND (EQUAL (CAAR (SETQ W (CDR V))) '(I . 1)) (NULL (CDR W)))
         (CONS
          (COND
           ((AND (NOT (OR (ATOM (CAR V)) (ATOM (CAR (CAR V)))))
                 (EQ (CAAAR (CAR V)) 'I))
            (ADDF (CDAR (CAR V))
                  ((LAMBDA (G555 G556)
                     (COND (*PHYSOP-LOADED (PHYSOP-MULTF G555 G556))
                           (T (POLY-MULTF G555 G556))))
                   (NEGF (LIST (CONS (TO 'I 1) 1))) (CDR (CAR V)))))
           (T
            (NEGF
             ((LAMBDA (G557)
                (COND (*PHYSOP-LOADED (PHYSOP-MULTF G557 (CAR V)))
                      (T (POLY-MULTF G557 (CAR V)))))
              (LIST (CONS (TO 'I 1) 1))))))
          (CDAR W)))
        (T U))))) 
(PUT 'SUBS2 'NUMBER-OF-ARGS 1) 
(PUT 'SUBS2 'DEFINED-ON-LINE '124) 
(PUT 'SUBS2 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'SUBS2 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SUBS2 (U)
    (PROG (XEXP V W X)
      (COND ((NULL SUBFG*) (RETURN U))
            ((OR *SUB2 POWLIS1*) (SETQ U (SUBS2Q U))))
      (SETQ U (EXPTCHKSQ U))
      (SETQ X (GET 'SLASH 'OPMTCH))
      (COND ((OR (NULL (OR *MATCH X)) (NULL (CAR U))) (RETURN U))
            ((NULL *EXP)
             (PROGN
              (SETQ XEXP T)
              (SETQ *EXP T)
              (SETQ V U)
              (SETQ W (SETQ U (RESIMP U))))))
      (SETQ U (SUBS3Q U))
      (COND (XEXP (PROGN (SETQ *EXP NIL) (COND ((EQUAL U W) (SETQ U V))))))
      (COND (X (SETQ U (SUBS4Q U))))
      (RETURN U))) 
(DE ADD_TO_ALGLIST (KEY VAL L) (CONS (CONS KEY VAL) L)) 
(PUT 'ADD_TO_ALGLIST 'NUMBER-OF-ARGS 3) 
(PUT 'ADD_TO_ALGLIST 'DEFINED-ON-LINE '218) 
(PUT 'ADD_TO_ALGLIST 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'ADD_TO_ALGLIST 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(PUTC 'ADD_TO_ALGLIST 'INLINE '(LAMBDA (KEY VAL L) (CONS (CONS KEY VAL) L))) 
(DE SEARCH_ALGLIST (KEY L)
    (PROG (R)
      (SETQ R (ASSOC KEY L))
      (COND ((NULL R) (RETURN R)) (T (RETURN (CDR R)))))) 
(PUT 'SEARCH_ALGLIST 'NUMBER-OF-ARGS 2) 
(PUT 'SEARCH_ALGLIST 'DEFINED-ON-LINE '221) 
(PUT 'SEARCH_ALGLIST 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'SEARCH_ALGLIST 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(PUTC 'SEARCH_ALGLIST 'INLINE
      '(LAMBDA (KEY L)
         (PROG (R)
           (SETQ R (ASSOC KEY L))
           (COND ((NULL R) (RETURN R)) (T (RETURN (CDR R))))))) 
(DE ALGLIST_CONTENTS (L) L) 
(PUT 'ALGLIST_CONTENTS 'NUMBER-OF-ARGS 1) 
(PUT 'ALGLIST_CONTENTS 'DEFINED-ON-LINE '229) 
(PUT 'ALGLIST_CONTENTS 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'ALGLIST_CONTENTS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'ALGLIST_CONTENTS 'INLINE '(LAMBDA (L) L)) 
(DE DELETE_FROM_ALGLIST (KEY L) (DELASC KEY L)) 
(PUT 'DELETE_FROM_ALGLIST 'NUMBER-OF-ARGS 2) 
(PUT 'DELETE_FROM_ALGLIST 'DEFINED-ON-LINE '232) 
(PUT 'DELETE_FROM_ALGLIST 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'DELETE_FROM_ALGLIST 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(PUTC 'DELETE_FROM_ALGLIST 'INLINE '(LAMBDA (KEY L) (DELASC KEY L))) 
(PUT 'SIMP 'NUMBER-OF-ARGS 1) 
(PUT 'SIMP 'DEFINED-ON-LINE '237) 
(PUT 'SIMP 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'SIMP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMP (U)
    ((LAMBDA (VARSTACK*)
       (PROG (X Y)
         (COND
          ((FIXP U)
           (COND ((EQUAL U 0) (RETURN (CONS NIL 1)))
                 ((NOT DMODE*) (RETURN (CONS U 1))) (T NIL)))
          ((MEMBER U VARSTACK*) (RECURSIVEERROR U)))
         (SETQ VARSTACK* (CONS U VARSTACK*))
         (COND
          ((GREATERP SIMPCOUNT* SIMPLIMIT*)
           (PROGN
            (SETQ SIMPCOUNT* 0)
            (RERROR 'ALG 12 "Simplification recursion too deep")))
          ((AND (EQCAR U '*SQ) (CADDR U) (NULL *RESIMP)) (RETURN (CADR U)))
          ((VECTORP U) (RETURN (SIMPATOM U)))
          ((AND (NULL *UNCACHED)
                (SETQ X
                        (PROG (R)
                          (SETQ R (ASSOC U (CAR ALGLIST*)))
                          (COND ((NULL R) (RETURN R)) (T (RETURN (CDR R)))))))
           (RETURN (PROGN (COND ((CAR X) (SETQ *SUB2 T))) (CDR X)))))
         (SETQ SIMPCOUNT* (PLUS SIMPCOUNT* 1))
         (COND ((ATOM U) (RETURN (*SSAVE (SIMPATOM U) U)))
               ((SETQ X (LAMBDAP (CAR U)))
                (RETURN (*SSAVE (SIMP (APPLY X (CDR U))) U)))
               ((OR (NOT (IDP (CAR U))) (NULL (CAR U)))
                (COND ((ATOM (CAR U)) (TYPERR (CAR U) "operator"))
                      ((AND (IDP (CAAR U)) (SETQ X (GET (CAAR U) 'NAME)))
                       (RETURN (*SSAVE U U)))
                      ((AND (EQCAR (CAR U) 'MAT)
                            (NUMLIS (SETQ X (REVLIS (CDR U))))
                            (EQUAL (LENGTH X) 2))
                       (RETURN
                        (*SSAVE (SIMP (NTH (NTH (CDAR U) (CAR X)) (CADR X)))
                                U)))
                      (T (ERRPRI2 U T))))
               ((FLAGP (CAR U) 'OPFN)
                (COND
                 ((NULL (SETQ Y (GETRTYPE (SETQ X (OPFNEVAL U)))))
                  (RETURN (*SSAVE (SIMP_WITHOUT_RESIMP X) U)))
                 ((AND (EQ Y 'YETUNKNOWNTYPE)
                       (NULL (GETRTYPE (SETQ X (REVAL1 X T)))))
                  (RETURN (SIMP X)))
                 (T (TYPERR U "scalar"))))
               ((SETQ X (GET (CAR U) 'PSOPFN))
                (COND
                 ((GETRTYPE (SETQ X (APPLY1 X (CDR (ARGNOCHK U)))))
                  (TYPERR U "scalar"))
                 ((EQUAL X U)
                  (RETURN (*SSAVE (CONS (LIST (CONS (TO X 1) 1)) 1) U)))
                 (T (RETURN (*SSAVE (SIMP_WITHOUT_RESIMP X) U)))))
               ((SETQ X (GET (CAR U) 'POLYFN))
                (RETURN
                 (PROGN
                  (ARGNOCHK U)
                  (*SSAVE
                   (CONS
                    (LISPAPPLY X
                               (PROG (J FORALL-RESULT FORALL-ENDPTR)
                                 (SETQ J (CDR U))
                                 (COND ((NULL J) (RETURN NIL)))
                                 (SETQ FORALL-RESULT
                                         (SETQ FORALL-ENDPTR
                                                 (CONS
                                                  ((LAMBDA (J)
                                                     (*Q2F (SIMP* J)))
                                                   (CAR J))
                                                  NIL)))
                                LOOPLABEL
                                 (SETQ J (CDR J))
                                 (COND ((NULL J) (RETURN FORALL-RESULT)))
                                 (RPLACD FORALL-ENDPTR
                                         (CONS
                                          ((LAMBDA (J) (*Q2F (SIMP* J)))
                                           (CAR J))
                                          NIL))
                                 (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                                 (GO LOOPLABEL)))
                    1)
                   U))))
               ((AND (GET (CAR U) 'OPMTCH)
                     (NOT (EQ (GET (CAR U) 'SIMPFN) 'SIMPIDEN))
                     (SETQ X (OPMTCHREVOP U)))
                (RETURN (*SSAVE (SIMP X) U)))
               ((SETQ X (GET (CAR U) 'SIMPFN))
                (RETURN
                 (*SSAVE
                  (APPLY1 X
                          (COND
                           ((OR (EQ X 'SIMPIDEN) (FLAGP (CAR U) 'FULL))
                            (ARGNOCHK U))
                           (T (CDR (ARGNOCHK U)))))
                  U)))
               ((AND (SETQ X (GET (CAR U) 'RTYPE)) (SETQ X (GET X 'GETELEMFN)))
                (RETURN (*SSAVE (SIMP (APPLY1 X U)) U)))
               ((OR (FLAGP (CAR U) 'BOOLEAN) (GET (CAR U) 'INFIX))
                (TYPERR (COND ((SETQ X (GET (CAR U) 'PRTCH)) X) (T (CAR U)))
                        "algebraic operator"))
               ((FLAGP (CAR U) 'NOCHANGE)
                (RETURN (*SSAVE (SIMP (LISPEVAL U)) U)))
               ((OR (GET (CAR U) 'PSOPFN) (GET (CAR U) 'RTYPEFN))
                (TYPERR U "scalar"))
               (T
                (PROGN
                 (REDMSG (CAR U) "operator")
                 (MKOP (CAR U))
                 (SETQ VARSTACK* (DELETE U VARSTACK*))
                 (RETURN (*SSAVE (SIMP U) U)))))))
     VARSTACK*)) 
(PUT 'OPMTCHREVOP 'NUMBER-OF-ARGS 1) 
(PUT 'OPMTCHREVOP 'DEFINED-ON-LINE '310) 
(PUT 'OPMTCHREVOP 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'OPMTCHREVOP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE OPMTCHREVOP (U)
    (COND ((OR (NULL *VAL) (SMEMQ 'CONS U)) (OPMTCH U))
          (T (OPMTCH (CONS (CAR U) (REVLIS (CDR U))))))) 
(PUT 'SIMP_WITHOUT_RESIMP 'NUMBER-OF-ARGS 1) 
(PUT 'SIMP_WITHOUT_RESIMP 'DEFINED-ON-LINE '316) 
(PUT 'SIMP_WITHOUT_RESIMP 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'SIMP_WITHOUT_RESIMP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMP_WITHOUT_RESIMP (U) ((LAMBDA (*RESIMP) (SIMP U)) NIL)) 
(PUT 'ARRAY 'GETELEMFN 'GETELV) 
(PUT 'ARRAY 'SETELEMFN 'SETELV) 
(PUT 'GETINFIX 'NUMBER-OF-ARGS 1) 
(PUT 'GETINFIX 'DEFINED-ON-LINE '323) 
(PUT 'GETINFIX 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'GETINFIX 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE GETINFIX (U) (PROG (X) (RETURN (COND ((SETQ X (GET U 'PRTCH)) X) (T U))))) 
(PUT '*SSAVE 'NUMBER-OF-ARGS 2) 
(PUT '*SSAVE 'DEFINED-ON-LINE '327) 
(PUT '*SSAVE 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT '*SSAVE 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE *SSAVE (U V)
    (PROG ()
      (COND
       ((NOT *UNCACHED)
        (RPLACA ALGLIST* (CONS (CONS V (CONS *SUB2 U)) (CAR ALGLIST*)))))
      (SETQ SIMPCOUNT* (DIFFERENCE SIMPCOUNT* 1))
      (RETURN U))) 
(PUT 'NUMLIS 'NUMBER-OF-ARGS 1) 
(PUT 'NUMLIS 'DEFINED-ON-LINE '337) 
(PUT 'NUMLIS 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'NUMLIS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE NUMLIS (U) (OR (NULL U) (AND (NUMBERP (CAR U)) (NUMLIS (CDR U))))) 
(PUT 'SIMPATOM 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPATOM 'DEFINED-ON-LINE '340) 
(PUT 'SIMPATOM 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'SIMPATOM 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPATOM (U)
    (COND ((NULL U) (CONS NIL 1))
          ((NUMBERP U)
           (COND ((EQUAL U 0) (CONS NIL 1)) ((NOT (FIXP U)) (|RD:SIMP| U))
                 ((AND (EQ DMODE* '|:MOD:|) (EQUAL CURRENT-MODULUS 1))
                  (CONS NIL 1))
                 ((AND (FLAGP DMODE* 'CONVERT) (NEQ U 1))
                  (*D2Q (APPLY1 (GET DMODE* 'I2D) U)))
                 (T (CONS U 1))))
          ((STRINGP U) (TYPERR (LIST "String" U) "identifier"))
          ((FLAGP U 'SHARE)
           (PROGN
            ((LAMBDA (X) (COND ((EQ X U) (MKSQ U 1)) (T (SIMP X))))
             (LISPEVAL U))))
          (T
           (PROG (Z)
             (COND ((SETQ Z (GET U 'IDVALFN)) (RETURN (APPLY1 Z U)))
                   ((AND *NUMVAL DMODE* (FLAGP U 'CONSTANT)
                         (SETQ Z (GET U DMODE*))
                         (NOT
                          (ERRORP
                           (SETQ Z
                                   (ERRORSET* (LIST 'LISPAPPLY (MKQUOTE Z) NIL)
                                              NIL))))
                         (OR (NOT (EQCAR (SETQ Z (CAR Z)) '|:RD:|))
                             (NOT (COMPLEXP (CDR Z)))))
                    (RETURN (*D2Q Z)))
                   ((GETRTYPE U) (TYPERR U 'SCALAR))
                   (T (RETURN (MKSQ U 1)))))))) 
(FLAG '(E PI) 'CONSTANT) 
(PUT 'MKOP 'NUMBER-OF-ARGS 1) 
(PUT 'MKOP 'DEFINED-ON-LINE '370) 
(PUT 'MKOP 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'MKOP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MKOP (U)
    (PROG (X)
      (COND ((NULL U) (TYPERR "Local variable" "operator"))
            ((EQ U 'LAMBDA) (TYPERR "The symbol \"lambda\"" "operator"))
            ((GET U 'FORMFN) (TYPERR "Reserved word" "operator"))
            ((EQ (SETQ X (GETTYPE U)) 'OPERATOR)
             (PROGN
              (COND
               ((NEQ (GET U 'SIMPFN) 'SIMPIDEN)
                (LPRIM (LIST U "already defined as operator"))))))
            ((GET U 'PSOPFN) (LPRIM (LIST U "already defined as operator")))
            ((EQ X 'ALGEBRAIC_PROCEDURE)
             (LPRIM (LIST U "already defined as algebraic procedure")))
            ((AND X (NOT (MEMQ X '(FLUID GLOBAL PROCEDURE SCALAR))))
             (TYPERR U 'OPERATOR))
            (T (PUT U 'SIMPFN 'SIMPIDEN))))) 
(DE OPERATORP (U) (EQ (GETTYPE U) 'OPERATOR)) 
(PUT 'OPERATORP 'NUMBER-OF-ARGS 1) 
(PUT 'OPERATORP 'DEFINED-ON-LINE '393) 
(PUT 'OPERATORP 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'OPERATORP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'OPERATORP 'INLINE '(LAMBDA (U) (EQ (GETTYPE U) 'OPERATOR))) 
(DE SIMPCAR (U) (SIMP (CAR U))) 
(PUT 'SIMPCAR 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPCAR 'DEFINED-ON-LINE '396) 
(PUT 'SIMPCAR 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'SIMPCAR 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'SIMPCAR 'INLINE '(LAMBDA (U) (SIMP (CAR U)))) 
(PUT 'QUOTE 'SIMPFN 'SIMPCAR) 
(PUT 'SHARE 'NUMBER-OF-ARGS 1) 
(PUT 'SHARE 'DEFINED-ON-LINE '401) 
(PUT 'SHARE 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'SHARE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SHARE (U)
    (PROG (Y)
      (PROG (V)
        (SETQ V U)
       LAB
        (COND ((NULL V) (RETURN NIL)))
        ((LAMBDA (V)
           (COND ((NOT (IDP V)) (TYPERR V "id")) ((FLAGP V 'SHARE) NIL)
                 ((OR (FLAGP V 'RESERVED) (EQ V 'T)) (RSVERR V))
                 ((AND (SETQ Y (GETRTYPE V)) (NEQ Y 'LIST))
                  (RERROR 'ALG 13 (LIST Y V "cannot be shared")))
                 (T
                  (PROGN
                   (COND (Y (REMPROP V 'RTYPE)))
                   (COND
                    ((SETQ Y (GET V 'AVALUE))
                     (PROGN (SETIFNGFL V (CADR Y)) (REMPROP V 'AVALUE)))
                    ((NOT (BOUNDP V)) (SETIFNGFL V V)))
                   (FLAG (LIST V) 'SHARE)))))
         (CAR V))
        (SETQ V (CDR V))
        (GO LAB)))) 
(PUT 'BOUNDP 'NUMBER-OF-ARGS 1) 
(PUT 'BOUNDP 'DEFINED-ON-LINE '420) 
(PUT 'BOUNDP 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'BOUNDP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE BOUNDP (U) (NULL (ERRORP (ERRORSET* U NIL)))) 
(PUT 'SETIFNGFL 'NUMBER-OF-ARGS 2) 
(PUT 'SETIFNGFL 'DEFINED-ON-LINE '425) 
(PUT 'SETIFNGFL 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'SETIFNGFL 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE SETIFNGFL (V Y)
    (PROGN (COND ((NOT (GLOBALP V)) (FLUID (LIST V)))) (SET V Y))) 
(RLISTAT '(SHARE)) 
(FLAG '(WS *MODE) 'SHARE) 
(FLAG '(SHARE) 'EVAL) 
(DE SIMPEXPON (U) (SIMPEXPON1 U 'SIMP*)) 
(PUT 'SIMPEXPON 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPEXPON 'DEFINED-ON-LINE '437) 
(PUT 'SIMPEXPON 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'SIMPEXPON 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'SIMPEXPON 'INLINE '(LAMBDA (U) (SIMPEXPON1 U 'SIMP*))) 
(PUT 'SIMPEXPON1 'NUMBER-OF-ARGS 2) 
(PUT 'SIMPEXPON1 'DEFINED-ON-LINE '442) 
(PUT 'SIMPEXPON1 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'SIMPEXPON1 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE SIMPEXPON1 (U V)
    (COND
     ((AND *NUMVAL (OR (EQ DMODE* '|:RD:|) (EQ DMODE* '|:CR:|))) (APPLY1 V U))
     (T
      (PROG (DMODE* ALGLIST*)
        (SETQ ALGLIST* (CONS NIL NIL))
        (RETURN (APPLY1 V U)))))) 
(FLUID '(*QSUM-SIMPEXPT)) 
(DE SIMPEXPT (U)
    (COND (*QSUM-SIMPEXPT (QSUM-SIMPEXPT U)) (T (BASIC-SIMPEXPT U)))) 
(PUT 'SIMPEXPT 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPEXPT 'DEFINED-ON-LINE '449) 
(PUT 'SIMPEXPT 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'SIMPEXPT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'SIMPEXPT 'INLINE
      '(LAMBDA (U)
         (COND (*QSUM-SIMPEXPT (QSUM-SIMPEXPT U)) (T (BASIC-SIMPEXPT U))))) 
(FLUID '(INSIDE-QSUM-SIMPEXPT*)) 
(PUT 'QSUM-SIMPEXPT 'NUMBER-OF-ARGS 1) 
(PUT 'QSUM-SIMPEXPT 'DEFINED-ON-LINE '464) 
(PUT 'QSUM-SIMPEXPT 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'QSUM-SIMPEXPT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE QSUM-SIMPEXPT (U)
    (COND (INSIDE-QSUM-SIMPEXPT* (QSUM-SIMPEXPT1 U))
          ((OR (NOT *EXP) *FACTOR (NULL *MCD))
           (PROG (W)
             (SETQ W
                     (PROG (INSIDE-QSUM-EXPT* *PRECISE *FACTOR *EXP *MCD
                            *ALLFAC W)
                       (SETQ INSIDE-QSUM-EXPT* T)
                       (SETQ *EXP T)
                       (SETQ *MCD T)
                       (RMSUBS)
                       (RETURN (QSUM-SIMPEXPT1 U))))
             (RMSUBS)
             (RETURN W)))
          (T
           (PROG (INSIDE-QSUM-EXPT* *PRECISE *ALLFAC)
             (SETQ INSIDE-QSUM-EXPT* T)
             (RETURN (QSUM-SIMPEXPT1 U)))))) 
(PUT 'QSUM-SIMPEXPT1 'NUMBER-OF-ARGS 1) 
(PUT 'QSUM-SIMPEXPT1 'DEFINED-ON-LINE '487) 
(PUT 'QSUM-SIMPEXPT1 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'QSUM-SIMPEXPT1 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE QSUM-SIMPEXPT1 (U)
    (COND
     ((EQCAR (CAR U) 'MINUS)
      (MULTSQ (BASIC-SIMPEXPT (LIST '(MINUS 1) (CADR U)))
              (QSUM-SIMPEXPT1 (LIST (CADAR U) (CADR U)))))
     (T (PROGN ((LAMBDA (INSIDE-QSUM-SIMPEXPT*) (BASIC-SIMPEXPT U)) NIL))))) 
(PUT 'BASIC-SIMPEXPT 'NUMBER-OF-ARGS 1) 
(PUT 'BASIC-SIMPEXPT 'DEFINED-ON-LINE '495) 
(PUT 'BASIC-SIMPEXPT 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'BASIC-SIMPEXPT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE BASIC-SIMPEXPT (U)
    (PROG (EXPON)
      ((LAMBDA (KORD*) (SETQ EXPON (SIMPEXPON1 (CARX (CDR U) 'EXPT) 'SIMP*)))
       NIL)
      (SETQ EXPON (SIMPEXPON1 EXPON 'RESIMP))
      (RETURN (SIMPEXPT1 (CAR U) EXPON NIL)))) 
(PUT 'SIMPEXPT1 'NUMBER-OF-ARGS 3) 
(PUT 'SIMPEXPT1 'DEFINED-ON-LINE '507) 
(PUT 'SIMPEXPT1 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'SIMPEXPT1 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE SIMPEXPT1 (U N FLG)
    (PROG (*ALLFAC *DIV M X Y)
      (COND ((ONEP U) (RETURN (CONS 1 1))))
      (SETQ *ALLFAC T)
      (SETQ M (CAR N))
      (COND ((AND (EQUAL M 1) (EQUAL (CDR N) 1)) (RETURN (SIMP U))))
      (COND
       ((AND (EQ U 'E) (OR (ATOM (CDR N)) (ATOM (CAR (CDR N))))
             (NOT (OR (ATOM M) (ATOM (CAR M)))) (EQUAL (CDAAR M) 1)
             (NULL (CDR M)) (EQCAR (CAAAR M) 'LOG))
        (RETURN
         (SIMPEXPT1 (PREPSQ* (SIMP* (CADR (CAAAR M)))) (CONS (CDAR M) (CDR N))
                    NIL))))
      (COND
       ((OR (NOT (OR (ATOM M) (ATOM (CAR M))))
            (NOT (OR (ATOM (CDR N)) (ATOM (CAR (CDR N))))))
        (RETURN (SIMPEXPT11 U N FLG))))
      (SETQ X (SIMP U))
      (COND
       ((NULL M)
        (RETURN
         (COND ((NULL (CAR X)) (RERROR 'ALG 14 "0**0 formed"))
               (T (CONS 1 1))))))
      (RETURN
       (COND
        ((NULL (CAR X))
         (COND
          ((AND (OR (ATOM M) (ATOM (CAR M))) (MINUSF M))
           (RERROR 'ALG 15 "Zero divisor"))
          (T (CONS NIL 1))))
        ((AND (ATOM M) (EQUAL (CDR N) 1)
              (OR (ATOM (CAR X)) (ATOM (CAR (CAR X)))) (EQUAL (CDR X) 1))
         (COND ((AND (ATOM (CAR X)) (GREATERP M 0)) (*D2Q (EXPT (CAR X) M)))
               (T
                (PROGN
                 (SETQ X (CONS (|:EXPT| (CAR X) M) 1))
                 (COND (*MCD (RESIMP X)) (T X))))))
        ((SETQ Y (DOMAINVALCHK 'EXPT (LIST X N))) Y)
        ((AND (ATOM M) (EQUAL (CDR N) 1))
         (PROGN
          (COND ((NOT (LESSP M 0)) (EXPTSQ X M))
                (*MCD (INVSQ (EXPTSQ X (MINUS M))))
                (T
                 (CONS
                  ((LAMBDA (G561 G562)
                     (COND (*PHYSOP-LOADED (PHYSOP-MULTF G561 G562))
                           (T (POLY-MULTF G561 G562))))
                   (EXPF (CAR X) M) (MKSFPF (CDR X) (MINUS M)))
                  1)))))
        (T (SIMPEXPT11 (COND (FLG U) (T (PREPSQ* (SUBS2* X)))) N T)))))) 
(PUT 'SIMPEXPTFCTR 'NUMBER-OF-ARGS 2) 
(PUT 'SIMPEXPTFCTR 'DEFINED-ON-LINE '555) 
(PUT 'SIMPEXPTFCTR 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'SIMPEXPTFCTR 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE SIMPEXPTFCTR (U N)
    (PROG (X)
      (SETQ X (CONS 1 1))
      (PROG (J)
        (SETQ J U)
       LAB
        (COND ((NULL J) (RETURN NIL)))
        ((LAMBDA (J)
           (SETQ X
                   (MULTSQ
                    (SIMPEXPT1 (PREPF (CAR J)) (MULTSQ (CONS (CDR J) 1) N) NIL)
                    X)))
         (CAR J))
        (SETQ J (CDR J))
        (GO LAB))
      (RETURN X))) 
(PUT 'SIMPEXPT11 'NUMBER-OF-ARGS 3) 
(PUT 'SIMPEXPT11 'DEFINED-ON-LINE '563) 
(PUT 'SIMPEXPT11 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'SIMPEXPT11 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE SIMPEXPT11 (U N FLG)
    (PROG (X)
      (RETURN
       (COND (*PRECISE_COMPLEX (SIMPEXPT2 U N FLG))
             ((OR (OR (ATOM (CDR N)) (ATOM (CAR (CDR N))))
                  (NOT (AND (CAR (SETQ X (QREMF (CAR N) (CDR N)))) (CDR X))))
              (SIMPEXPT2 U N FLG))
             (T
              (MULTSQ (SIMPEXPT1 U (CONS (CAR X) 1) FLG)
                      (SIMPEXPT1 U (CONS (CDR X) (CDR N)) FLG))))))) 
(PUT 'SIMPEXPT2 'NUMBER-OF-ARGS 3) 
(PUT 'SIMPEXPT2 'DEFINED-ON-LINE '574) 
(PUT 'SIMPEXPT2 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'SIMPEXPT2 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE SIMPEXPT2 (U N FLG)
    (PROG (M X Y)
      (COND ((EQUAL U 1) (RETURN (CONS 1 1))))
      (SETQ M (CAR N))
      (COND
       ((PAIRP U)
        (PROGN
         (COND
          ((AND (EQ (CAR U) 'EXPT) (NULL *PRECISE_COMPLEX))
           (PROGN
            (SETQ N (MULTSQ (SETQ M (SIMP (CADDR U))) N))
            (COND
             ((AND *PRECISE (NUMBERP (CAR M)) (EVENP (CAR M)))
              (SETQ U (LIST 'ABS (CADR U))))
             (T (SETQ U (CADR U))))
            (RETURN (SIMPEXPT1 U N FLG))))
          ((AND (EQ (CAR U) 'SQRT) (NOT *KEEPSQRTS))
           (RETURN (SIMPEXPT2 (CADR U) (MULTSQ (CONS 1 2) N) FLG)))
          ((AND (EQ (CAR U) 'TIMES) (NOT *PRECISE) (NOT *MODULAR))
           (PROGN
            (SETQ X (CONS 1 1))
            (PROG (Z)
              (SETQ Z (CDR U))
             LAB
              (COND ((NULL Z) (RETURN NIL)))
              ((LAMBDA (Z) (SETQ X (MULTSQ (SIMPEXPT1 Z N FLG) X))) (CAR Z))
              (SETQ Z (CDR Z))
              (GO LAB))
            (RETURN X)))
          ((AND (EQ (CAR U) 'TIMES) (SETQ Y (SPLIT-SIGN (CDR U))) (CAR Y))
           (PROGN
            (SETQ X (SIMPEXPT1 (RETIMES (APPEND (CADR Y) (CDDR Y))) N FLG))
            (PROG (Z)
              (SETQ Z (CAR Y))
             LAB
              (COND ((NULL Z) (RETURN NIL)))
              ((LAMBDA (Z) (SETQ X (MULTSQ (SIMPEXPT1 Z N FLG) X))) (CAR Z))
              (SETQ Z (CDR Z))
              (GO LAB))
            (RETURN X)))
          ((AND (EQ (CAR U) 'QUOTIENT)
                (OR (NOT *PRECISE)
                    (AND (POSNUMP (CADDR U)) (POSNUMP (PREPSQ N)))))
           (PROGN
            (COND
             ((AND (NOT FLG) *MCD)
              (RETURN (SIMPEXPT1 (PREPSQ (SIMP* U)) N T))))
            (SETQ N (PREPSQ N))
            (RETURN
             (MULTSQ
              ((LAMBDA (U)
                 (COND (*QSUM-SIMPEXPT (QSUM-SIMPEXPT U))
                       (T (BASIC-SIMPEXPT U))))
               (LIST (CADR U) N))
              (INVSQ
               ((LAMBDA (U)
                  (COND (*QSUM-SIMPEXPT (QSUM-SIMPEXPT U))
                        (T (BASIC-SIMPEXPT U))))
                (LIST (CADDR U) N)))))))
          ((AND (EQ (CAR U) 'MINUS) (NOT *PRECISE) (NOT (EQUAL (CADR U) 1)))
           (RETURN
            ((LAMBDA (EXPON)
               (MULTSQ
                ((LAMBDA (U)
                   (COND (*QSUM-SIMPEXPT (QSUM-SIMPEXPT U))
                         (T (BASIC-SIMPEXPT U))))
                 (LIST (MINUS 1) EXPON))
                ((LAMBDA (U)
                   (COND (*QSUM-SIMPEXPT (QSUM-SIMPEXPT U))
                         (T (BASIC-SIMPEXPT U))))
                 (LIST (CADR U) EXPON))))
             (PREPSQ N))))))))
      (COND
       ((NULL FLG)
        (PROGN
         (COND
          ((NULL (AND DMODE* (IDP U) (GET U DMODE*)))
           (SETQ U (PREPSQ (SIMP* U)))))
         (RETURN (SIMPEXPT1 U N T))))
       ((AND (NUMBERP U) (ZEROP U)) (RETURN (CONS NIL 1)))
       ((NOT (NUMBERP M)) (SETQ M (PREPF M))))
      (SETQ N (PREPF (CDR N)))
      (COND
       ((AND (MEMQ M FRLIS*) (EQUAL N 1))
        (RETURN (CONS (LIST (CONS (CONS U M) 1)) 1))))
      (COND
       ((OR *MCD (NOT (NUMBERP M)) (NEQ N 1) (ATOM U) (NEQ (CDR (SIMP* U)) 1))
        (RETURN (SIMPX1 U M N)))
       (T (RETURN (MKSQ U M)))))) 
(PUT 'POSNUMP 'NUMBER-OF-ARGS 1) 
(PUT 'POSNUMP 'DEFINED-ON-LINE '654) 
(PUT 'POSNUMP 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'POSNUMP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE POSNUMP (U)
    (COND ((ATOM U) (OR (AND (NUMBERP U) (GREATERP U 0)) (MEMQ U '(E PI))))
          ((MEMQ (CAR U) '(EXPT PLUS QUOTIENT SQRT TIMES))
           (POSNUMLISTP (CDR U)))
          (T NIL))) 
(PUT 'POSNUMLISTP 'NUMBER-OF-ARGS 1) 
(PUT 'POSNUMLISTP 'DEFINED-ON-LINE '661) 
(PUT 'POSNUMLISTP 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'POSNUMLISTP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE POSNUMLISTP (U) (OR (NULL U) (AND (POSNUMP (CAR U)) (POSNUMLISTP (CDR U))))) 
(PUT 'EXPT 'SIMPFN 'SIMPEXPT) 
(PUT 'SPLIT-SIGN 'NUMBER-OF-ARGS 1) 
(PUT 'SPLIT-SIGN 'DEFINED-ON-LINE '681) 
(PUT 'SPLIT-SIGN 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'SPLIT-SIGN 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SPLIT-SIGN (U)
    (PROG (P N W S)
      (PROG (F)
        (SETQ F U)
       LAB
        (COND ((NULL F) (RETURN NIL)))
        ((LAMBDA (F)
           (COND ((EQUAL 1 (SETQ S (SIGN-OF F))) (SETQ P (CONS F P)))
                 ((EQUAL (MINUS 1) S) (SETQ N (CONS F N)))
                 (T (SETQ W (CONS F W)))))
         (CAR F))
        (SETQ F (CDR F))
        (GO LAB))
      (COND ((AND (NULL P) (NULL N)) (RETURN NIL)))
      (RETURN (CONS P (CONS N W))))) 
(PUT 'CONV2GID 'NUMBER-OF-ARGS 2) 
(PUT 'CONV2GID 'DEFINED-ON-LINE '692) 
(PUT 'CONV2GID 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'CONV2GID 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE CONV2GID (U D)
    (COND ((OR (NULL U) (NUMBERP U) (EQCAR U '|:GI:|)) D)
          ((OR (ATOM U) (ATOM (CAR U)))
           (COND ((EQCAR U '|:CRN:|) (LCM D (LCM (CDADR U) (CDDDR U))))
                 ((EQCAR U '|:RN:|) (LCM D (CDDR U))) (T D)))
          (T (CONV2GID (CDAR U) (CONV2GID (CDR U) D))))) 
(PUT 'CONV2GI2 'NUMBER-OF-ARGS 1) 
(PUT 'CONV2GI2 'DEFINED-ON-LINE '699) 
(PUT 'CONV2GI2 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'CONV2GI2 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE CONV2GI2 (U)
    (COND ((NULL U) U) ((NUMBERP U) (TIMES U DEN*))
          ((EQCAR U '|:GI:|)
           (CONS '|:GI:| (CONS (TIMES DEN* (CADR U)) (TIMES DEN* (CDDR U)))))
          ((EQCAR U '|:CRN:|)
           (PROGN
            (SETQ U (CDR U))
            (SETQ U
                    (CONS '|:GI:|
                          (CONS (TIMES (QUOTIENT DEN* (CDAR U)) (CAAR U))
                                (TIMES (QUOTIENT DEN* (CDDR U)) (CADR U)))))))
          ((EQCAR U '|:RN:|) (TIMES (QUOTIENT DEN* (CDDR U)) (CADR U)))
          ((OR (ATOM U) (ATOM (CAR U)))
           (RERROR 'ALG 16 (LIST "strange domain" U)))
          (T (CONS (CONS (CAAR U) (CONV2GI2 (CDAR U))) (CONV2GI2 (CDR U)))))) 
(PUT 'SIMPX1 'NUMBER-OF-ARGS 3) 
(PUT 'SIMPX1 'DEFINED-ON-LINE '710) 
(PUT 'SIMPX1 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'SIMPX1 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE SIMPX1 (U M N)
    (PROG (FLG X Z)
      (COND
       ((EQCAR U '*MINUS*)
        (COND
         ((OR (AND (EQUAL M 1) (FIXP N) (EQUAL (REMAINDER N 2) 0))
              (AND (EQUAL N 1) (EQCAR M 'QUOTIENT) (EQUAL (CADR M) 1)
                   (FIXP (CADDR M)) (EQUAL (REMAINDER (CADDR M) 2) 0)))
          (RETURN
           (MULTSQ (SIMP (LIST 'EXPT 'I (LIST 'QUOTIENT 1 (QUOTIENT N 2))))
                   ((LAMBDA (U)
                      (COND (*QSUM-SIMPEXPT (QSUM-SIMPEXPT U))
                            (T (BASIC-SIMPEXPT U))))
                    (LIST (CADR U) (LIST 'QUOTIENT M N))))))
         ((AND (EQUAL M 1) (FIXP N))
          (RETURN
           (NEGSQ
            ((LAMBDA (U)
               (COND (*QSUM-SIMPEXPT (QSUM-SIMPEXPT U))
                     (T (BASIC-SIMPEXPT U))))
             (LIST (CADR U) (LIST 'QUOTIENT M N)))))))))
      (COND
       ((OR (AND (NUMBERP M) (NUMBERP N))
            (NULL (OR (SMEMQLP FRLIS* M) (SMEMQLP FRLIS* N))))
        (GO A)))
      (RETURN
       (MKSQ (LIST 'EXPT U (COND ((EQUAL N 1) M) (T (LIST 'QUOTIENT M N)))) 1))
     A
      (COND
       ((NUMBERP M)
        (COND ((MINUSP M) (PROGN (SETQ M (MINUS M)) (GO MNS)))
              ((FIXP M)
               (COND
                ((FIXP N)
                 (PROGN
                  (COND (FLG (SETQ M (MINUS M))))
                  (SETQ Z M)
                  (COND
                   ((AND *MCD (OR (FIXP U) (NULL *NOTSEPARATE)))
                    (PROGN
                     (SETQ Z (DIFFERENCE Z (TIMES N (SETQ M (QUOTIENT M N)))))
                     (COND
                      ((LESSP Z 0)
                       (PROGN
                        (SETQ M (DIFFERENCE M 1))
                        (SETQ Z (PLUS Z N)))))))
                   (T (SETQ M 0)))
                  (SETQ X
                          ((LAMBDA (U)
                             (COND (*QSUM-SIMPEXPT (QSUM-SIMPEXPT U))
                                   (T (BASIC-SIMPEXPT U))))
                           (LIST U M)))
                  (COND ((EQUAL Z 0) (RETURN X))
                        ((AND (EQUAL N 2) *KEEPSQRTS)
                         (PROGN
                          (SETQ X
                                  (MULTSQ X
                                          (APPLY1 (GET 'SQRT 'SIMPFN)
                                                  (LIST U))))
                          (COND
                           ((LESSP Z 0)
                            (PROGN (SETQ X (INVSQ X)) (SETQ Z (MINUS Z)))))
                          (RETURN (EXPTSQ X Z))))
                        (T
                         (RETURN
                          (MULTSQ X (EXPTSQ (SIMPRAD (SIMP* U) N) Z)))))))
                (T (PROGN (SETQ Z M) (SETQ M 1)))))
              (T (SETQ Z 1))))
       ((ATOM M) (SETQ Z 1))
       ((EQ (CAR M) 'MINUS) (PROGN (SETQ M (CADR M)) (GO MNS)))
       ((AND (EQ (CAR M) 'PLUS) *EXPANDEXPT)
        (PROGN
         (SETQ Z (CONS 1 1))
         (PROG (X)
           (SETQ X (CDR M))
          LAB
           (COND ((NULL X) (RETURN NIL)))
           ((LAMBDA (X)
              (SETQ Z
                      (MULTSQ
                       ((LAMBDA (U)
                          (COND (*QSUM-SIMPEXPT (QSUM-SIMPEXPT U))
                                (T (BASIC-SIMPEXPT U))))
                        (LIST U
                              (LIST 'QUOTIENT
                                    (COND (FLG (LIST 'MINUS X)) (T X)) N)))
                       Z)))
            (CAR X))
           (SETQ X (CDR X))
           (GO LAB))
         (RETURN Z)))
       ((AND (EQ (CAR M) 'TIMES) (FIXP (CADR M)))
        (PROGN
         (COND
          ((NUMBERP N)
           (PROGN
            (SETQ Z (GCDN N (CADR M)))
            (SETQ N (QUOTIENT N Z))
            (SETQ Z (QUOTIENT (CADR M) Z))))
          (T (SETQ Z (CADR M))))
         (SETQ M (COND ((CDDDR M) (CONS 'TIMES (CDDR M))) (T (CADDR M))))))
       ((AND (EQ (CAR M) 'QUOTIENT) (EQUAL N 1) *EXPANDEXPT)
        (PROGN (SETQ N (CADDR M)) (SETQ M (CADR M)) (GO A)))
       (T (SETQ Z 1)))
      (COND ((AND (IDP U) (NOT (FLAGP U 'USED*))) (FLAG (LIST U) 'USED*)))
      (COND
       ((AND (EQUAL U '(MINUS 1)) (EQUAL N 1)
             (NULL (CAR (SIMP (LIST 'DIFFERENCE M '(QUOTIENT 1 2))))))
        (PROGN (SETQ U (SIMP 'I)) (RETURN (COND (FLG (NEGSQ U)) (T U))))))
      (SETQ U (LIST 'EXPT U (COND ((EQUAL N 1) M) (T (LIST 'QUOTIENT M N)))))
      (RETURN (MKSQ U (COND (FLG (MINUS Z)) (T Z))))
     MNS
      (COND (*MCD (RETURN (INVSQ (SIMPX1 U M N)))))
      (SETQ FLG (NOT FLG))
      (GO A))) 
(PUT 'EXPF 'NUMBER-OF-ARGS 2) 
(PUT 'EXPF 'DEFINED-ON-LINE '804) 
(PUT 'EXPF 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'EXPF 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE EXPF (U N)
    (COND ((NULL U) NIL) ((EQUAL U 1) U) ((ATOM U) (MKRN 1 (EXPT U (MINUS N))))
          ((OR (ATOM U) (ATOM (CAR U))) (|:EXPT| U N)) ((CDR U) (MKSP* U N))
          ((MEMQ (CDAAR U) FRLIS*)
           (CONS
            (CONS (CONS (CAR (FKERN (LIST 'EXPT (CAAAR U) (CDAAR U)))) N)
                  (EXPF (CDAR U) N))
            NIL))
          (T
           ((LAMBDA (X)
              (COND
               ((AND (GREATERP X 0) (SFP (CAAAR U)))
                ((LAMBDA (G563 G564)
                   (COND (*PHYSOP-LOADED (PHYSOP-MULTF G563 G564))
                         (T (POLY-MULTF G563 G564))))
                 (EXPTF (CAAAR U) X) (EXPF (CDAR U) N)))
               (T (CONS (CONS (CONS (CAAAR U) X) (EXPF (CDAR U) N)) NIL))))
            (TIMES (CDAAR U) N))))) 
(PUT 'SIMPRAD 'NUMBER-OF-ARGS 2) 
(PUT 'SIMPRAD 'DEFINED-ON-LINE '822) 
(PUT 'SIMPRAD 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'SIMPRAD 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE SIMPRAD (U N)
    (COND (*REDUCED (MULTSQ (RADFA (CAR U) N) (INVSQ (RADFA (CDR U) N))))
          (T
           (PROG (IFLAG X Y Z)
             (COND
              (*RATIONALIZE
               (PROGN
                (SETQ Y
                        (LIST
                         (COND
                          ((AND *PRECISE (EVENP N)) (CAR (MKABSF0 (CDR U))))
                          (T (CDR U)))
                         1))
                (SETQ U
                        (CONS
                         ((LAMBDA (G566)
                            (COND (*PHYSOP-LOADED (PHYSOP-MULTF (CAR U) G566))
                                  (T (POLY-MULTF (CAR U) G566))))
                          (EXPTF (CDR U) (DIFFERENCE N 1)))
                         1))))
              (T (SETQ Y (RADF (CDR U) N))))
             (COND
              ((AND (EQUAL N 2) (MINUSF (CAR U)))
               (PROGN (SETQ IFLAG T) (SETQ X (RADF (NEGF (CAR U)) N))))
              (T (SETQ X (RADF (CAR U) N))))
             (SETQ Z
                     (SIMP
                      (LIST 'QUOTIENT (RETIMES (CDR X)) (RETIMES (CDR Y)))))
             (COND
              ((AND (OR (ATOM (CAR Z)) (ATOM (CAR (CAR Z))))
                    (OR (ATOM (CDR Z)) (ATOM (CAR (CDR Z)))))
               (SETQ Z
                       (MULTSQ (MKROOTSQ (PREPF (CAR Z)) N)
                               (INVSQ (MKROOTSQ (PREPF (CDR Z)) N)))))
              (T
               (PROGN
                (COND (IFLAG (PROGN (SETQ IFLAG NIL) (SETQ Z (NEGSQ Z)))))
                (SETQ Z (MKROOTSQ (PREPSQ Z) N)))))
             (SETQ Z
                     (MULTSQ
                      (MULTSQ
                       (COND ((AND *PRECISE (EVENP N)) (CONS (CAR X) 1))
                             (T (CONS (CAR X) 1)))
                       (CONS 1 (CAR Y)))
                      Z))
             (COND (IFLAG (SETQ Z (MULTSQ Z (MKROOTSQ (MINUS 1) 2)))))
             (RETURN Z))))) 
(PUT 'RADFA 'NUMBER-OF-ARGS 2) 
(PUT 'RADFA 'DEFINED-ON-LINE '853) 
(PUT 'RADFA 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'RADFA 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE RADFA (U N)
    (PROG (X Y)
      (SETQ X (FCTRF U))
      (COND ((NUMBERP (CAR X)) (SETQ X (APPEND (ZFACTOR (CAR X)) (CDR X))))
            (T (SETQ X (CONS (CONS (CAR X) 1) (CDR X)))))
      (SETQ Y (CONS 1 1))
      (PROG (J)
        (SETQ J X)
       LAB
        (COND ((NULL J) (RETURN NIL)))
        ((LAMBDA (J) (SETQ Y (MULTSQ Y (RADFB (CAR J) (CDR J) N)))) (CAR J))
        (SETQ J (CDR J))
        (GO LAB))
      (RETURN Y))) 
(PUT 'RADFB 'NUMBER-OF-ARGS 3) 
(PUT 'RADFB 'DEFINED-ON-LINE '863) 
(PUT 'RADFB 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'RADFB 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE RADFB (U M N)
    (PROG (X Y)
      (SETQ X (RADF U N))
      (SETQ Y (CONS (EXPTF (CAR X) M) 1))
      (RETURN (MULTSQ (EXPTSQ (MKROOTLSQ (CDR X) N) M) Y)))) 
(PUT 'MKROOTLSQ 'NUMBER-OF-ARGS 2) 
(PUT 'MKROOTLSQ 'DEFINED-ON-LINE '871) 
(PUT 'MKROOTLSQ 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'MKROOTLSQ 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MKROOTLSQ (U N)
    (COND ((NULL U) (*D2Q 1))
          ((NULL *REDUCED) (MKROOTSQ (REVAL1 (RETIMES U) T) N))
          (T (MKROOTLSQ1 U N)))) 
(PUT 'MKROOTLSQ1 'NUMBER-OF-ARGS 2) 
(PUT 'MKROOTLSQ1 'DEFINED-ON-LINE '882) 
(PUT 'MKROOTLSQ1 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'MKROOTLSQ1 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MKROOTLSQ1 (U N)
    (COND ((NULL U) (*D2Q 1))
          (T (MULTSQ (MKROOTSQ (CAR U) N) (MKROOTLSQ1 (CDR U) N))))) 
(PUT 'MKROOTSQ 'NUMBER-OF-ARGS 2) 
(PUT 'MKROOTSQ 'DEFINED-ON-LINE '886) 
(PUT 'MKROOTSQ 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'MKROOTSQ 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MKROOTSQ (U N)
    (COND ((EQUAL U 1) (*D2Q 1))
          ((AND (EQUAL N 2) (OR (EQUAL U (MINUS 1)) (EQUAL U '(MINUS 1))))
           (SIMP 'I))
          ((AND (EQCAR U 'EXPT) (FIXP (CADDR U)) (NULL *PRECISE_COMPLEX))
           (EXPTSQ (MKROOTSQ (CADR U) N) (CADDR U)))
          (T
           (PROG (X Y)
             (COND
              ((AND (FIXP U) (NOT (MINUSP U))
                    (OR
                     (GREATERP
                      (LENGTH
                       (SETQ X
                               (ZFACTOR1 U
                                         (OR (LESSP U FACTORBOUND*)
                                             *IFACTOR))))
                      1)
                     (GREATERP (CDAR X) 1)))
               (RETURN (MKROOTSQL X N))))
             (SETQ X
                     (COND ((EQUAL N 2) (MKSQRT U))
                           (T (LIST 'EXPT U (LIST 'QUOTIENT 1 N)))))
             (COND ((SETQ Y (OPMTCH X)) (RETURN (SIMP Y)))
                   (T (RETURN (MKSQ X 1)))))))) 
(PUT 'MKROOTSQL 'NUMBER-OF-ARGS 2) 
(PUT 'MKROOTSQL 'DEFINED-ON-LINE '905) 
(PUT 'MKROOTSQL 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'MKROOTSQL 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MKROOTSQL (U N)
    (COND ((NULL U) (*D2Q 1))
          ((GREATERP (CDAR U) 1)
           (MULTSQ (EXPTSQ (MKROOTSQ (CAAR U) N) (CDAR U))
                   (MKROOTSQL (CDR U) N)))
          (T (MULTSQ (MKROOTSQ (CAAR U) N) (MKROOTSQL (CDR U) N))))) 
(PUT 'CHECK-RADF-SIGN 'NUMBER-OF-ARGS 3) 
(PUT 'CHECK-RADF-SIGN 'DEFINED-ON-LINE '917) 
(PUT 'CHECK-RADF-SIGN 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'CHECK-RADF-SIGN 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE CHECK-RADF-SIGN (RAD RESULT N)
    ((LAMBDA (S)
       (COND
        ((OR (AND (EVENP N) (EQUAL S (MINUS 1)))
             (AND (NOT (EVENP N)) (NUMBERP S)
                  ((LAMBDA (S1) (AND (NUMBERP S1) (NEQ S S1)))
                   (REVAL1 (LIST 'SIGN (MK*SQ (CONS RAD 1))) T))))
         (NEGF RESULT))
        (T RESULT)))
     (REVAL1 (LIST 'SIGN (MK*SQ (CONS RESULT 1))) T))) 
(PUT 'RADF 'NUMBER-OF-ARGS 2) 
(PUT 'RADF 'DEFINED-ON-LINE '928) 
(PUT 'RADF 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'RADF 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE RADF (U N)
    (PROG (IPART RPART X Y Z *GCD *MCD)
      (COND ((NULL U) (RETURN (LIST U))))
      (SETQ *GCD (SETQ *MCD T))
      (SETQ IPART 1)
      (SETQ Z 1)
      (PROG ()
       WHILELABEL
        (COND ((NOT (NOT (OR (ATOM U) (ATOM (CAR U))))) (RETURN NIL)))
        (PROGN
         (SETQ Y (COMFAC U))
         (COND
          ((CAR Y)
           (PROGN
            (SETQ X
                    (COND (*PRECISE_COMPLEX (CONS 0 (CDR (CAR Y))))
                          (T (DIVIDE (CDR (CAR Y)) N))))
            (COND
             ((NEQ (CAR X) 0)
              (SETQ IPART
                      ((LAMBDA (G567)
                         (COND (*PHYSOP-LOADED (PHYSOP-MULTF G567 IPART))
                               (T (POLY-MULTF G567 IPART))))
                       (COND
                        ((EVENP (CAR X))
                         (LIST (CONS (CONS (CAAAR U) (CAR X)) 1)))
                        (T
                         (CHECK-RADF-SIGN
                          (LIST (CONS (CONS (CAAAR U) (CDR (CAR Y))) 1))
                          (LIST
                           (CONS
                            (COND
                             ((AND *PRECISE (EVENP N))
                              (GETPOWER (FKERN (LIST 'ABS (SFCHK (CAAAR U))))
                                        (CAR X)))
                             (T (CONS (CAAAR U) (CAR X))))
                            1))
                          N)))))))
            (COND
             ((NEQ (CDR X) 0)
              (SETQ RPART
                      (CONS
                       ((LAMBDA (G569)
                          (COND ((EQUAL (CDR X) 1) G569)
                                (T (LIST 'EXPT G569 (CDR X)))))
                        (SFCHK (CAAAR U)))
                       RPART)))))))
         (SETQ X ((LAMBDA (*EXP) (QUOTF1 U (COMFAC-TO-POLY Y))) T))
         (SETQ U (CDR Y))
         (COND
          ((AND *REDUCED (MINUSF X))
           (PROGN (SETQ X (NEGF X)) (SETQ U (NEGF U)))))
         (COND
          ((FLAGP DMODE* 'FIELD)
           (PROGN
            (SETQ Y (LNC X))
            (COND
             ((NEQ Y 1)
              (PROGN
               (SETQ X ((LAMBDA (*EXP) (QUOTF1 X Y)) T))
               (SETQ Z (MULTD Y Z))))))))
         (COND
          ((NEQ X 1)
           (PROGN
            (SETQ X
                    (RADF1
                     (COND ((OR *PRECISE_COMPLEX *MODULAR) (LIST (CONS X 1)))
                           (T (SQFRF X)))
                     N))
            (SETQ Y (CAR X))
            (COND
             ((NEQ Y 1)
              (PROGN
               (COND
                ((AND *PRECISE (EVENP N))
                 (SETQ Y (LIST (CONS (MKSP (LIST 'ABS (PREPF Y)) 1) 1)))))
               (SETQ IPART
                       (COND (*PHYSOP-LOADED (PHYSOP-MULTF Y IPART))
                             (T (POLY-MULTF Y IPART)))))))
            (SETQ RPART (APPEND RPART (CDR X)))))))
        (GO WHILELABEL))
      (COND
       ((NEQ U 1)
        (PROGN
         (SETQ X (RADD U N))
         (SETQ IPART
                 (COND (*PHYSOP-LOADED (PHYSOP-MULTF (CAR X) IPART))
                       (T (POLY-MULTF (CAR X) IPART))))
         (SETQ RPART (APPEND (CDR X) RPART)))))
      (COND
       ((NEQ Z 1)
        (COND
         ((AND *NUMVAL
               (SETQ Y
                       (DOMAINVALCHK 'EXPT
                                     (LIST (CONS Z 1) (CONS (|:RECIP| N) 1)))))
          (SETQ IPART (MULTD (*Q2F Y) IPART)))
         (T (SETQ RPART (CONS (PREPF Z) RPART))))))
      (RETURN (CONS IPART RPART)))) 
(PUT 'RADF1 'NUMBER-OF-ARGS 2) 
(PUT 'RADF1 'DEFINED-ON-LINE '988) 
(PUT 'RADF1 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'RADF1 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE RADF1 (U N)
    (PROG (IPART RPART X)
      (SETQ IPART 1)
      (PROG (Z)
        (SETQ Z U)
       LAB
        (COND ((NULL Z) (RETURN NIL)))
        ((LAMBDA (Z)
           (PROGN
            (SETQ X (DIVIDE (CDR Z) N))
            (COND
             ((NOT (EQUAL (CAR X) 0))
              (SETQ IPART
                      ((LAMBDA (G571)
                         (COND (*PHYSOP-LOADED (PHYSOP-MULTF G571 IPART))
                               (T (POLY-MULTF G571 IPART))))
                       (CHECK-RADF-SIGN (LIST (CONS Z 1))
                                        (EXPTF (CAR Z) (CAR X)) N)))))
            (COND
             ((NOT (EQUAL (CDR X) 0))
              (SETQ RPART
                      (CONS
                       ((LAMBDA (G573)
                          (COND ((EQUAL (CDR X) 1) G573)
                                (T (LIST 'EXPT G573 (CDR X)))))
                        (PREPSQ* (CONS (CAR Z) 1)))
                       RPART))))))
         (CAR Z))
        (SETQ Z (CDR Z))
        (GO LAB))
      (RETURN (CONS IPART RPART)))) 
(GLOBAL
 '(*LAST-PRIME-SQUARED* *PRIMELIST* *LAST-PRIME-IN-LIST* LARGEST-SMALL-MODULUS)) 
(SETQ *PRIMELIST*
        '(2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89
          97 101 103 107 109 113 127 131 137 139 149 151 157 163 167 173 179
          181 191 193 197 199 211 223 227 229 233 239 241 251 257 263 269 271
          277 281 283 293 307 311 313 317 331 337 347 349 353 359 367 373 379
          383 389 397 401 409 419 421 431 433 439 443 449 457 461 463 467 479
          487 491 499 503 509 521 523 541 547 557 563 569 571 577 587 593 599
          601 607 613 617 619 631 641 643 647 653 659 661 673 677 683 691 701
          709 719 727 733 739 743 751 757 761 769 773 787 797 809 811 821 823
          827 829 839 853 857 859 863 877 881 883 887 907 911 919 929 937 941
          947 953 967 971 977 983 991 997 1009 1013 1019 1021 1031 1033 1039
          1049 1051 1061 1063 1069 1087 1091 1093 1097 1103 1109 1117 1123 1129
          1151 1153 1163 1171 1181 1187 1193 1201 1213 1217 1223 1229 1231 1237
          1249 1259 1277 1279 1283 1289 1291 1297 1301 1303 1307 1319 1321 1327
          1361 1367 1373 1381 1399 1409 1423 1427 1429 1433 1439 1447 1451 1453
          1459 1471 1481 1483 1487 1489 1493 1499 1511 1523 1531 1543 1549 1553
          1559 1567 1571 1579 1583 1597 1601 1607 1609 1613 1619 1621 1627 1637
          1657 1663 1667 1669 1693 1697 1699 1709 1721 1723 1733 1741 1747 1753
          1759 1777 1783 1787 1789 1801 1811 1823 1831 1847 1861 1867 1871 1873
          1877 1879 1889 1901 1907 1913 1931 1933 1949 1951 1973 1979 1987 1993
          1997 1999 2003 2011 2017 2027 2029 2039 2053 2063 2069 2081 2083 2087
          2089 2099 2111 2113 2129 2131 2137 2141 2143 2153 2161 2179 2203 2207
          2213 2221 2237 2239 2243 2251 2267 2269 2273 2281 2287 2293 2297 2309
          2311 2333 2339 2341 2347 2351 2357 2371 2377 2381 2383 2389 2393 2399
          2411 2417 2423 2437 2441 2447 2459 2467 2473 2477 2503 2521 2531 2539
          2543 2549 2551 2557 2579 2591 2593 2609 2617 2621 2633 2647 2657 2659
          2663 2671 2677 2683 2687 2689 2693 2699 2707 2711 2713 2719 2729 2731
          2741 2749 2753 2767 2777 2789 2791 2797 2801 2803 2819 2833 2837 2843
          2851 2857 2861 2879 2887 2897 2903 2909 2917 2927 2939 2953 2957 2963
          2969 2971 2999 3001 3011 3019 3023 3037 3041 3049 3061 3067 3079 3083
          3089 3109 3119 3121 3137 3163 3167 3169 3181 3187 3191 3203 3209 3217
          3221 3229 3251 3253 3257 3259 3271 3299 3301 3307 3313 3319 3323 3329
          3331 3343 3347 3359 3361 3371 3373 3389 3391 3407 3413 3433 3449 3457
          3461 3463 3467 3469 3491 3499 3511 3517 3527 3529 3533 3539 3541 3547
          3557 3559 3571)) 
(SETQ *LAST-PRIME-IN-LIST* (CAR (REVERSE *PRIMELIST*))) 
(SETQ *LAST-PRIME-SQUARED* (EXPT *LAST-PRIME-IN-LIST* 2)) 
(PUT 'NROOTNN 'NUMBER-OF-ARGS 2) 
(PUT 'NROOTNN 'DEFINED-ON-LINE '1045) 
(PUT 'NROOTNN 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'NROOTNN 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE NROOTNN (N X)
    (PROG (PL SIGNN QR W R S P Q)
      (SETQ R 0)
      (SETQ S 0)
      (SETQ P 0)
      (SETQ Q 0)
      (SETQ R 1)
      (SETQ S 1)
      (COND
       ((LESSP N 0)
        (PROGN
         (SETQ N (MINUS N))
         (COND ((EVENP X) (SETQ SIGNN T)) (T (SETQ R (MINUS 1)))))))
      (SETQ PL *PRIMELIST*)
     LOOP
      (SETQ P (CAR PL))
      (SETQ PL (CDR PL))
      (SETQ Q 0)
      (PROG ()
       WHILELABEL
        (COND ((NOT (EQUAL (CDR (SETQ QR (DIVIDE N P))) 0)) (RETURN NIL)))
        (PROGN (SETQ N (CAR QR)) (SETQ Q (IPLUS2 Q 1)))
        (GO WHILELABEL))
      (COND
       ((NOT (ILESSP Q X))
        (PROGN
         (SETQ W (DIVIDE Q X))
         (SETQ R (TIMES R (EXPT P (CAR W))))
         (SETQ Q (CDR W)))))
      (PROG ()
       WHILELABEL
        (COND ((NOT (IGREATERP Q 0)) (RETURN NIL)))
        (PROGN (SETQ S (TIMES S P)) (SETQ Q (IDIFFERENCE Q 1)))
        (GO WHILELABEL))
      (COND ((LESSP (CAR QR) P) (PROGN (SETQ S (TIMES N S)) (GO DONE))))
      (COND (PL (GO LOOP)))
      (COND
       ((GREATERP (EXPT 10 20) N)
        (PROGN
         (SETQ Q (MCFACTOR* N NIL))
         (PROG (J)
           (SETQ J Q)
          LAB
           (COND ((NULL J) (RETURN NIL)))
           ((LAMBDA (J)
              (PROGN
               (SETQ W (DIVIDE (CDR J) X))
               (SETQ R (TIMES (EXPT (CAR J) (CAR W)) R))
               (SETQ S (TIMES (EXPT (CAR J) (CDR W)) S))))
            (CAR J))
           (SETQ J (CDR J))
           (GO LAB))
         NIL))
       ((SETQ Q (IROOT N X)) (SETQ R (TIMES R Q))) (T (SETQ S (TIMES N S))))
     DONE
      (COND (SIGNN (SETQ S (MINUS S))))
      (RETURN (CONS R S)))) 
(PUT 'RADD 'NUMBER-OF-ARGS 2) 
(PUT 'RADD 'DEFINED-ON-LINE '1077) 
(PUT 'RADD 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'RADD 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE RADD (U N)
    (PROG (BOOL IPART X)
      (COND ((NOT (ATOM U)) (RETURN (LIST 1 (PREPF U)))))
      (COND
       ((AND (LESSP U 0) (EVENP N)) (PROGN (SETQ BOOL T) (SETQ U (MINUS U)))))
      (SETQ X (NROOTNN U N))
      (COND
       (BOOL
        (COND
         ((AND *REDUCED (EQUAL N 2))
          (PROGN
           (SETQ IPART (MULTD (CAR X) (LIST (CONS (TO 'I 1) 1))))
           (SETQ X (CDR X))))
         (T (PROGN (SETQ IPART (CAR X)) (SETQ X (MINUS (CDR X)))))))
       (T (PROGN (SETQ IPART (CAR X)) (SETQ X (CDR X)))))
      (RETURN (COND ((EQUAL X 1) (LIST IPART)) (T (LIST IPART X)))))) 
(PUT 'IROOT 'NUMBER-OF-ARGS 2) 
(PUT 'IROOT 'DEFINED-ON-LINE '1108) 
(PUT 'IROOT 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'IROOT 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE IROOT (N R)
    (PROG (TMP)
      (SETQ TMP (IROOTN N R))
      (RETURN (COND ((EQUAL (EXPT TMP R) N) TMP) (T NIL))))) 
(PUT 'IROOT-CEILING 'NUMBER-OF-ARGS 2) 
(PUT 'IROOT-CEILING 'DEFINED-ON-LINE '1116) 
(PUT 'IROOT-CEILING 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'IROOT-CEILING 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE IROOT-CEILING (M N)
    ((LAMBDA (X) (COND ((EQUAL (CDR X) 0) (CAR X)) (T (PLUS (CAR X) 1))))
     (DIVIDE M N))) 
(DE MKEXPT (U N) (COND ((EQUAL N 1) U) (T (LIST 'EXPT U N)))) 
(PUT 'MKEXPT 'NUMBER-OF-ARGS 2) 
(PUT 'MKEXPT 'DEFINED-ON-LINE '1121) 
(PUT 'MKEXPT 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'MKEXPT 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(PUTC 'MKEXPT 'INLINE
      '(LAMBDA (U N) (COND ((EQUAL N 1) U) (T (LIST 'EXPT U N))))) 
(PUT 'NROOTN 'NUMBER-OF-ARGS 2) 
(PUT 'NROOTN 'DEFINED-ON-LINE '1126) 
(PUT 'NROOTN 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'NROOTN 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE NROOTN (N X)
    (PROG (FL R S M SIGNN)
      (SETQ R 1)
      (SETQ S 1)
      (COND
       ((LESSP N 0)
        (PROGN
         (SETQ N (MINUS N))
         (COND ((EVENP X) (SETQ SIGNN T)) (T (SETQ R (MINUS 1)))))))
      (SETQ FL (ZFACTOR N))
      (PROG (J)
        (SETQ J FL)
       LAB
        (COND ((NULL J) (RETURN NIL)))
        ((LAMBDA (J)
           (PROGN
            (SETQ M (DIVIDE (CDR J) X))
            (SETQ R (TIMES (EXPT (CAR J) (CAR M)) R))
            (SETQ S (TIMES (EXPT (CAR J) (CDR M)) S))))
         (CAR J))
        (SETQ J (CDR J))
        (GO LAB))
      (COND (SIGNN (SETQ S (MINUS S))))
      (RETURN (CONS R S)))) 
(SWITCH (LIST 'PRECISE_COMPLEX)) 
(PUT 'PRECISE_COMPLEX 'SIMPFG '((T NIL) (NIL (RMSUBS)))) 
(PUT 'CHECK-ARGNUM 'NUMBER-OF-ARGS 2) 
(PUT 'CHECK-ARGNUM 'DEFINED-ON-LINE '1167) 
(PUT 'CHECK-ARGNUM 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'CHECK-ARGNUM 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE CHECK-ARGNUM (FN U)
    (PROG (N NA)
      (COND
       ((AND (SETQ N (GET FN 'NUMBER-OF-ARGS)) (NEQ (SETQ NA (LENGTH U)) N)
             (NOT (MEMQ NA N)) (NOT (FLAGP FN 'VARIADIC)))
        (RERROR 'SPECFN 117
                (LIST FN "called with" NA "argument(s) instead of"
                      (PROGN (COND ((ATOM N) "") (T "one from"))) N)))))) 
(PUT 'REPEATS 'NUMBER-OF-ARGS 1) 
(PUT 'REPEATS 'DEFINED-ON-LINE '1176) 
(PUT 'REPEATS 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'REPEATS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REPEATS (X)
    (COND ((NULL X) NIL)
          ((MEMBER (CAR X) (CDR X)) (CONS (CAR X) (REPEATS (CDR X))))
          (T (REPEATS (CDR X))))) 
(PUT 'SIMPIDEN 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPIDEN 'DEFINED-ON-LINE '1181) 
(PUT 'SIMPIDEN 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'SIMPIDEN 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPIDEN (U)
    (PROG (BOOL FN X Y Z)
      (SETQ FN (CAR U))
      (SETQ U (CDR U))
      (COND
       ((AND (OR (GET FN '|:RN:|) (GET FN '|:RD:|)) (SETQ X (VALUECHK FN U)))
        (RETURN X)))
      (COND ((FLAGP FN 'SPECFN) (CHECK-ARGNUM FN U)))
      (COND
       ((AND U (EQCAR (CAR U) 'LIST) (NULL (CDR U)))
        (RETURN (MKSQ (LIST FN (REVAL1 (CAR U) NIL)) 1))))
      (SETQ X
              (PROG (J FORALL-RESULT FORALL-ENDPTR)
                (SETQ J U)
                (COND ((NULL J) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS ((LAMBDA (J) (REVAL1 J NIL)) (CAR J))
                                      NIL)))
               LOOPLABEL
                (SETQ J (CDR J))
                (COND ((NULL J) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        (CONS ((LAMBDA (J) (REVAL1 J NIL)) (CAR J)) NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (SETQ U
              (PROG (J FORALL-RESULT FORALL-ENDPTR)
                (SETQ J X)
                (COND ((NULL J) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS
                                 ((LAMBDA (J)
                                    (COND ((EQCAR J '*SQ) (PREPSQXX (CADR J)))
                                          ((NUMBERP J) J)
                                          (T (PROGN (SETQ BOOL T) J))))
                                  (CAR J))
                                 NIL)))
               LOOPLABEL
                (SETQ J (CDR J))
                (COND ((NULL J) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        (CONS
                         ((LAMBDA (J)
                            (COND ((EQCAR J '*SQ) (PREPSQXX (CADR J)))
                                  ((NUMBERP J) J) (T (PROGN (SETQ BOOL T) J))))
                          (CAR J))
                         NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (COND
       ((AND U (EQUAL (CAR U) 0) (FLAGP FN 'ODD) (NOT (FLAGP FN 'NONZERO)))
        (RETURN (CONS NIL 1))))
      (SETQ U (CONS FN U))
      (COND ((FLAGP FN 'NONCOM) (SETQ NCMP* T)))
      (COND ((NULL SUBFG*) (GO C))
            ((AND (FLAGP FN 'LINEAR) (NEQ (SETQ Z (FORMLNR U)) U))
             (RETURN (SIMP Z)))
            ((SETQ Z (OPMTCH U)) (RETURN (SIMP Z))))
     C
      (COND ((FLAGP FN 'SYMMETRIC) (SETQ U (CONS FN (ORDN (CDR U)))))
            ((FLAGP FN 'ANTISYMMETRIC)
             (PROGN
              (COND ((REPEATS (CDR U)) (RETURN (CONS NIL 1)))
                    ((NOT (PERMP (SETQ Z (ORDN (CDR U))) (CDR U))) (SETQ Y T)))
              (SETQ FN (CONS (CAR U) Z))
              (COND
               ((AND (NEQ Z (CDR U)) (SETQ Z (OPMTCH FN)))
                (RETURN (COND (Y (NEGSQ (SIMP Z))) (T (SIMP Z))))))
              (SETQ U FN))))
      (COND
       ((AND (OR (FLAGP FN 'EVEN) (FLAGP FN 'ODD)) X
             (MINUSF (CAR (SETQ X (SIMP (CAR X))))))
        (PROGN
         (COND ((NOT (FLAGP FN 'EVEN)) (SETQ Y (NOT Y))))
         (SETQ U (CONS FN (CONS (PREPSQXX (NEGSQ X)) (CDDR U))))
         (COND
          ((SETQ Z (OPMTCH U))
           (RETURN (COND (Y (NEGSQ (SIMP Z))) (T (SIMP Z)))))))))
      (SETQ U (MKSQ U 1))
      (RETURN (COND (Y (NEGSQ U)) (T U))))) 
(SWITCH (LIST 'ROUNDED)) 
(PUT 'NOT_IMAG_NUM 'NUMBER-OF-ARGS 1) 
(PUT 'NOT_IMAG_NUM 'DEFINED-ON-LINE '1241) 
(PUT 'NOT_IMAG_NUM 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'NOT_IMAG_NUM 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE NOT_IMAG_NUM (A)
    (PROG (*KEEPSQRTS *MSG *NUMVAL DMODE *INSIDE-INT*)
      (SETQ DMODE DMODE*)
      (SETQ *NUMVAL T)
      (ON (LIST 'ROUNDED 'COMPLEX))
      (SETQ A (RESIMP (SIMP A)))
      (SETQ A
              (AND (NUMBERP (CDR A)) (OR (ATOM (CAR A)) (ATOM (CAR (CAR A))))
                   (CAR (REPARTSQ A))))
      (OFF (LIST 'ROUNDED 'COMPLEX))
      (COND (DMODE (ONOFF (GET DMODE 'DNAME) T)))
      (RETURN A))) 
(FLAGOP (LIST 'EVEN 'ODD 'NONZERO)) 
(PUT 'DOMAINVALCHK 'NUMBER-OF-ARGS 2) 
(PUT 'DOMAINVALCHK 'DEFINED-ON-LINE '1260) 
(PUT 'DOMAINVALCHK 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'DOMAINVALCHK 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE DOMAINVALCHK (FN U)
    (PROG (X)
      (COND ((SETQ X (GET DMODE* 'DOMAINVALCHK)) (RETURN (APPLY2 X FN U))))
      (SETQ U (REVERSE U))
     A
      (COND ((NULL U) (RETURN (VALUECHK FN X)))
            ((NEQ (CDR (CAR U)) 1) (RETURN NIL)))
      (SETQ X (CONS (MK*SQ (CAR U)) X))
      (SETQ U (CDR U))
      (GO A))) 
(PUT 'VALUECHK 'NUMBER-OF-ARGS 2) 
(PUT 'VALUECHK 'DEFINED-ON-LINE '1272) 
(PUT 'VALUECHK 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'VALUECHK 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE VALUECHK (FN U)
    (PROG (N)
      (COND
       ((OR
         (AND (SETQ N (GET FN 'NUMBER-OF-ARGS)) (NEQ (LENGTH U) N)
              (NOT (FLAGP FN 'VARIADIC)))
         (AND (NOT N) U (CDR U) (OR (GET FN '|:RD:|) (GET FN '|:RN:|))))
        (PROGN
         (COND
          (*STRICT_ARGCOUNT
           (RERROR 'ALG 17 (LIST "Wrong number of arguments to" FN)))
          (T (LPRIM (LIST "Wrong number of arguments to" FN)))))))
      (SETQ U (OPFCHK! (CONS FN U)))
      (COND
       (U
        (RETURN
         (ZNUMRNIL
          (CONS (COND ((EQCAR U 'LIST) (LIST (CONS (CONS U 1) 1))) (T U))
                1))))))) 
(PUT 'ZNUMRNIL 'NUMBER-OF-ARGS 1) 
(PUT 'ZNUMRNIL 'DEFINED-ON-LINE '1290) 
(PUT 'ZNUMRNIL 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'ZNUMRNIL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE ZNUMRNIL (U) (COND ((ZNUMR U) (CONS NIL 1)) (T U))) 
(PUT 'ZNUMR 'NUMBER-OF-ARGS 1) 
(PUT 'ZNUMR 'DEFINED-ON-LINE '1292) 
(PUT 'ZNUMR 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'ZNUMR 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE ZNUMR (U)
    (OR (NULL (SETQ U (CAR U))) (AND (NUMBERP U) (ZEROP U))
        (AND (NOT (ATOM U)) (OR (ATOM U) (ATOM (CAR U)))
             ((LAMBDA (Y) (AND Y (APPLY1 Y U))) (GET (CAR U) 'ZEROP))))) 
(PUT 'OPFCHK! 'NUMBER-OF-ARGS 1) 
(PUT 'OPFCHK! 'DEFINED-ON-LINE '1297) 
(PUT 'OPFCHK! 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'OPFCHK! 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE OPFCHK! (U)
    (PROG (FN FN1 SF SC INT CE)
      (SETQ FN1 (SETQ FN (CAR U)))
      (SETQ U (CDR U))
      (SETQ FN
              (COND ((FLAGP FN 'INTEGER) (PROGN (SETQ INT T) (GET FN '|:RN:|)))
                    ((AND *NUMVAL (MEMQ DMODE* '(|:RD:| |:CR:|)))
                     (GET FN '|:RD:|))))
      (COND ((NOT FN) (RETURN NIL)))
      (SETQ SF
              (COND (INT 'SIMPRN) ((SETQ SF (GET FN 'SIMPARG)) SF)
                    (T 'SIMPRD)))
      (COND ((OR INT (NOT *COMPLEX)) (GO S)))
      (COND
       ((EQCAR (CAR U) 'LIST)
        (COND
         ((AND (SETQ SC (SIMPCR (REVLIS (CDAR U)))) (EQCAR SC NIL)) (GO ERR))
         (T (GO S)))))
      (COND ((NOT (SETQ U (SIMPCR (REVLIS U)))) (RETURN NIL))
            ((OR (EQCAR U NIL) (AND (EQ FN1 'EXPT) (|RD:MINUSP| (CAAR U))))
             (SETQ U (CDR U)))
            (T (PROGN (SETQ CE (CDR U)) (SETQ U (CAR U)) (GO S))))
     EVC
      (COND ((SETQ FN (GET FN1 '|:CR:|)) (GO A)))
     ERR
      (RERROR 'ALG 18 (LIST FN1 "is not defined as complex function"))
     S
      (COND ((NOT (SETQ U (APPLY1 SF (REVLIS U)))) (RETURN NIL)))
     A
      (SETQ U (ERRORSET2 (LIST 'APPLY (MKQUOTE FN) (MKQUOTE U))))
      (COND
       ((OR (ERRORP U)
            (AND (EQCAR (SETQ U (CAR U)) '|:RD:|) (COMPLEXP (CDR U))))
        (COND (CE (PROGN (SETQ U CE) (SETQ CE NIL) (GO EVC)))
              (T (RETURN NIL))))
       (T (RETURN (COND (INT (INTCONV U)) (T U))))))) 
(PUT 'INTCONV 'NUMBER-OF-ARGS 1) 
(PUT 'INTCONV 'DEFINED-ON-LINE '1337) 
(PUT 'INTCONV 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'INTCONV 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE INTCONV (X)
    (COND ((OR (NULL DMODE*) (MEMQ DMODE* '(|:RD:| |:CR:|))) X)
          (T (APPLY1 (GET DMODE* 'I2D) X)))) 
(PUT 'SIMPCR 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPCR 'DEFINED-ON-LINE '1341) 
(PUT 'SIMPCR 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'SIMPCR 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPCR (X)
    (COND ((ATOM X) NIL)
          (T
           (PROGN
            ((LAMBDA (Z Y)
               (PROGN
                (COND ((NOT (ERRORP Y)) (SETQ Z (CAR Y))))
                ((LAMBDA (DMODE*) (SETQ Y (SIMPLIST X))) '|:CR:|)
                (COND (Y (CONS Z Y)) (T Z))))
             NIL (ERRORSET2 (LIST 'SIMPRD (MKQUOTE X)))))))) 
(PUT 'SIMPRD 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPRD 'DEFINED-ON-LINE '1349) 
(PUT 'SIMPRD 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'SIMPRD 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPRD (X)
    (COND ((ATOM X) NIL) (T (PROGN ((LAMBDA (DMODE*) (SIMPLIST X)) '|:RD:|))))) 
(PUT 'SIMPLIST 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPLIST 'DEFINED-ON-LINE '1353) 
(PUT 'SIMPLIST 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'SIMPLIST 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPLIST (X)
    (PROG (FL C)
      (SETQ C (GET DMODE* 'I2D))
      (SETQ X
              (PROG (A FORALL-RESULT FORALL-ENDPTR)
                (SETQ A X)
                (COND ((NULL A) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS
                                 ((LAMBDA (A)
                                    ((LAMBDA (B)
                                       (AND (NOT FL)
                                            (PROGN
                                             (COND
                                              ((NULL (SETQ A (MCONV (CAR B))))
                                               (SETQ A 0)))
                                             (COND
                                              ((NUMBERP A)
                                               (SETQ A (APPLY1 C A)))
                                              ((NOT
                                                (AND
                                                 (OR (ATOM A) (ATOM (CAR A)))
                                                 (EQCAR A DMODE*)))
                                               (SETQ FL T)))
                                             (COND
                                              ((AND (NOT FL)
                                                    (OR
                                                     (AND
                                                      (NUMBERP
                                                       (SETQ B
                                                               (MCONV
                                                                (CDR B))))
                                                      (SETQ B (APPLY1 C B)))
                                                     (AND
                                                      (OR (ATOM B)
                                                          (ATOM (CAR B)))
                                                      (EQCAR B DMODE*))))
                                               (APPLY2 (GET DMODE* 'QUOTIENT) A
                                                       B))
                                              (T (SETQ FL T))))))
                                     (SIMP* A)))
                                  (CAR A))
                                 NIL)))
               LOOPLABEL
                (SETQ A (CDR A))
                (COND ((NULL A) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        (CONS
                         ((LAMBDA (A)
                            ((LAMBDA (B)
                               (AND (NOT FL)
                                    (PROGN
                                     (COND
                                      ((NULL (SETQ A (MCONV (CAR B))))
                                       (SETQ A 0)))
                                     (COND ((NUMBERP A) (SETQ A (APPLY1 C A)))
                                           ((NOT
                                             (AND (OR (ATOM A) (ATOM (CAR A)))
                                                  (EQCAR A DMODE*)))
                                            (SETQ FL T)))
                                     (COND
                                      ((AND (NOT FL)
                                            (OR
                                             (AND
                                              (NUMBERP
                                               (SETQ B (MCONV (CDR B))))
                                              (SETQ B (APPLY1 C B)))
                                             (AND (OR (ATOM B) (ATOM (CAR B)))
                                                  (EQCAR B DMODE*))))
                                       (APPLY2 (GET DMODE* 'QUOTIENT) A B))
                                      (T (SETQ FL T))))))
                             (SIMP* A)))
                          (CAR A))
                         NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (COND ((NOT FL) (RETURN X))))) 
(PUT 'MCONV 'NUMBER-OF-ARGS 1) 
(PUT 'MCONV 'DEFINED-ON-LINE '1367) 
(PUT 'MCONV 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'MCONV 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MCONV (V) (PROGN (DMCONV0 DMODE*) (MCONV1 V))) 
(PUT 'DMCONV0 'NUMBER-OF-ARGS 1) 
(PUT 'DMCONV0 'DEFINED-ON-LINE '1369) 
(PUT 'DMCONV0 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'DMCONV0 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE DMCONV0 (DMD)
    (SETQ DMD* (COND ((NULL DMD) '|:RN:|) ((EQ DMD '|:GI:|) '|:CRN:|) (T DMD)))) 
(PUT 'DMCONV1 'NUMBER-OF-ARGS 1) 
(PUT 'DMCONV1 'DEFINED-ON-LINE '1373) 
(PUT 'DMCONV1 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'DMCONV1 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE DMCONV1 (V)
    (COND ((OR (NULL V) (EQCAR V DMD*)) V)
          ((ATOM V)
           (COND ((FLAGP DMD* 'CONVERT) (APPLY1 (GET DMD* 'I2D) V)) (T V)))
          ((OR (ATOM V) (ATOM (CAR V))) (APPLY1 (GET (CAR V) DMD*) V))
          (T (CONS (CONS (CAAR V) (DMCONV1 (CDAR V))) (DMCONV1 (CDR V)))))) 
(PUT 'MCONV1 'NUMBER-OF-ARGS 1) 
(PUT 'MCONV1 'DEFINED-ON-LINE '1380) 
(PUT 'MCONV1 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'MCONV1 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MCONV1 (V)
    (COND ((OR (ATOM V) (ATOM (CAR V))) (DRNCONV V))
          (T (CONS (CONS (CAAR V) (MCONV1 (CDAR V))) (MCONV1 (CDR V)))))) 
(PUT 'DRNCONV 'NUMBER-OF-ARGS 1) 
(PUT 'DRNCONV 'DEFINED-ON-LINE '1384) 
(PUT 'DRNCONV 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'DRNCONV 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE DRNCONV (V)
    (COND ((OR (NULL V) (NUMBERP V) (EQCAR V DMD*)) V)
          (T
           (PROGN
            ((LAMBDA (Y) (COND ((AND Y (ATOM Y)) (APPLY1 Y V)) (T V)))
             (GET (CAR V) DMD*)))))) 
(PUT 'SIMPABS 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPABS 'DEFINED-ON-LINE '1391) 
(PUT 'SIMPABS 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'SIMPABS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPABS (U)
    (COND ((OR (NULL U) (CDR U)) (MKSQ (CONS 'ABS (REVLIS U)) 1))
          (T
           (PROG (X)
             (SETQ U (CAR U))
             (COND ((NUMBERP U) (RETURN (CONS (ABS U) 1)))
                   ((SETQ X (SIGN-ABS U)) (RETURN X)))
             (SETQ U (SIMP* U))
             (RETURN
              (COND ((NULL (CAR U)) (CONS NIL 1))
                    (T
                     (MULTSQ (SIMPABS1 (CAR U))
                             (INVSQ (SIMPABS1 (CDR U))))))))))) 
(PUT 'SIMPABS1 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPABS1 'DEFINED-ON-LINE '1402) 
(PUT 'SIMPABS1 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'SIMPABS1 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPABS1 (U)
    (PROG (X Y W)
      (SETQ X (PREPF U))
      (SETQ U (CONS U 1))
      (COND ((EQCAR X 'MINUS) (SETQ X (CADR X))))
      (COND
       ((EQCAR X 'SQRT)
        (RETURN
         (CONS
          (LIST
           (CONS
            (MKSP
             (COND
              ((EQCAR (SETQ Y (REVAL1 (CONS 'ABS (CDR X)) T)) 'ABS)
               (LIST 'ABS X))
              (T (LIST 'SQRT Y)))
             1)
            1))
          1))))
      (COND
       ((EQCAR X 'TIMES)
        (PROG (ABSLIST NOABS)
          (PROG (FAC)
            (SETQ FAC (CDR X))
           LAB
            (COND ((NULL FAC) (RETURN NIL)))
            ((LAMBDA (FAC)
               (COND
                ((AND (EQCAR FAC 'SQRT)
                      (NOT
                       (EQCAR (SETQ Y (REVAL1 (CONS 'ABS (CDR FAC)) T)) 'ABS)))
                 (SETQ NOABS (CONS (LIST 'SQRT Y) NOABS)))
                (T (SETQ ABSLIST (CONS FAC ABSLIST)))))
             (CAR FAC))
            (SETQ FAC (CDR FAC))
            (GO LAB))
          (SETQ ABSLIST (REVERSIP ABSLIST))
          (COND
           (NOABS
            (SETQ U
                    (MULTSQ U
                            (INVSQ
                             (SETQ NOABS
                                     (SIMP*
                                      (CONS 'TIMES (REVERSIP NOABS)))))))))
          (COND
           ((SETQ Y (SPLIT-SIGN ABSLIST))
            (PROGN
             (SETQ W (SIMP* (RETIMES (CAR Y))))
             (SETQ U (MULTSQ U (INVSQ W)))
             (COND
              ((CADR Y)
               (PROGN
                (SETQ Y (SIMP* (RETIMES (CADR Y))))
                (SETQ U (MULTSQ U (INVSQ Y)))
                (SETQ W (MULTSQ (NEGSQ Y) W)))))
             (COND (NOABS (SETQ W (MULTSQ NOABS W))))))
           (T (SETQ W NOABS))))))
      (COND
       ((OR (NEQ (CAR U) 1) (NEQ (CDR U) 1))
        (SETQ U (MULTSQ (MKABSF1 (ABSF (CAR U))) (INVSQ (MKABSF1 (CDR U)))))))
      (COND (W (SETQ U (MULTSQ W U))))
      (RETURN U))) 
(PUT 'SIGN-ABS 'NUMBER-OF-ARGS 1) 
(PUT 'SIGN-ABS 'DEFINED-ON-LINE '1464) 
(PUT 'SIGN-ABS 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'SIGN-ABS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIGN-ABS (U)
    ((LAMBDA (N)
       (PROGN
        (COND ((NOT (NUMBERP N)) NIL)
              (T
               (SIMP
                (COND ((LESSP N 0) (LIST 'MINUS U)) ((EQUAL N 0) 0) (T U)))))))
     (SIGN-OF U))) 
(PUT 'CONSTANT_EXPRP 'NUMBER-OF-ARGS 1) 
(PUT 'CONSTANT_EXPRP 'DEFINED-ON-LINE '1471) 
(PUT 'CONSTANT_EXPRP 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'CONSTANT_EXPRP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE CONSTANT_EXPRP (U)
    (COND
     ((ATOM U)
      (OR (NUMBERP U) (FLAGP U 'CONSTANT) (AND (EQ U 'I) (GET 'I 'IDVALFN))))
     (T
      (AND
       (OR (FLAGP (CAR U) 'REALVALUED) (FLAGP (CAR U) 'ALWAYSREALVALUED)
           (MEMQ (CAR U) '(PLUS MINUS DIFFERENCE TIMES QUOTIENT))
           (GET (CAR U) '|:RD:|) (AND *COMPLEX (GET (CAR U) '|:CR:|)))
       (NOT (ATOM (CDR U))) (CONSTANT_EXPR_LISTP (CDR U)))))) 
(PUT 'CONSTANT_EXPR_LISTP 'NUMBER-OF-ARGS 1) 
(PUT 'CONSTANT_EXPR_LISTP 'DEFINED-ON-LINE '1483) 
(PUT 'CONSTANT_EXPR_LISTP 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'CONSTANT_EXPR_LISTP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE CONSTANT_EXPR_LISTP (U)
    (COND
     ((ATOM U)
      (OR (NULL U) (NUMBERP U) (FLAGP U 'CONSTANT)
          (AND (EQ U 'I) (GET 'I 'IDVALFN))))
     (T (AND (CONSTANT_EXPRP (CAR U)) (CONSTANT_EXPR_LISTP (CDR U)))))) 
(PUT 'MKABSF0 'NUMBER-OF-ARGS 1) 
(PUT 'MKABSF0 'DEFINED-ON-LINE '1491) 
(PUT 'MKABSF0 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'MKABSF0 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MKABSF0 (U) (SIMP (LIST 'ABS (MK*SQ (CONS U 1))))) 
(PUT 'MKABSF1 'NUMBER-OF-ARGS 1) 
(PUT 'MKABSF1 'DEFINED-ON-LINE '1493) 
(PUT 'MKABSF1 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'MKABSF1 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MKABSF1 (U)
    (COND ((OR (ATOM U) (ATOM (CAR U))) (MKABSFD U))
          (T
           (PROG (X Y V)
             (SETQ X (COMFAC-TO-POLY (COMFAC U)))
             (SETQ U (QUOTF1 U X))
             (SETQ Y (SPLIT-COMFAC-PART X))
             (SETQ X (CDR Y))
             (SETQ Y (CAR Y))
             (COND
              ((POSITIVE-SFP U)
               (PROGN
                (SETQ Y
                        (COND (*PHYSOP-LOADED (PHYSOP-MULTF U Y))
                              (T (POLY-MULTF U Y))))
                (SETQ U 1))))
             (SETQ U
                     (COND (*PHYSOP-LOADED (PHYSOP-MULTF U X))
                           (T (POLY-MULTF U X))))
             (SETQ V (LNC Y))
             (SETQ Y (QUOTF1 Y V))
             (SETQ V (MULTSQ (MKABSFD V) (CONS Y 1)))
             (RETURN
              (COND ((EQUAL U 1) V)
                    (T (MULTSQ V (SIMPIDEN (LIST 'ABS (PREPF (ABSF U)))))))))))) 
(PUT 'MKABSFD 'NUMBER-OF-ARGS 1) 
(PUT 'MKABSFD 'DEFINED-ON-LINE '1510) 
(PUT 'MKABSFD 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'MKABSFD 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MKABSFD (U)
    (COND
     ((OR (NULL (GET 'I 'IDVALFN)) (AND (PAIRP U) (GET (CAR U) 'ABS)))
      (CONS (|:ABS| U) 1))
     (T
      ((LAMBDA (US)
         ((LAMBDA (NRM)
            ((LAMBDA (U)
               (COND (*QSUM-SIMPEXPT (QSUM-SIMPEXPT U))
                     (T (BASIC-SIMPEXPT U))))
             (LIST (PREPSQ NRM) '(QUOTIENT 1 2))))
          (ADDSQ (MULTSQ (CAR US) (CAR US)) (MULTSQ (CDR US) (CDR US)))))
       (SPLITCOMPLEX U))))) 
(PUT 'POSITIVE-SFP 'NUMBER-OF-ARGS 1) 
(PUT 'POSITIVE-SFP 'DEFINED-ON-LINE '1517) 
(PUT 'POSITIVE-SFP 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'POSITIVE-SFP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE POSITIVE-SFP (U)
    (COND
     ((OR (ATOM U) (ATOM (CAR U)))
      (COND
       ((GET 'I 'IDVALFN)
        (AND (|:ZEROP| (IMPARTF U)) (NULL (|:MINUSP| (REPARTF U)))))
       (T (NULL (|:MINUSP| U)))))
     (T
      (AND (POSITIVE-POWP (CAAR U)) (POSITIVE-SFP (CDAR U))
           (POSITIVE-SFP (CDR U)))))) 
(PUT 'POSITIVE-POWP 'NUMBER-OF-ARGS 1) 
(PUT 'POSITIVE-POWP 'DEFINED-ON-LINE '1525) 
(PUT 'POSITIVE-POWP 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'POSITIVE-POWP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE POSITIVE-POWP (U) (AND (NOT (ATOM (CAR U))) (MEMQ (CAAR U) '(ABS NORM)))) 
(PUT 'SPLIT-COMFAC-PART 'NUMBER-OF-ARGS 1) 
(PUT 'SPLIT-COMFAC-PART 'DEFINED-ON-LINE '1534) 
(PUT 'SPLIT-COMFAC-PART 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'SPLIT-COMFAC-PART 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SPLIT-COMFAC-PART (U) (SPLIT-COMFAC U 1 1)) 
(PUT 'SPLIT-COMFAC 'NUMBER-OF-ARGS 3) 
(PUT 'SPLIT-COMFAC 'DEFINED-ON-LINE '1537) 
(PUT 'SPLIT-COMFAC 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'SPLIT-COMFAC 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE SPLIT-COMFAC (U V W)
    (COND ((OR (ATOM U) (ATOM (CAR U))) (CONS (MULTD U V) W))
          ((CDR U)
           (COND
            ((POSITIVE-SFP U)
             (CONS
              (COND (*PHYSOP-LOADED (PHYSOP-MULTF U V)) (T (POLY-MULTF U V)))
              W))
            (T
             (CONS V
                   (COND (*PHYSOP-LOADED (PHYSOP-MULTF U W))
                         (T (POLY-MULTF U W)))))))
          ((EQ (CAAAR U) 'I) (SPLIT-COMFAC (CDAR U) V W))
          ((POSITIVE-POWP (CAAR U))
           (SPLIT-COMFAC (CDAR U)
                         ((LAMBDA (G188)
                            (COND (*PHYSOP-LOADED (PHYSOP-MULTF G188 V))
                                  (T (POLY-MULTF G188 V))))
                          (LIST (CONS (CAAR U) 1)))
                         W))
          (T
           (SPLIT-COMFAC (CDAR U) V
                         ((LAMBDA (G188)
                            (COND (*PHYSOP-LOADED (PHYSOP-MULTF G188 W))
                                  (T (POLY-MULTF G188 W))))
                          (LIST (CONS (CAAR U) 1))))))) 
(PUT 'ABS 'SIMPFN 'SIMPABS) 
(PUT 'SIMPDIFF 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPDIFF 'DEFINED-ON-LINE '1549) 
(PUT 'SIMPDIFF 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'SIMPDIFF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPDIFF (U)
    (PROGN (|CKPRECI#| U) (ADDSQ (SIMP (CAR U)) (SIMPMINUS (CDR U))))) 
(PUT 'DIFFERENCE 'SIMPFN 'SIMPDIFF) 
(PUT 'SIMPMINUS 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPMINUS 'DEFINED-ON-LINE '1554) 
(PUT 'SIMPMINUS 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'SIMPMINUS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPMINUS (U) (NEGSQ (SIMP (CARX U 'MINUS)))) 
(PUT 'MINUS 'SIMPFN 'SIMPMINUS) 
(PUT 'SIMPPLUS 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPPLUS 'DEFINED-ON-LINE '1559) 
(PUT 'SIMPPLUS 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'SIMPPLUS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPPLUS (U)
    (PROG (Z)
      (COND ((EQUAL (LENGTH U) 2) (|CKPRECI#| U)))
      (SETQ Z (CONS NIL 1))
     A
      (COND ((NULL U) (RETURN Z)))
      (SETQ Z (ADDSQ (SIMP (CAR U)) Z))
      (SETQ U (CDR U))
      (GO A))) 
(PUT 'PLUS 'SIMPFN 'SIMPPLUS) 
(PUT '|CKPRECI#| 'NUMBER-OF-ARGS 1) 
(PUT '|CKPRECI#| 'DEFINED-ON-LINE '1571) 
(PUT '|CKPRECI#| 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT '|CKPRECI#| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |CKPRECI#| (U)
    ((LAMBDA (A B)
       (AND *COMPLEX
            (COND ((AND A (NOT B)) (|CKPREC2#| (CDAR U) (CADR U)))
                  ((AND B (NOT A)) (|CKPREC2#| (CDADR U) (CAR U))))))
     (TIMESIP (CAR U)) (TIMESIP (CADR U)))) 
(PUT 'TIMESIP 'NUMBER-OF-ARGS 1) 
(PUT 'TIMESIP 'DEFINED-ON-LINE '1578) 
(PUT 'TIMESIP 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'TIMESIP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE TIMESIP (X) (AND (EQCAR X 'TIMES) (MEMQ 'I (CDR X)))) 
(PUT '|CKPREC2#| 'NUMBER-OF-ARGS 2) 
(PUT '|CKPREC2#| 'DEFINED-ON-LINE '1580) 
(PUT '|CKPREC2#| 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT '|CKPREC2#| 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE |CKPREC2#| (IM RL)
    (PROGN
     (SETQ IM (COND ((EQ (CAR IM) 'I) (CADR IM)) (T (CAR IM))))
     (COND ((EQCAR IM 'MINUS) (SETQ IM (CADR IM))))
     (COND ((EQCAR RL 'MINUS) (SETQ RL (CADR RL))))
     (COND
      ((AND (OR (ATOM IM) (ATOM (CAR IM))) (OR (ATOM RL) (ATOM (CAR RL)))
            (NOT (AND (ATOM IM) (ATOM RL))))
       (|CKPREC3#| (?A2BF IM) (?A2BF RL)))))) 
(REMFLAG '(?A2BF) 'LOSE) 
(PUT '?A2BF 'NUMBER-OF-ARGS 1) 
(PUT '?A2BF 'DEFINED-ON-LINE '1597) 
(PUT '?A2BF 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT '?A2BF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE ?A2BF (A)
    (COND ((ATOM A) (COND ((NUMBERP A) (CONS '|:RD:| (CONS A 0))) (T NIL)))
          ((EQCAR A '|:DN:|) A))) 
(PUT '|CKPREC3#| 'NUMBER-OF-ARGS 2) 
(PUT '|CKPREC3#| 'DEFINED-ON-LINE '1602) 
(PUT '|CKPREC3#| 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT '|CKPREC3#| 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE |CKPREC3#| (X Y)
    (COND
     ((AND X Y)
      (PRECMSG
       (MAX (PLUS (LENGTH (EXPLODE (ABS (CADR X)))) (CDDR X))
            (PLUS (LENGTH (EXPLODE (ABS (CADR Y)))) (CDDR Y))))))) 
(PUT 'SIMPQUOT 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPQUOT 'DEFINED-ON-LINE '1608) 
(PUT 'SIMPQUOT 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'SIMPQUOT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPQUOT (Q)
    ((LAMBDA (V U)
       (COND
        ((NULL (CAR U))
         (COND ((NULL (CAR V)) (RERROR 'ALG 19 "0/0 formed"))
               (T (RERROR 'ALG 20 "Zero divisor"))))
        ((AND (MEMQ DMODE* '(|:RD:| |:CR:|))
              (OR (ATOM (CAR U)) (ATOM (CAR (CAR U))))
              (OR (ATOM (CDR U)) (ATOM (CAR (CDR U))))
              (OR (ATOM (CDR V)) (ATOM (CAR (CDR V)))) (|:ONEP| (CDR U))
              (|:ONEP| (CDR V)))
         (CONS (COND ((NULL (CAR V)) NIL) (T (DIVD (CAR V) (CAR U)))) 1))
        (T
         (PROGN
          (SETQ Q (MULTSQ V (SIMPRECIP (CDR Q))))
          (COND
           ((AND *MODULAR (NULL (CDR Q))) (RERROR 'ALG 201 "Zero divisor")))
          Q))))
     (SIMP (CAR Q)) (SIMP (CADR Q)))) 
(PUT 'QUOTIENT 'SIMPFN 'SIMPQUOT) 
(PUT 'SIMPRECIP 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPRECIP 'DEFINED-ON-LINE '1624) 
(PUT 'SIMPRECIP 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'SIMPRECIP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPRECIP (U)
    (COND
     ((NULL *MCD)
      ((LAMBDA (U)
         (COND (*QSUM-SIMPEXPT (QSUM-SIMPEXPT U)) (T (BASIC-SIMPEXPT U))))
       (LIST (CARX U 'RECIP) (MINUS 1))))
     (T (INVSQ (SIMP (CARX U 'RECIP)))))) 
(PUT 'RECIP 'SIMPFN 'SIMPRECIP) 
(PUT 'SIMPSET 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPSET 'DEFINED-ON-LINE '1630) 
(PUT 'SIMPSET 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'SIMPSET 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPSET (U)
    (PROG (X)
      (SETQ X (PREPSQ (SIMP* (CAR U))))
      (COND ((NULL X) (TYPERR X "set variable")))
      (LET0 (LIST (LIST 'EQUAL X (MK*SQ (SETQ U (SIMP* (CADR U)))))))
      (RETURN U))) 
(PUT 'SET 'SIMPFN 'SIMPSET) 
(PUT 'UNSET 'NUMBER-OF-ARGS 1) 
(PUT 'UNSET 'DEFINED-ON-LINE '1641) 
(PUT 'UNSET 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'UNSET 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE UNSET (U)
    (PROG (J)
      (SETQ J U)
     LAB
      (COND ((NULL J) (RETURN NIL)))
      ((LAMBDA (J) (UNSET1 J)) (CAR J))
      (SETQ J (CDR J))
      (GO LAB))) 
(RLISTAT '(UNSET)) 
(PUT 'UNSET1 'NUMBER-OF-ARGS 1) 
(PUT 'UNSET1 'DEFINED-ON-LINE '1646) 
(PUT 'UNSET1 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'UNSET1 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE UNSET1 (U)
    (PROG (X)
      (SETQ X
              (COND ((ATOM U) (GET U 'AVALUE))
                    (T (ASSOC U (GET (CAR U) 'KVALUE)))))
      (COND ((OR (NULL X) (NULL (KERNP (SETQ X (CADADR X))))) (RETURN NIL)))
      (SETQ X (CAR (CAAAR X)))
      (COND
       ((OR (AND (ATOM X) (NULL (GET X 'AVALUE)))
            (AND (NULL (ATOM X)) (NULL (ASSOC X (GET (CAR X) 'KVALUE)))))
        (CLEAR (LIST U)))
       (T (CLEAR (LIST X)))))) 
(PUT 'OUTER-SIMPSQRT 'NUMBER-OF-ARGS 1) 
(PUT 'OUTER-SIMPSQRT 'DEFINED-ON-LINE '1661) 
(PUT 'OUTER-SIMPSQRT 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'OUTER-SIMPSQRT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE OUTER-SIMPSQRT (U)
    (COND (*INSIDE-INT* (PROPER-SIMPSQRT U)) (T (SIMPSQRT U)))) 
(PUT 'SIMPSQRT 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPSQRT 'DEFINED-ON-LINE '1665) 
(PUT 'SIMPSQRT 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'SIMPSQRT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPSQRT (U)
    (COND ((EQUAL U 0) (CONS NIL 1))
          ((NULL *KEEPSQRTS)
           (SIMPEXPT1 (CARX U 'SQRT) (SIMPEXPON1 '(QUOTIENT 1 2) 'SIMP*) NIL))
          (T
           (PROG (X Y)
             (SETQ X (XSIMP (CARX U 'SQRT)))
             (RETURN
              (COND ((NULL (CAR X)) (CONS NIL 1))
                    ((AND (EQUAL (CDR X) 1)
                          (OR (ATOM (CAR X)) (ATOM (CAR (CAR X))))
                          (|:MINUSP| (CAR X)))
                     (COND ((EQUAL (CAR X) (MINUS 1)) (SIMP 'I))
                           (T
                            (MULTSQ (SIMP 'I)
                                    (SIMPSQRT
                                     (LIST (PREPD (|:MINUS| (CAR X)))))))))
                    ((SETQ Y (DOMAINVALCHK 'SQRT (LIST X))) Y)
                    (T (SIMPRAD X 2)))))))) 
(PUT 'XSIMP 'NUMBER-OF-ARGS 1) 
(PUT 'XSIMP 'DEFINED-ON-LINE '1680) 
(PUT 'XSIMP 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'XSIMP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE XSIMP (U) (EXPCHK (SIMP* U))) 
(PUT 'SIMPTIMES 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPTIMES 'DEFINED-ON-LINE '1682) 
(PUT 'SIMPTIMES 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'SIMPTIMES 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPTIMES (U)
    (PROG (X Y)
      (COND ((NULL U) (RETURN (CONS 1 1))))
      (COND ((OR (NEQ TSTACK* 0) (NULL MUL*)) (GO A0)))
      (SETQ Y MUL*)
      (SETQ MUL* NIL)
     A0
      (SETQ TSTACK* (PLUS TSTACK* 1))
      (SETQ X (SIMP (CAR U)))
     A
      (SETQ U (CDR U))
      (COND ((NULL (CAR X)) (GO C)) ((NULL U) (GO B)))
      (SETQ X (MULTSQ X (SIMP (CAR U))))
      (GO A)
     B
      (COND ((OR (NULL MUL*) (GREATERP TSTACK* 1)) (GO C)))
      (SETQ X (APPLY1 (CAR MUL*) X))
      (SETQ ALGLIST* (CONS NIL NIL))
      (SETQ MUL* (CDR MUL*))
      (GO B)
     C
      (SETQ TSTACK* (DIFFERENCE TSTACK* 1))
      (COND ((EQUAL TSTACK* 0) (SETQ MUL* Y)))
      (RETURN X))) 
(PUT 'TIMES 'SIMPFN 'SIMPTIMES) 
(PUT 'RESIMP 'NUMBER-OF-ARGS 1) 
(PUT 'RESIMP 'DEFINED-ON-LINE '1707) 
(PUT 'RESIMP 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'RESIMP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RESIMP (U) ((LAMBDA (VARSTACK*) (RESIMP1 U)) NIL)) 
(PUT 'RESIMP1 'NUMBER-OF-ARGS 1) 
(PUT 'RESIMP1 'DEFINED-ON-LINE '1712) 
(PUT 'RESIMP1 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'RESIMP1 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RESIMP1 (U)
    (PROG ()
      (SETQ U (MULTSQ (SUBF1 (CAR U) NIL) (INVSQ (SUBF1 (CDR U) NIL))))
      (SETQ *SUB2 T)
      (RETURN U))) 
(PUT 'SIMP*SQ 'NUMBER-OF-ARGS 1) 
(PUT 'SIMP*SQ 'DEFINED-ON-LINE '1719) 
(PUT 'SIMP*SQ 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'SIMP*SQ 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMP*SQ (U)
    (COND ((AND (CADR U) (NULL *RESIMP)) (CAR U)) (T (RESIMP1 (CAR U))))) 
(PUT '*SQ 'SIMPFN 'SIMP*SQ) 
(PUT 'SIMPLAMBDA 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPLAMBDA 'DEFINED-ON-LINE '1728) 
(PUT 'SIMPLAMBDA 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'SIMPLAMBDA 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPLAMBDA (U) (CONS (CONS 'LAMBDA U) 1)) 
(PUT 'LAMBDA 'SIMPFN 'SIMPLAMBDA) 
(GLOBAL '(DOMAINLIST*)) 
(SETQ DOMAINLIST* (UNION '(LAMBDA) DOMAINLIST*)) 
(PUT 'LAMBDA 'TAG 'LAMBDA) 
(PUT 'LAMBDA 'DNAME 'LAMBDA) 
(PUT 'ALWAYS_NIL 'NUMBER-OF-ARGS 1) 
(PUT 'ALWAYS_NIL 'DEFINED-ON-LINE '1741) 
(PUT 'ALWAYS_NIL 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'ALWAYS_NIL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE ALWAYS_NIL (X) NIL) 
(PUT 'NOT_ARITHMETIC 'NUMBER-OF-ARGS 1) 
(PUT 'NOT_ARITHMETIC 'DEFINED-ON-LINE '1743) 
(PUT 'NOT_ARITHMETIC 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'NOT_ARITHMETIC 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE NOT_ARITHMETIC (X)
    (REDERR "lambda expressions can not participate in arithmetic")) 
(PUT 'PREPLAMBDA 'NUMBER-OF-ARGS 1) 
(PUT 'PREPLAMBDA 'DEFINED-ON-LINE '1746) 
(PUT 'PREPLAMBDA 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'PREPLAMBDA 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PREPLAMBDA (U) U) 
(PUT 'PRINLAMBDA 'NUMBER-OF-ARGS 1) 
(PUT 'PRINLAMBDA 'DEFINED-ON-LINE '1748) 
(PUT 'PRINLAMBDA 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'PRINLAMBDA 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PRINLAMBDA (U)
    (PROG (SEP)
      (PRIN2* "(lambda (")
      (PROG (V)
        (SETQ V (CADR U))
       LAB
        (COND ((NULL V) (RETURN NIL)))
        ((LAMBDA (V)
           (PROGN (COND (SEP (PRIN2* ", "))) (SETQ SEP T) (PRIN2* V)))
         (CAR V))
        (SETQ V (CDR V))
        (GO LAB))
      (PRIN2* "); ")
      (MAPRIN (CADDR U))
      (PRIN2* ")")
      (RETURN T))) 
(PUT 'LAMBDAP 'NUMBER-OF-ARGS 1) 
(PUT 'LAMBDAP 'DEFINED-ON-LINE '1762) 
(PUT 'LAMBDAP 'DEFINED-IN-FILE 'ALG/SIMP.RED) 
(PUT 'LAMBDAP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE LAMBDAP (U)
    (COND
     ((ATOM U)
      (COND
       ((SETQ U (GET U 'AVALUE)) (AND (EQCAR U 'SCALAR) (LAMBDAP (CADR U))))
       (T NIL)))
     ((EQCAR U 'LAMBDA) U)
     ((EQCAR U '*SQ) (AND (EQUAL (CDR (SETQ U (CADR U))) 1) (LAMBDAP (CAR U))))
     (T NIL))) 
(PUT 'LAMBDA 'ZEROP 'ALWAYS_NIL) 
(PUT 'LAMBDA 'ONEP 'ALWAYS_NIL) 
(PUT 'LAMBDA 'MINUSP 'ALWAYS_NIL) 
(PUT 'LAMBDA 'INTEQUIVFN 'ALWAYS_NIL) 
(PUT 'LAMBDA 'PREPFN 'PREPLAMBDA) 
(PUT 'LAMBDA 'PRIFN 'PRINLAMBDA) 
(PUT 'LAMBDA 'I2D 'NOT_ARITHMETIC) 
(PUT 'LAMBDA '|:FT:| 'NOT_ARITHMETIC) 
(PUT 'LAMBDA 'MINUS 'NOT_ARITHMETIC) 
(PUT 'LAMBDA 'PLUS 'NOT_ARITHMETIC) 
(PUT 'LAMBDA 'TIMES 'NOT_ARITHMETIC) 
(PUT 'LAMBDA 'DIFFERENCE 'NOT_ARITHMETIC) 
(PUT 'LAMBDA 'QUOTIENT 'NOT_ARITHMETIC) 
(PUT 'LAMBDA 'DIVIDE 'NOT_ARITHMETIC) 
(PUT 'LAMBDA 'GCD 'NOT_ARITHMETIC) 
(PUT 'LAMBDA 'FACTORFN 'NOT_ARITHMETIC) 
(PUT 'LAMBDA 'EXPT 'NOT_ARITHMETIC) 
(PUT 'LAMBDA 'ROOTFN 'NOT_ARITHMETIC) 
(INITDMODE 'LAMBDA) 
(ENDMODULE) 