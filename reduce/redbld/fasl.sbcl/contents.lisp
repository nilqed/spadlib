(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'CONTENTS)) 
(FLUID '(CONTENT INDEXLIST SQFR VARLIST ZLIST)) 
(EXPORTS
 (LIST 'CONTENTS 'CONTENTSMV 'DFNUMR 'DIFFLOGS 'FACTORLISTLIST 'MULTUP 'SQFREE
       'SQMERGE)) 
(IMPORTS
 (LIST 'INT-FAC 'FQUOTF 'GCDF 'INTERR '*MULTF 'PARTIALDIFF 'QUOTF 'ORDOP 'ADDF
       'NEGF 'DOMAINP 'DIFFF 'MKSP 'NEGSQ 'INVSQ 'ADDSQ '*MULTSQ 'DIFFSQ)) 
(PUT 'CONTENTS 'NUMBER-OF-ARGS 2) 
(PUT 'CONTENTS 'DEFINED-ON-LINE '41) 
(PUT 'CONTENTS 'DEFINED-IN-FILE 'INT/CONTENTS.RED) 
(PUT 'CONTENTS 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE CONTENTS (P V)
    (COND ((OR (ATOM P) (ATOM (CAR P))) P)
          ((EQUAL V (CAAAR P)) (CONTENTSMV P V NIL)) ((ORDOP V (CAAAR P)) P)
          (T (CONTENTSMV (MAKEMAINVAR P V) V NIL)))) 
(PUT 'CONTENTSMV 'NUMBER-OF-ARGS 3) 
(PUT 'CONTENTSMV 'DEFINED-ON-LINE '49) 
(PUT 'CONTENTSMV 'DEFINED-IN-FILE 'INT/CONTENTS.RED) 
(PUT 'CONTENTSMV 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE CONTENTSMV (P V SOFAR)
    (COND ((EQUAL SOFAR 1) 1) ((OR (ATOM P) (ATOM (CAR P))) (GCDF P SOFAR))
          ((NOT (EQUAL V (CAAAR P))) (GCDF P SOFAR))
          (T (CONTENTSMV (CDR P) V (GCDF (CDAR P) SOFAR))))) 
(PUT 'MAKEMAINVAR 'NUMBER-OF-ARGS 2) 
(PUT 'MAKEMAINVAR 'DEFINED-ON-LINE '58) 
(PUT 'MAKEMAINVAR 'DEFINED-IN-FILE 'INT/CONTENTS.RED) 
(PUT 'MAKEMAINVAR 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MAKEMAINVAR (P V)
    (COND ((OR (ATOM P) (ATOM (CAR P))) P) ((EQUAL V (CAAAR P)) P)
          (T
           (MERGEADD (MULCOEFFSBY (MAKEMAINVAR (CDAR P) V) (CAAR P) V)
            (MAKEMAINVAR (CDR P) V) V)))) 
(PUT 'MULCOEFFSBY 'NUMBER-OF-ARGS 3) 
(PUT 'MULCOEFFSBY 'DEFINED-ON-LINE '67) 
(PUT 'MULCOEFFSBY 'DEFINED-IN-FILE 'INT/CONTENTS.RED) 
(PUT 'MULCOEFFSBY 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE MULCOEFFSBY (P POW V)
    (COND ((NULL P) NIL)
          ((OR (OR (ATOM P) (ATOM (CAR P))) (NOT (EQUAL V (CAAAR P))))
           (CONS (CONS POW P) NIL))
          (T
           (CONS (CONS (CAAR P) (CONS (CONS POW (CDAR P)) NIL))
                 (MULCOEFFSBY (CDR P) POW V))))) 
(PUT 'MERGEADD 'NUMBER-OF-ARGS 3) 
(PUT 'MERGEADD 'DEFINED-ON-LINE '73) 
(PUT 'MERGEADD 'DEFINED-IN-FILE 'INT/CONTENTS.RED) 
(PUT 'MERGEADD 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE MERGEADD (A B V)
    (COND
     ((OR (OR (ATOM A) (ATOM (CAR A))) (NOT (EQUAL V (CAAAR A))))
      (COND
       ((OR (OR (ATOM B) (ATOM (CAR B))) (NOT (EQUAL V (CAAAR B)))) (ADDF A B))
       (T (CONS (CAR B) (MERGEADD A (CDR B) V)))))
     ((OR (OR (ATOM B) (ATOM (CAR B))) (NOT (EQUAL V (CAAAR B))))
      (CONS (CAR A) (MERGEADD (CDR A) B V)))
     (T
      ((LAMBDA (XC)
         (COND
          ((EQUAL XC 0)
           (CONS (CONS (CAAR A) (ADDF (CDAR A) (CDAR B)))
                 (MERGEADD (CDR A) (CDR B) V)))
          ((GREATERP XC 0) (CONS (CAR A) (MERGEADD (CDR A) B V)))
          (T (CONS (CAR B) (MERGEADD A (CDR B) V)))))
       (DIFFERENCE (CDAR (CAR A)) (CDAR (CAR B))))))) 
(PUT 'SQFREE 'NUMBER-OF-ARGS 2) 
(PUT 'SQFREE 'DEFINED-ON-LINE '87) 
(PUT 'SQFREE 'DEFINED-IN-FILE 'INT/CONTENTS.RED) 
(PUT 'SQFREE 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE SQFREE (P VL)
    (COND
     ((OR (NULL VL) (OR (ATOM P) (ATOM (CAR P)))) (PROGN (SETQ CONTENT P) NIL))
     (T
      (PROG (W V DP GG PG DPG P1 W1)
        (SETQ W (CONTENTS P (CAR VL)))
        (SETQ P ((LAMBDA (*EXP) (QUOTF1 P W)) T))
        (SETQ W (SQFREE W (CDR VL)))
        (COND ((EQUAL P 1) (RETURN W)))
        (SETQ V (CAR VL))
        (PROG ()
         WHILELABEL
          (COND ((NOT (NOT (EQUAL P 1))) (RETURN NIL)))
          (PROGN
           (SETQ DP (PARTIALDIFF P V))
           (SETQ GG (GCDF P DP))
           (SETQ PG (QUOTF-FAIL P GG))
           (SETQ DPG (NEGF (PARTIALDIFF PG V)))
           (SETQ P1 (GCDF PG (ADDF (QUOTF-FAIL DP GG) DPG)))
           (SETQ W1 (CONS P1 W1))
           (SETQ P GG))
          (GO WHILELABEL))
        (RETURN (SQMERGE (REVERSE W1) W T)))))) 
(PUT 'SQMERGE 'NUMBER-OF-ARGS 3) 
(PUT 'SQMERGE 'DEFINED-ON-LINE '107) 
(PUT 'SQMERGE 'DEFINED-IN-FILE 'INT/CONTENTS.RED) 
(PUT 'SQMERGE 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE SQMERGE (W1 W SIMPLEW1)
    (COND ((NULL W1) W)
          ((NULL W)
           (COND ((EQUAL (CAR W1) 1) (CONS NIL (SQMERGE (CDR W1) W SIMPLEW1)))
                 (T
                  (CONS (COND (SIMPLEW1 (LIST (CAR W1))) (T (CAR W1)))
                        (SQMERGE (CDR W1) W SIMPLEW1)))))
          ((EQUAL (CAR W1) 1)
           (CONS (CAR W) (SQMERGE (CDR W1) (CDR W) SIMPLEW1)))
          (T
           (CONS
            (APPEND (COND (SIMPLEW1 (LIST (CAR W1))) (T (CAR W1))) (CAR W))
            (SQMERGE (CDR W1) (CDR W) SIMPLEW1))))) 
(PUT 'MULTUP 'NUMBER-OF-ARGS 1) 
(PUT 'MULTUP 'DEFINED-ON-LINE '118) 
(PUT 'MULTUP 'DEFINED-IN-FILE 'INT/CONTENTS.RED) 
(PUT 'MULTUP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MULTUP (L)
    (PROG (RES)
      (SETQ RES 1)
      (PROG (J)
        (SETQ J L)
       LAB
        (COND ((NULL J) (RETURN NIL)))
        ((LAMBDA (J)
           (SETQ RES
                   (COND (*PHYSOP-LOADED (PHYSOP-MULTF RES J))
                         (T (POLY-MULTF RES J)))))
         (CAR J))
        (SETQ J (CDR J))
        (GO LAB))
      (RETURN RES))) 
(PUT 'DIFLIST 'NUMBER-OF-ARGS 4) 
(PUT 'DIFLIST 'DEFINED-ON-LINE '129) 
(PUT 'DIFLIST 'DEFINED-IN-FILE 'INT/CONTENTS.RED) 
(PUT 'DIFLIST 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE DIFLIST (L CL X RL)
    (COND ((NULL L) (CONS NIL 1))
          (T
           (PROG (TEMP)
             (SETQ TEMP (*MULTF (MULTUP RL) (MULTUP (CDR L))))
             (SETQ TEMP (*MULTSQ (DIFFF (CAR L) X) (CONS TEMP 1)))
             (SETQ TEMP (*MULTSQ TEMP (CONS (CAR CL) 1)))
             (RETURN
              (ADDSQ TEMP (DIFLIST (CDR L) (CDR CL) X (CONS (CAR L) RL)))))))) 
(PUT 'L2LSF 'NUMBER-OF-ARGS 1) 
(PUT 'L2LSF 'DEFINED-ON-LINE '148) 
(PUT 'L2LSF 'DEFINED-IN-FILE 'INT/CONTENTS.RED) 
(PUT 'L2LSF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE L2LSF (L)
    (COND ((NULL L) NIL)
          (T
           (CONS (CONS (CONS (GETPOWER (FKERN (CAR L)) 1) 1) NIL)
                 (L2LSF (CDR L)))))) 
(PUT 'DFNUMR 'NUMBER-OF-ARGS 2) 
(PUT 'DFNUMR 'DEFINED-ON-LINE '153) 
(PUT 'DFNUMR 'DEFINED-IN-FILE 'INT/CONTENTS.RED) 
(PUT 'DFNUMR 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE DFNUMR (X DL)
    (PROG (TEMP1 TEMP2 COEFLIST QLIST COUNT)
      (COND
       ((NOT (NULL SQFR))
        (PROGN
         (SETQ COUNT 0)
         (SETQ QLIST (CDR SQFR))
         (SETQ COEFLIST NIL)
         (PROG ()
          WHILELABEL
           (COND ((NOT (NOT (NULL QLIST))) (RETURN NIL)))
           (PROGN
            (SETQ COUNT (PLUS COUNT 1))
            (SETQ COEFLIST (CONS COUNT COEFLIST))
            (SETQ QLIST (CDR QLIST)))
           (GO WHILELABEL))
         (SETQ COEFLIST (REVERSE COEFLIST)))))
      (SETQ TEMP1
              (*MULTSQ (DIFLIST (L2LSF ZLIST) (L2LSF INDEXLIST) X NIL)
               (CONS (MULTUP SQFR) 1)))
      (COND
       ((AND (NOT (NULL SQFR)) (NOT (NULL (CDR SQFR))))
        (PROGN
         (SETQ TEMP2
                 (*MULTSQ (DIFLIST (CDR SQFR) COEFLIST X NIL)
                  (CONS (MULTUP (L2LSF ZLIST)) 1)))
         (SETQ TEMP2 (*MULTSQ TEMP2 (CONS (CAR SQFR) 1)))))
       (T (SETQ TEMP2 (CONS NIL 1))))
      (SETQ TEMP1 (ADDSQ TEMP1 (NEGSQ TEMP2)))
      (SETQ TEMP2 (CDR TEMP1))
      (SETQ TEMP1 (CAR TEMP1))
      (SETQ QLIST NIL)
      (PROG ()
       WHILELABEL
        (COND ((NOT (NOT (NULL DL))) (RETURN NIL)))
        (PROGN
         (COND
          ((NOT (MEMBER (CAR DL) QLIST)) (SETQ QLIST (CONS (CAR DL) QLIST))))
         (SETQ DL (CDR DL)))
        (GO WHILELABEL))
      (PROG ()
       WHILELABEL
        (COND ((NOT (NOT (NULL QLIST))) (RETURN NIL)))
        (PROGN
         (SETQ TEMP1 ((LAMBDA (*EXP) (QUOTF1 TEMP1 (CAR QLIST))) T))
         (SETQ QLIST (CDR QLIST)))
        (GO WHILELABEL))
      (RETURN (CONS TEMP1 TEMP2)))) 
(PUT 'DIFFLOGS 'NUMBER-OF-ARGS 3) 
(PUT 'DIFFLOGS 'DEFINED-ON-LINE '188) 
(PUT 'DIFFLOGS 'DEFINED-IN-FILE 'INT/CONTENTS.RED) 
(PUT 'DIFFLOGS 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE DIFFLOGS (LL DENM1 X)
    (COND ((NULL LL) (CONS NIL 1))
          (T
           (PROG (TEMP QU CVAR LOGORATAN ARG)
             (SETQ LOGORATAN (CAAR LL))
             (SETQ CVAR (CADAR LL))
             (SETQ ARG (CDDAR LL))
             (SETQ TEMP (*MULTSQ (CONS CVAR 1) (DIFFSQ ARG X)))
             (COND ((EQUAL LOGORATAN 'IDEN) (SETQ QU (CONS 1 1)))
                   ((EQUAL LOGORATAN 'LOG) (SETQ QU ARG))
                   ((EQUAL LOGORATAN 'ATAN)
                    (SETQ QU (ADDSQ (CONS 1 1) (*MULTSQ ARG ARG))))
                   (T (INTERR "Logoratan=? in difflogs")))
             (SETQ QU
                     (FQUOTF (*MULTF (*MULTF DENM1 (CAR TEMP)) (CDR QU))
                      (CAR QU)))
             (SETQ TEMP (*MULTSQ (*INVSQ (CONS (CDR TEMP) 1)) QU))
             (RETURN (*ADDSQ TEMP (DIFFLOGS (CDR LL) DENM1 X))))))) 
(PUT 'FACTORLISTLIST 'NUMBER-OF-ARGS 1) 
(PUT 'FACTORLISTLIST 'DEFINED-ON-LINE '211) 
(PUT 'FACTORLISTLIST 'DEFINED-IN-FILE 'INT/CONTENTS.RED) 
(PUT 'FACTORLISTLIST 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FACTORLISTLIST (W)
    (PROG (RES X Y)
      (PROG ()
       WHILELABEL
        (COND ((NOT (NOT (NULL W))) (RETURN NIL)))
        (PROGN
         (SETQ X (CAR W))
         (PROG ()
          WHILELABEL
           (COND ((NOT (NOT (NULL X))) (RETURN NIL)))
           (PROGN
            (SETQ Y (FACBYPP (CAR X) VARLIST))
            (PROG ()
             WHILELABEL
              (COND ((NOT (NOT (NULL Y))) (RETURN NIL)))
              (PROGN
               (SETQ RES (APPEND (INT-FAC (CAR Y)) RES))
               (SETQ Y (CDR Y)))
              (GO WHILELABEL))
            (SETQ X (CDR X)))
           (GO WHILELABEL))
         (SETQ W (CDR W)))
        (GO WHILELABEL))
      (RETURN RES))) 
(PUT 'FACBYPP 'NUMBER-OF-ARGS 2) 
(PUT 'FACBYPP 'DEFINED-ON-LINE '228) 
(PUT 'FACBYPP 'DEFINED-IN-FILE 'INT/CONTENTS.RED) 
(PUT 'FACBYPP 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE FACBYPP (P VL)
    (COND ((NULL VL) (LIST P))
          (T
           (PROG (PRINCILAP-PART CO)
             (SETQ CO (CONTENTS P (CAR VL)))
             (SETQ VL (CDR VL))
             (COND ((EQUAL CO 1) (RETURN (FACBYPP P VL))))
             (SETQ PRINCILAP-PART ((LAMBDA (*EXP) (QUOTF1 P CO)) T))
             (COND ((EQUAL PRINCILAP-PART 1) (RETURN (FACBYPP P VL))))
             (RETURN (NCONC (FACBYPP PRINCILAP-PART VL) (FACBYPP CO VL))))))) 
(ENDMODULE) 