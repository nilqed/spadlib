(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'ANTISUBS)) 
(EXPORTS (LIST 'ANTISUBS)) 
(IMPORTS (LIST 'INTERR 'DEPENDSP 'SETDIFF)) 
(PUT 'ANTISUBS 'NUMBER-OF-ARGS 2) 
(PUT 'ANTISUBS 'DEFINED-ON-LINE '35) 
(PUT 'ANTISUBS 'DEFINED-IN-FILE 'ALGINT/ANTISUBS.RED) 
(PUT 'ANTISUBS 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE ANTISUBS (PLACE X)
    (PROG (ANSWER W)
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND PLACE (EQUAL X (CAAR PLACE)))) (RETURN NIL)))
        (PROGN
         (SETQ W (CDAR PLACE))
         (COND
          ((ATOM W)
           (COND ((NEQ W X) (INTERR "False atomic substitution")) (T NIL)))
          (T (SETQ ANSWER (CONS (CONS X (ANTI2 W X)) ANSWER))))
         (SETQ PLACE (CDR PLACE)))
        (GO WHILELABEL))
      (COND ((NULL ANSWER) (SETQ ANSWER (CONS (CONS X X) ANSWER))))
      (RETURN ANSWER))) 
(PUT 'ANTI2 'NUMBER-OF-ARGS 2) 
(PUT 'ANTI2 'DEFINED-ON-LINE '55) 
(PUT 'ANTI2 'DEFINED-IN-FILE 'ALGINT/ANTISUBS.RED) 
(PUT 'ANTI2 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE ANTI2 (EEXPR X)
    (COND ((ATOM EEXPR) (COND ((EQ EEXPR X) X) (T (INTERR "False atom"))))
          ((EQ (CAR EEXPR) 'PLUS) (DEPLUS (CDR EEXPR) X))
          ((EQ (CAR EEXPR) 'MINUS)
           (SUBST (LIST 'MINUS X) X (ANTI2 (CADR EEXPR) X)))
          ((EQ (CAR EEXPR) 'QUOTIENT)
           (COND
            ((DEPENDSP (CADR EEXPR) X)
             (COND ((DEPENDSP (CADDR EEXPR) X) (INTERR "Complicated division"))
                   (T
                    (SUBST (LIST 'TIMES (CADDR EEXPR) X) X
                           (ANTI2 (CADR EEXPR) X)))))
            ((DEPENDSP (CADDR EEXPR) X)
             (SUBST (LIST 'QUOTIENT (CADR EEXPR) X) X (ANTI2 (CADDR EEXPR) X)))
            (T (INTERR "No division"))))
          ((EQ (CAR EEXPR) 'EXPT)
           (COND
            ((IEQUAL (CADDR EEXPR) 2)
             (SUBST (LIST 'SQRT X) X (ANTI2 (CADR EEXPR) X)))
            (T (INTERR "Unknown root"))))
          ((EQ (CAR EEXPR) 'TIMES) (DETIMES (CDR EEXPR) X))
          ((EQ (CAR EEXPR) 'DIFFERENCE)
           (DEPLUS (LIST (CADR EEXPR) (LIST 'MINUS (CADDR EEXPR))) X))
          (T (INTERR "Unrecognised form in antisubs")))) 
(PUT 'DETIMES 'NUMBER-OF-ARGS 2) 
(PUT 'DETIMES 'DEFINED-ON-LINE '86) 
(PUT 'DETIMES 'DEFINED-IN-FILE 'ALGINT/ANTISUBS.RED) 
(PUT 'DETIMES 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE DETIMES (P-LIST VAR)
    (PROG (U V)
      (SETQ U (DEPLIST P-LIST VAR))
      (SETQ V (SETDIFF P-LIST U))
      (COND ((NULL V) (SETQ V VAR))
            ((NULL (CDR V)) (SETQ V (LIST 'QUOTIENT VAR (CAR V))))
            (T (SETQ V (LIST 'QUOTIENT VAR (CONS 'TIMES V)))))
      (COND ((OR (NULL U) (CDR U)) (INTERR "Weird multiplication")))
      (RETURN (SUBST V VAR (ANTI2 (CAR U) VAR))))) 
(PUT 'DEPLIST 'NUMBER-OF-ARGS 2) 
(PUT 'DEPLIST 'DEFINED-ON-LINE '104) 
(PUT 'DEPLIST 'DEFINED-IN-FILE 'ALGINT/ANTISUBS.RED) 
(PUT 'DEPLIST 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE DEPLIST (P-LIST VAR)
    (COND ((NULL P-LIST) NIL)
          ((DEPENDSP (CAR P-LIST) VAR)
           (CONS (CAR P-LIST) (DEPLIST (CDR P-LIST) VAR)))
          (T (DEPLIST (CDR P-LIST) VAR)))) 
(PUT 'DEPLUS 'NUMBER-OF-ARGS 2) 
(PUT 'DEPLUS 'DEFINED-ON-LINE '113) 
(PUT 'DEPLUS 'DEFINED-IN-FILE 'ALGINT/ANTISUBS.RED) 
(PUT 'DEPLUS 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE DEPLUS (P-LIST VAR)
    (PROG (U V)
      (SETQ U (DEPLIST P-LIST VAR))
      (SETQ V (SETDIFF P-LIST U))
      (COND ((NULL V) (EQUAL V VAR))
            ((NULL (CDR V)) (SETQ V (LIST 'PLUS VAR (LIST 'MINUS (CAR V)))))
            (T (SETQ V (LIST 'PLUS VAR (LIST 'MINUS (CONS 'PLUS V))))))
      (COND ((OR (NULL U) (CDR U)) (INTERR "Weird addition")))
      (RETURN (SUBST V VAR (ANTI2 (CAR U) VAR))))) 
(ENDMODULE) 