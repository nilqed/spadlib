(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'MMA)) 
(REVISION 'MMA "$Id: mma.red 5986 2021-08-28 13:35:27Z thomas-sturm $") 
(COPYRIGHT 'MMA "(c) 2008-2017 T. Sturm") 
(FLUID '(*REDEFMSG)) 
(FLUID '(*RLVERBOSE)) 
(FLUID '(*ECHO)) 
(FLUID '(*TIME)) 
(FLUID '(*BACKTRACE)) 
(FLUID '(*FANCY)) 
(FLUID '(*OUTPUTHANDLER)) 
(GLOBAL '(MMA_CALL*)) 
(GLOBAL '(MMA_AWK*)) 
(SETQ MMA_AWK* (LTO_SCONCAT (LIST (SYSTO_GET-RESOURCE-DIRECTORY) "/mma.awk"))) 
(SWITCH (LIST 'RLQEFBMMA)) 
(RL_PROVIDESERVICE 'RL_MATHEMATICA 'MMA_MATHEMATICA NIL) 
(PUT 'MMA_MATHEMATICA 'NUMBER-OF-ARGS 1) 
(DE MMA_MATHEMATICA (F) (QEPCAD_GENERIC F NIL "mma" 'MMA_PRINTER 'MMA_RUN)) 
(PUT 'MMA_PRINTER 'NUMBER-OF-ARGS 1) 
(DE MMA_PRINTER (F) (MMA_CADPRINT (RL_PNF F))) 
(PUT 'MMA_PRINT 'NUMBER-OF-ARGS 1) 
(DE MMA_PRINT (F)
    (PROG (W SVFANCY SVPPRIFN SVPRTCH LL)
      (SETQ LL 0)
      (SETQ SVFANCY *FANCY)
      (SETQ SVPPRIFN (GET 'TIMES 'PPRIFN))
      (SETQ SVPRTCH (GET 'EXPT 'PRTCH))
      (SETQ LL (LINELENGTH (DIFFERENCE (EXPT 2 (DIFFERENCE 32 5)) 1)))
      (COND (SVFANCY (OFF1 'FANCY)))
      (PUT 'TIMES 'PPRIFN 'QEPCAD_PPRICADTIMES)
      (PUT 'EXPT 'PRTCH '^)
      (MMA_MYSCPRINT T)
      (SETQ W (ERRORSET (LIST 'MMA_CADPRINT (MKQUOTE F)) T *BACKTRACE))
      (COND (SVFANCY (ON1 'FANCY)))
      (PUT 'TIMES 'PPRIFN SVPPRIFN)
      (PUT 'EXPT 'PRTCH SVPRTCH)
      (MMA_MYSCPRINT NIL)
      (LINELENGTH LL)
      (COND ((ERRORP W) (REDERR (LIST "mma_print: could not print" F))))
      (RETURN (CAR W)))) 
(PUT 'MMA_CADPRINT 'NUMBER-OF-ARGS 1) 
(DE MMA_CADPRINT (F)
    (PROG (W *NAT OUTPUTHANDLER*)
      (TERPRI* NIL)
      (PRIN2* "InputForm[Resolve[")
      (MMA_CADPRINT1 F)
      (PRIN2* ",")
      (SETQ W (CL_VARL F))
      (MAPRIN (CONS 'LIST (NCONC (CAR W) (CDR W))))
      (PRIN2* ",")
      (PRIN2* "Reals]]")
      (TERPRI* T)
      (PRIN2* "TimeUsed[]")
      (TERPRI* NIL))) 
(PUT 'MMA_CADPRINT1 'NUMBER-OF-ARGS 1) 
(DE MMA_CADPRINT1 (F)
    (PROG (OP *NAT)
      (SETQ OP (COND ((ATOM F) F) (T (CAR F))))
      (COND
       ((EQ OP 'EX)
        (PROGN
         (PRIN2* "Exists[")
         (PRIN2* (CADR F))
         (PRIN2* ",")
         (MMA_CADPRINT1 (CADDR F))
         (PRIN2* "]")
         (RETURN NIL))))
      (COND
       ((EQ OP 'ALL)
        (PROGN
         (PRIN2* "ForAll[")
         (PRIN2* (CADR F))
         (PRIN2* ",")
         (MMA_CADPRINT1 (CADDR F))
         (PRIN2* "]")
         (RETURN NIL))))
      (MMA_CADPRINT2 F))) 
(PUT 'MMA_CADPRINT2 'NUMBER-OF-ARGS 1) 
(DE MMA_CADPRINT2 (F)
    (PROG (OP ARGL OUTPUTHANDLER*)
      (SETQ OP (COND ((ATOM F) F) (T (CAR F))))
      (COND
       ((OR (OR (EQ OP 'TRUE) (EQ OP 'FALSE))
            (OR (OR (OR (EQ OP 'OR) (EQ OP 'AND)) (EQ OP 'NOT))
                (OR (EQ OP 'IMPL) (EQ OP 'REPL) (EQ OP 'EQUIV)))
            (OR (EQ OP 'EX) (EQ OP 'ALL)) (OR (EQ OP 'BEX) (EQ OP 'BALL)))
        (PROGN
         (COND
          ((OR (EQ OP 'TRUE) (EQ OP 'FALSE))
           (PROGN (MMA_CADPRINTTVAL F) (RETURN NIL))))
         (PRIN2* "(")
         (SETQ ARGL (CDR F))
         (MMA_CADPRINT2 (CAR ARGL))
         (PROG (X)
           (SETQ X (CDR ARGL))
          LAB
           (COND ((NULL X) (RETURN NIL)))
           ((LAMBDA (X) (PROGN (MMA_CADPRINTOP OP) (MMA_CADPRINT2 X))) (CAR X))
           (SETQ X (CDR X))
           (GO LAB))
         (PRIN2* ")")
         (RETURN NIL))))
      (MAPRIN (PREPF (CADR F)))
      (MMA_CADPRINTOP OP)
      (PRIN2* "0"))) 
(PUT 'MMA_CADPRINTTVAL 'NUMBER-OF-ARGS 1) 
(DE MMA_CADPRINTTVAL (TV)
    (COND ((EQ TV 'TRUE) (PRIN2* "True"))
          (T (PROGN (COND (NIL NIL)) (PRIN2* "False"))))) 
(PUT 'MMA_CADPRINTOP 'NUMBER-OF-ARGS 1) 
(DE MMA_CADPRINTOP (OP)
    (PROGN
     (PRIN2* " ")
     (PRIN2*
      (OR
       (CDR
        (ATSOC OP
               '((EQUAL . "==") (NEQ . "!=") (LESSP . "<") (GREATERP . ">")
                 (GEQ . ">=") (LEQ . "<=") (OR . "||") (AND . "&&") (IMPL)
                 (EQUIV))))
       (REDERR (LIST "cannot translate" OP "to mma"))))
     (PRIN2* " "))) 
(COPYD 'MMA_SCPRINT-ORIG 'SCPRINT) 
(PUT 'MMA_SCPRINT 'NUMBER-OF-ARGS 2) 
(DE MMA_SCPRINT (U N) (PROGN (MMA_SCPRINT-ORIG U N) (PRIN2 "\\"))) 
(PUT 'MMA_MYSCPRINT 'NUMBER-OF-ARGS 1) 
(DE MMA_MYSCPRINT (FLG)
    ((LAMBDA (*REDEFMSG)
       (COPYD 'SCPRINT (COND (FLG 'MMA_SCPRINT) (T 'MMA_SCPRINT-ORIG))))
     NIL)) 
(PUT 'MMA_RUN 'NUMBER-OF-ARGS 2) 
(DE MMA_RUN (FN1 FN2)
    (PROG (VB TM CALL MMA)
      (SETQ MMA (GETENV "MATHEMATICA"))
      (COND
       ((NOT MMA)
        (COND
         ((EQUAL
           (SYSTEM
            "test -x /Applications/Mathematica.app/Contents/MacOS/MathKernel")
           0)
          (SETQ MMA "/Applications/Mathematica.app/Contents/MacOS/MathKernel"))
         ((EQUAL (SYSTEM "test -x /usr/local/bin/math") 0)
          (SETQ MMA "/usr/local/bin/math"))
         (T (REDERR "no executable Mathematica found")))))
      (SETQ VB (LTO_AT2STR *RLVERBOSE))
      (SETQ TM (LTO_AT2STR *TIME))
      (SETQ CALL
              (LTO_SCONCAT
               (LIST MMA " < " FN1 " | awk -v rf=" FN2 " -v verb=" VB
                     " -v time=" TM " -f " MMA_AWK*)))
      (COND
       (*RLVERBOSE (IOTO_TPRIN2T (LTO_SCONCAT (LIST "+++ calling " CALL)))))
      (SYSTEM CALL))) 
(ENDMODULE) 