(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'OFSFANUEX)) 
(REVISION 'OFSFANUEX
          "$Id: ofsfanuex.red 5986 2021-08-28 13:35:27Z thomas-sturm $") 
(COPYRIGHT 'OFSFANUEX
           "(c) 2001-2009 A. Dolzmann, A. Seidl, T. Sturm, 2012-2017 M. Kosta, T. Sturm") 
(FLUID '(BIGVARPREF* BIGVARCOUNT* SMALLVARPREF* SMALLVARCOUNT*)) 
(SETQ BIGVARPREF* '~VAR) 
(SETQ BIGVARCOUNT* 0) 
(SETQ SMALLVARPREF* '&VAR) 
(SETQ SMALLVARCOUNT* 99999) 
(PUT 'OFSF_MKSMALLID 'NUMBER-OF-ARGS 0) 
(PUT 'OFSF_MKSMALLID 'DEFINED-ON-LINE '61) 
(PUT 'OFSF_MKSMALLID 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFANUEX.RED) 
(PUT 'OFSF_MKSMALLID 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE OFSF_MKSMALLID NIL
    (PROG (W D)
      (SETQ D 0)
      (SETQ SMALLVARCOUNT* (DIFFERENCE SMALLVARCOUNT* 1))
      (SETQ W (EXPLODE SMALLVARCOUNT*))
      (SETQ D (LENGTH W))
      (PROG ()
       WHILELABEL
        (COND ((NOT (LESSP D 5)) (RETURN NIL)))
        (PROGN (SETQ W (CONS '|0| W)) (SETQ D (PLUS D 1)))
        (GO WHILELABEL))
      (RETURN (COMPRESS (APPEND (EXPLODE SMALLVARPREF*) W))))) 
(PUT 'OFSF_MKBIGID 'NUMBER-OF-ARGS 0) 
(PUT 'OFSF_MKBIGID 'DEFINED-ON-LINE '73) 
(PUT 'OFSF_MKBIGID 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFANUEX.RED) 
(PUT 'OFSF_MKBIGID 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE OFSF_MKBIGID NIL
    (PROG (W D)
      (SETQ D 0)
      (SETQ BIGVARCOUNT* (PLUS BIGVARCOUNT* 1))
      (SETQ W (EXPLODE BIGVARCOUNT*))
      (SETQ D (LENGTH W))
      (PROG ()
       WHILELABEL
        (COND ((NOT (LESSP D 5)) (RETURN NIL)))
        (PROGN (SETQ W (CONS '|0| W)) (SETQ D (PLUS D 1)))
        (GO WHILELABEL))
      (RETURN (COMPRESS (APPEND (EXPLODE BIGVARPREF*) W))))) 
(PUT 'RAT_MK 'NUMBER-OF-ARGS 2) 
(DE RAT_MK (N D) (MULTSQ (SIMP N) (INVSQ (SIMP D)))) 
(PUT 'RAT_NUMR 'NUMBER-OF-ARGS 1) 
(DE RAT_NUMR (Q) (CAR Q)) 
(PUT 'RAT_NUMRN 'NUMBER-OF-ARGS 1) 
(DE RAT_NUMRN (Q) (COND ((NULL (CAR Q)) 0) (T (CAR Q)))) 
(PUT 'RAT_DENR 'NUMBER-OF-ARGS 1) 
(DE RAT_DENR (Q) (CDR Q)) 
(PUT 'RAT_PRINT 'NUMBER-OF-ARGS 1) 
(DE RAT_PRINT (Q) (PRIN2T (RAT_TOSTRING Q))) 
(PUT 'RAT_TOSTRING 'NUMBER-OF-ARGS 1) 
(DE RAT_TOSTRING (Q)
    (PROG (SL)
      (PROG (W1)
        (SETQ W1 (LTO_AT2STR (RAT_NUMRN Q)))
        (SETQ SL (CONS W1 SL))
        (RETURN W1))
      (PROGN (SETQ SL (CONS "/" SL)) "/")
      (PROG (W1)
        (SETQ W1 (LTO_AT2STR (RAT_DENR Q)))
        (SETQ SL (CONS W1 SL))
        (RETURN W1))
      (RETURN (LTO_SCONCAT (REVERSIP SL))))) 
(PUT 'RAT_FROMNUM 'NUMBER-OF-ARGS 1) 
(DE RAT_FROMNUM (N) (SIMP N)) 
(PUT 'RAT_NEG 'NUMBER-OF-ARGS 1) 
(DE RAT_NEG (Q) (NEGSQ Q)) 
(PUT 'RAT_ADD 'NUMBER-OF-ARGS 2) 
(DE RAT_ADD (P Q) (ADDSQ P Q)) 
(PUT 'RAT_MINUS 'NUMBER-OF-ARGS 2) 
(DE RAT_MINUS (P Q) (ADDSQ P (NEGSQ Q))) 
(PUT 'RAT_ADDL 'NUMBER-OF-ARGS 1) 
(DE RAT_ADDL (PL)
    (COND ((NULL PL) (RAT_0)) (T (RAT_ADD (CAR PL) (RAT_ADDL (CDR PL)))))) 
(PUT 'RAT_MULT 'NUMBER-OF-ARGS 2) 
(DE RAT_MULT (P Q) (MULTSQ P Q)) 
(PUT 'RAT_QUOT 'NUMBER-OF-ARGS 2) 
(DE RAT_QUOT (P Q) (MULTSQ P (INVSQ Q))) 
(PUT 'RAT_NULLP 'NUMBER-OF-ARGS 1) 
(DE RAT_NULLP (Q) (NULL (CAR Q))) 
(PUT 'RAT_SGN 'NUMBER-OF-ARGS 1) 
(DE RAT_SGN (Q) (SGN (RAT_NUMRN Q))) 
(PUT 'RAT_0 'NUMBER-OF-ARGS 0) 
(DE RAT_0 NIL (CONS NIL 1)) 
(PUT 'RAT_1 'NUMBER-OF-ARGS 0) 
(DE RAT_1 NIL (CONS 1 1)) 
(PUT 'RAT_LESS 'NUMBER-OF-ARGS 2) 
(DE RAT_LESS (P Q) (EQN (RAT_SGN (ADDSQ P (NEGSQ Q))) (MINUS 1))) 
(PUT 'RAT_GREATER 'NUMBER-OF-ARGS 2) 
(DE RAT_GREATER (P Q) (EQN (RAT_SGN (ADDSQ P (NEGSQ Q))) 1)) 
(PUT 'RAT_EQ 'NUMBER-OF-ARGS 2) 
(DE RAT_EQ (P Q) (EQN (RAT_SGN (RAT_MINUS P Q)) 0)) 
(PUT 'RAT_LEQ 'NUMBER-OF-ARGS 2) 
(DE RAT_LEQ (P Q) (LESSP (RAT_SGN (ADDSQ P (NEGSQ Q))) 1)) 
(PUT 'RAT_MIN 'NUMBER-OF-ARGS 2) 
(DE RAT_MIN (P Q) (COND ((RAT_LEQ P Q) P) (T Q))) 
(PUT 'RAT_MAX 'NUMBER-OF-ARGS 2) 
(DE RAT_MAX (P Q) (COND ((RAT_LEQ P Q) Q) (T P))) 
(PUT 'RAT_MAPMAX 'NUMBER-OF-ARGS 1) 
(DE RAT_MAPMAX (PL)
    (COND ((NULL (CDR PL)) (CAR PL))
          (T (RAT_MAX (CAR PL) (RAT_MAPMAX (CDR PL)))))) 
(PUT 'RAT_MIN4 'NUMBER-OF-ARGS 4) 
(DE RAT_MIN4 (A B C D) (RAT_MIN (RAT_MIN A B) (RAT_MIN C D))) 
(PUT 'RAT_MAX4 'NUMBER-OF-ARGS 4) 
(DE RAT_MAX4 (A B C D) (RAT_MAX (RAT_MAX A B) (RAT_MAX C D))) 
(PUT 'RAT_ABS 'NUMBER-OF-ARGS 1) 
(DE RAT_ABS (P) (CONS (ABSF (CAR P)) (CDR P))) 
(PUT 'IV_MK 'NUMBER-OF-ARGS 2) 
(DE IV_MK (L R) (CONS L R)) 
(PUT 'IV_MK4 'NUMBER-OF-ARGS 4) 
(DE IV_MK4 (N1 D1 N2 D2) (IV_MK (RAT_MK N1 D1) (RAT_MK N2 D2))) 
(PUT 'IV_LB 'NUMBER-OF-ARGS 1) 
(DE IV_LB (IV) (CAR IV)) 
(PUT 'IV_RB 'NUMBER-OF-ARGS 1) 
(DE IV_RB (IV) (CDR IV)) 
(PUT 'IV_PRINT 'NUMBER-OF-ARGS 1) 
(DE IV_PRINT (IV) (PRIN2T (IV_TOSTRING IV))) 
(PUT 'IV_TOSTRING 'NUMBER-OF-ARGS 1) 
(DE IV_TOSTRING (IV)
    (PROG (SL)
      (PROGN (SETQ SL (CONS "]" SL)) "]")
      (PROG (W1)
        (SETQ W1 (RAT_TOSTRING (IV_LB IV)))
        (SETQ SL (CONS W1 SL))
        (RETURN W1))
      (PROGN (SETQ SL (CONS ", " SL)) ", ")
      (PROG (W1)
        (SETQ W1 (RAT_TOSTRING (IV_RB IV)))
        (SETQ SL (CONS W1 SL))
        (RETURN W1))
      (PROGN (SETQ SL (CONS "[" SL)) "[")
      (RETURN (LTO_SCONCAT (REVERSIP SL))))) 
(PUT 'IV_NEG 'NUMBER-OF-ARGS 1) 
(DE IV_NEG (IV) (IV_MK (NEGSQ (IV_RB IV)) (NEGSQ (IV_LB IV)))) 
(PUT 'IV_ADD 'NUMBER-OF-ARGS 2) 
(DE IV_ADD (IV1 IV2)
    (IV_MK (ADDSQ (IV_LB IV1) (IV_LB IV2)) (ADDSQ (IV_RB IV1) (IV_RB IV2)))) 
(PUT 'IV_MAPADD 'NUMBER-OF-ARGS 1) 
(DE IV_MAPADD (IVL)
    (COND ((NULL IVL) (IV_MK (RAT_FROMNUM 0) (RAT_FROMNUM 0)))
          (T (IV_ADD (CAR IVL) (IV_MAPADD (CDR IVL)))))) 
(PUT 'IV_MULT 'NUMBER-OF-ARGS 2) 
(DE IV_MULT (IV1 IV2)
    ((LAMBDA (RR RL LR LL)
       (IV_MK (RAT_MIN4 RR RL LR LL) (RAT_MAX4 RR RL LR LL)))
     (MULTSQ (IV_RB IV1) (IV_RB IV2)) (MULTSQ (IV_RB IV1) (IV_LB IV2))
     (MULTSQ (IV_LB IV1) (IV_RB IV2)) (MULTSQ (IV_LB IV1) (IV_LB IV2)))) 
(PUT 'IV_MED 'NUMBER-OF-ARGS 1) 
(DE IV_MED (IV) (RAT_MULT (RAT_ADD (IV_LB IV) (IV_RB IV)) (RAT_MK 1 2))) 
(PUT 'IV_TOTHEN 'NUMBER-OF-ARGS 2) 
(DE IV_TOTHEN (IV N)
    (COND ((EQN N 0) (IV_MK (RAT_MK 1 1) (RAT_MK 1 1)))
          (T (IV_MULT IV (IV_TOTHEN IV (DIFFERENCE N 1)))))) 
(PUT 'IV_CONTAINSZERO 'NUMBER-OF-ARGS 1) 
(DE IV_CONTAINSZERO (IV)
    (COND ((AND (RAT_LEQ (IV_LB IV) (RAT_0)) (RAT_LEQ (RAT_0) (IV_RB IV))) T)
          (T NIL))) 
(PUT 'IV_COMP 'NUMBER-OF-ARGS 2) 
(DE IV_COMP (IV1 IV2)
    (COND ((RAT_LEQ (IV_RB IV1) (IV_LB IV2)) (MINUS 1))
          ((RAT_LEQ (IV_RB IV2) (IV_LB IV1)) 1) (T 0))) 
(PUT 'IV_MAXABS 'NUMBER-OF-ARGS 1) 
(DE IV_MAXABS (IV) (RAT_MAX (RAT_ABS (IV_LB IV)) (RAT_ABS (IV_RB IV)))) 
(PUT 'IV_MINABS 'NUMBER-OF-ARGS 1) 
(DE IV_MINABS (IV)
    (COND ((IV_CONTAINSZERO IV) (RAT_0))
          (T (RAT_MIN (RAT_ABS (IV_LB IV)) (RAT_ABS (IV_RB IV)))))) 
(PUT 'IV_MINUS 'NUMBER-OF-ARGS 2) 
(DE IV_MINUS (IV1 IV2)
    (NCONC
     (COND
      ((RAT_LESS (IV_LB IV1) (IV_LB IV2))
       (LIST (IV_MK (IV_LB IV1) (RAT_MIN (IV_LB IV2) (IV_RB IV1))))))
     (COND
      ((RAT_LESS (IV_RB IV2) (IV_RB IV1))
       (LIST (IV_MK (RAT_MAX (IV_RB IV2) (IV_LB IV1)) (IV_RB IV1))))))) 
(PUT 'IV_MINUSLIST 'NUMBER-OF-ARGS 2) 
(DE IV_MINUSLIST (IV IVL)
    (COND ((NULL IVL) (LIST IV))
          (T (IV_LISTMINUSLIST (IV_MINUS IV (CAR IVL)) (CDR IVL))))) 
(PUT 'IV_LISTMINUSLIST 'NUMBER-OF-ARGS 2) 
(DE IV_LISTMINUSLIST (IVL1 IVL2)
    (PROG (IV1 FORALL-RESULT FORALL-ENDPTR)
      (SETQ IV1 IVL1)
     STARTOVER
      (COND ((NULL IV1) (RETURN NIL)))
      (SETQ FORALL-RESULT ((LAMBDA (IV1) (IV_MINUSLIST IV1 IVL2)) (CAR IV1)))
      (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
      (SETQ IV1 (CDR IV1))
      (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
     LOOPLABEL
      (COND ((NULL IV1) (RETURN FORALL-RESULT)))
      (RPLACD FORALL-ENDPTR ((LAMBDA (IV1) (IV_MINUSLIST IV1 IVL2)) (CAR IV1)))
      (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
      (SETQ IV1 (CDR IV1))
      (GO LOOPLABEL))) 
(PUT 'SFTO_DGCD 'NUMBER-OF-ARGS 2) 
(DE SFTO_DGCD (F G)
    (PROG (CF)
      (SETQ CF (SFTO_DCONTENTF F))
      (COND ((EQN CF 1) (RETURN CF)))
      (RETURN (SFTO_GCDF CF (SFTO_DCONTENTF G))))) 
(PUT 'SFTO_KEXP 'NUMBER-OF-ARGS 2) 
(DE SFTO_KEXP (X N)
    (PROGN
     (COND (NIL NIL))
     (COND ((EQN N 0) 1) (T (CONS (CONS (CONS X N) 1) NIL))))) 
(PUT 'SFTO_PSREM 'NUMBER-OF-ARGS 4) 
(DE SFTO_PSREM (F G X S)
    (PROG (LCF LCG REDG TMP DEGF DEGG LCGCD)
      (SETQ DEGF 0)
      (SETQ DEGG 0)
      (SETQ LCGCD 0)
      (COND (NIL NIL))
      (COND (NIL NIL))
      (SETQ LCG (CDAR G))
      (SETQ REDG (CDR G))
      (SETQ DEGF (CDAAR F))
      (SETQ DEGG (CDAAR G))
      (PROG ()
       WHILELABEL
        (COND ((NOT (GEQ DEGF DEGG)) (RETURN NIL)))
        (PROGN
         (SETQ LCF (SFTO_LCX F))
         (SETQ LCGCD (SFTO_DGCD LCF LCG))
         (SETQ TMP
                 ((LAMBDA (G314 G315)
                    (COND (*PHYSOP-LOADED (PHYSOP-MULTF G314 G315))
                          (T (POLY-MULTF G314 G315))))
                  (QUOTFX LCF LCGCD) (SFTO_KEXP X (DIFFERENCE DEGF DEGG))))
         (SETQ F
                 (ADDF
                  ((LAMBDA (G316)
                     (COND (*PHYSOP-LOADED (PHYSOP-MULTF G316 (CDR F)))
                           (T (POLY-MULTF G316 (CDR F)))))
                   (QUOTFX LCG LCGCD))
                  (NEGF
                   (COND (*PHYSOP-LOADED (PHYSOP-MULTF TMP REDG))
                         (T (POLY-MULTF TMP REDG))))))
         (COND ((EQN S (MINUS 1)) (SETQ F (NEGF F))))
         (SETQ DEGF (SFTO_VARDEG F X)))
        (GO WHILELABEL))
      (RETURN F))) 
(PUT 'SFTO_PSQUOTREM 'NUMBER-OF-ARGS 3) 
(DE SFTO_PSQUOTREM (F G X)
    (PROG (LCF LCG REDG TMP PSQUOT DEGF DEGG)
      (SETQ DEGF 0)
      (SETQ DEGG 0)
      (COND (NIL NIL))
      (COND (NIL NIL))
      (SETQ LCG (SFTO_LCX G))
      (SETQ REDG (CDR G))
      (SETQ DEGF (SFTO_VARDEG F X))
      (SETQ DEGG (SFTO_VARDEG G X))
      (PROG ()
       WHILELABEL
        (COND ((NOT (GEQ DEGF DEGG)) (RETURN NIL)))
        (PROGN
         (SETQ LCF (SFTO_LCX F))
         (SETQ TMP
                 ((LAMBDA (G319)
                    (COND (*PHYSOP-LOADED (PHYSOP-MULTF LCF G319))
                          (T (POLY-MULTF LCF G319))))
                  (SFTO_KEXP X (DIFFERENCE DEGF DEGG))))
         (SETQ PSQUOT
                 (ADDF
                  ((LAMBDA (G321)
                     (COND (*PHYSOP-LOADED (PHYSOP-MULTF PSQUOT G321))
                           (T (POLY-MULTF PSQUOT G321))))
                   (EXPTF LCG 2))
                  TMP))
         (SETQ F
                 (ADDF
                  (COND (*PHYSOP-LOADED (PHYSOP-MULTF LCG (CDR F)))
                        (T (POLY-MULTF LCG (CDR F))))
                  (NEGF
                   (COND (*PHYSOP-LOADED (PHYSOP-MULTF TMP REDG))
                         (T (POLY-MULTF TMP REDG))))))
         (SETQ F
                 (COND (*PHYSOP-LOADED (PHYSOP-MULTF F LCG))
                       (T (POLY-MULTF F LCG))))
         (SETQ DEGF (SFTO_VARDEG F X)))
        (GO WHILELABEL))
      (RETURN (CONS PSQUOT F)))) 
(PUT 'CTX_NEW 'NUMBER-OF-ARGS 0) 
(DE CTX_NEW NIL (LIST 'CTX NIL)) 
(PUT 'CTX_FROMIAL 'NUMBER-OF-ARGS 1) 
(DE CTX_FROMIAL (IAL) (LIST 'CTX (SORT IAL (FUNCTION ORDOPCAR)))) 
(PUT 'CTX_IAL 'NUMBER-OF-ARGS 1) 
(DE CTX_IAL (C) (CADR C)) 
(PUT 'CTX_IDL 'NUMBER-OF-ARGS 1) 
(DE CTX_IDL (C)
    (PROG (IA FORALL-RESULT FORALL-ENDPTR)
      (SETQ IA (CTX_IAL C))
      (COND ((NULL IA) (RETURN NIL)))
      (SETQ FORALL-RESULT
              (SETQ FORALL-ENDPTR
                      (CONS ((LAMBDA (IA) (CAR IA)) (CAR IA)) NIL)))
     LOOPLABEL
      (SETQ IA (CDR IA))
      (COND ((NULL IA) (RETURN FORALL-RESULT)))
      (RPLACD FORALL-ENDPTR (CONS ((LAMBDA (IA) (CAR IA)) (CAR IA)) NIL))
      (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
      (GO LOOPLABEL))) 
(PUT 'CTX_PRINT 'NUMBER-OF-ARGS 1) 
(DE CTX_PRINT (C)
    (PROGN
     (PRIN2T "[")
     (PROG (IA)
       (SETQ IA (CTX_IAL C))
      LAB
       (COND ((NULL IA) (RETURN NIL)))
       ((LAMBDA (IA)
          (PROGN (PRIN2 (CAR IA)) (PRIN2T "->") (ANU_PRINT (CDR IA))))
        (CAR IA))
       (SETQ IA (CDR IA))
       (GO LAB))
     (PRIN2T "]")
     NIL)) 
(PUT 'CTX_GET 'NUMBER-OF-ARGS 2) 
(DE CTX_GET (C X)
    (PROG (IAL RES)
      (SETQ IAL (CTX_IAL C))
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND IAL (NULL RES))) (RETURN NIL)))
        (PROGN
         (COND ((EQ (CAAR IAL) X) (SETQ RES (CDAR IAL))))
         (SETQ IAL (CDR IAL)))
        (GO WHILELABEL))
      (RETURN RES))) 
(PUT 'CTX_ADD 'NUMBER-OF-ARGS 2) 
(DE CTX_ADD (C IA)
    (PROG (IAL VAR W PREVL)
      (COND (NIL NIL))
      (SETQ IAL (CTX_IAL C))
      (SETQ VAR (CAR IA))
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND IAL (ORDOP (CAAR IAL) VAR))) (RETURN NIL)))
        (PROGN
         (SETQ W (PROG1 (CAR IAL) (SETQ IAL (CDR IAL))))
         (SETQ PREVL (CONS W PREVL)))
        (GO WHILELABEL))
      (RETURN (LIST 'CTX (APPEND (REVERSE PREVL) (CONS IA IAL)))))) 
(PUT 'CTX_REMOVE 'NUMBER-OF-ARGS 2) 
(DE CTX_REMOVE (C X)
    (LIST 'CTX
          (PROG (E FORALL-RESULT FORALL-ENDPTR)
            (SETQ E (CTX_IAL C))
           STARTOVER
            (COND ((NULL E) (RETURN NIL)))
            (SETQ FORALL-RESULT
                    ((LAMBDA (E) (COND ((NOT (EQCAR E X)) (LIST E)))) (CAR E)))
            (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
            (SETQ E (CDR E))
            (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
           LOOPLABEL
            (COND ((NULL E) (RETURN FORALL-RESULT)))
            (RPLACD FORALL-ENDPTR
                    ((LAMBDA (E) (COND ((NOT (EQCAR E X)) (LIST E)))) (CAR E)))
            (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
            (SETQ E (CDR E))
            (GO LOOPLABEL)))) 
(PUT 'CTX_FILTER 'NUMBER-OF-ARGS 2) 
(DE CTX_FILTER (VARL C)
    (LIST 'CTX
          (PROG (E FORALL-RESULT FORALL-ENDPTR)
            (SETQ E (CTX_IAL C))
           STARTOVER
            (COND ((NULL E) (RETURN NIL)))
            (SETQ FORALL-RESULT
                    ((LAMBDA (E) (COND ((MEMQ (CAR E) VARL) (LIST E))))
                     (CAR E)))
            (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
            (SETQ E (CDR E))
            (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
           LOOPLABEL
            (COND ((NULL E) (RETURN FORALL-RESULT)))
            (RPLACD FORALL-ENDPTR
                    ((LAMBDA (E) (COND ((MEMQ (CAR E) VARL) (LIST E))))
                     (CAR E)))
            (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
            (SETQ E (CDR E))
            (GO LOOPLABEL)))) 
(PUT 'CTX_UNION 'NUMBER-OF-ARGS 2) 
(DE CTX_UNION (C1 C2)
    (PROG (IAL1 IAL2 W)
      (SETQ IAL1
              (PROG (PR FORALL-RESULT FORALL-ENDPTR)
                (SETQ PR (CTX_IAL C1))
                (COND ((NULL PR) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS
                                 ((LAMBDA (PR) (CONS (CAR PR) (CDR PR)))
                                  (CAR PR))
                                 NIL)))
               LOOPLABEL
                (SETQ PR (CDR PR))
                (COND ((NULL PR) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        (CONS ((LAMBDA (PR) (CONS (CAR PR) (CDR PR))) (CAR PR))
                              NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (SETQ IAL2
              (PROG (PR FORALL-RESULT FORALL-ENDPTR)
                (SETQ PR (CTX_IAL C2))
                (COND ((NULL PR) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS
                                 ((LAMBDA (PR) (CONS (CAR PR) (CDR PR)))
                                  (CAR PR))
                                 NIL)))
               LOOPLABEL
                (SETQ PR (CDR PR))
                (COND ((NULL PR) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        (CONS ((LAMBDA (PR) (CONS (CAR PR) (CDR PR))) (CAR PR))
                              NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (SETQ W (LTO_ALMERGE (LIST IAL1 IAL2) (FUNCTION ARG1OF2)))
      (RETURN (LIST 'CTX (SORT W (FUNCTION ORDOPCAR)))))) 
(PUT 'AEX_MK 'NUMBER-OF-ARGS 2) 
(DE AEX_MK (RP C) (LIST 'AEX RP C)) 
(PUT 'AEX_FROMRAT 'NUMBER-OF-ARGS 1) 
(DE AEX_FROMRAT (R) (LIST 'AEX R (CTX_NEW))) 
(PUT 'AEX_FROMRP 'NUMBER-OF-ARGS 1) 
(DE AEX_FROMRP (RP) (LIST 'AEX RP (CTX_NEW))) 
(PUT 'AEX_FROMSF 'NUMBER-OF-ARGS 1) 
(DE AEX_FROMSF (F) (LIST 'AEX (CONS F 1) (CTX_NEW))) 
(PUT 'AEX_0 'NUMBER-OF-ARGS 0) 
(DE AEX_0 NIL (LIST 'AEX (CONS NIL 1) (CTX_NEW))) 
(PUT 'AEX_1 'NUMBER-OF-ARGS 0) 
(DE AEX_1 NIL (LIST 'AEX (CONS 1 1) (CTX_NEW))) 
(PUT 'AEX_MKLIN 'NUMBER-OF-ARGS 2) 
(DE AEX_MKLIN (X BA)
    (AEX_FROMSF
     (ADDF
      ((LAMBDA (G322)
         (COND (*PHYSOP-LOADED (PHYSOP-MULTF G322 (CDR BA)))
               (T (POLY-MULTF G322 (CDR BA)))))
       (LIST (CONS (CONS X 1) 1)))
      (NEGF (CAR BA))))) 
(PUT 'AEX_EX 'NUMBER-OF-ARGS 1) 
(DE AEX_EX (AE) (NTH AE 2)) 
(PUT 'AEX_CTX 'NUMBER-OF-ARGS 1) 
(DE AEX_CTX (AE) (NTH AE 3)) 
(PUT 'AEX_VARL 'NUMBER-OF-ARGS 1) 
(DE AEX_VARL (AE) (KERNELS (CAR (AEX_EX AE)))) 
(PUT 'AEX_FVARL 'NUMBER-OF-ARGS 1) 
(DE AEX_FVARL (AE) (LTO_SETMINUS (AEX_VARL AE) (CTX_IDL (AEX_CTX AE)))) 
(PUT 'AEX_BVARL 'NUMBER-OF-ARGS 1) 
(DE AEX_BVARL (AE) (CTX_IDL (AEX_CTX AE))) 
(PUT 'AEX_BIND 'NUMBER-OF-ARGS 3) 
(DE AEX_BIND (AE X A)
    (PROG (CTX FVARL R OO RES NCTX NX RP)
      (SETQ CTX (AEX_CTX AE))
      (COND ((CTX_GET CTX X) (RETURN AE)))
      (SETQ FVARL (AEX_FVARL AE))
      (COND ((NOT (MEMQ X FVARL)) (RETURN AE)))
      (SETQ R (ANU_RATP A))
      (COND
       (R
        (PROGN
         (SETQ OO (UPDKORDER X))
         (SETQ RES (AEX_SUBRAT (AEX_REORDEREX AE) X R))
         (SETKORDER OO)
         (RETURN RES))))
      (COND
       ((EQ X (LTO_MAXKL FVARL))
        (PROGN
         (SETQ NCTX (CTX_ADD (AEX_CTX AE) (CONS X (ANU_RENAME A X))))
         (RETURN (AEX_MK (AEX_EX AE) NCTX)))))
      (SETQ NX (OFSF_MKBIGID))
      (SETQ NCTX (CTX_ADD (AEX_CTX AE) (CONS NX (ANU_RENAME A NX))))
      (SETQ RP (AEX_EX AE))
      (RETURN
       (AEX_MK
        (MULTSQ (CONS (SFTO_RENAMEF (CAR RP) X NX) 1)
                (INVSQ (CONS (CDR RP) 1)))
        NCTX)))) 
(PUT 'AEX_UNBIND 'NUMBER-OF-ARGS 2) 
(DE AEX_UNBIND (AE X) (AEX_MK (AEX_EX AE) (CTX_REMOVE (AEX_CTX AE) X))) 
(PUT 'AEX_REORDEREX 'NUMBER-OF-ARGS 1) 
(DE AEX_REORDEREX (AE)
    (PROG (RP)
      (SETQ RP (AEX_EX AE))
      (RETURN
       (AEX_MK (CONS (REORDER (CAR RP)) (CDR RP))
        (CTX_FROMIAL (CTX_IAL (AEX_CTX AE))))))) 
(PUT 'AEX_REORDER 'NUMBER-OF-ARGS 1) 
(DE AEX_REORDER (AE)
    (PROG (RP RES)
      (SETQ RP (AEX_EX AE))
      (SETQ RP (CONS (REORDER (CAR RP)) (CDR RP)))
      (SETQ RES (AEX_FROMRP RP))
      (PROG (PR)
        (SETQ PR (CTX_IAL (AEX_CTX AE)))
       LAB
        (COND ((NULL PR) (RETURN NIL)))
        ((LAMBDA (PR)
           (SETQ RES (AEX_BIND RES (CAR PR) (ANU_REORDER (CDR PR)))))
         (CAR PR))
        (SETQ PR (CDR PR))
        (GO LAB))
      (RETURN RES))) 
(PUT 'AEX_PRINT 'NUMBER-OF-ARGS 1) 
(DE AEX_PRINT (AE)
    (PROGN
     (IOTO_PRIN2T (IOTO_FORM2STR (PREPSQ (AEX_EX AE))))
     (COND
      ((CTX_IAL (AEX_CTX AE))
       (PROGN (PRIN2T ", where") (CTX_PRINT (AEX_CTX AE))))))) 
(PUT 'AEX_MVARTEST 'NUMBER-OF-ARGS 2) 
(DE AEX_MVARTEST (AE X) (SFTO_MVARTEST (CAR (AEX_EX AE)) X)) 
(PUT 'AEX_NULLP 'NUMBER-OF-ARGS 1) 
(DE AEX_NULLP (AE)
    (PROG (TMP)
      (SETQ TMP (AEX_MKLCNT AE))
      (COND ((AEX_FVARL TMP) (RETURN NIL)))
      (COND ((EQN (AEX_SGN TMP) 0) (RETURN T)))
      (RETURN NIL))) 
(PUT 'AEX_SIMPLENULLP 'NUMBER-OF-ARGS 1) 
(DE AEX_SIMPLENULLP (AE) (NULL (CAR (AEX_EX AE)))) 
(PUT 'AEX_SIMPLENUMBERP 'NUMBER-OF-ARGS 1) 
(DE AEX_SIMPLENUMBERP (AE) (NULL (AEX_FVARL AE))) 
(PUT 'AEX_SIMPLERATP 'NUMBER-OF-ARGS 1) 
(DE AEX_SIMPLERATP (AE)
    ((LAMBDA (Q)
       (OR (AND (NUMBERP (CAR Q)) (NOT (EQN (CAR Q) 0))) (NULL (CAR Q))))
     (AEX_EX AE))) 
(PUT 'AEX_MVAR 'NUMBER-OF-ARGS 1) 
(DE AEX_MVAR (AE) (PROGN (COND (NIL NIL)) (SFTO_MVARX (CAR (AEX_EX AE))))) 
(PUT 'AEX_DEG 'NUMBER-OF-ARGS 2) 
(DE AEX_DEG (AE X) (SFTO_VARDEG (CAR (AEX_EX AE)) X)) 
(PUT 'AEX_LC 'NUMBER-OF-ARGS 2) 
(DE AEX_LC (AE X)
    (PROG (Q NEWQ)
      (COND
       ((AEX_MVARTEST AE X)
        (PROGN
         (SETQ Q (AEX_EX AE))
         (SETQ NEWQ
                 (MULTSQ (CONS (SFTO_LCX (CAR Q)) 1) (INVSQ (CONS (CDR Q) 1))))
         (RETURN
          (AEX_MK NEWQ (CTX_FILTER (KERNELS (CAR NEWQ)) (AEX_CTX AE)))))))
      (RETURN AE))) 
(PUT 'AEX_RED 'NUMBER-OF-ARGS 2) 
(DE AEX_RED (AE X)
    (PROG (Q NEWQ)
      (COND
       ((AEX_MVARTEST AE X)
        (PROGN
         (SETQ Q (AEX_EX AE))
         (SETQ NEWQ
                 (MULTSQ (CONS (SFTO_REDX (CAR Q)) 1)
                         (INVSQ (CONS (CDR Q) 1))))
         (RETURN
          (AEX_MK NEWQ (CTX_FILTER (KERNELS (CAR NEWQ)) (AEX_CTX AE)))))))
      (RETURN (AEX_0)))) 
(PUT 'AEX_NEG 'NUMBER-OF-ARGS 1) 
(DE AEX_NEG (AE) (AEX_MK (NEGSQ (AEX_EX AE)) (AEX_CTX AE))) 
(PUT 'AEX_ADDRAT 'NUMBER-OF-ARGS 2) 
(DE AEX_ADDRAT (AE R) (AEX_MK (ADDSQ (AEX_EX AE) R) (AEX_CTX AE))) 
(PUT 'AEX_ADD 'NUMBER-OF-ARGS 2) 
(DE AEX_ADD (AE1 AE2)
    (PROG (Q)
      (SETQ Q (ADDSQ (AEX_EX AE1) (AEX_EX AE2)))
      (RETURN
       (AEX_MK Q
        (CTX_FILTER (KERNELS (CAR Q))
         (CTX_UNION (AEX_CTX AE1) (AEX_CTX AE2))))))) 
(PUT 'AEX_MINUS 'NUMBER-OF-ARGS 2) 
(DE AEX_MINUS (AE1 AE2)
    (PROG (Q)
      (SETQ Q (ADDSQ (AEX_EX AE1) (NEGSQ (AEX_EX AE2))))
      (RETURN
       (AEX_MK Q
        (CTX_FILTER (KERNELS (CAR Q))
         (CTX_UNION (AEX_CTX AE1) (AEX_CTX AE2))))))) 
(PUT 'AEX_MULT 'NUMBER-OF-ARGS 2) 
(DE AEX_MULT (AE1 AE2)
    (COND ((OR (AEX_SIMPLENULLP AE1) (AEX_SIMPLENULLP AE2)) (AEX_0))
          (T
           (AEX_MK (MULTSQ (AEX_EX AE1) (AEX_EX AE2))
            (CTX_UNION (AEX_CTX AE1) (AEX_CTX AE2)))))) 
(PUT 'AEX_MULTL 'NUMBER-OF-ARGS 1) 
(DE AEX_MULTL (AEL)
    (COND ((NULL AEL) (AEX_1)) (T (AEX_MULT (CAR AEL) (AEX_MULTL (CDR AEL)))))) 
(PUT 'AEX_MULTRAT 'NUMBER-OF-ARGS 2) 
(DE AEX_MULTRAT (AE R) (AEX_MK (MULTSQ (AEX_EX AE) R) (AEX_CTX AE))) 
(PUT 'AEX_POWER 'NUMBER-OF-ARGS 2) 
(DE AEX_POWER (AE N)
    (PROG (Q)
      (COND (NIL NIL))
      (COND ((EQN N 0) (RETURN (AEX_1))))
      (SETQ Q (AEX_EX AE))
      (RETURN
       (AEX_MK
        (MULTSQ (CONS (EXPTF (CAR Q) N) 1) (INVSQ (CONS (EXPTF (CDR Q) N) 1)))
        (AEX_CTX AE))))) 
(PUT 'AEX_DIFF 'NUMBER-OF-ARGS 2) 
(DE AEX_DIFF (AE X)
    (PROG (Q)
      (SETQ Q (DIFFSQ (AEX_EX AE) X))
      (RETURN (AEX_MK Q (CTX_FILTER (KERNELS (CAR Q)) (AEX_CTX AE)))))) 
(PUT 'AEX_SUBRP 'NUMBER-OF-ARGS 3) 
(DE AEX_SUBRP (AE X RP)
    (PROG (Q NEWQ)
      (SETQ Q (AEX_EX AE))
      (SETQ NEWQ
              (MULTSQ (SFTO_QSUB1 (CAR Q) (LIST (CONS X RP)))
                      (INVSQ (CONS (CDR Q) 1))))
      (RETURN (AEX_MK NEWQ (CTX_FILTER (KERNELS (CAR NEWQ)) (AEX_CTX AE)))))) 
(PUT 'AEX_SUBRAT 'NUMBER-OF-ARGS 3) 
(DE AEX_SUBRAT (AE X R)
    (PROG (Q NEWQ)
      (SETQ Q (AEX_EX AE))
      (SETQ NEWQ (MULTSQ (SFTO_QSUBHOR (CAR Q) X R) (INVSQ (CONS (CDR Q) 1))))
      (RETURN (AEX_MK NEWQ (CTX_FILTER (KERNELS (CAR NEWQ)) (AEX_CTX AE)))))) 
(PUT 'AEX_SUBRAT1 'NUMBER-OF-ARGS 3) 
(DE AEX_SUBRAT1 (AE X R)
    (PROG (Q NEWQ)
      (SETQ Q (AEX_EX AE))
      (SETQ NEWQ (SFTO_QSUBHOR1 (CAR Q) X R))
      (RETURN (AEX_MK NEWQ (CTX_FILTER (KERNELS (CAR NEWQ)) (AEX_CTX AE)))))) 
(PUT 'AEX_PP 'NUMBER-OF-ARGS 1) 
(DE AEX_PP (AE)
    (AEX_MK (CONS (SFTO_DPRPARTKSF (CAR (AEX_EX AE))) 1) (AEX_CTX AE))) 
(PUT 'AEX_XTOTHEN 'NUMBER-OF-ARGS 2) 
(DE AEX_XTOTHEN (X N) (AEX_MK (CONS (SFTO_KEXP X N) 1) (CTX_NEW))) 
(PUT 'AEX_MKLCNT 'NUMBER-OF-ARGS 1) 
(DE AEX_MKLCNT (AE)
    (PROG (IDL)
      (COND
       ((OR (AEX_SIMPLERATP AE) (NULL (CTX_IDL (AEX_CTX AE)))) (RETURN AE)))
      (SETQ IDL (AEX_FVARL AE))
      (COND
       (IDL
        (PROGN
         (COND (NIL NIL))
         (COND
          ((AEX_NULLP (AEX_LC AE (CAR IDL)))
           (RETURN (AEX_MKLCNT (AEX_RED AE (CAR IDL))))))
         (RETURN AE))))
      (COND ((EQN (AEX_SGN AE) 0) (RETURN (AEX_0))))
      (RETURN AE))) 
(PUT 'AEX_REDUCE 'NUMBER-OF-ARGS 1) 
(DE AEX_REDUCE (AE)
    (PROG (X RLC RRED ALPHA TMP)
      (COND ((NULL (AEX_BVARL AE)) (RETURN AE)))
      (COND
       ((AEX_FVARL AE)
        (PROGN
         (SETQ X (AEX_MVAR AE))
         (SETQ RLC (AEX_REDUCE (AEX_LC AE X)))
         (SETQ RRED (AEX_REDUCE (AEX_RED AE X)))
         (RETURN
          (AEX_ADD (AEX_MULT RLC (AEX_XTOTHEN X (AEX_DEG AE X))) RRED)))))
      (SETQ X (AEX_MVAR AE))
      (SETQ ALPHA (CTX_GET (AEX_CTX AE) X))
      (SETQ TMP (AEX_REDUCE (AEX_UNBIND AE X)))
      (COND
       ((GEQ (AEX_DEG TMP X) (AEX_DEG (ANU_DP ALPHA) X))
        (SETQ TMP (AEX_REM TMP (ANU_DP ALPHA) X))))
      (SETQ TMP (AEX_BIND TMP X ALPHA))
      (COND (NIL NIL))
      (RETURN TMP))) 
(PUT 'AEX_PSQUOTREM 'NUMBER-OF-ARGS 3) 
(DE AEX_PSQUOTREM (F G X)
    (PROG (FF GF PSQ PSR)
      (COND (NIL NIL))
      (COND ((NULL (AEX_FVARL G)) (RETURN (CONS F (AEX_0)))))
      (COND (NIL NIL))
      (COND (NIL NIL))
      (SETQ FF (SFTO_DPRPARTKSF (CAR (AEX_EX F))))
      (SETQ GF (SFTO_DPRPARTKSF (CAR (AEX_EX G))))
      (PROG (G324)
        (SETQ G324 (SFTO_PSQUOTREM FF GF X))
        (SETQ PSQ (CAR G324))
        (SETQ PSR (CDR G324))
        (RETURN G324))
      (SETQ PSQ (SFTO_DPRPARTKSF PSQ))
      (SETQ PSR (SFTO_DPRPARTKSF PSR))
      (RETURN
       (CONS
        (AEX_MKLCNT
         (AEX_MK (CONS PSQ 1)
          (CTX_FILTER (KERNELS PSQ) (CTX_UNION (AEX_CTX F) (AEX_CTX G)))))
        (AEX_MKLCNT
         (AEX_MK (CONS PSR 1)
          (CTX_FILTER (KERNELS PSR) (CTX_UNION (AEX_CTX F) (AEX_CTX G))))))))) 
(PUT 'AEX_PSREM 'NUMBER-OF-ARGS 3) 
(DE AEX_PSREM (F G X)
    (PROG (FF GF LCSGN PSR)
      (COND (NIL NIL))
      (COND ((NULL (AEX_FVARL G)) (RETURN (AEX_0))))
      (SETQ FF (CAR (AEX_EX F)))
      (SETQ GF (CAR (AEX_EX G)))
      (SETQ LCSGN (AEX_SGN (AEX_LC G X)))
      (COND (NIL NIL))
      (SETQ PSR (SFTO_PSREM FF GF X LCSGN))
      (RETURN
       (AEX_MKLCNT
        (AEX_MK (CONS PSR 1)
         (CTX_FILTER (KERNELS PSR) (CTX_UNION (AEX_CTX F) (AEX_CTX G)))))))) 
(PUT 'AEX_PSREMSEQ 'NUMBER-OF-ARGS 3) 
(DE AEX_PSREMSEQ (F G X)
    (PROG (REM RES)
      (COND (NIL NIL))
      (SETQ F (AEX_DIVPOSCNT (AEX_MKLCNT F) X))
      (SETQ G (AEX_DIVPOSCNT (AEX_MKLCNT G) X))
      (SETQ RES (LIST G F))
      (PROG ()
       WHILELABEL
        (COND ((NOT (GREATERP (AEX_DEG G X) 0)) (RETURN NIL)))
        (PROGN
         (SETQ REM (AEX_PSREM F G X))
         (SETQ F G)
         (SETQ G (AEX_NEG REM))
         (COND
          ((NOT (AEX_SIMPLENULLP G))
           (PROGN (SETQ G (AEX_DIVPOSCNT G X)) (SETQ RES (CONS G RES))))))
        (GO WHILELABEL))
      (RETURN (REVERSIP RES)))) 
(PUT 'AEX_DIVPOSCNT 'NUMBER-OF-ARGS 2) 
(DE AEX_DIVPOSCNT (AE X)
    (PROG (F CT Q RES SGN)
      (SETQ SGN 0)
      (SETQ F (CAR (AEX_EX AE)))
      (SETQ CT (SFTO_UCONTENTF F))
      (SETQ Q (QUOTFX F CT))
      (SETQ SGN
              (AEX_SGN
               (AEX_MK (CONS CT 1) (CTX_FILTER (KERNELS CT) (AEX_CTX AE)))))
      (COND (NIL NIL))
      (SETQ RES (AEX_MK (CONS Q 1) (CTX_FILTER (KERNELS Q) (AEX_CTX AE))))
      (COND ((EQN SGN 1) (RETURN RES)))
      (RETURN (AEX_NEG RES)))) 
(PUT 'AEX_STDSTURMCHAIN 'NUMBER-OF-ARGS 2) 
(DE AEX_STDSTURMCHAIN (F X)
    (PROGN (COND (NIL NIL)) (AEX_STURMCHAIN F (AEX_DIFF F X) X))) 
(PUT 'AEX_STURMCHAIN 'NUMBER-OF-ARGS 3) 
(DE AEX_STURMCHAIN (F G X) (AEX_PSREMSEQ F G X)) 
(PUT 'AEX_STCHSGNCH 'NUMBER-OF-ARGS 3) 
(DE AEX_STCHSGNCH (SC X R)
    (COND
     ((EQ R 'INFTY)
      (LTO_SGNCHG
       (PROG (E FORALL-RESULT FORALL-ENDPTR)
         (SETQ E SC)
         (COND ((NULL E) (RETURN NIL)))
         (SETQ FORALL-RESULT
                 (SETQ FORALL-ENDPTR
                         (CONS ((LAMBDA (E) (AEX_SGNATINFTY E X)) (CAR E))
                               NIL)))
        LOOPLABEL
         (SETQ E (CDR E))
         (COND ((NULL E) (RETURN FORALL-RESULT)))
         (RPLACD FORALL-ENDPTR
                 (CONS ((LAMBDA (E) (AEX_SGNATINFTY E X)) (CAR E)) NIL))
         (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
         (GO LOOPLABEL))))
     ((EQ R 'MINFTY)
      (LTO_SGNCHG
       (PROG (E FORALL-RESULT FORALL-ENDPTR)
         (SETQ E SC)
         (COND ((NULL E) (RETURN NIL)))
         (SETQ FORALL-RESULT
                 (SETQ FORALL-ENDPTR
                         (CONS ((LAMBDA (E) (AEX_SGNATMINFTY E X)) (CAR E))
                               NIL)))
        LOOPLABEL
         (SETQ E (CDR E))
         (COND ((NULL E) (RETURN FORALL-RESULT)))
         (RPLACD FORALL-ENDPTR
                 (CONS ((LAMBDA (E) (AEX_SGNATMINFTY E X)) (CAR E)) NIL))
         (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
         (GO LOOPLABEL))))
     (T (AEX_STCHSGNCH1 SC X R)))) 
(PUT 'AEX_STCHSGNCH1 'NUMBER-OF-ARGS 3) 
(DE AEX_STCHSGNCH1 (SC X R)
    (LTO_SGNCHG
     (PROG (E FORALL-RESULT FORALL-ENDPTR)
       (SETQ E SC)
       (COND ((NULL E) (RETURN NIL)))
       (SETQ FORALL-RESULT
               (SETQ FORALL-ENDPTR
                       (CONS
                        ((LAMBDA (E) (AEX_SGN (AEX_SUBRAT1 E X R))) (CAR E))
                        NIL)))
      LOOPLABEL
       (SETQ E (CDR E))
       (COND ((NULL E) (RETURN FORALL-RESULT)))
       (RPLACD FORALL-ENDPTR
               (CONS ((LAMBDA (E) (AEX_SGN (AEX_SUBRAT1 E X R))) (CAR E)) NIL))
       (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
       (GO LOOPLABEL)))) 
(PUT 'AEX_SGNATINFTY 'NUMBER-OF-ARGS 2) 
(DE AEX_SGNATINFTY (AE X)
    (PROG (FVARL)
      (COND ((AEX_SIMPLENULLP AE) (RETURN 0)))
      (SETQ FVARL (AEX_FVARL AE))
      (COND ((NULL FVARL) (RETURN (AEX_SGN AE))))
      (COND (NIL NIL))
      (COND (NIL NIL))
      (RETURN (AEX_SGN (AEX_LC AE X))))) 
(PUT 'AEX_SGNATMINFTY 'NUMBER-OF-ARGS 2) 
(DE AEX_SGNATMINFTY (AE X)
    (PROG (FVARL)
      (COND ((AEX_SIMPLENULLP AE) (RETURN 0)))
      (SETQ FVARL (AEX_FVARL AE))
      (COND ((NULL FVARL) (RETURN (AEX_SGN AE))))
      (COND (NIL NIL))
      (COND (NIL NIL))
      (COND ((EVENP (AEX_DEG AE X)) (RETURN (AEX_SGN (AEX_LC AE X)))))
      (RETURN (TIMES (MINUS 1) (AEX_SGN (AEX_LC AE X)))))) 
(PUT 'AEX_SGN 'NUMBER-OF-ARGS 1) 
(DE AEX_SGN (AE)
    (PROG (CON X ALPHA G F SC)
      (COND (NIL NIL))
      (COND ((AEX_SIMPLERATP AE) (RETURN (RAT_SGN (AEX_EX AE)))))
      (COND
       (*RLANUEXSGNOPT
        (PROGN
         (SETQ CON (AEX_CONTAINMENT AE))
         (COND ((RAT_LESS (RAT_0) (IV_LB CON)) (RETURN 1)))
         (COND ((RAT_LESS (IV_RB CON) (RAT_0)) (RETURN (MINUS 1)))))))
      (SETQ X (AEX_MVAR AE))
      (SETQ ALPHA (CTX_GET (AEX_CTX AE) X))
      (SETQ G (AEX_MKLCNT (AEX_REDUCE (AEX_UNBIND AE X))))
      (COND ((AEX_SIMPLERATP G) (RETURN (RAT_SGN (AEX_EX G)))))
      (COND
       ((AND *RLVERBOSE *RLANUEXVERBOSE)
        (COND ((LEQ (AEX_DEG G X) 0) (PRIN2 "[aex_sgn:num!]")))))
      (SETQ F (ANU_DP ALPHA))
      (SETQ SC (AEX_STURMCHAIN F (AEX_MULT (AEX_DIFF F X) G) X))
      (RETURN
       (DIFFERENCE (AEX_STCHSGNCH1 SC X (IV_LB (ANU_IV ALPHA)))
                   (AEX_STCHSGNCH1 SC X (IV_RB (ANU_IV ALPHA))))))) 
(PUT 'AEX_EVALOP 'NUMBER-OF-ARGS 2) 
(DE AEX_EVALOP (AE OP)
    (PROG (SGN)
      (COND (NIL NIL))
      (SETQ SGN (AEX_SGN AE))
      (COND ((EQN SGN 0) (SETQ SGN NIL)))
      (RETURN (OFSF_EVALATP OP SGN)))) 
(PUT 'AEX_REALTYPE 'NUMBER-OF-ARGS 1) 
(DE AEX_REALTYPE (AE)
    (PROG (X ROOTL SGNL R1 R2 W)
      (COND (NIL NIL))
      (SETQ X (AEX_MVAR AE))
      (SETQ ROOTL (AEX_FINDROOTS AE X))
      (SETQ SGNL (LIST (AEX_SGNATMINFTY AE X)))
      (COND ((NULL ROOTL) (RETURN SGNL)))
      (COND
       ((NULL (CDR ROOTL))
        (PROGN
         (PROGN (SETQ SGNL (CONS 0 SGNL)) 0)
         (PROG (W1)
           (SETQ W1 (AEX_SGNATINFTY AE X))
           (SETQ SGNL (CONS W1 SGNL))
           (RETURN W1))
         (RETURN (REVERSIP SGNL)))))
      (SETQ R1 (PROG1 (CAR ROOTL) (SETQ ROOTL (CDR ROOTL))))
      (PROG ()
       WHILELABEL
        (COND ((NOT ROOTL) (RETURN NIL)))
        (PROGN
         (SETQ R2 (PROG1 (CAR ROOTL) (SETQ ROOTL (CDR ROOTL))))
         (SETQ W (IV_MED (IV_MK (IV_RB (ANU_IV R1)) (IV_LB (ANU_IV R2)))))
         (PROGN (SETQ SGNL (CONS 0 SGNL)) 0)
         (PROG (W1)
           (SETQ W1 (AEX_SGN (AEX_BIND AE X (ANU_FROMRAT X W))))
           (SETQ SGNL (CONS W1 SGNL))
           (RETURN W1))
         (SETQ R1 R2))
        (GO WHILELABEL))
      (PROGN (SETQ SGNL (CONS 0 SGNL)) 0)
      (PROG (W1)
        (SETQ W1 (AEX_SGNATINFTY AE X))
        (SETQ SGNL (CONS W1 SGNL))
        (RETURN W1))
      (RETURN (REVERSIP SGNL)))) 
(PUT 'AEX_QUOTREM 'NUMBER-OF-ARGS 3) 
(DE AEX_QUOTREM (F G X)
    (PROG (QUOT LCG LCGINV LCF TMP REDG DEGF DEGG)
      (SETQ DEGF 0)
      (SETQ DEGG 0)
      (COND (NIL NIL))
      (COND
       ((NULL (AEX_FVARL G)) (RETURN (CONS (AEX_MULT (AEX_INV G) F) (AEX_0)))))
      (COND (NIL NIL))
      (COND (NIL NIL))
      (SETQ QUOT (AEX_0))
      (SETQ DEGF (AEX_DEG F X))
      (SETQ DEGG (AEX_DEG G X))
      (SETQ LCG (AEX_LC G X))
      (SETQ LCGINV (AEX_INV LCG))
      (SETQ REDG (AEX_RED G X))
      (PROG ()
       WHILELABEL
        (COND ((NOT (GEQ DEGF DEGG)) (RETURN NIL)))
        (PROGN
         (SETQ LCF (AEX_LC F X))
         (SETQ TMP
                 (AEX_REDUCE
                  (AEX_MULT (AEX_MULT LCF LCGINV)
                   (AEX_XTOTHEN X (DIFFERENCE DEGF DEGG)))))
         (SETQ F (AEX_MKLCNT (AEX_MINUS (AEX_RED F X) (AEX_MULT TMP REDG))))
         (SETQ QUOT (AEX_ADD QUOT TMP))
         (SETQ DEGF (AEX_DEG F X)))
        (GO WHILELABEL))
      (RETURN (CONS QUOT F)))) 
(PUT 'AEX_QUOT 'NUMBER-OF-ARGS 3) 
(DE AEX_QUOT (F G X) (CAR (AEX_QUOTREM F G X))) 
(PUT 'AEX_REM 'NUMBER-OF-ARGS 3) 
(DE AEX_REM (F G X)
    (PROG (LCG LCGINV REDG LCF TMP DEGF DEGG)
      (SETQ DEGF 0)
      (SETQ DEGG 0)
      (COND (NIL NIL))
      (COND ((NULL (AEX_FVARL G)) (RETURN (AEX_0))))
      (COND (NIL NIL))
      (COND (NIL NIL))
      (SETQ DEGF (AEX_DEG F X))
      (SETQ DEGG (AEX_DEG G X))
      (SETQ LCG (AEX_LC G X))
      (SETQ LCGINV (AEX_INV LCG))
      (SETQ REDG (AEX_RED G X))
      (PROG ()
       WHILELABEL
        (COND ((NOT (GEQ DEGF DEGG)) (RETURN NIL)))
        (PROGN
         (SETQ LCF (AEX_LC F X))
         (SETQ TMP
                 (AEX_REDUCE
                  (AEX_MULT (AEX_MULT LCF LCGINV)
                   (AEX_XTOTHEN X (DIFFERENCE DEGF DEGG)))))
         (SETQ F (AEX_MKLCNT (AEX_MINUS (AEX_RED F X) (AEX_MULT TMP REDG))))
         (SETQ DEGF (AEX_DEG F X)))
        (GO WHILELABEL))
      (RETURN F))) 
(PUT 'AEX_GCD 'NUMBER-OF-ARGS 3) 
(DE AEX_GCD (F G X)
    (PROG (TMP)
      (PROG ()
       WHILELABEL
        (COND ((NOT (NOT (AEX_SIMPLENULLP G))) (RETURN NIL)))
        (PROGN (SETQ TMP (AEX_REM F G X)) (SETQ F G) (SETQ G TMP))
        (GO WHILELABEL))
      (COND (NIL NIL))
      (COND ((EQN (AEX_DEG F X) 0) (RETURN (AEX_1))))
      (COND
       (*RLANUEXGCDNORMALIZE (RETURN (AEX_MULT F (AEX_INV (AEX_LC F X))))))
      (RETURN F))) 
(PUT 'AEX_GCDEXT 'NUMBER-OF-ARGS 3) 
(DE AEX_GCDEXT (F G X)
    (PROG (FF FG GF GG QUOT REM TFF TFG LCINV)
      (SETQ FF (AEX_1))
      (SETQ FG (AEX_0))
      (SETQ GF (AEX_0))
      (SETQ GG (AEX_1))
      (PROG ()
       WHILELABEL
        (COND ((NOT (NOT (AEX_SIMPLENULLP G))) (RETURN NIL)))
        (PROGN
         (PROG (G325)
           (SETQ G325 (AEX_QUOTREM F G X))
           (SETQ QUOT (CAR G325))
           (SETQ REM (CDR G325))
           (RETURN G325))
         (SETQ F G)
         (SETQ G REM)
         (SETQ TFF FF)
         (SETQ TFG FG)
         (SETQ FF GF)
         (SETQ FG GG)
         (SETQ GF (AEX_MINUS TFF (AEX_MULT QUOT GF)))
         (SETQ GG (AEX_MINUS TFG (AEX_MULT QUOT GG))))
        (GO WHILELABEL))
      (COND (NIL NIL))
      (COND
       (*RLANUEXGCDNORMALIZE
        (PROGN
         (SETQ LCINV (AEX_INV (AEX_LC F X)))
         (SETQ F (AEX_MULT F LCINV))
         (SETQ FF (AEX_MULT FF LCINV))
         (SETQ FG (AEX_MULT FG LCINV)))))
      (RETURN (LIST F FF FG)))) 
(PUT 'AEX_SQFREE 'NUMBER-OF-ARGS 2) 
(DE AEX_SQFREE (F X)
    (COND ((LESSP (AEX_DEG F X) 2) F)
          (T (AEX_QUOT F (AEX_GCD F (AEX_DIFF F X) X) X)))) 
(PUT 'AEX_INV 'NUMBER-OF-ARGS 1) 
(DE AEX_INV (AE)
    (PROG (X ALPHA G F D U V)
      (COND
       ((AEX_SIMPLERATP AE)
        (RETURN (AEX_FROMRP (MULTSQ (CONS 1 1) (INVSQ (AEX_EX AE)))))))
      (SETQ X (AEX_MVAR AE))
      (SETQ ALPHA (CTX_GET (AEX_CTX AE) X))
      (SETQ G (AEX_UNBIND AE X))
      (SETQ F (ANU_DP ALPHA))
      (PROG (G326 G327)
        (SETQ G326 (AEX_GCDEXT F G X))
        (SETQ G327 G326)
        (SETQ D (CAR G326))
        (SETQ G326 (CDR G326))
        (SETQ U (CAR G326))
        (SETQ G326 (CDR G326))
        (SETQ V (CAR G326))
        (SETQ G326 (CDR G326))
        (RETURN G327))
      (COND
       ((AEX_SIMPLERATP D)
        (PROGN (RETURN (AEX_BIND (AEX_MULT (AEX_INV D) V) X ALPHA)))))
      (SETQ F (AEX_QUOT F D X))
      (PROG (G328 G329)
        (SETQ G328 (AEX_GCDEXT F G X))
        (SETQ G329 G328)
        (SETQ D (CAR G328))
        (SETQ G328 (CDR G328))
        (SETQ U (CAR G328))
        (SETQ G328 (CDR G328))
        (SETQ V (CAR G328))
        (SETQ G328 (CDR G328))
        (RETURN G329))
      (COND
       (*RLANUEXGCDNORMALIZE
        (RETURN (AEX_BIND (AEX_MULT (AEX_INV D) V) X ALPHA))))
      (RETURN (AEX_BIND (AEX_MULT D V) X ALPHA)))) 
(PUT 'AEX_COEFL 'NUMBER-OF-ARGS 2) 
(DE AEX_COEFL (AE X)
    (COND
     ((AEX_MVARTEST AE X) (CONS (AEX_LC AE X) (AEX_COEFL (AEX_RED AE X) X)))
     (T (LIST AE)))) 
(PUT 'AEX_COEFDEGL 'NUMBER-OF-ARGS 2) 
(DE AEX_COEFDEGL (AE X)
    (COND
     ((AEX_MVARTEST AE X)
      (CONS (CONS (AEX_LC AE X) (AEX_DEG AE X))
            (AEX_COEFDEGL (AEX_RED AE X) X)))
     (T (LIST (CONS AE 0))))) 
(PUT 'AEX_FROMCOEFDEGL 'NUMBER-OF-ARGS 2) 
(DE AEX_FROMCOEFDEGL (CFDGL X)
    (PROG (AE)
      (SETQ AE (AEX_0))
      (PROG (CD)
        (SETQ CD CFDGL)
       LAB
        (COND ((NULL CD) (RETURN NIL)))
        ((LAMBDA (CD)
           (SETQ AE (AEX_ADD AE (AEX_MULT (CAR CD) (AEX_XTOTHEN X (CDR CD))))))
         (CAR CD))
        (SETQ CD (CDR CD))
        (GO LAB))
      (RETURN AE))) 
(PUT 'AEX_CONTAINMENT 'NUMBER-OF-ARGS 1) 
(DE AEX_CONTAINMENT (AE)
    (PROG (R X ALPHA IVALPHA CFDGL IVL)
      (COND (NIL NIL))
      (COND (NIL NIL))
      (COND
       ((NULL (AEX_BVARL AE))
        (PROGN (SETQ R (AEX_EX AE)) (RETURN (IV_MK R R)))))
      (SETQ X (AEX_MVAR AE))
      (SETQ ALPHA (CTX_GET (AEX_CTX AE) X))
      (SETQ IVALPHA (ANU_IV ALPHA))
      (SETQ CFDGL (AEX_COEFDEGL (AEX_UNBIND AE X) X))
      (SETQ IVL
              (PROG (C FORALL-RESULT FORALL-ENDPTR)
                (SETQ C CFDGL)
                (COND ((NULL C) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS
                                 ((LAMBDA (C)
                                    (IV_MULT (AEX_CONTAINMENT (CAR C))
                                     (IV_TOTHEN IVALPHA (CDR C))))
                                  (CAR C))
                                 NIL)))
               LOOPLABEL
                (SETQ C (CDR C))
                (COND ((NULL C) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        (CONS
                         ((LAMBDA (C)
                            (IV_MULT (AEX_CONTAINMENT (CAR C))
                             (IV_TOTHEN IVALPHA (CDR C))))
                          (CAR C))
                         NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (RETURN (IV_MAPADD IVL)))) 
(PUT 'AEX_DISTINGUISHPOSITIVEFROMZERO 'NUMBER-OF-ARGS 2) 
(DE AEX_DISTINGUISHPOSITIVEFROMZERO (AE IV)
    (PROG (HALF RB)
      (SETQ HALF (RAT_MK 1 2))
      (SETQ RB (RAT_MULT (IV_RB IV) HALF))
      (PROG ()
       WHILELABEL
        (COND
         ((NOT (NOT (EQN (AEX_SGN (AEX_ADDRAT AE (RAT_NEG RB))) 1)))
          (RETURN NIL)))
        (SETQ RB (RAT_MULT RB HALF))
        (GO WHILELABEL))
      (RETURN RB))) 
(PUT 'AEX_DISTINGUISHFROMZERO 'NUMBER-OF-ARGS 2) 
(DE AEX_DISTINGUISHFROMZERO (AE IV)
    (PROG (SGNAE)
      (SETQ SGNAE (AEX_SGN AE))
      (COND ((EQN SGNAE 0) (RETURN (RAT_0))))
      (COND ((EQN SGNAE 1) (RETURN (AEX_DISTINGUISHPOSITIVEFROMZERO AE IV))))
      (RETURN
       (RAT_NEG (AEX_DISTINGUISHPOSITIVEFROMZERO (AEX_NEG AE) (IV_NEG IV)))))) 
(PUT 'AEX_CAUCHYBOUND 'NUMBER-OF-ARGS 2) 
(DE AEX_CAUCHYBOUND (AE X)
    (PROG (CFL LCAE LCAEIV LCEST CFESTL TMP CB1 CB2)
      (COND (NIL NIL))
      (COND (NIL NIL))
      (COND ((LESSP (AEX_DEG AE X) 1) (RETURN (RAT_1))))
      (SETQ CFL (AEX_COEFL AE X))
      (SETQ LCAE (CAR CFL))
      (SETQ LCAEIV (AEX_CONTAINMENT LCAE))
      (COND
       ((IV_CONTAINSZERO LCAEIV)
        (SETQ LCEST (RAT_ABS (AEX_DISTINGUISHFROMZERO LCAE LCAEIV))))
       (T (SETQ LCEST (IV_MINABS LCAEIV))))
      (SETQ CFESTL
              (PROG (C FORALL-RESULT FORALL-ENDPTR)
                (SETQ C (CDR CFL))
                (COND ((NULL C) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS
                                 ((LAMBDA (C) (IV_MAXABS (AEX_CONTAINMENT C)))
                                  (CAR C))
                                 NIL)))
               LOOPLABEL
                (SETQ C (CDR C))
                (COND ((NULL C) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        (CONS
                         ((LAMBDA (C) (IV_MAXABS (AEX_CONTAINMENT C))) (CAR C))
                         NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (SETQ CB1 (RAT_0))
      (SETQ CB2 (RAT_0))
      (PROG (CFEST)
        (SETQ CFEST CFESTL)
       LAB
        (COND ((NULL CFEST) (RETURN NIL)))
        ((LAMBDA (CFEST)
           (PROGN
            (SETQ TMP (RAT_QUOT CFEST LCEST))
            (SETQ CB1 (RAT_ADD CB1 TMP))
            (SETQ CB2 (RAT_MAX CB2 TMP))))
         (CAR CFEST))
        (SETQ CFEST (CDR CFEST))
        (GO LAB))
      (SETQ CB1 (RAT_MAX (RAT_1) CB1))
      (SETQ CB2 (RAT_ADD (RAT_1) CB2))
      (RETURN (RAT_ADD (RAT_1) (RAT_MIN CB1 CB2))))) 
(PUT 'AEX_FINDROOTSOFLIST 'NUMBER-OF-ARGS 2) 
(DE AEX_FINDROOTSOFLIST (AEL X) (AEX_FINDROOTS (AEX_MULTL AEL) X)) 
(PUT 'AEX_FINDROOTS 'NUMBER-OF-ARGS 2) 
(DE AEX_FINDROOTS (AE X)
    (PROG (CB ROOTLIST)
      (COND ((LESSP (AEX_DEG AE X) 1) (RETURN NIL)))
      (SETQ CB (AEX_CAUCHYBOUND AE X))
      (SETQ ROOTLIST
              (AEX_FINDROOTSINIV1 AE X (IV_MK (RAT_NEG CB) CB)
               (AEX_STDSTURMCHAIN AE X)))
      (RETURN ROOTLIST))) 
(PUT 'AEX_FINDROOTSINIV 'NUMBER-OF-ARGS 3) 
(DE AEX_FINDROOTSINIV (AE X IV)
    (AEX_FINDROOTSINIV1 AE X IV (AEX_STDSTURMCHAIN AE X))) 
(PUT 'AEX_FINDROOTSINIV1 'NUMBER-OF-ARGS 4) 
(DE AEX_FINDROOTSINIV1 (AE X IV SC)
    (PROG (LB RB SCLB SCRB M ML MR R RETL)
      (SETQ LB (IV_LB IV))
      (SETQ RB (IV_RB IV))
      (SETQ SCLB (AEX_STCHSGNCH1 SC X LB))
      (COND ((EQN SCLB 0) (RETURN NIL)))
      (SETQ SCRB (AEX_STCHSGNCH1 SC X RB))
      (COND ((EQN (DIFFERENCE SCLB SCRB) 0) (RETURN NIL)))
      (COND ((EQN (DIFFERENCE SCLB SCRB) 1) (RETURN (LIST (ANU_MK AE IV)))))
      (SETQ M (RAT_MULT (RAT_ADD LB RB) (RAT_MK 1 2)))
      (SETQ ML (SETQ MR M))
      (COND
       ((AEX_ATRATNULLP AE X M)
        (PROGN
         (SETQ R
                 (AEX_ISORATROOT AE M (RAT_MULT (RAT_MINUS RB LB) (RAT_MK 1 4))
                  SC X))
         (SETQ ML (RAT_MINUS M R))
         (SETQ MR (RAT_ADD M R)))))
      (SETQ RETL (AEX_FINDROOTSINIV1 AE X (IV_MK MR RB) SC))
      (COND
       ((NOT (RAT_EQ ML MR))
        (SETQ RETL (CONS (ANU_MK AE (IV_MK ML MR)) RETL))))
      (SETQ RETL (APPEND (AEX_FINDROOTSINIV1 AE X (IV_MK LB ML) SC) RETL))
      (RETURN RETL))) 
(PUT 'AEX_ISORATROOT 'NUMBER-OF-ARGS 5) 
(DE AEX_ISORATROOT (AE M R SC X)
    (PROG (MMR MPR)
      (SETQ MMR (RAT_MINUS M R))
      (SETQ MPR (RAT_ADD M R))
      (PROG ()
       WHILELABEL
        (COND
         ((NOT
           (OR (AEX_ATRATNULLP AE X MMR) (AEX_ATRATNULLP AE X MPR)
               (NOT
                (EQN
                 (DIFFERENCE (AEX_STCHSGNCH1 SC X MMR)
                             (AEX_STCHSGNCH1 SC X MPR))
                 1))))
          (RETURN NIL)))
        (PROGN
         (SETQ R (RAT_MULT R (RAT_MK 1 2)))
         (SETQ MMR (RAT_MINUS M R))
         (SETQ MPR (RAT_ADD M R)))
        (GO WHILELABEL))
      (RETURN R))) 
(PUT 'AEX_ATRATNULLP 'NUMBER-OF-ARGS 3) 
(DE AEX_ATRATNULLP (AE X R) (EQN (AEX_SGN (AEX_SUBRAT1 AE X R)) 0)) 
(PUT 'AEX_DELTASTCHSGNCH 'NUMBER-OF-ARGS 3) 
(DE AEX_DELTASTCHSGNCH (SC X IV)
    (PROG (SCLB SCRB)
      (SETQ SCLB 0)
      (SETQ SCRB 0)
      (SETQ SCLB (AEX_STCHSGNCH1 SC X (IV_LB IV)))
      (COND ((EQN SCLB 0) (RETURN 0)))
      (SETQ SCRB (AEX_STCHSGNCH1 SC X (IV_RB IV)))
      (RETURN (DIFFERENCE SCLB SCRB)))) 
(PUT 'IRP 'ASSERT_DYNTYPECHK 'LIST3P) 
(FLAG '(IRP) 'ASSERT_DYNTYPE) 
(PUT 'IRPLIST 'ASSERT_DYNTYPECHK 'LISTP) 
(FLAG '(IRPLIST) 'ASSERT_DYNTYPE) 
(PUT 'IRP_AEX 'NUMBER-OF-ARGS 1) 
(DE IRP_AEX (P) (NTH P 1)) 
(PUT 'IRP_IDATA 'NUMBER-OF-ARGS 1) 
(DE IRP_IDATA (P) (NTH P 2)) 
(PUT 'IRP_TAG 'NUMBER-OF-ARGS 1) 
(DE IRP_TAG (P) (NTH P 3)) 
(PUT 'IRP_MK 'NUMBER-OF-ARGS 3) 
(DE IRP_MK (A D TAG) (LIST A D TAG)) 
(PUT 'IRI_IRPL 'NUMBER-OF-ARGS 1) 
(DE IRI_IRPL (IR) (NTH IR 2)) 
(PUT 'IRI_IVL 'NUMBER-OF-ARGS 1) 
(DE IRI_IVL (IR) (NTH IR 3)) 
(PUT 'IRI_ROOTL 'NUMBER-OF-ARGS 1) 
(DE IRI_ROOTL (IR) (NTH IR 4)) 
(PUT 'IRI_CURIRP 'NUMBER-OF-ARGS 1) 
(DE IRI_CURIRP (IR) (NTH IR 5)) 
(PUT 'IRI_CURIVL 'NUMBER-OF-ARGS 1) 
(DE IRI_CURIVL (IR) (NTH IR 6)) 
(PUT 'IRI_POPIRPL 'NUMBER-OF-ARGS 1) 
(DE IRI_POPIRPL (IR)
    (PROG1 (CAR (NTH IR 2)) (SETCAR (PNTH IR 2) (CDR (NTH IR 2))))) 
(PUT 'IRI_PUSHIVL 'NUMBER-OF-ARGS 2) 
(DE IRI_PUSHIVL (IV IR) (PROGN (SETCAR (PNTH IR 3) (CONS IV (NTH IR 3))) IV)) 
(PUT 'IRI_PUSHROOTL 'NUMBER-OF-ARGS 2) 
(DE IRI_PUSHROOTL (A IR) (PROGN (SETCAR (PNTH IR 4) (CONS A (NTH IR 4))) A)) 
(PUT 'IRI_PUSHCURIVL 'NUMBER-OF-ARGS 2) 
(DE IRI_PUSHCURIVL (IV IR) (PROGN (SETCAR (PNTH IR 6) (CONS IV (NTH IR 6))) IV)) 
(PUT 'IRI_POPCURIVL 'NUMBER-OF-ARGS 1) 
(DE IRI_POPCURIVL (IR)
    (PROG1 (CAR (NTH IR 6)) (SETCAR (PNTH IR 6) (CDR (NTH IR 6))))) 
(PUT 'IRI_SETCURIRP 'NUMBER-OF-ARGS 2) 
(DE IRI_SETCURIRP (IR P) (SETCAR (PNTH IR 5) P)) 
(PUT 'IRI_SETCURIVL 'NUMBER-OF-ARGS 2) 
(DE IRI_SETCURIVL (IR IVL) (SETCAR (PNTH IR 6) IVL)) 
(PUT 'IRI_MK 'NUMBER-OF-ARGS 1) 
(DE IRI_MK (PL) (LIST 'IRI PL NIL NIL NIL NIL)) 
(PUT 'IRI_NEXTROOT 'NUMBER-OF-ARGS 1) 
(DE IRI_NEXTROOT (IR)
    (PROG (ROOTFOUND)
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND (NOT ROOTFOUND) (IRI_PREPARECUR IR))) (RETURN NIL)))
        (SETQ ROOTFOUND (IRI_NEXTROOTIV IR))
        (GO WHILELABEL))
      (COND ((NOT ROOTFOUND) (RETURN NIL)))
      (RETURN (CAR (IRI_ROOTL IR))))) 
(PUT 'IRI_PREPARECUR 'NUMBER-OF-ARGS 1) 
(DE IRI_PREPARECUR (IR)
    (PROG (C P CURIVL)
      (COND ((AND (IRI_CURIVL IR) (IRI_CURIRP IR)) (RETURN T)))
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND (NULL C) (IRI_IRPL IR))) (RETURN NIL)))
        (PROGN
         (SETQ P (IRI_POPIRPL IR))
         (SETQ CURIVL (IV_MINUSLIST (IRP_ROOTSIV P) (IRI_IVL IR)))
         (COND (CURIVL (SETQ C T))))
        (GO WHILELABEL))
      (COND
       (C (PROGN (IRI_SETCURIRP IR P) (IRI_SETCURIVL IR CURIVL) (RETURN T))))
      (RETURN NIL))) 
(PUT 'IRI_NEXTROOTIV 'NUMBER-OF-ARGS 1) 
(DE IRI_NEXTROOTIV (IR)
    (PROG (P AE IV NUMROOTS LB RB M R MPR MMR)
      (COND (NIL NIL))
      (SETQ P (IRI_CURIRP IR))
      (SETQ IV (IRI_POPCURIVL IR))
      (SETQ NUMROOTS (IRP_NUMROOTS P IV))
      (COND ((EQN NUMROOTS 0) (RETURN NIL)))
      (COND ((EQN NUMROOTS 1) (PROGN (IRI_ADDROOT IR P IV) (RETURN T))))
      (SETQ AE (IRP_AEX P))
      (SETQ LB (IV_LB IV))
      (SETQ RB (IV_RB IV))
      (SETQ M (RAT_QUOT (RAT_ADD LB RB) (RAT_MK 2 1)))
      (COND
       ((EQN (AEX_SGN (AEX_SUBRAT1 AE (AEX_MVAR AE) M)) 0)
        (PROGN
         (SETQ R (IRP_ISORATROOT P M (RAT_MINUS (IV_RB IV) M)))
         (SETQ MPR (RAT_ADD M R))
         (SETQ MMR (RAT_MINUS M R))
         (IRI_ADDROOT IR P (IV_MK MMR MPR))
         (IRI_PUSHCURIVL (IV_MK MPR RB) IR)
         (IRI_PUSHCURIVL (IV_MK LB MMR) IR)
         (RETURN T))))
      (IRI_PUSHCURIVL (IV_MK M RB) IR)
      (IRI_PUSHCURIVL (IV_MK LB M) IR)
      (RETURN NIL))) 
(PUT 'IRI_ADDROOT 'NUMBER-OF-ARGS 3) 
(DE IRI_ADDROOT (IR P IV)
    (PROG (ANU)
      (SETQ ANU (IRP_REFINE P IV (IRI_IRPL IR)))
      (IRI_PUSHIVL (ANU_IV ANU) IR)
      (IRI_PUSHROOTL (CONS ANU (IRP_TAG P)) IR))) 
(PUT 'IRI_INIT 'NUMBER-OF-ARGS 2) 
(DE IRI_INIT (TAEL X)
    (PROG (AE TAG SC IRPL D)
      (SETQ D 0)
      (PROG ()
       WHILELABEL
        (COND ((NOT TAEL) (RETURN NIL)))
        (PROGN
         (PROG (G330)
           (SETQ G330 (PROG1 (CAR TAEL) (SETQ TAEL (CDR TAEL))))
           (SETQ AE (CAR G330))
           (SETQ TAG (CDR G330))
           (RETURN G330))
         (COND (NIL NIL))
         (SETQ SC (AEX_STDSTURMCHAIN AE X))
         (SETQ D (AEX_STCHSGNCH SC X 'MINFTY))
         (COND
          ((AND (NOT (EQN D 0))
                (GREATERP (DIFFERENCE D (AEX_STCHSGNCH SC X 'INFTY)) 0))
           (PROG (W1)
             (SETQ W1 (IRP_MK AE SC TAG))
             (SETQ IRPL (CONS W1 IRPL))
             (RETURN W1)))))
        (GO WHILELABEL))
      (RETURN (IRI_MK (REVERSIP IRPL))))) 
(PUT 'IRP_ROOTSIV 'NUMBER-OF-ARGS 1) 
(DE IRP_ROOTSIV (P)
    (PROG (AE B)
      (SETQ AE (IRP_AEX P))
      (SETQ B (AEX_CAUCHYBOUND AE (AEX_MVAR AE)))
      (RETURN (IV_MK (RAT_NEG B) B)))) 
(PUT 'IRP_NUMROOTS 'NUMBER-OF-ARGS 2) 
(DE IRP_NUMROOTS (P IV)
    (PROG (AE SC X SCLB)
      (SETQ SCLB 0)
      (SETQ AE (IRP_AEX P))
      (SETQ SC (IRP_IDATA P))
      (SETQ X (AEX_MVAR AE))
      (SETQ SCLB (AEX_STCHSGNCH1 SC X (IV_LB IV)))
      (COND ((EQN SCLB 0) (RETURN 0)))
      (RETURN (DIFFERENCE SCLB (AEX_STCHSGNCH1 SC X (IV_RB IV)))))) 
(PUT 'IRP_REFINE 'NUMBER-OF-ARGS 3) 
(DE IRP_REFINE (P IV PPL)
    (PROG (AE SC A X PP AEPP SCPP)
      (SETQ AE (IRP_AEX P))
      (SETQ SC (IRP_IDATA P))
      (SETQ A (ANU_MK AE IV))
      (SETQ X (AEX_MVAR AE))
      (PROG ()
       WHILELABEL
        (COND ((NOT PPL) (RETURN NIL)))
        (PROGN
         (SETQ PP (PROG1 (CAR PPL) (SETQ PPL (CDR PPL))))
         (SETQ AEPP (IRP_AEX PP))
         (SETQ SCPP (IRP_IDATA PP))
         (PROG ()
          WHILELABEL
           (COND
            ((NOT
              (OR (GREATERP (AEX_DELTASTCHSGNCH SCPP X (ANU_IV A)) 0)
                  (AEX_ATRATNULLP AEPP X (IV_LB (ANU_IV A)))
                  (AEX_ATRATNULLP AEPP X (IV_RB (ANU_IV A)))))
             (RETURN NIL)))
           (ANU_REFINEIP A SC)
           (GO WHILELABEL)))
        (GO WHILELABEL))
      (RETURN A))) 
(PUT 'IRP_ISORATROOT 'NUMBER-OF-ARGS 3) 
(DE IRP_ISORATROOT (P M R)
    (PROG (AE SC X MMR MPR)
      (SETQ AE (IRP_AEX P))
      (SETQ SC (IRP_IDATA P))
      (SETQ X (AEX_MVAR AE))
      (SETQ R (RAT_MULT R (RAT_MK 1 2)))
      (SETQ MMR (RAT_MINUS M R))
      (SETQ MPR (RAT_ADD M R))
      (PROG ()
       WHILELABEL
        (COND
         ((NOT
           (OR (AEX_ATRATNULLP AE X MMR) (AEX_ATRATNULLP AE X MPR)
               (NOT
                (EQN
                 (DIFFERENCE (AEX_STCHSGNCH1 SC X MMR)
                             (AEX_STCHSGNCH1 SC X MPR))
                 1))))
          (RETURN NIL)))
        (PROGN
         (SETQ R (RAT_MULT R (RAT_MK 1 2)))
         (SETQ MMR (RAT_MINUS M R))
         (SETQ MPR (RAT_ADD M R)))
        (GO WHILELABEL))
      (RETURN R))) 
(PUT 'ANU_MK 'NUMBER-OF-ARGS 2) 
(DE ANU_MK (AE IV) (LIST 'ANU AE IV)) 
(PUT 'ANU_DP 'NUMBER-OF-ARGS 1) 
(DE ANU_DP (A) (CADR A)) 
(PUT 'ANU_IV 'NUMBER-OF-ARGS 1) 
(DE ANU_IV (A) (CADDR A)) 
(PUT 'ANU_FROMRAT 'NUMBER-OF-ARGS 2) 
(DE ANU_FROMRAT (X R) (ANU_MK (AEX_MKLIN X R) (IV_MK R R))) 
(PUT 'ANU_PUTIV 'NUMBER-OF-ARGS 2) 
(DE ANU_PUTIV (A IV) (SETCAR (CDDR A) IV)) 
(PUT 'ANU_PRINT 'NUMBER-OF-ARGS 1) 
(DE ANU_PRINT (A)
    (PROGN
     (PRIN2T "(")
     (AEX_PRINT (ANU_DP A))
     (PRIN2T "root in interval:")
     (IV_PRINT (ANU_IV A))
     (PRIN2T ")")
     NIL)) 
(PUT 'ANU_RATP 'NUMBER-OF-ARGS 1) 
(DE ANU_RATP (A)
    (PROG (AEX FVARL X F)
      (SETQ AEX (ANU_DP A))
      (COND ((AEX_BVARL AEX) (RETURN NIL)))
      (SETQ FVARL (AEX_FVARL AEX))
      (COND (NIL NIL))
      (COND ((CDR FVARL) (RETURN NIL)))
      (SETQ X (CAR FVARL))
      (COND
       ((EQN (AEX_DEG AEX X) 1)
        (PROGN
         (SETQ F (CAR (AEX_EX AEX)))
         (RETURN (MULTSQ (CONS (NEGF (CDR F)) 1) (INVSQ (CONS (CDAR F) 1)))))))
      (RETURN NIL))) 
(PUT 'ANU_COMPARE 'NUMBER-OF-ARGS 2) 
(DE ANU_COMPARE (A1 A2)
    (PROG (IV1 IV2)
      (COND ((EQUAL A1 A2) (RETURN 0)))
      (SETQ IV1 (ANU_IV A1))
      (SETQ IV2 (ANU_IV A2))
      (COND ((RAT_LEQ (IV_RB IV1) (IV_LB IV2)) (RETURN (MINUS 1))))
      (COND ((RAT_LEQ (IV_RB IV2) (IV_LB IV1)) (RETURN 1)))
      (RETURN (ANU_COMPARE1 A1 A2)))) 
(PUT 'ANU_COMPARE1 'NUMBER-OF-ARGS 2) 
(DE ANU_COMPARE1 (A1 A2)
    (PROG (V1 V2 CTX)
      (SETQ V1 (AEX_MVAR (ANU_DP A1)))
      (SETQ V2 (AEX_MVAR (ANU_DP A2)))
      (COND
       ((EQ V1 V2)
        (PROGN (SETQ V2 (OFSF_MKSMALLID)) (SETQ A2 (ANU_RENAME A2 V2)) NIL)))
      (SETQ CTX (CTX_FROMIAL (LIST (CONS V1 A1) (CONS V2 A2))))
      (RETURN
       (AEX_SGN
        (AEX_MK
         (ADDSQ (CONS (LIST (CONS (CONS V1 1) 1)) 1)
                (NEGSQ (CONS (LIST (CONS (CONS V2 1) 1)) 1)))
         CTX))))) 
(PUT 'ANU_REFINE 'NUMBER-OF-ARGS 1) 
(DE ANU_REFINE (A)
    (PROG (IV W AEX SC)
      (SETQ IV (ANU_IV A))
      (COND ((EQUAL (IV_LB IV) (IV_RB IV)) (RETURN A)))
      (SETQ W (COPY A))
      (SETQ AEX (ANU_DP A))
      (SETQ SC (AEX_STDSTURMCHAIN AEX (AEX_MVAR AEX)))
      (ANU_REFINEIP W SC)
      (RETURN W))) 
(PUT 'ANU_REFINEIP 'NUMBER-OF-ARGS 2) 
(DE ANU_REFINEIP (A S)
    (PROG (X IV LB RB M SCM)
      (SETQ X (AEX_MVAR (ANU_DP A)))
      (SETQ IV (ANU_IV A))
      (SETQ LB (IV_LB IV))
      (SETQ RB (IV_RB IV))
      (SETQ M (RAT_QUOT (RAT_ADD LB RB) (RAT_MK 2 1)))
      (COND
       ((EQN (AEX_SGN (AEX_SUBRAT1 (ANU_DP A) X M)) 0)
        (PROGN
         (ANU_PUTIV A
          (IV_MK (RAT_MINUS M (RAT_MULT (RAT_MK 1 4) (RAT_MINUS M LB)))
           (RAT_ADD M (RAT_MULT (RAT_MK 1 4) (RAT_MINUS M LB)))))
         (RETURN A))))
      (SETQ SCM (AEX_STCHSGNCH1 S X M))
      (COND
       ((EQN (DIFFERENCE (AEX_STCHSGNCH1 S X LB) SCM) 1)
        (PROGN (ANU_PUTIV A (IV_MK LB M)) (RETURN A))))
      (ANU_PUTIV A (IV_MK M RB))
      (RETURN A))) 
(PUT 'ANU_APPROX 'NUMBER-OF-ARGS 1) 
(DE ANU_APPROX (A)
    (PROG (IV RA LB UB)
      (SETQ RA A)
      (PROG ()
       REPEATLABEL
        (PROGN
         (SETQ RA (ANU_REFINE RA))
         (SETQ IV (ANU_IV RA))
         (SETQ LB (IV_LB IV))
         (SETQ UB (IV_RB IV)))
        (COND ((NOT (ANU_APPROXENOUGH LB UB)) (GO REPEATLABEL))))
      (RETURN LB))) 
(PUT 'ANU_APPROXENOUGH 'NUMBER-OF-ARGS 2) 
(DE ANU_APPROXENOUGH (LB UB)
    (RAT_LESS (RAT_MINUS UB LB) (CONS 1 (EXPT 10 ANU_PRECISION*)))) 
(PUT 'ANU_EVALF 'NUMBER-OF-ARGS 1) 
(DE ANU_EVALF (A)
    (PROG (IV RA LB UB)
      (SETQ RA A)
      (PROG ()
       REPEATLABEL
        (PROGN
         (SETQ RA (ANU_REFINE RA))
         (SETQ IV (ANU_IV RA))
         (SETQ LB
                 (QUOTIENT (FLOAT (OR (CAR (CAR IV)) 0))
                           (FLOAT (CDR (CAR IV)))))
         (SETQ UB
                 (QUOTIENT (FLOAT (OR (CAR (CDR IV)) 0))
                           (FLOAT (CDR (CDR IV))))))
        (COND
         ((NOT
           (OR (NOT (EQN LB LB)) (NOT (EQN UB UB))
               (AND (EQN (DIFFERENCE LB LB) 0.0) (EQN (DIFFERENCE UB UB) 0.0)
                    (ANU_APPROXEQUALENOUGH LB UB))))
          (GO REPEATLABEL))))
      (RETURN (COND ((NOT (EQN LB LB)) UB) (T LB))))) 
(PUT 'ANU_APPROXEQUALENOUGH 'NUMBER-OF-ARGS 2) 
(DE ANU_APPROXEQUALENOUGH (LB UB)
    (EQN
     (DIFFERENCE (FIX (TIMES LB (EXPT 10 ANU_PRECISION*)))
                 (FIX (TIMES UB (EXPT 10 ANU_PRECISION*))))
     0)) 
(PUT 'ANU_EVALFR 'NUMBER-OF-ARGS 1) 
(DE ANU_EVALFR (A)
    (PROG (IV RA LB UB)
      (SETQ RA A)
      (PROG ()
       REPEATLABEL
        (PROGN
         (SETQ RA (ANU_REFINE RA))
         (SETQ IV (ANU_IV RA))
         (SETQ LB
                 (EVALF0
                  (LIST
                   (LIST 'QUOTIENT (OR (CAR (IV_LB IV)) 0) (CDR (IV_LB IV))))))
         (SETQ UB
                 (EVALF0
                  (LIST
                   (LIST 'QUOTIENT (OR (CAR (IV_RB IV)) 0) (CDR (IV_RB IV))))))
         NIL)
        (COND ((NOT (ANU_APPROXEQUALENOUGHR LB UB)) (GO REPEATLABEL))))
      (RETURN LB))) 
(PUT 'ANU_APPROXEQUALENOUGHR 'NUMBER-OF-ARGS 2) 
(DE ANU_APPROXEQUALENOUGHR (LB UB)
    (PROG (L U P)
      (SETQ L 0)
      (SETQ U 0)
      (SETQ P 0)
      (SETQ P (EXPT 10 (PRECISION 0)))
      ((LAMBDA (W) (SETQ L (QUOTIENT (TIMES P (SFTO_SF2INT (CAR W))) (CDR W))))
       (SIMP LB))
      ((LAMBDA (W) (SETQ U (QUOTIENT (TIMES P (SFTO_SF2INT (CAR W))) (CDR W))))
       (SIMP UB))
      (RETURN (EQN L U)))) 
(PUT 'ANU_RENAME 'NUMBER-OF-ARGS 2) 
(DE ANU_RENAME (A XNEW)
    (PROG (AEX RP VARL X VARAL RPNEW IALNEW W)
      (COND ((EQ X XNEW) (RETURN A)))
      (SETQ AEX (ANU_DP A))
      (SETQ RP (AEX_EX AEX))
      (SETQ VARL (KERNELS (CAR RP)))
      (SETQ X (CAR VARL))
      (SETQ RPNEW
              (MULTSQ (CONS (SFTO_RENAMEALF (CAR RP) (LIST (CONS X XNEW))) 1)
                      (INVSQ (CONS (CDR RP) 1))))
      (COND
       ((ORDOP XNEW X)
        (RETURN (ANU_MK (AEX_MK RPNEW (AEX_CTX AEX)) (ANU_IV A)))))
      (SETQ VARAL
              (PROG (VAR FORALL-RESULT FORALL-ENDPTR)
                (SETQ VAR (CDR VARL))
                (COND ((NULL VAR) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS
                                 ((LAMBDA (VAR) (CONS VAR (OFSF_MKBIGID)))
                                  (CAR VAR))
                                 NIL)))
               LOOPLABEL
                (SETQ VAR (CDR VAR))
                (COND ((NULL VAR) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        (CONS
                         ((LAMBDA (VAR) (CONS VAR (OFSF_MKBIGID))) (CAR VAR))
                         NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (SETQ RPNEW
              (MULTSQ (CONS (SFTO_RENAMEALF (CAR RPNEW) VARAL) 1)
                      (INVSQ (CONS (CDR RPNEW) 1))))
      (SETQ IALNEW
              (PROG (PR FORALL-RESULT FORALL-ENDPTR)
                (SETQ PR (CTX_IAL (AEX_CTX AEX)))
                (COND ((NULL PR) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS
                                 ((LAMBDA (PR)
                                    (PROGN
                                     (SETQ W (CDR (ATSOC (CAR PR) VARAL)))
                                     (CONS W (ANU_RENAME (CDR PR) W))))
                                  (CAR PR))
                                 NIL)))
               LOOPLABEL
                (SETQ PR (CDR PR))
                (COND ((NULL PR) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        (CONS
                         ((LAMBDA (PR)
                            (PROGN
                             (SETQ W (CDR (ATSOC (CAR PR) VARAL)))
                             (CONS W (ANU_RENAME (CDR PR) W))))
                          (CAR PR))
                         NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (RETURN (ANU_MK (AEX_MK RPNEW (CTX_FROMIAL IALNEW)) (ANU_IV A))))) 
(PUT 'ANU_REORDER 'NUMBER-OF-ARGS 1) 
(DE ANU_REORDER (A) (ANU_MK (AEX_REORDER (ANU_DP A)) (ANU_IV A))) 
(PUT 'ANU_CHECK 'NUMBER-OF-ARGS 1) 
(DE ANU_CHECK (A)
    (PROG (DP X L R S VALID)
      (SETQ VALID T)
      (SETQ DP (ANU_DP A))
      (SETQ X (AEX_FVARL DP))
      (COND ((NEQ (LENGTH X) 1) (PRIN2T "***** anu_check: def. poly corrupt")))
      (SETQ X (CAR X))
      (SETQ L (IV_LB (ANU_IV A)))
      (SETQ R (IV_RB (ANU_IV A)))
      (SETQ S (AEX_STDSTURMCHAIN DP (AEX_MVAR DP)))
      (COND
       ((AEX_NULLP (AEX_SUBRAT1 DP X L))
        (PROGN
         (SETQ VALID NIL)
         (PRIN2T "***** anu_check: def. poly null at left bound")
         NIL)))
      (COND
       ((AEX_NULLP (AEX_SUBRAT1 DP X R))
        (PROGN
         (SETQ VALID NIL)
         (PRIN2T "***** anu_check: def. poly null at right bound")
         NIL)))
      (COND
       ((NEQ (AEX_DELTASTCHSGNCH S X (ANU_IV A)) 1)
        (PROGN (SETQ VALID NIL) (PRIN2T "***** anu_check: no root") NIL)))
      (RETURN VALID))) 
(PUT 'AEX_BADP 'NUMBER-OF-ARGS 2) 
(DE AEX_BADP (AEX FVN)
    (PROG (VARL CTX IAL BRK V ANU BVARL FVARL FV BV SCBVARL)
      (COND ((NOT (EQCAR AEX 'AEX)) (RETURN 1)))
      (SETQ VARL (KERNELS (CAR (AEX_EX AEX))))
      (SETQ CTX (AEX_CTX AEX))
      (COND ((NOT (EQCAR CTX 'CTX)) (RETURN 2)))
      (SETQ IAL (CTX_IAL CTX))
      (SETQ BRK NIL)
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND (NOT BRK) IAL)) (RETURN NIL)))
        (PROGN
         (PROG (G331)
           (SETQ G331 (PROG1 (CAR IAL) (SETQ IAL (CDR IAL))))
           (SETQ V (CAR G331))
           (SETQ ANU (CDR G331))
           (RETURN G331))
         (COND
          ((AND (NOT BRK) IAL
                (OR (NOT (ORDOP V (CAAR IAL))) (EQ V (CAAR IAL))))
           (SETQ BRK 4)))
         (COND ((AND (NOT BRK) (NEQ V (AEX_MVAR (ANU_DP ANU)))) (SETQ BRK 5)))
         (SETQ BRK (OR BRK (ANU_BADP ANU))))
        (GO WHILELABEL))
      (COND (BRK (RETURN BRK)))
      (SETQ BVARL
              (PROG (PR FORALL-RESULT FORALL-ENDPTR)
                (SETQ PR (CTX_IAL (AEX_CTX AEX)))
                (COND ((NULL PR) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS ((LAMBDA (PR) (CAR PR)) (CAR PR)) NIL)))
               LOOPLABEL
                (SETQ PR (CDR PR))
                (COND ((NULL PR) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        (CONS ((LAMBDA (PR) (CAR PR)) (CAR PR)) NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (SETQ FVARL (LTO_SETMINUS VARL BVARL))
      (COND
       ((AND (NOT (EQN FVN (MINUS 1))) (NOT (EQN (LENGTH FVARL) FVN)))
        (RETURN 6)))
      (SETQ BRK NIL)
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND (NOT BRK) FVARL)) (RETURN NIL)))
        (PROGN
         (SETQ FV (PROG1 (CAR FVARL) (SETQ FVARL (CDR FVARL))))
         (SETQ SCBVARL BVARL)
         (PROG ()
          WHILELABEL
           (COND ((NOT (AND (NOT BRK) SCBVARL)) (RETURN NIL)))
           (PROGN
            (SETQ BV (PROG1 (CAR SCBVARL) (SETQ SCBVARL (CDR SCBVARL))))
            (COND ((AND (ORDOP BV FV) (NEQ BV FV)) (SETQ BRK 7))))
           (GO WHILELABEL)))
        (GO WHILELABEL))
      (RETURN BRK))) 
(PUT 'ANU_BADP 'NUMBER-OF-ARGS 1) 
(DE ANU_BADP (ANU)
    (PROG (AEX IV LB RB W)
      (COND ((NOT (EQCAR ANU 'ANU)) (RETURN 11)))
      (SETQ AEX (ANU_DP ANU))
      (SETQ IV (ANU_IV ANU))
      (COND ((NOT (PAIRP IV)) (RETURN 12)))
      (SETQ LB (IV_LB IV))
      (COND ((OR (NOT (PAIRP LB)) (NOT (RATIONALP LB))) (RETURN 13)))
      (SETQ RB (IV_RB IV))
      (COND ((OR (NOT (PAIRP RB)) (NOT (RATIONALP RB))) (RETURN 14)))
      (COND ((NOT (SFTO_LESSQ LB RB)) (RETURN 15)))
      (SETQ W (AEX_BADP AEX 1))
      (COND (W (RETURN (PLUS W 1000)))))) 
(ENDMODULE) 