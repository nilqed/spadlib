(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'PLOTSYNT)) 
(FLUID '(BYE-ACTIONS*)) 
(PROG (*MSG) (NEWTOK '((|.| |.|) *INTERVAL*))) 
(COND
 ((NOT (EQUAL (GETTYPE '*INTERVAL*) 'OPERATOR))
  (PROGN
   (PRECEDENCE (LIST '*INTERVAL* 'OR))
   (AEVAL (OPERATOR (LIST '*INTERVAL*)))
   (PUT '*INTERVAL* 'PRTCH '| .. |)
   NIL))) 
(MKOP 'POINT) 
(SETQ *MSG T) 
(FLUID '(PLOT-POINTS* PLOT-REFINE* PLOT-CONTOUR*)) 
(GLOBAL '(PLOT_XRANGE PLOT_YRANGE PLOT_ZRANGE)) 
(SHARE (LIST 'PLOT_XMESH 'PLOT_YMESH 'PLOT_XRANGE 'PLOT_YRANGE 'PLOT_ZRANGE)) 
(FLUID '(PLOTPRECISION*)) 
(SETQ PLOTPRECISION* 0.9995) 
(FLUID '(*SHOW_GRID TEST_PLOT)) 
(SWITCH (LIST 'SHOW_GRID)) 
(SWITCH (LIST 'TEST_PLOT)) 
(COND
 ((NULL PLOTMAX*)
  (PROGN
   (LOAD-PACKAGE 'ARITH)
   (COND ((NOT !PLUMAX) (ROUNDCONSTANTS)))
   (SETQ PLOTMAX* !PLUMAX)
   NIL))) 
(SETQ PLOTMIN* (QUOTIENT 1 PLOTMAX*)) 
(FLUID '(PLOTRANGES* PLOTFUNCTIONS* PLOTSTYLE* *PLOTOVERFLOW *ROUNDBF)) 
(PUT 'PLOT 'PSOPFN 'PLOTEVAL) 
(PUT 'PLOTEVAL 'NUMBER-OF-ARGS 1) 
(PUT 'PLOTEVAL 'DEFINED-ON-LINE '78) 
(PUT 'PLOTEVAL 'DEFINED-IN-FILE 'PLOT/PLOTSYNT.RED) 
(PUT 'PLOTEVAL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PLOTEVAL (U)
    (PROG (M *EXP)
      (COND ((NULL PLOTDRIVER*) (REDERR "no active device driver for PLOT")))
      (SETQ M (PLOTROUNDED NIL))
      (SETQ PLOT-POINTS* (LIST 20))
      (SETQ PLOT-REFINE* 8)
      (SETQ *PLOTOVERFLOW NIL)
      (SETQ PLOTRANGES* (SETQ PLOTFUNCTIONS* NIL))
      (SETQ PLOTSTYLE* 'LINES)
      (SETQ BYE-ACTIONS* (UNION '((PLOTRESET)) BYE-ACTIONS*))
      (APPLY (GET PLOTDRIVER* 'INIT) (LIST))
      (PROG (OPTION)
        (SETQ OPTION U)
       LAB
        (COND ((NULL OPTION) (RETURN NIL)))
        ((LAMBDA (OPTION) (PLOTEVAL1 (PLOT-REVAL OPTION))) (CAR OPTION))
        (SETQ OPTION (CDR OPTION))
        (GO LAB))
      (ERRORSET '(PLOTEVAL2) T NIL)
      (PLOTROUNDED M))) 
(PUT 'PLOT-REVAL 'NUMBER-OF-ARGS 1) 
(PUT 'PLOT-REVAL 'DEFINED-ON-LINE '97) 
(PUT 'PLOT-REVAL 'DEFINED-IN-FILE 'PLOT/PLOTSYNT.RED) 
(PUT 'PLOT-REVAL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PLOT-REVAL (U)
    (PROG (W)
      (SETQ W (LIST NIL))
      (SETQ U (PLOT-REVAL1 U W))
      (RETURN (OR (AND (CAR W) U) (REVAL1 U T))))) 
(PUT 'PLOT-REVAL1 'NUMBER-OF-ARGS 2) 
(PUT 'PLOT-REVAL1 'DEFINED-ON-LINE '106) 
(PUT 'PLOT-REVAL1 'DEFINED-IN-FILE 'PLOT/PLOTSYNT.RED) 
(PUT 'PLOT-REVAL1 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE PLOT-REVAL1 (U W)
    (COND ((IDP U) (REVAL1 U T))
          ((OR (ATOM U) (EQCAR U '|:DN:|) (GET (CAR U) 'DNAME)) U)
          ((EQ (CAR U) '*SQ) (PLOT-REVAL1 (REVAL1 U T) W))
          (T
           (PROGN
            (COND
             ((AND (FLAGP (CAR U) 'OPFN)
                   (MEMQ (CAR U) '(FIRST SECOND REST RHS LHS)))
              (PROGN (SETQ U (REVAL1 U T)) (PLOT-REVAL1 U W)))
             (T
              (PROGN
               (COND ((FLAGP (CAR U) 'OPFN) (SETCAR W T)))
               (CONS (CAR U)
                     (PROG (Q FORALL-RESULT FORALL-ENDPTR)
                       (SETQ Q (CDR U))
                       (COND ((NULL Q) (RETURN NIL)))
                       (SETQ FORALL-RESULT
                               (SETQ FORALL-ENDPTR
                                       (CONS
                                        ((LAMBDA (Q) (PLOT-REVAL1 Q W))
                                         (CAR Q))
                                        NIL)))
                      LOOPLABEL
                       (SETQ Q (CDR Q))
                       (COND ((NULL Q) (RETURN FORALL-RESULT)))
                       (RPLACD FORALL-ENDPTR
                               (CONS ((LAMBDA (Q) (PLOT-REVAL1 Q W)) (CAR Q))
                                     NIL))
                       (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                       (GO LOOPLABEL)))))))))) 
(PUT 'PLOTEVAL1 'NUMBER-OF-ARGS 1) 
(PUT 'PLOTEVAL1 'DEFINED-ON-LINE '117) 
(PUT 'PLOTEVAL1 'DEFINED-IN-FILE 'PLOT/PLOTSYNT.RED) 
(PUT 'PLOTEVAL1 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PLOTEVAL1 (OPTION)
    (PROG (X DO)
      (SETQ DO (GET PLOTDRIVER* 'DO))
      (COND
       ((AND (PAIRP OPTION) (SETQ X (GET (CAR OPTION) DO)))
        (APPLY X (LIST OPTION)))
       ((AND (PAIRP OPTION) (SETQ X (GET (CAR OPTION) 'PLOT-DO)))
        (APPLY X (LIST OPTION)))
       ((AND (EQCAR OPTION 'EQUAL) (SETQ X (GET (CADR OPTION) DO)))
        (APPLY X (LIST (CADDR OPTION))))
       ((AND (EQCAR OPTION 'EQUAL) (SETQ X (GET (CADR OPTION) 'PLOT-DO)))
        (APPLY X (LIST (CADDR OPTION))))
       (T (PLOTEVAL0 OPTION))))) 
(PUT 'PLOTEVAL0 'NUMBER-OF-ARGS 1) 
(PUT 'PLOTEVAL0 'DEFINED-ON-LINE '131) 
(PUT 'PLOTEVAL0 'DEFINED-IN-FILE 'PLOT/PLOTSYNT.RED) 
(PUT 'PLOTEVAL0 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PLOTEVAL0 (OPTION)
    (PROG (L R OPT W)
      (SETQ OPT (GET PLOTDRIVER* 'OPTION))
      (COND
       ((FLAGP OPTION OPT)
        (PROGN (SETQ PLOTOPTIONS* (CONS OPTION PLOTOPTIONS*)) (RETURN NIL))))
      (COND
       ((EQCAR OPTION 'LIST)
        (PROGN
         (SETQ OPTION (CDR OPTION))
         (COND
          ((AND OPTION (EQCAR (CAR OPTION) 'LIST))
           (RETURN
            (SETQ PLOTFUNCTIONS*
                    (CONS (CONS 'POINTS (PLOTPOINTS OPTION))
                          PLOTFUNCTIONS*)))))
         (PROG (O)
           (SETQ O OPTION)
          LAB
           (COND ((NULL O) (RETURN NIL)))
           ((LAMBDA (O) (PLOTEVAL0 O)) (CAR O))
           (SETQ O (CDR O))
           (GO LAB))
         (RETURN NIL)
         NIL)))
      (COND
       ((AND (EQCAR OPTION 'EQUAL) (FLAGP (CADR OPTION) OPT))
        (PROGN
         (SETQ PLOTOPTIONS*
                 (CONS (CONS (CADR OPTION) (CADDR OPTION)) PLOTOPTIONS*))
         (RETURN NIL))))
      (COND
       ((NOT (EQCAR OPTION 'EQUAL))
        (PROGN
         (SETQ PLOTFUNCTIONS* (CONS (CONS NIL OPTION) PLOTFUNCTIONS*))
         (RETURN NIL))))
      (SETQ L (PLOT-REVAL (CADR OPTION)))
      (SETQ R (PLOT-REVAL (CADDR OPTION)))
      (COND
       ((PLOT-CHECKCONTOUR L R)
        (RETURN
         (SETQ PLOTFUNCTIONS* (CONS (CONS 'IMPLICIT L) PLOTFUNCTIONS*))))
       ((NOT (IDP L)) (TYPERR OPTION "illegal option in PLOT")))
      (COND
       ((MEMQ L '(SIZE TERMINAL VIEW))
        (PROGN
         (SETQ PLOTOPTIONS* (CONS (CONS L R) PLOTOPTIONS*))
         (RETURN NIL))))
      (COND
       ((AND (EQCAR R 'TIMES) (EQCAR (CADDR R) '*INTERVAL*)
             (EVALNUMBERP (SETQ W (CADR R))) (EVALGREATERP W 0)
             (NOT (EVALGREATERP W 1)))
        (PROGN
         (SETQ PLOT-POINTS*
                 (APPEND PLOT-POINTS*
                         (LIST
                          (CONS L
                                (REVAL1 (LIST 'FLOOR (LIST 'QUOTIENT 1 W))
                                        T)))))
         (SETQ R (CADDR R)))))
      (COND
       ((AND (EQCAR R 'QUOTIENT) (EQCAR (CADR R) '*INTERVAL*) (FIXP (CADDR R))
             (GREATERP (CADDR R) 0))
        (PROGN
         (SETQ PLOT-POINTS* (APPEND PLOT-POINTS* (LIST (CONS L (CADDR R)))))
         (SETQ R (CADR R)))))
      (COND
       ((EQCAR R '*INTERVAL*)
        (PROGN
         (SETQ R (CONS '*INTERVAL* (REVALNUMINTERVAL R T)))
         (SETQ PLOTRANGES* (CONS (CONS L R) PLOTRANGES*))))
       (T (SETQ PLOTFUNCTIONS* (CONS (CONS L R) PLOTFUNCTIONS*)))))) 
(PUT 'PLOTEVAL2 'NUMBER-OF-ARGS 0) 
(PUT 'PLOTEVAL2 'DEFINED-ON-LINE '180) 
(PUT 'PLOTEVAL2 'DEFINED-IN-FILE 'PLOT/PLOTSYNT.RED) 
(PUT 'PLOTEVAL2 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE PLOTEVAL2 NIL
    (PROG (DVAR IVARS PARA IMPL)
      (PROG (U)
        (SETQ U PLOTFUNCTIONS*)
       LAB
        (COND ((NULL U) (RETURN NIL)))
        ((LAMBDA (U)
           (PROGN
            (SETQ IMPL (OR IMPL (EQ (CAR U) 'IMPLICIT)))
            (SETQ PARA (EQCAR (CDR U) 'POINT))
            (COND
             ((AND IMPL DVAR (NEQ DVAR (CAR U)))
              (REDERR "mixture of implicit and regular plot not supported")))
            (SETQ DVAR (OR (CAR U) DVAR))
            (SETQ IVARS (PLOTINDEPVARS (CDR U) IVARS))))
         (CAR U))
        (SETQ U (CDR U))
        (GO LAB))
      (COND
       ((NULL DVAR)
        (PROGN
         (SETQ DVAR '(X Y Z))
         (PROG (X)
           (SETQ X IVARS)
          LAB
           (COND ((NULL X) (RETURN NIL)))
           ((LAMBDA (X) (SETQ DVAR (DELETE X DVAR))) (CAR X))
           (SETQ X (CDR X))
           (GO LAB))
         (COND (DVAR (SETQ DVAR (COND ((MEMQ 'Y DVAR) 'Y) (T (CAR DVAR))))))
         NIL)))
      (COND ((AND PARA (EQUAL (LENGTH IVARS) 1)) (PLOTEVALPARA1 (CAR IVARS)))
            ((AND PARA (EQUAL (LENGTH IVARS) 2))
             (PLOTEVALPARA2 (CAR IVARS) (CADR IVARS)))
            ((EQUAL (LENGTH IVARS) 1) (PLOTEVAL2X (CAR IVARS) DVAR))
            ((EQUAL (LENGTH IVARS) 2)
             (PLOTEVAL3XY (CAR IVARS) (CADR IVARS) DVAR))
            (T (PLOTEVAL3IMPL 'X 'Y 'Z)))
      (APPLY (GET PLOTDRIVER* 'SHOW) (LIST)))) 
(PUT 'PLOT-CHECKCONTOUR 'NUMBER-OF-ARGS 2) 
(PUT 'PLOT-CHECKCONTOUR 'DEFINED-ON-LINE '209) 
(PUT 'PLOT-CHECKCONTOUR 'DEFINED-IN-FILE 'PLOT/PLOTSYNT.RED) 
(PUT 'PLOT-CHECKCONTOUR 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE PLOT-CHECKCONTOUR (L R)
    (COND
     ((OR (EQUAL (LENGTH (PLOTINDEPVARS L NIL)) 2)
          (EQUAL (LENGTH (PLOTINDEPVARS L NIL)) 3))
      (COND ((EQUAL R 0) (PROGN (SETQ PLOT-CONTOUR* (LIST 0)) T))
            (T
             (AND (EQCAR R 'LIST)
                  (PROGN
                   (SETQ PLOT-CONTOUR*
                           (PROG (X FORALL-RESULT FORALL-ENDPTR)
                             (SETQ X (CDR R))
                             (COND ((NULL X) (RETURN NIL)))
                             (SETQ FORALL-RESULT
                                     (SETQ FORALL-ENDPTR
                                             (CONS
                                              ((LAMBDA (X)
                                                 (PROGN
                                                  (SETQ X (PLOT-REVAL X))
                                                  (SETQ L (AND L (ADOMAINP X)))
                                                  X))
                                               (CAR X))
                                              NIL)))
                            LOOPLABEL
                             (SETQ X (CDR X))
                             (COND ((NULL X) (RETURN FORALL-RESULT)))
                             (RPLACD FORALL-ENDPTR
                                     (CONS
                                      ((LAMBDA (X)
                                         (PROGN
                                          (SETQ X (PLOT-REVAL X))
                                          (SETQ L (AND L (ADOMAINP X)))
                                          X))
                                       (CAR X))
                                      NIL))
                             (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                             (GO LOOPLABEL)))
                   L))))))) 
(PUT 'PLOTRANGE 'NUMBER-OF-ARGS 2) 
(PUT 'PLOTRANGE 'DEFINED-ON-LINE '219) 
(PUT 'PLOTRANGE 'DEFINED-IN-FILE 'PLOT/PLOTSYNT.RED) 
(PUT 'PLOTRANGE 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE PLOTRANGE (X D)
    (PROG (Y)
      (SETQ Y (ASSOC X PLOTRANGES*))
      (SETQ Y (COND (Y (CDR Y)) (T D)))
      (COND
       ((OR (EQUAL Y 0) (NULL Y))
        (SETQ Y (LIST '*INTERVAL* (MINUS PLOTMAX*) PLOTMAX*))))
      (COND ((NOT (EQCAR Y '*INTERVAL*)) (TYPERR Y "plot range")))
      (RETURN
       (LIST (PLOTEVALFORM0 (RDWRAP (CADR Y)) NIL)
             (PLOTEVALFORM0 (RDWRAP (CADDR Y)) NIL))))) 
(PUT 'PLOT-POINTS 'NUMBER-OF-ARGS 1) 
(PUT 'PLOT-POINTS 'DEFINED-ON-LINE '231) 
(PUT 'PLOT-POINTS 'DEFINED-IN-FILE 'PLOT/PLOTSYNT.RED) 
(PUT 'PLOT-POINTS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PLOT-POINTS (X)
    ((LAMBDA (W) (COND (W (CDR W)) (T (CAR PLOT-POINTS*))))
     (ASSOC X (CDR PLOT-POINTS*)))) 
(PUT 'PLOTSETEQ 'NUMBER-OF-ARGS 2) 
(PUT 'PLOTSETEQ 'DEFINED-ON-LINE '235) 
(PUT 'PLOTSETEQ 'DEFINED-IN-FILE 'PLOT/PLOTSYNT.RED) 
(PUT 'PLOTSETEQ 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE PLOTSETEQ (U V)
    (OR (AND (NULL U) (NULL V))
        (AND (MEMBER (CAR U) V) (PLOTSETEQ (CDR U) (DELETE (CAR U) V))))) 
(PUT 'PLOTINDEPVARS 'NUMBER-OF-ARGS 2) 
(PUT 'PLOTINDEPVARS 'DEFINED-ON-LINE '239) 
(PUT 'PLOTINDEPVARS 'DEFINED-IN-FILE 'PLOT/PLOTSYNT.RED) 
(PUT 'PLOTINDEPVARS 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE PLOTINDEPVARS (U V)
    (COND
     ((IDP U)
      (COND ((OR (MEMBER U V) (MEMBER U '(E PI)) (AND (EQ U 'I) *COMPLEX)) V)
            (T (CONS U V))))
     ((EQCAR U 'FILE) (CDDR U))
     ((PAIRP U)
      (COND ((OR (EQCAR U '|:DN:|) (GET (CAR U) 'DNAME)) V)
            ((OR (MEMBER (CAR U) '(PLUS MINUS DIFFERENCE TIMES QUOTIENT EXPT))
                 (GET (CAR U) '|:RD:|) (GET (CAR U) 'SIMPFN)
                 (EQCAR (GETD (CAR U)) 'EXPR))
             (PROGN
              (PROG (X)
                (SETQ X (CDR U))
               LAB
                (COND ((NULL X) (RETURN NIL)))
                ((LAMBDA (X) (SETQ V (PLOTINDEPVARS X V))) (CAR X))
                (SETQ X (CDR X))
                (GO LAB))
              V))
            (T (TYPERR U "expression in function to plot"))))
     (T V))) 
(REMPROP 'PLOTSHOW 'STAT) 
(PUT 'PLOTSHOW 'NUMBER-OF-ARGS 0) 
(PUT 'PLOTSHOW 'DEFINED-ON-LINE '257) 
(PUT 'PLOTSHOW 'DEFINED-IN-FILE 'PLOT/PLOTSYNT.RED) 
(PUT 'PLOTSHOW 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE PLOTSHOW NIL (APPLY (GET PLOTDRIVER* 'SHOW) (LIST))) 
(PUT 'PLOTSHOW 'STAT 'ENDSTAT) 
(REMPROP 'PLOTRESET 'STAT) 
(PUT 'PLOTRESET 'NUMBER-OF-ARGS 0) 
(PUT 'PLOTRESET 'DEFINED-ON-LINE '264) 
(PUT 'PLOTRESET 'DEFINED-IN-FILE 'PLOT/PLOTSYNT.RED) 
(PUT 'PLOTRESET 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE PLOTRESET NIL (APPLY (GET PLOTDRIVER* 'RESET) (LIST))) 
(PUT 'PLOTRESET 'STAT 'ENDSTAT) 
(PUT 'POINTS 'PLOT-DO (FUNCTION (LAMBDA (X) (SETCAR PLOT-POINTS* (IEVAL X))))) 
(PUT 'REFINE 'PLOT-DO (FUNCTION (LAMBDA (X) (SETQ PLOT-REFINE* (IEVAL X))))) 
(ENDMODULE) 