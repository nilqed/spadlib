(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'TOK)) 
(FLUID
 '(*ADJPREC *COMMENT *DEFN *EOLDELIMP *MINUSLITER PEEKCHAR* *QUOTENEWNAM *RAISE
   *LOWER SEMIC* *REPORT_COLONS IFL* CURLINE* COMMENT* *COMMENT*)) 
(SETQ *REPORT_COLONS T) 
(GLOBAL
 '($EOF$ $EOL$ *MICRO-VERSION CEDIT-LOADED* |;| CRBUF* CRBUF1* CRCHAR* CURSYM*
   CURESCAPED* EOF* NXTSYM* OUTL* TTYPE* ESCAPED* *CSL *PSL BLANK TAB
   NAMED-CHARACTER*)) 
(SETQ BLANK '| |) 
(SETQ TAB '|	|) 
(FLAG '(ADJPREC) 'SWITCH) 
(SETQ *QUOTENEWNAM T) 
(PUT 'QUOTENEWNAM 'SWITCHDEFAULT T) 
(SETQ CEDIT-LOADED* NIL) 
(SETQ CRCHAR* BLANK) 
(SETQ PEEKCHAR* NIL) 
(SETQ CURLINE* 1) 
(PUT 'BYTELIST2STRING 'NUMBER-OF-ARGS 1) 
(PUT 'BYTELIST2STRING 'DEFINED-ON-LINE '119) 
(PUT 'BYTELIST2STRING 'DEFINED-IN-FILE 'RLISP/TOK.RED) 
(PUT 'BYTELIST2STRING 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE BYTELIST2STRING (U) (LIST2STRING U)) 
(PUT 'BYTELIST2STRING 'INLINE '(LAMBDA (U) (LIST2STRING U))) 
(PUT 'STRING2BYTELIST 'NUMBER-OF-ARGS 1) 
(PUT 'STRING2BYTELIST 'DEFINED-ON-LINE '128) 
(PUT 'STRING2BYTELIST 'DEFINED-IN-FILE 'RLISP/TOK.RED) 
(PUT 'STRING2BYTELIST 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE STRING2BYTELIST (U)
    (PROG (R W)
      (SETQ W (STRING2LIST U))
      (PROG ()
       WHILELABEL
        (COND ((NOT W) (RETURN NIL)))
        (PROGN
         (COND ((MINUSP (CAR W)) (SETQ R (CONS (PLUS 256 (CAR W)) R)))
               (T (SETQ R (CONS (CAR W) R))))
         (SETQ W (CDR W)))
        (GO WHILELABEL))
      (RETURN (REVERSIP R)))) 
(PUT 'BYTELIST2ID 'NUMBER-OF-ARGS 1) 
(PUT 'BYTELIST2ID 'DEFINED-ON-LINE '144) 
(PUT 'BYTELIST2ID 'DEFINED-IN-FILE 'RLISP/TOK.RED) 
(PUT 'BYTELIST2ID 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE BYTELIST2ID (U) (INTERN (LIST2STRING U))) 
(PUT 'BYTELIST2ID 'INLINE '(LAMBDA (U) (INTERN (LIST2STRING U)))) 
(PUT 'STRING-STORE1 'INLINE '(LAMBDA (S N C) (STRING-STORE S N C))) 
(PUT 'LIST2WIDEID 'NUMBER-OF-ARGS 1) 
(PUT 'LIST2WIDEID 'DEFINED-ON-LINE '255) 
(PUT 'LIST2WIDEID 'DEFINED-IN-FILE 'RLISP/TOK.RED) 
(PUT 'LIST2WIDEID 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE LIST2WIDEID (U) (INTERN (LIST2WIDESTRING U))) 
(PUT 'LIST2WIDEID 'INLINE '(LAMBDA (U) (INTERN (LIST2WIDESTRING U)))) 
(PUT 'INT2WIDEID 'NUMBER-OF-ARGS 1) 
(PUT 'INT2WIDEID 'DEFINED-ON-LINE '261) 
(PUT 'INT2WIDEID 'DEFINED-IN-FILE 'RLISP/TOK.RED) 
(PUT 'INT2WIDEID 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE INT2WIDEID (N)
    (COND ((LESSP N 128) (INT2ID N)) (T (INTERN (LIST2WIDESTRING (LIST N)))))) 
(PUT 'ID2BYTELIST 'NUMBER-OF-ARGS 1) 
(PUT 'ID2BYTELIST 'DEFINED-ON-LINE '323) 
(PUT 'ID2BYTELIST 'DEFINED-IN-FILE 'RLISP/TOK.RED) 
(PUT 'ID2BYTELIST 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE ID2BYTELIST (U) (STRING2BYTELIST (ID2STRING U))) 
(PUT 'ID2BYTELIST 'INLINE '(LAMBDA (U) (STRING2BYTELIST (ID2STRING U)))) 
(PUT 'WIDEID2LIST 'NUMBER-OF-ARGS 1) 
(PUT 'WIDEID2LIST 'DEFINED-ON-LINE '330) 
(PUT 'WIDEID2LIST 'DEFINED-IN-FILE 'RLISP/TOK.RED) 
(PUT 'WIDEID2LIST 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE WIDEID2LIST (U) (WIDESTRING2LIST (ID2STRING U))) 
(PUT 'WIDEID2LIST 'INLINE '(LAMBDA (U) (WIDESTRING2LIST (ID2STRING U)))) 
(PUT 'WIDEID2INT 'NUMBER-OF-ARGS 1) 
(PUT 'WIDEID2INT 'DEFINED-ON-LINE '338) 
(PUT 'WIDEID2INT 'DEFINED-IN-FILE 'RLISP/TOK.RED) 
(PUT 'WIDEID2INT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE WIDEID2INT (U) (CAR (WIDESTRING2LIST (ID2STRING U)))) 
(PUT 'WIDEID2INT 'INLINE '(LAMBDA (U) (CAR (WIDEINT2LIST U)))) 
(PUT 'LENGTHC 'NUMBER-OF-ARGS 1) 
(PUT 'LENGTHC 'DEFINED-ON-LINE '346) 
(PUT 'LENGTHC 'DEFINED-IN-FILE 'RLISP/TOK.RED) 
(PUT 'LENGTHC 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE LENGTHC (U)
    (COND ((IDP U) (LENGTH (STRING2LIST (ID2STRING U))))
          ((STRINGP U) (LENGTH (STRING2LIST U))) (T (LENGTH (EXPLODE2 U))))) 
(PUT 'WIDELENGTHC 'NUMBER-OF-ARGS 1) 
(PUT 'WIDELENGTHC 'DEFINED-ON-LINE '355) 
(PUT 'WIDELENGTHC 'DEFINED-IN-FILE 'RLISP/TOK.RED) 
(PUT 'WIDELENGTHC 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE WIDELENGTHC (U)
    (COND ((IDP U) (LENGTH-WITHOUT-FOLLOWERS (STRING2LIST (ID2STRING U))))
          ((STRINGP U) (LENGTH-WITHOUT-FOLLOWERS (STRING2LIST U)))
          (T (LENGTH (EXPLODE2 U))))) 
(PUT 'LENGTH-WITHOUT-FOLLOWERS 'NUMBER-OF-ARGS 1) 
(PUT 'LENGTH-WITHOUT-FOLLOWERS 'DEFINED-ON-LINE '360) 
(PUT 'LENGTH-WITHOUT-FOLLOWERS 'DEFINED-IN-FILE 'RLISP/TOK.RED) 
(PUT 'LENGTH-WITHOUT-FOLLOWERS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE LENGTH-WITHOUT-FOLLOWERS (L)
    (PROG (N)
      (SETQ N 0)
      (PROG ()
       WHILELABEL
        (COND ((NOT L) (RETURN NIL)))
        (PROGN
         (COND ((NULL (EQUAL (LAND (CAR L) 192) 128)) (SETQ N (PLUS N 1))))
         (SETQ L (CDR L)))
        (GO WHILELABEL))
      (RETURN N))) 
(PUT 'PRIN2X 'NUMBER-OF-ARGS 1) 
(PUT 'PRIN2X 'DEFINED-ON-LINE '378) 
(PUT 'PRIN2X 'DEFINED-IN-FILE 'RLISP/TOK.RED) 
(PUT 'PRIN2X 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PRIN2X (U) (SETQ OUTL* (CONS U OUTL*))) 
(PUT 'READCH1 'NUMBER-OF-ARGS 0) 
(PUT 'READCH1 'DEFINED-ON-LINE '468) 
(PUT 'READCH1 'DEFINED-IN-FILE 'RLISP/TOK.RED) 
(PUT 'READCH1 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE READCH1 NIL
    (PROG (X Y W N SAVE)
      (SETQ NAMED-CHARACTER* NIL)
      (COND
       (PEEKCHAR*
        (PROGN
         (SETQ X (CAR PEEKCHAR*))
         (SETQ PEEKCHAR* (CDR PEEKCHAR*))
         (PROGN
          (COND ((EQ X $EOF$) NIL)
                (*PSL (PROGN (COND (*RAISE (SETQ X (RED-CHAR-DOWNCASE X))))))
                (*LOWER (SETQ X (CHAR-DOWNCASE X)))
                (*RAISE (SETQ X (CHAR-UPCASE X)))))
         (RETURN X))))
     A
      (COND
       ((NULL (TERMINALP))
        (PROGN
         (SETQ X (READCH))
         (COND ((EQ X $EOL$) (SETQ CURLINE* (PLUS CURLINE* 1))))))
       (CRBUF1* (PROGN (SETQ X (CAR CRBUF1*)) (SETQ CRBUF1* (CDR CRBUF1*))))
       (T (SETQ X (READCH))))
      (COND (CEDIT-LOADED* (SETQ CRBUF* (CONS X CRBUF*))))
      (COND
       ((NULL PEEKCHAR*)
        (PROGN
         (COND ((NULL (EQ X '|#|)) (RETURN X)))
         (SETQ SAVE (CONS *RAISE *LOWER))
         (SETQ *RAISE (SETQ *LOWER NIL))
         (SETQ PEEKCHAR* (CONS X PEEKCHAR*))
         (GO A)))
       ((AND (NULL (EQ X $EOF$)) (EQUAL (STRING-LENGTH (ID2STRING X)) 1)
             (OR (LITER X) (DIGIT X)))
        (PROGN (SETQ PEEKCHAR* (CONS X PEEKCHAR*)) (GO A))))
      (SETQ *RAISE (CAR SAVE))
      (SETQ *LOWER (CDR SAVE))
      (COND
       ((OR (NULL (EQ X '|;|)) (NULL (CDR PEEKCHAR*)))
        (PROGN
         (SETQ PEEKCHAR* (CDR (REVERSIP (CONS X PEEKCHAR*))))
         (RETURN '|#|))))
      (SETQ Y (INTERN (LIST2STRING (SETQ X (CDR (REVERSE PEEKCHAR*))))))
      (COND
       ((SETQ Y (GET Y 'UNICODE_CHARACTER))
        (PROGN
         (SETQ PEEKCHAR* NIL)
         (SETQ NAMED-CHARACTER* T)
         (RETURN (INT2WIDEID Y)))))
      (SETQ N 0)
      (COND ((OR (EQCAR X 'U) (EQCAR X '|u|)) (GO DEC1)))
      (COND ((OR (EQCAR X 'X) (EQCAR X '|x|)) (SETQ X (CDR X))))
     HEX
      (COND ((NULL X) (GO OK)))
      (COND
       ((NEQ (CAR X) '_)
        (PROGN
         (SETQ W (GET (CAR X) 'HEXDIGIT))
         (COND ((NULL W) (GO FAIL)))
         (SETQ N (PLUS (TIMES 16 N) W)))))
      (SETQ X (CDR X))
      (GO HEX)
     DEC1
      (SETQ X (CDR X))
     DEC
      (COND ((NULL X) (GO OK)))
      (COND ((NULL (DIGIT (CAR X))) (GO FAIL)))
      (SETQ N (PLUS (TIMES 10 N) (GET (CAR X) 'HEXDIGIT)))
      (SETQ X (CDR X))
      (GO DEC)
     OK
      (SETQ PEEKCHAR* NIL)
      (SETQ NAMED-CHARACTER* T)
      (RETURN (INT2WIDEID N))
     FAIL
      (SETQ PEEKCHAR* (CDR (REVERSE (CONS '|;| PEEKCHAR*))))
      (RETURN '|#|))) 
(PUT 'TOKQUOTE 'NUMBER-OF-ARGS 0) 
(PUT 'TOKQUOTE 'DEFINED-ON-LINE '588) 
(PUT 'TOKQUOTE 'DEFINED-IN-FILE 'RLISP/TOK.RED) 
(PUT 'TOKQUOTE 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE TOKQUOTE NIL
    (PROG ()
      (SETQ CRCHAR* (READCH1))
      (SETQ NXTSYM* (MKQUOTE (RREAD)))
      (SETQ CURESCAPED* NIL)
      (SETQ TTYPE* 4)
      (RETURN NXTSYM*))) 
(PUT '|'| 'TOKPROP 'TOKQUOTE) 
(COND
 (*CSL
  (PROGN
   (PUT 'S 'EXPONENT-MARK '|:DN-S:|)
   (PUT '|s| 'EXPONENT-MARK '|:DN-S:|)
   (PUT 'F 'EXPONENT-MARK '|:DN-F:|)
   (PUT '|f| 'EXPONENT-MARK '|:DN-F:|)
   (PUT 'E 'EXPONENT-MARK '|:DN:|)
   (PUT '|e| 'EXPONENT-MARK '|:DN:|)
   (PUT 'D 'EXPONENT-MARK '|:DN:|)
   (PUT '|d| 'EXPONENT-MARK '|:DN:|)
   (PUT 'L 'EXPONENT-MARK '|:DN-L:|)
   (PUT '|l| 'EXPONENT-MARK '|:DN-L:|)))
 (T (PROGN (PUT 'E 'EXPONENT-MARK '|:DN:|) (PUT '|e| 'EXPONENT-MARK '|:DN:|)))) 
(PUT 'TOKEN-NUMBER 'NUMBER-OF-ARGS 1) 
(PUT 'TOKEN-NUMBER 'DEFINED-ON-LINE '632) 
(PUT 'TOKEN-NUMBER 'DEFINED-IN-FILE 'RLISP/TOK.RED) 
(PUT 'TOKEN-NUMBER 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE TOKEN-NUMBER (X)
    (PROG (DOTP POWER SIGN Y Z XMARK)
      (SETQ POWER 0)
      (SETQ TTYPE* 2)
     NUM1
      (COND ((OR Y (NULL (EQ X '|)|))) (SETQ Y (CONS X Y))))
      (COND (DOTP (SETQ POWER (DIFFERENCE POWER 1))))
     NUM2
      (SETQ X (READCH1))
      (COND
       ((OR (EQ X $EOF$) (NULL (EQUAL (STRING-LENGTH (ID2STRING X)) 1)))
        (GO RET))
       ((AND (EQ X '|.|) (NULL DOTP)) (PROGN (SETQ DOTP T) (GO NUM2)))
       ((DIGIT X) (GO NUM1))
       ((AND (EQUAL Y '(|0|)) (OR (EQ X 'X) (EQ X '|x|))) (GO HEXNUM))
       ((EQ X '|\\|)
        (PROGN
         (COND ((EQUAL (SETQ X (READCH1)) $EOL$) (GO NUM2)))
         (SETQ PEEKCHAR* (CONS '|\\| (CONS X PEEKCHAR*)))
         (GO RET)))
       ((EQ X '_)
        (PROGN
         (PROG ()
          WHILELABEL
           (COND
            ((NOT (OR (EQ X '_) (EQ X $EOL$) (EQ X BLANK) (EQ X TAB)))
             (RETURN NIL)))
           (SETQ X (READCH1))
           (GO WHILELABEL))
         (SETQ PEEKCHAR* (CONS X PEEKCHAR*))
         (GO NUM2)))
       ((NULL (SETQ XMARK (GET X 'EXPONENT-MARK))) (GO RET)))
      (COND ((AND (NULL DOTP) (NEQ X 'E) (NEQ X '|e|)) (GO RET)))
      (SETQ DOTP T)
      (COND ((EQ (SETQ X (READCH1)) '-) (SETQ SIGN T)) ((EQ X '+) NIL)
            ((OR (EQ X $EOF$) (NULL (EQUAL (STRING-LENGTH (ID2STRING X)) 1)))
             (GO RET))
            ((NULL (DIGIT X)) (GO RET)) (T (SETQ Z (LIST X))))
     NUME1
      (SETQ X (READCH1))
      (COND ((NULL (EQUAL (STRING-LENGTH (ID2STRING X)) 1)) (GO NUME2))
            ((NULL (DIGIT X)) (GO NUME2)))
      (SETQ Z (CONS X Z))
      (GO NUME1)
     HEXNUM
      (SETQ Y 0)
     HEXNUM1
      (SETQ X (READCH1))
      (COND
       ((SETQ Z (GET X 'HEXDIGIT))
        (PROGN
         (SETQ Y (PLUS (TIMES 16 Y) Z))
         (COND (DOTP (SETQ POWER (DIFFERENCE POWER 4))))
         (PROG ()
          WHILELABEL
           (COND
            ((NOT (SETQ Z (GET (SETQ X (READCH1)) 'HEXDIGIT))) (RETURN NIL)))
           (PROGN
            (SETQ Y (PLUS (TIMES 16 Y) Z))
            (COND (DOTP (SETQ POWER (DIFFERENCE POWER 4)))))
           (GO WHILELABEL))))
       ((AND (EQ X '~) (EQUAL Y 0)) (PROGN (SETQ Y (MINUS 1)) (GO HEXNUM1))))
      (COND
       ((EQ X '_)
        (PROGN
         (PROG ()
          WHILELABEL
           (COND
            ((NOT
              (OR (EQUAL (SETQ X (READCH1)) BLANK) (EQUAL X TAB)
                  (EQUAL X $EOL$)))
             (RETURN NIL)))
          NIL
           (GO WHILELABEL))
         (SETQ PEEKCHAR* (CONS X PEEKCHAR*))
         (GO HEXNUM1))))
      (COND ((EQ X '|.|) (PROGN (SETQ DOTP T) (GO HEXNUM1))))
      (COND ((AND (NEQ X 'P) (NEQ X '|p|)) (GO RET1)))
      (SETQ DOTP T)
      (COND ((EQ (SETQ X (READCH1)) '-) (SETQ SIGN T)) ((EQ X '+) NIL)
            ((OR (EQ X $EOF$) (NULL (EQUAL (STRING-LENGTH (ID2STRING X)) 1)))
             (GO HEXE2))
            ((NULL (DIGIT X)) (GO HEXE2)) (T (SETQ Z (LIST X))))
     HEXE1
      (SETQ X (READCH1))
      (COND ((NULL (EQUAL (STRING-LENGTH (ID2STRING X)) 1)) (GO HEXE2))
            ((NULL (DIGIT X)) (GO HEXE2)))
      (SETQ Z (CONS X Z))
      (GO HEXE1)
     HEXE2
      (COND ((NULL Z) (SETQ Z 0)) (T (SETQ Z (COMPRESS (REVERSIP* Z)))))
      (COND (SIGN (SETQ POWER (DIFFERENCE POWER Z)))
            (T (SETQ POWER (PLUS POWER Z))))
      (COND ((GEQ POWER 0) (SETQ NXTSYM* (TIMES Y (EXPT 2 POWER))))
            (T (SETQ NXTSYM* (MKRN Y (EXPT 2 (DIFFERENCE 0 POWER))))))
      (SETQ CRCHAR* X)
      (RETURN NXTSYM*)
     NUME2
      (COND
       ((NULL Z)
        (RERROR 'RLISP 4
                (CONCAT "Syntax error: improper number "
                        (LIST2STRING (CONS X (APPEND Z (CONS 'E Y))))))))
      (SETQ Z (COMPRESS (REVERSIP* Z)))
      (COND (SIGN (SETQ POWER (DIFFERENCE POWER Z)))
            (T (SETQ POWER (PLUS POWER Z))))
     RET
      (SETQ Y (COMPRESS (REVERSIP* Y)))
     RET1
      (SETQ NXTSYM*
              (COND
               (DOTP
                (CONS (COND ((NULL XMARK) '|:DN:|) (T XMARK)) (CONS Y POWER)))
               (*ADJPREC (CONS '|:INT:| (CONS Y NIL))) (T Y)))
      (SETQ CRCHAR* X)
      (RETURN NXTSYM*))) 
(DEFLIST
 '((|0| 0) (|1| 1) (|2| 2) (|3| 3) (|4| 4) (|5| 5) (|6| 6) (|7| 7) (|8| 8)
   (|9| 9) (A 10) (B 11) (C 12) (D 13) (E 14) (F 15) (|a| 10) (|b| 11) (|c| 12)
   (|d| 13) (|e| 14) (|f| 15))
 'HEXDIGIT) 
(FLUID '(*LINE-MARKER *FILE-MARKER)) 
(SETQ *LINE-MARKER (INTERN "__line__")) 
(SETQ *FILE-MARKER (INTERN "__file__")) 
(PUT 'SEPRP 'NUMBER-OF-ARGS 1) 
(PUT 'SEPRP 'DEFINED-ON-LINE '852) 
(PUT 'SEPRP 'DEFINED-IN-FILE 'RLISP/TOK.RED) 
(PUT 'SEPRP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SEPRP (CH) (OR (EQ CH BLANK) (EQ CH TAB) (EQ CH $EOL$))) 
(PUT 'TOKEN 'NUMBER-OF-ARGS 0) 
(PUT 'TOKEN 'DEFINED-ON-LINE '857) 
(PUT 'TOKEN 'DEFINED-IN-FILE 'RLISP/TOK.RED) 
(PUT 'TOKEN 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE TOKEN NIL
    (PROG (X Y Z)
      (SETQ X CRCHAR*)
     A
      (COND
       ((OR (EQ X $EOF$) (NULL (EQUAL (STRING-LENGTH (ID2STRING X)) 1)))
        (GO UNICODE)))
      (COND
       ((AND (SEPRP X) (NULL (AND (EQ X $EOL$) *EOLDELIMP)))
        (PROGN (SETQ X (READCH1)) (GO A)))
       ((DIGIT X) (RETURN (TOKEN-NUMBER X))) ((LITER X) (GO LETTER))
       ((SETQ Y (GET X 'TOKPROP)) (RETURN (LISPAPPLY Y NIL)))
       ((EQ X '%)
        (PROGN
         (PROG (TXT *RAISE *LOWER)
           (SETQ NAMED-CHARACTER* NIL)
           (PROG ()
            WHILELABEL
             (COND
              ((NOT
                (OR (NULL (OR (EQ (SETQ X (READCH1)) $EOL$) (EQ X $EOF$)))
                    NAMED-CHARACTER*))
               (RETURN NIL)))
             (PROGN (SETQ TXT (CONS X TXT)) (EQUAL NAMED-CHARACTER* NIL))
             (GO WHILELABEL))
           (COND
            (*COMMENT
             (SETQ *COMMENT*
                     (APPEND *COMMENT*
                             (LIST (LIST-TO-STRING (REVERSE TXT))))))))
         (SETQ X (READCH1))
         (GO A)))
       ((AND (EQ X '!) (NULL (AND *MICRO-VERSION (NULL *DEFN)))) (GO ESCAPE))
       ((EQ X '|"|) (GO STRING)) ((EQ X '|\\|) (GO BACKSLASH))
       ((EQ X '_) (GO UNDERSCORE)))
     UNICODE
      (SETQ TTYPE* 3)
      (COND ((EQ X $EOF$) (PROG2 (SETQ CRCHAR* BLANK) (FILENDERR))))
      (SETQ NXTSYM* X)
      (COND
       ((NULL (EQ X $EOF$))
        (PROGN
         (COND
          ((AND (EQUAL (STRING-LENGTH (ID2STRING X)) 1) (FLAGP X 'DELCHAR))
           (SETQ CRCHAR* BLANK))
          (T (SETQ CRCHAR* (READCH1)))))))
      (COND
       ((NULL
         (AND (EQ X '-) (NULL (EQ CRCHAR* $EOF$))
              (EQUAL (STRING-LENGTH (ID2STRING CRCHAR*)) 1) (DIGIT CRCHAR*)
              *MINUSLITER))
        (GO C)))
      (SETQ X (TOKEN-NUMBER CRCHAR*))
      (COND ((NUMBERP X) (RETURN (MINUS X))))
      (RPLACA (CDR X) (MINUS (CADR X)))
      (RETURN X)
     UNDERSCORE
      (SETQ X (READCH1))
      (COND ((EQ X '_) (GO DOUBLEUNDERSCORE)))
      (SETQ PEEKCHAR* (CONS X PEEKCHAR*))
      (SETQ X '_)
      (GO UNICODE)
     DOUBLEUNDERSCORE
      (SETQ TTYPE* 0)
      (SETQ X (WIDESTRING2LIST (ID2STRING X)))
      (SETQ Y (CONS (CAR X) Y))
      (GO LET2)
     ESCAPE
      (PROG (*RAISE *LOWER)
        (SETQ ESCAPED* T)
        (SETQ X (READCH1))
        (COND ((LITER X) (SETQ ESCAPED* T))))
     LETTER
      (SETQ TTYPE* 0)
     LET1
      (SETQ X (WIDESTRING2LIST (ID2STRING X)))
     LET2
      (PROG ()
       WHILELABEL
        (COND ((NOT X) (RETURN NIL)))
        (PROGN (SETQ Y (CONS (CAR X) Y)) (SETQ X (CDR X)))
        (GO WHILELABEL))
      (SETQ X (READCH1))
      (COND
       ((OR (EQ X $EOF$) (NULL (EQUAL (STRING-LENGTH (ID2STRING CRCHAR*)) 1)))
        (GO ORDINARYSYM))
       ((OR (DIGIT X) (LITER X)) (GO LET1)) ((EQ X '!) (GO ESCAPE))
       ((AND (EQ X '-) *MINUSLITER) (GO LET1))
       ((EQ X '_)
        (PROGN
         (SETQ X (READCH1))
         (COND
          ((NEQ X '_)
           (PROGN
            (SETQ PEEKCHAR* (CONS X PEEKCHAR*))
            (SETQ X '_)
            (GO LETTER))))
         (SETQ X (READCH1))
         (COND
          ((NEQ X $EOL$)
           (PROGN
            (SETQ PEEKCHAR* (CONS '_ (CONS X PEEKCHAR*)))
            (SETQ X '_)
            (GO LETTER))))
         (SETQ Z (LIST $EOL$ '_))
         (PROG ()
          WHILELABEL
           (COND ((NOT (SEPRP (SETQ X (READCH1)))) (RETURN NIL)))
           (SETQ Z (CONS X Z))
           (GO WHILELABEL))
         (COND
          ((OR (LITER X) (DIGIT X) (EQUAL X '_) (EQUAL X '!)) (GO LETTER)))
         (SETQ PEEKCHAR* (CONS X PEEKCHAR*))
         (PROG ()
          WHILELABEL
           (COND ((NOT Z) (RETURN NIL)))
           (PROGN (SETQ PEEKCHAR* (CONS (CAR Z) PEEKCHAR*)) (SETQ Z (CDR Z)))
           (GO WHILELABEL))
         (SETQ X '_)
         (GO LETTER)))
       ((EQ X '|:|) (GO MAYBEPACKAGE)))
     ORDINARYSYM
      (SETQ Y (INTERN (LIST2WIDESTRING (REVERSIP* Y))))
      (COND ((EQUAL Y *LINE-MARKER) (SETQ NXTSYM* CURLINE*))
            ((EQUAL Y *FILE-MARKER)
             (SETQ NXTSYM* (COND ((NULL IFL*) "Terminal") (T (CAR IFL*)))))
            (T (SETQ NXTSYM* Y)))
      (SETQ CRCHAR* X)
     C
      (RETURN NXTSYM*)
     BACKSLASH
      (SETQ Y '(|\\| E N D { R E D U C E }))
      (SETQ Z NIL)
     BSLOOP
      (SETQ Z (CONS X Z))
      (SETQ X (READCH1))
      (SETQ Y (CDR Y))
      (COND ((NULL Y) (GO BSFOUND)) ((EQ X (CAR Y)) (GO BSLOOP)))
      (SETQ PEEKCHAR* (CDR (REVERSE (CONS X Z))))
      (SETQ TTYPE* 3)
      (SETQ CRCHAR* (READCH1))
      (SETQ NXTSYM* '|\\|)
      (RETURN NXTSYM*)
     BSFOUND
      (SETQ Y '(|\\| B E G I N { R E D U C E }))
      (SETQ TTYPE* 3)
     BSSRCH
      (COND ((EQ X '%) (GO BSCOMM))
            ((EQ X $EOF$)
             (PROGN
              (SETQ CRCHAR* BLANK)
              (FILENDERR)
              (SETQ NXTSYM* X)
              (RETURN X))))
      (COND ((NULL Y) (GO A)))
      (SETQ Z X)
      (SETQ X (READCH1))
      (COND ((NULL (EQ Z (CAR Y))) (GO BSFOUND)))
      (SETQ Y (CDR Y))
      (GO BSSRCH)
     BSCOMM
      (SETQ X (READCH1))
      (COND ((EQ X $EOF$) (GO BSSRCH)) ((EQ X $EOL$) (GO BSFOUND))
            (T (GO BSCOMM)))
     MAYBEPACKAGE
      (SETQ X (READCH1))
      (COND ((EQ X '|:|) (GO MAYBEEXTPACKAGE)))
      (SETQ PEEKCHAR* (LIST X))
      (SETQ X '|:|)
      (GO ORDINARYSYM)
     MAYBEEXTPACKAGE
      (SETQ X (READCH1))
      (COND
       ((AND (NULL (EQ X $EOF$)) (EQUAL (STRING-LENGTH (ID2STRING CRCHAR*)) 1)
             (LITER X))
        (GO ISEXTPACKAGE)))
      (SETQ PEEKCHAR* (LIST '|:| X))
      (SETQ X '|:|)
      (GO ORDINARYSYM)
     ISEXTPACKAGE
      (SETQ Z (INTERN (LIST2WIDESTRING (REVERSE Y))))
      (SETQ Y (CONS (ID2INT '|:|) (CONS (ID2INT '|:|) Y)))
     EXTPACKMORE
      (SETQ X (WIDESTRING2LIST (ID2STRING X)))
     EXT1
      (COND ((NULL X) (GO EXT2)))
      (SETQ Y (CONS (CAR X) Y))
      (SETQ X (CDR X))
      (GO EXT1)
     EXT2
      (SETQ X (READCH1))
      (COND
       ((OR (EQ X $EOF$) (NULL (EQUAL (STRING-LENGTH (ID2STRING CRCHAR*)) 1)))
        (GO EXTDONE))
       ((OR (DIGIT X) (LITER X)) (GO EXTPACKMORE))
       ((EQ X '!) (GO EXTPACKESCAPE))
       ((AND (EQ X '-) *MINUSLITER) (GO EXTPACKMORE))
       ((EQ X '_) (GO EXTPACKMORE)))
     EXTDONE
      (SETQ Y (INTERN (LIST2WIDESTRING (REVERSIP* Y))))
      (LPRIM (LIST "Name with double colon in detected:" Y))
      (SETQ NXTSYM* Y)
      (SETQ CRCHAR* X)
      (RETURN NXTSYM*)
     EXTPACKESCAPE
      (PROG (*RAISE *LOWER) (SETQ ESCAPED* T) (SETQ X (READCH1)))
      (GO EXTPACKMORE)
     STRING
      (PROG (*RAISE *LOWER)
       STRINX
        (SETQ X (WIDESTRING2LIST (ID2STRING X)))
        (PROG ()
         WHILELABEL
          (COND ((NOT X) (RETURN NIL)))
          (PROGN (SETQ Y (CONS (CAR X) Y)) (SETQ X (CDR X)))
          (GO WHILELABEL))
        (SETQ NAMED-CHARACTER* NIL)
        (COND
         ((EQ (SETQ X (READCH1)) $EOF$)
          (PROGN
           (SETQ CRCHAR* BLANK)
           (LPRIW "***** End-of-file in string" NIL)
           (FILENDERR)))
         ((OR (NULL (EQ X '|"|)) NAMED-CHARACTER*) (GO STRINX)))
       STRINY
        (SETQ NAMED-CHARACTER* NIL)
        (SETQ X (READCH1))
        (COND ((AND (EQ X '|"|) (NULL NAMED-CHARACTER*)) (GO STRINX)))
        (COND
         ((AND (EQUAL X '_) (NULL NAMED-CHARACTER*))
          (PROGN
           (SETQ Z (LIST X))
           (PROG ()
            WHILELABEL
             (COND
              ((NOT
                (SEPRP (PROGN (SETQ NAMED-CHARACTER* NIL) (SETQ X (READCH1)))))
               (RETURN NIL)))
             (SETQ Z (CONS X Z))
             (GO WHILELABEL))
           (COND
            ((AND (EQ X '|"|) (NULL NAMED-CHARACTER*))
             (PROGN
              (SETQ X (READCH1))
              (COND ((EQUAL X '|"|) (GO STRINY)) (T (GO STRINX))))))
           (PROG ()
            WHILELABEL
             (COND ((NOT Z) (RETURN NIL)))
             (PROGN (SETQ PEEKCHAR* (CONS (CAR Z) PEEKCHAR*)) (SETQ Z (CDR Z)))
             (GO WHILELABEL)))))
        (SETQ NXTSYM* (LIST2WIDESTRING (CDR (REVERSIP* Y)))))
      (SETQ TTYPE* 1)
      (SETQ CRCHAR* X)
      (GO C))) 
(PUT 'TOKBQUOTE 'NUMBER-OF-ARGS 0) 
(PUT 'TOKBQUOTE 'DEFINED-ON-LINE '1169) 
(PUT 'TOKBQUOTE 'DEFINED-IN-FILE 'RLISP/TOK.RED) 
(PUT 'TOKBQUOTE 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE TOKBQUOTE NIL
    (PROG ()
      (SETQ CRCHAR* (READCH1))
      (SETQ NXTSYM* (LIST 'BACKQUOTE (RREAD)))
      (SETQ CURESCAPED* NIL)
      (SETQ TTYPE* 3)
      (RETURN NXTSYM*))) 
(PUT '|`| 'TOKPROP 'TOKBQUOTE) 
(PUT 'FILENDERR 'NUMBER-OF-ARGS 0) 
(PUT 'FILENDERR 'DEFINED-ON-LINE '1180) 
(PUT 'FILENDERR 'DEFINED-IN-FILE 'RLISP/TOK.RED) 
(PUT 'FILENDERR 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE FILENDERR NIL
    (PROG ()
      (SETQ CURESCAPED* NIL)
      (SETQ CURSYM* '*SEMICOL*)
      (SETQ EOF* (PLUS EOF* 1))
      (COND ((TERMINALP) (ERROR1))
            (T
             (ERROR 99
                    (COND (IFL* (LIST "End-of-file read in file" (CAR IFL*)))
                          (T "End-of-file read"))))))) 
(PUT 'PTOKEN 'NUMBER-OF-ARGS 0) 
(PUT 'PTOKEN 'DEFINED-ON-LINE '1191) 
(PUT 'PTOKEN 'DEFINED-IN-FILE 'RLISP/TOK.RED) 
(PUT 'PTOKEN 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE PTOKEN NIL
    (PROG (X)
      (SETQ X (TOKEN))
      (COND ((AND (EQ X '|)|) (EQCAR OUTL* BLANK)) (SETQ OUTL* (CDR OUTL*))))
      (PRIN2X X)
      (COND ((NULL (OR (EQ X '|(|) (EQ X '|)|))) (PRIN2X BLANK)))
      (RETURN X))) 
(PUT 'RREAD1 'NUMBER-OF-ARGS 0) 
(PUT 'RREAD1 'DEFINED-ON-LINE '1200) 
(PUT 'RREAD1 'DEFINED-IN-FILE 'RLISP/TOK.RED) 
(PUT 'RREAD1 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE RREAD1 NIL
    (PROG (X Y)
      (SETQ X (PTOKEN))
      (COND
       ((NULL (EQUAL TTYPE* 3))
        (RETURN
         (COND
          ((IDP X)
           (COND ((AND *QUOTENEWNAM (SETQ Y (GET X 'QUOTENEWNAM))) Y) (T X)))
          ((EQCAR X '|:DN:|) (DNFORM X NIL 'SYMBOLIC)) (T X))))
       ((EQ X '|(|) (RETURN (RRDLS)))
       ((NULL (AND (OR (EQ X '+) (EQ X '-)) (DIGIT CRCHAR*))) (RETURN X)))
      (SETQ Y (PTOKEN))
      (COND ((EQCAR Y '|:DN:|) (SETQ Y (DNFORM Y NIL 'SYMBOLIC))))
      (COND
       ((NULL (NUMBERP Y))
        (PROGN
         (SETQ NXTSYM* " ")
         (SYMERR "Syntax error: improper number" NIL)))
       ((EQ X '-) (SETQ Y (MINUS Y))))
      (RETURN Y))) 
(PUT 'RRDLS 'NUMBER-OF-ARGS 0) 
(PUT 'RRDLS 'DEFINED-ON-LINE '1227) 
(PUT 'RRDLS 'DEFINED-IN-FILE 'RLISP/TOK.RED) 
(PUT 'RRDLS 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE RRDLS NIL
    (PROG (X Y Z)
     A
      (SETQ X (RREAD1))
      (COND ((NULL (EQUAL TTYPE* 3)) (GO B)) ((EQ X '|)|) (RETURN Z))
            ((NULL (EQ X '|.|)) (GO B)))
      (SETQ X (RREAD1))
      (SETQ Y (PTOKEN))
      (COND
       ((OR (NULL (EQUAL TTYPE* 3)) (NULL (EQ Y '|)|)))
        (PROGN (SETQ NXTSYM* " ") (SYMERR "Invalid S-expression" NIL)))
       (T (RETURN (NCONC Z X))))
     B
      (SETQ Z (NCONC Z (LIST X)))
      (GO A))) 
(PUT 'RREAD 'NUMBER-OF-ARGS 0) 
(PUT 'RREAD 'DEFINED-ON-LINE '1242) 
(PUT 'RREAD 'DEFINED-IN-FILE 'RLISP/TOK.RED) 
(PUT 'RREAD 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE RREAD NIL (PROGN (PRIN2X " '") (RREAD1))) 
(FLAG '(|;| $) 'DELCHAR) 
(PUT 'DELCP 'NUMBER-OF-ARGS 1) 
(PUT 'DELCP 'DEFINED-ON-LINE '1247) 
(PUT 'DELCP 'DEFINED-IN-FILE 'RLISP/TOK.RED) 
(PUT 'DELCP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE DELCP (U) (FLAGP U 'DELCHAR)) 
(PUT 'DELCP 'INLINE '(LAMBDA (U) (FLAGP U 'DELCHAR))) 
(PUT 'TOKNUMP 'NUMBER-OF-ARGS 1) 
(PUT 'TOKNUMP 'DEFINED-ON-LINE '1253) 
(PUT 'TOKNUMP 'DEFINED-IN-FILE 'RLISP/TOK.RED) 
(PUT 'TOKNUMP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE TOKNUMP (X) (OR (NUMBERP X) (EQCAR X '|:DN:|) (EQCAR X '|:INT:|))) 
(NEWTOK '((|#| I F) |#IF|)) 
(NEWTOK '((|#| E L S E) |#ELSE|)) 
(NEWTOK '((|#| E L I F) |#ELIF|)) 
(NEWTOK '((|#| E N D I F) |#ENDIF|)) 
(NEWTOK '((|#| E V A L) |#EVAL|)) 
(NEWTOK '((|#| D E F I N E) |#DEFINE|)) 
(FLAG '(|#IF| |#ELSE| |#ELIF| |#ENDIF| |#EVAL| |#DEFINE|) 'NEED_TERMINATION) 
(PUT 'READ_LONG_FORM_COMMENT 'NUMBER-OF-ARGS 0) 
(PUT 'READ_LONG_FORM_COMMENT 'DEFINED-ON-LINE '1344) 
(PUT 'READ_LONG_FORM_COMMENT 'DEFINED-IN-FILE 'RLISP/TOK.RED) 
(PUT 'READ_LONG_FORM_COMMENT 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE READ_LONG_FORM_COMMENT NIL
    (PROGN
     (PROG (*RAISE *LOWER X)
       (SETQ NAMED-CHARACTER* NIL)
       (PROG ()
        WHILELABEL
         (COND
          ((NOT
            (OR NAMED-CHARACTER*
                (NULL (EQUAL (STRING-LENGTH (ID2STRING CRCHAR*)) 1))
                (NULL (FLAGP CRCHAR* 'DELCHAR)) (EQ CRCHAR* $EOL$)))
           (RETURN NIL)))
         (PROGN
          (SETQ X (CONS CRCHAR* X))
          (SETQ NAMED-CHARACTER* NIL)
          (SETQ CRCHAR* (READCH1))
          (COND ((EQUAL CRCHAR* $EOF$) (FILENDERR)))
          NIL)
         (GO WHILELABEL))
       (SETQ CRCHAR* BLANK)
       (CONDTERPRI)
       (COND
        (*COMMENT
         (SETQ *COMMENT*
                 (APPEND *COMMENT* (LIST (LIST2STRING (REVERSE X))))))))
     (SETQ CURSYM* '*SEMICOL*)
     (SCAN))) 
(FLAG
 '(COMMENT |COMMENt| |COMMEnT| |COMMEnt| |COMMeNT| |COMMeNt| |COMMenT|
   |COMMent| |COMmENT| |COMmENt| |COMmEnT| |COMmEnt| |COMmeNT| |COMmeNt|
   |COMmenT| |COMment| |COmMENT| |COmMENt| |COmMEnT| |COmMEnt| |COmMeNT|
   |COmMeNt| |COmMenT| |COmMent| |COmmENT| |COmmENt| |COmmEnT| |COmmEnt|
   |COmmeNT| |COmmeNt| |COmmenT| |COmment| |CoMMENT| |CoMMENt| |CoMMEnT|
   |CoMMEnt| |CoMMeNT| |CoMMeNt| |CoMMenT| |CoMMent| |CoMmENT| |CoMmENt|
   |CoMmEnT| |CoMmEnt| |CoMmeNT| |CoMmeNt| |CoMmenT| |CoMment| |ComMENT|
   |ComMENt| |ComMEnT| |ComMEnt| |ComMeNT| |ComMeNt| |ComMenT| |ComMent|
   |CommENT| |CommENt| |CommEnT| |CommEnt| |CommeNT| |CommeNt| |CommenT|
   |Comment| |cOMMENT| |cOMMENt| |cOMMEnT| |cOMMEnt| |cOMMeNT| |cOMMeNt|
   |cOMMenT| |cOMMent| |cOMmENT| |cOMmENt| |cOMmEnT| |cOMmEnt| |cOMmeNT|
   |cOMmeNt| |cOMmenT| |cOMment| |cOmMENT| |cOmMENt| |cOmMEnT| |cOmMEnt|
   |cOmMeNT| |cOmMeNt| |cOmMenT| |cOmMent| |cOmmENT| |cOmmENt| |cOmmEnT|
   |cOmmEnt| |cOmmeNT| |cOmmeNt| |cOmmenT| |cOmment| |coMMENT| |coMMENt|
   |coMMEnT| |coMMEnt| |coMMeNT| |coMMeNt| |coMMenT| |coMMent| |coMmENT|
   |coMmENt| |coMmEnT| |coMmEnt| |coMmeNT| |coMmeNt| |coMmenT| |coMment|
   |comMENT| |comMENt| |comMEnT| |comMEnt| |comMeNT| |comMeNt| |comMenT|
   |comMent| |commENT| |commENt| |commEnT| |commEnt| |commeNT| |commeNt|
   |commenT| |comment|)
 '*COMMENT*) 
(PUT 'READ_SLASH_STAR_COMMENT 'NUMBER-OF-ARGS 0) 
(PUT 'READ_SLASH_STAR_COMMENT 'DEFINED-ON-LINE '1406) 
(PUT 'READ_SLASH_STAR_COMMENT 'DEFINED-IN-FILE 'RLISP/TOK.RED) 
(PUT 'READ_SLASH_STAR_COMMENT 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE READ_SLASH_STAR_COMMENT NIL
    (PROGN
     (PROG (X Y TXT *RAISE *LOWER)
       (SETQ TXT (LIST CRCHAR*))
      A
       (SETQ NAMED-CHARACTER* NIL)
       (COND
        ((AND (EQ (SETQ X (READCH)) '*) (NULL NAMED-CHARACTER*))
         (COND
          ((AND (EQ (SETQ Y (READCH)) '/) (NULL NAMED-CHARACTER*))
           (PROGN
            (COND
             (*COMMENT
              (SETQ *COMMENT*
                      (APPEND *COMMENT* (LIST (LIST2STRING (REVERSIP TXT)))))))
            (RETURN NIL)))
          ((EQ Y $EOF$) (FILEENDERR)) (T (SETQ TXT (CONS Y (CONS X TXT))))))
        ((EQUAL X $EOF$) (REDERR "EOF encountered in comment"))
        (T (SETQ TXT (CONS X TXT))))
       (GO A))
     (SETQ CRCHAR* (READCH))
     (SETQ CURSYM* '*SEMICOL*)
     (SCAN))) 
(PUT '*COMMENT* 'SCAN_ACTION* 'READ_SLASH_STAR_COMMENT) 
(GLOBAL '(SKIPPING*)) 
(SETQ SKIPPING* NIL) 
(PUT 'READ_DEFINE 'NUMBER-OF-ARGS 0) 
(PUT 'READ_DEFINE 'DEFINED-ON-LINE '1450) 
(PUT 'READ_DEFINE 'DEFINED-IN-FILE 'RLISP/TOK.RED) 
(PUT 'READ_DEFINE 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE READ_DEFINE NIL
    (PROG (X W)
      (SETQ X (RREAD))
      (COND ((NULL (IDP X)) (SYMERR "#define can only define a sumbol" NIL)))
      (SETQ W (RREAD))
      (COND ((NULL SKIPPING*) (PUT X 'NEWNAM W)))
      (SETQ CURSYM* '*SEMICOL*)
      (RETURN (SCAN)))) 
(PUT '|#DEFINE| 'SCAN_ACTION* 'READ_DEFINE) 
(GLOBAL '(IF_STACK)) 
(SETQ IF_STACK '(NOT_WITHIN_IF)) 
(PUT 'SCAN_STATE 'NUMBER-OF-ARGS 0) 
(PUT 'SCAN_STATE 'DEFINED-ON-LINE '1477) 
(PUT 'SCAN_STATE 'DEFINED-IN-FILE 'RLISP/TOK.RED) 
(PUT 'SCAN_STATE 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE SCAN_STATE NIL (CAR IF_STACK)) 
(PUT 'SCAN_STATE 'INLINE '(LAMBDA () (CAR IF_STACK))) 
(PUT 'PUSH_STATE 'NUMBER-OF-ARGS 1) 
(PUT 'PUSH_STATE 'DEFINED-ON-LINE '1482) 
(PUT 'PUSH_STATE 'DEFINED-IN-FILE 'RLISP/TOK.RED) 
(PUT 'PUSH_STATE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PUSH_STATE (NEW_STATE) (SETQ IF_STACK (CONS NEW_STATE IF_STACK))) 
(PUT 'PUSH_STATE 'INLINE
     '(LAMBDA (NEW_STATE) (SETQ IF_STACK (CONS NEW_STATE IF_STACK)))) 
(PUT 'POP_STATE 'NUMBER-OF-ARGS 0) 
(PUT 'POP_STATE 'DEFINED-ON-LINE '1487) 
(PUT 'POP_STATE 'DEFINED-IN-FILE 'RLISP/TOK.RED) 
(PUT 'POP_STATE 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE POP_STATE NIL (SETQ IF_STACK (CDR IF_STACK))) 
(PUT 'POP_STATE 'INLINE '(LAMBDA () (SETQ IF_STACK (CDR IF_STACK)))) 
(PUT 'CHANGE_STATE 'NUMBER-OF-ARGS 1) 
(PUT 'CHANGE_STATE 'DEFINED-ON-LINE '1492) 
(PUT 'CHANGE_STATE 'DEFINED-IN-FILE 'RLISP/TOK.RED) 
(PUT 'CHANGE_STATE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE CHANGE_STATE (NEW_STATE) (SETQ IF_STACK (CONS NEW_STATE (CDR IF_STACK)))) 
(PUT 'CHANCE_STATE 'INLINE
     '(LAMBDA (NEW_STATE) (SETQ IF_STACK (CONS NEW_STATE (CDR IF_STACK))))) 
(PUT 'SCAN_SKIP 'NUMBER-OF-ARGS 0) 
(PUT 'SCAN_SKIP 'DEFINED-ON-LINE '1503) 
(PUT 'SCAN_SKIP 'DEFINED-IN-FILE 'RLISP/TOK.RED) 
(PUT 'SCAN_SKIP 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE SCAN_SKIP NIL
    (PROG (W *COMMENT* COMMENT*)
      (SETQ SKIPPING* T)
      (PROG ()
       WHILELABEL
        (COND ((NOT SKIPPING*) (RETURN NIL)))
        (SETQ W (SCAN))
        (GO WHILELABEL))
      (RETURN W))) 
(PUT 'READ_IF 'NUMBER-OF-ARGS 0) 
(PUT 'READ_IF 'DEFINED-ON-LINE '1525) 
(PUT 'READ_IF 'DEFINED-IN-FILE 'RLISP/TOK.RED) 
(PUT 'READ_IF 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE READ_IF NIL
    (PROG (X)
      (SETQ SKIPPING* NIL)
      (SETQ X (RREAD))
      (COND
       ((OR (EQUAL (CAR IF_STACK) 'NOT_WITHIN_IF)
            (EQUAL (CAR IF_STACK) 'IF_TRUE))
        (PROGN
         (SETQ X (ERRORSET X *BACKTRACE NIL))
         (COND ((ERRORP X) (SETQ X NIL)) (T (SETQ X (CAR X))))
         (COND
          (X
           (PROGN
            (SETQ IF_STACK (CONS 'IF_TRUE IF_STACK))
            (SETQ CURSYM* '*SEMICOL*)
            (RETURN (SCAN))))
          (T
           (PROGN
            (SETQ IF_STACK (CONS 'IF_FALSE IF_STACK))
            (RETURN (SCAN_SKIP)))))))
       (T
        (PROGN
         (SETQ IF_STACK (CONS 'IF_DONE IF_STACK))
         (RETURN (SCAN_SKIP))))))) 
(PUT '|#IF| 'SCAN_ACTION* 'READ_IF) 
(PUT 'READ_ELSE 'NUMBER-OF-ARGS 0) 
(PUT 'READ_ELSE 'DEFINED-ON-LINE '1557) 
(PUT 'READ_ELSE 'DEFINED-IN-FILE 'RLISP/TOK.RED) 
(PUT 'READ_ELSE 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE READ_ELSE NIL
    (PROG ()
      (SETQ SKIPPING* NIL)
      (COND
       ((EQUAL (CAR IF_STACK) 'IF_TRUE)
        (PROGN (CHANGE_STATE 'IF_DONE) (RETURN (SCAN_SKIP))))
       ((EQUAL (CAR IF_STACK) 'IF_FALSE)
        (PROGN
         (CHANGE_STATE 'IF_TRUE)
         (SETQ CURSYM* '*SEMICOL*)
         (RETURN (SCAN))))
       ((EQUAL (CAR IF_STACK) 'IF_DONE) (RETURN (SCAN_SKIP)))
       (T (SYMERR "unexpected #else" NIL))))) 
(PUT '|#ELSE| 'SCAN_ACTION* 'READ_ELSE) 
(PUT 'READ_ELIF 'NUMBER-OF-ARGS 0) 
(PUT 'READ_ELIF 'DEFINED-ON-LINE '1582) 
(PUT 'READ_ELIF 'DEFINED-IN-FILE 'RLISP/TOK.RED) 
(PUT 'READ_ELIF 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE READ_ELIF NIL
    (PROG (X)
      (SETQ SKIPPING* NIL)
      (SETQ X (RREAD))
      (COND
       ((EQUAL (CAR IF_STACK) 'NOT_WITHIN_IF) (SYMERR "unexpected #endif" NIL))
       ((OR (EQUAL (CAR IF_STACK) 'IF_TRUE) (EQUAL (CAR IF_STACK) 'IF_DONE))
        (PROGN (CHANGE_STATE 'IF_DONE) (RETURN (SCAN_SKIP)))))
      (SETQ X (ERRORSET X *BACKTRACE NIL))
      (COND ((ERRORP X) (SETQ X NIL)) (T (SETQ X (CAR X))))
      (COND
       (X
        (PROGN
         (CHANGE_STATE 'IF_TRUE)
         (SETQ CURSYM* '*SEMICOL*)
         (RETURN (SCAN))))
       (T (RETURN (SCAN_SKIP)))))) 
(PUT '|#ELIF| 'SCAN_ACTION* 'READ_ELIF) 
(PUT 'READ_ENDIF 'NUMBER-OF-ARGS 0) 
(PUT 'READ_ENDIF 'DEFINED-ON-LINE '1613) 
(PUT 'READ_ENDIF 'DEFINED-IN-FILE 'RLISP/TOK.RED) 
(PUT 'READ_ENDIF 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE READ_ENDIF NIL
    (PROG ()
      (SETQ SKIPPING* NIL)
      (COND
       ((EQUAL (CAR IF_STACK) 'NOT_WITHIN_IF)
        (SYMERR "unexpected #endif" NIL)))
      (SETQ IF_STACK (CDR IF_STACK))
      (SETQ CURSYM* '*SEMICOL*)
      (COND
       ((OR (EQUAL (CAR IF_STACK) 'NOT_WITHIN_IF)
            (EQUAL (CAR IF_STACK) 'IF_TRUE))
        (RETURN (SCAN)))
       (T (RETURN (SCAN_SKIP)))))) 
(PUT '|#ENDIF| 'SCAN_ACTION* 'READ_ENDIF) 
(PUT 'READ_EVAL 'NUMBER-OF-ARGS 0) 
(PUT 'READ_EVAL 'DEFINED-ON-LINE '1627) 
(PUT 'READ_EVAL 'DEFINED-IN-FILE 'RLISP/TOK.RED) 
(PUT 'READ_EVAL 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE READ_EVAL NIL
    (PROG (X)
      (SETQ X (RREAD))
      (COND ((NULL SKIPPING*) (ERRORSET X *BACKTRACE NIL)))
      (SETQ CURSYM* '*SEMICOL*)
      (RETURN (SCAN)))) 
(PUT '|#EVAL| 'SCAN_ACTION* 'READ_EVAL) 
(PUT 'SCAN 'NUMBER-OF-ARGS 0) 
(PUT 'SCAN 'DEFINED-ON-LINE '1652) 
(PUT 'SCAN 'DEFINED-IN-FILE 'RLISP/TOK.RED) 
(PUT 'SCAN 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE SCAN NIL
    (PROG (X W)
      (COND
       ((EQ CURSYM* '*SEMICOL*)
        (PROGN (SETQ ESCAPED* NIL) (SETQ NXTSYM* (TOKEN)))))
      (COND
       ((AND (NULL (ATOM NXTSYM*)) (NULL (TOKNUMP NXTSYM*)))
        (PROGN
         (COND
          ((EQ (CAR NXTSYM*) 'STRING)
           (PROGN
            (PRIN2X " ")
            (PRIN2X (CADR (SETQ NXTSYM* (MKQUOTE (CADR NXTSYM*))))))))
         (SETQ CURSYM* NXTSYM*)
         (SETQ CURESCAPED* ESCAPED*)
         (SETQ ESCAPED* NIL)
         (SETQ COMMENT* *COMMENT*)
         (SETQ *COMMENT* NIL)
         (SETQ NXTSYM* (TOKEN))
         (COND
          ((AND (EQ NXTSYM* $EOF$) (EQUAL TTYPE* 3)) (RETURN (FILENDERR))))
         (COND
          ((OR (NUMBERP NXTSYM*)
               (AND (ATOM NXTSYM*) (NULL (GET NXTSYM* 'SWITCH*))))
           (PRIN2X " ")))
         (COND ((SETQ W (GET CURSYM* 'SCAN_ACTION*)) (RETURN (APPLY W NIL))))
         (RETURN CURSYM*))))
      (COND ((OR (EQ NXTSYM* 'ELSE) (EQ CURSYM* '*SEMICOL*)) (SETQ OUTL* NIL)))
      (PRIN2X NXTSYM*)
      (PROG ()
       WHILELABEL
        (COND
         ((NOT
           (AND (IDP NXTSYM*) (SETQ X (GET NXTSYM* 'NEWNAM))
                (NULL (MEMBER X (SETQ W (CONS NXTSYM* W))))))
          (RETURN NIL)))
        (SETQ NXTSYM* X)
        (GO WHILELABEL))
      (SETQ X NIL)
      (COND
       ((OR (NULL (EQUAL TTYPE* 3))
            (NULL (AND (IDP NXTSYM*) (SETQ X (GET NXTSYM* 'SWITCH*)))))
        (PROGN
         (COND
          ((AND (FLAGP NXTSYM* '*COMMENT*) (NULL ESCAPED*))
           (RETURN (READ_LONG_FORM_COMMENT))))
         (SETQ CURSYM* NXTSYM*)
         (SETQ CURESCAPED* ESCAPED*)
         (SETQ ESCAPED* NIL)
         (SETQ COMMENT* *COMMENT*)
         (SETQ *COMMENT* NIL)
         (SETQ NXTSYM* (TOKEN))
         (COND
          ((AND (EQ NXTSYM* $EOF$) (EQUAL TTYPE* 3)) (RETURN (FILENDERR))))
         (COND
          ((OR (NUMBERP NXTSYM*)
               (AND (ATOM NXTSYM*) (NULL (GET NXTSYM* 'SWITCH*))))
           (PRIN2X " ")))
         (RETURN CURSYM*))))
      (COND
       ((OR (EQCAR (CDR X) '*SEMICOL*) (AND *EOLDELIMP (EQUAL NXTSYM* $EOL$)))
        (PROGN
         (SETQ SEMIC* NXTSYM*)
         (SETQ CURESCAPED* NIL)
         (RETURN (SETQ CURSYM* '*SEMICOL*)))))
      (SETQ W (LIST (CONS CRCHAR* X)))
      (PROG ()
       WHILELABEL
        (COND ((NOT (SETQ X (ATSOC CRCHAR* (CAR X)))) (RETURN NIL)))
        (PROGN
         (SETQ X (CDR X))
         (PRIN2X CRCHAR*)
         (SETQ CRCHAR* (READCH1))
         (SETQ W (CONS (CONS CRCHAR* X) W)))
        (GO WHILELABEL))
      (COND
       ((AND (NULL (NULL (CDDAR W))) (FLAGP (CADDAR W) 'NEED_TERMINATION)
             (OR (LITER CRCHAR*) (DIGIT CRCHAR*) (EQ CRCHAR* '_)
                 (EQ CRCHAR* '!)))
        (PROGN (SETQ W (CONS (CONS (CAAR W) '(NIL)) (CDR W))))))
      (PROG ()
       WHILELABEL
        (COND ((NOT (NULL (CDDAR W))) (RETURN NIL)))
        (PROGN
         (SETQ PEEKCHAR* (CONS CRCHAR* PEEKCHAR*))
         (SETQ OUTL* (CDR OUTL*))
         (SETQ W (CDR W))
         (SETQ CRCHAR* (CAAR W)))
        (GO WHILELABEL))
      (SETQ CURSYM* (CADDAR W))
      (COND ((SETQ W (GET CURSYM* 'SCAN_ACTION*)) (RETURN (APPLY W NIL))))
      (SETQ ESCAPED* NIL)
      (SETQ COMMENT* *COMMENT*)
      (SETQ *COMMENT* NIL)
      (SETQ NXTSYM* (TOKEN))
      (RETURN CURSYM*))) 
(ENDMODULE) 