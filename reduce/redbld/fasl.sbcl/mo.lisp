(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'MO)) 
(PUT 'MO=SPROD 'NUMBER-OF-ARGS 2) 
(PUT 'MO=SPROD 'DEFINED-ON-LINE '64) 
(PUT 'MO=SPROD 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO=SPROD 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MO=SPROD (A B)
    (COND ((OR (NOT A) (NOT B)) 0)
          (T (IPLUS2 (ITIMES2 (CAR A) (CAR B)) (MO=SPROD (CDR A) (CDR B)))))) 
(PUT 'MO=DEGLIST 'NUMBER-OF-ARGS 1) 
(PUT 'MO=DEGLIST 'DEFINED-ON-LINE '69) 
(PUT 'MO=DEGLIST 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO=DEGLIST 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MO=DEGLIST (A)
    (COND
     ((NULL A)
      (PROG (X FORALL-RESULT FORALL-ENDPTR)
        (SETQ X (RING_DEGREES CALI=BASERING))
        (COND ((NULL X) (RETURN NIL)))
        (SETQ FORALL-RESULT
                (SETQ FORALL-ENDPTR (CONS ((LAMBDA (X) 0) (CAR X)) NIL)))
       LOOPLABEL
        (SETQ X (CDR X))
        (COND ((NULL X) (RETURN FORALL-RESULT)))
        (RPLACD FORALL-ENDPTR (CONS ((LAMBDA (X) 0) (CAR X)) NIL))
        (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
        (GO LOOPLABEL)))
     (T
      ((LAMBDA (B)
         (MO=SUM
          (PROG (X FORALL-RESULT FORALL-ENDPTR)
            (SETQ X (RING_DEGREES CALI=BASERING))
            (COND ((NULL X) (RETURN NIL)))
            (SETQ FORALL-RESULT
                    (SETQ FORALL-ENDPTR
                            (CONS ((LAMBDA (X) (MO=SPROD (CDR A) X)) (CAR X))
                                  NIL)))
           LOOPLABEL
            (SETQ X (CDR X))
            (COND ((NULL X) (RETURN FORALL-RESULT)))
            (RPLACD FORALL-ENDPTR
                    (CONS ((LAMBDA (X) (MO=SPROD (CDR A) X)) (CAR X)) NIL))
            (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
            (GO LOOPLABEL))
          (COND (B (CDDR B)) (T NIL))))
       (ASSOC (CAR A) CALI=DEGREES))))) 
(PUT 'MO_NEWORDER 'NUMBER-OF-ARGS 1) 
(PUT 'MO_NEWORDER 'DEFINED-ON-LINE '79) 
(PUT 'MO_NEWORDER 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO_NEWORDER 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MO_NEWORDER (M)
    ((LAMBDA (M1) (CONS M1 (MO=DEGLIST M1))) (MO=SHORTEN (CAR M)))) 
(PUT 'MO_DEGNEWORDER 'NUMBER-OF-ARGS 1) 
(PUT 'MO_DEGNEWORDER 'DEFINED-ON-LINE '83) 
(PUT 'MO_DEGNEWORDER 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO_DEGNEWORDER 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MO_DEGNEWORDER (L)
    (PROG (X FORALL-RESULT FORALL-ENDPTR)
      (SETQ X L)
      (COND ((NULL X) (RETURN NIL)))
      (SETQ FORALL-RESULT
              (SETQ FORALL-ENDPTR
                      (CONS
                       ((LAMBDA (X) (CONS (CAR X) (MO_NEWORDER (CDR X))))
                        (CAR X))
                       NIL)))
     LOOPLABEL
      (SETQ X (CDR X))
      (COND ((NULL X) (RETURN FORALL-RESULT)))
      (RPLACD FORALL-ENDPTR
              (CONS ((LAMBDA (X) (CONS (CAR X) (MO_NEWORDER (CDR X)))) (CAR X))
                    NIL))
      (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
      (GO LOOPLABEL))) 
(PUT 'MO=SHORTEN 'NUMBER-OF-ARGS 1) 
(PUT 'MO=SHORTEN 'DEFINED-ON-LINE '87) 
(PUT 'MO=SHORTEN 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO=SHORTEN 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MO=SHORTEN (M)
    (PROG (M1)
      (SETQ M1 (REVERSE M))
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND M1 (EQN (CAR M1) 0))) (RETURN NIL)))
        (SETQ M1 (CDR M1))
        (GO WHILELABEL))
      (RETURN (REVERSIP M1)))) 
(DE MO_ZERO NIL (CONS NIL (MO=DEGLIST NIL))) 
(PUT 'MO_ZERO 'NUMBER-OF-ARGS 0) 
(PUT 'MO_ZERO 'DEFINED-ON-LINE '96) 
(PUT 'MO_ZERO 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO_ZERO 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(PUTC 'MO_ZERO 'INLINE '(LAMBDA () (CONS NIL (MO=DEGLIST NIL)))) 
(DE MO_ZERO? (U) (MO=ZERO (CAR U))) 
(PUT 'MO_ZERO? 'NUMBER-OF-ARGS 1) 
(PUT 'MO_ZERO? 'DEFINED-ON-LINE '99) 
(PUT 'MO_ZERO? 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO_ZERO? 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'MO_ZERO? 'INLINE '(LAMBDA (U) (MO=ZERO (CAR U)))) 
(PUT 'MO=ZERO 'NUMBER-OF-ARGS 1) 
(PUT 'MO=ZERO 'DEFINED-ON-LINE '101) 
(PUT 'MO=ZERO 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO=ZERO 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MO=ZERO (U) (OR (NULL U) (AND (EQUAL (CAR U) 0) (MO=ZERO (CDR U))))) 
(PUT 'MO_EQUAL? 'NUMBER-OF-ARGS 2) 
(PUT 'MO_EQUAL? 'DEFINED-ON-LINE '104) 
(PUT 'MO_EQUAL? 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO_EQUAL? 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MO_EQUAL? (M1 M2) (EQUAL (MO=SHORTEN (CAR M1)) (MO=SHORTEN (CAR M2)))) 
(PUT 'MO_DIVIDES? 'NUMBER-OF-ARGS 2) 
(PUT 'MO_DIVIDES? 'DEFINED-ON-LINE '108) 
(PUT 'MO_DIVIDES? 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO_DIVIDES? 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MO_DIVIDES? (M1 M2) (MO=MODIV1 (CAR M1) (CAR M2))) 
(PUT 'MO=MODIV1 'NUMBER-OF-ARGS 2) 
(PUT 'MO=MODIV1 'DEFINED-ON-LINE '112) 
(PUT 'MO=MODIV1 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO=MODIV1 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MO=MODIV1 (E1 E2)
    (COND ((NOT E1) T) ((NOT E2) NIL)
          (T (AND (LEQ (CAR E1) (CAR E2)) (MO=MODIV1 (CDR E1) (CDR E2)))))) 
(PUT 'MO_COMPARE 'NUMBER-OF-ARGS 2) 
(PUT 'MO_COMPARE 'DEFINED-ON-LINE '116) 
(PUT 'MO_COMPARE 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO_COMPARE 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MO_COMPARE (M1 M2)
    (PROG (X)
      (SETQ X (MO=DEGCOMP (CDR M1) (CDR M2)))
      (COND
       ((EQUAL X 0)
        (SETQ X
                (COND
                 ((EQUAL (RING_TAG CALI=BASERING) 'REVLEX)
                  (MO=REVLEXCOMP (CAR M1) (CAR M2)))
                 (T (MO=LEXCOMP (CAR M1) (CAR M2)))))))
      (RETURN X))) 
(PUT 'MO_DLEXCOMP 'NUMBER-OF-ARGS 2) 
(PUT 'MO_DLEXCOMP 'DEFINED-ON-LINE '127) 
(PUT 'MO_DLEXCOMP 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO_DLEXCOMP 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MO_DLEXCOMP (A B) (EQUAL (MO=LEXCOMP (CAR A) (CAR B)) 1)) 
(PUT 'MO=DEGCOMP 'NUMBER-OF-ARGS 2) 
(PUT 'MO=DEGCOMP 'DEFINED-ON-LINE '130) 
(PUT 'MO=DEGCOMP 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO=DEGCOMP 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MO=DEGCOMP (D1 D2)
    (COND ((NULL D1) 0)
          ((EQUAL (CAR D1) (CAR D2)) (MO=DEGCOMP (CDR D1) (CDR D2)))
          ((ILESSP (CAR D1) (CAR D2)) (MINUS 1)) (T 1))) 
(PUT 'MO=REVLEXCOMP 'NUMBER-OF-ARGS 2) 
(PUT 'MO=REVLEXCOMP 'DEFINED-ON-LINE '136) 
(PUT 'MO=REVLEXCOMP 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO=REVLEXCOMP 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MO=REVLEXCOMP (E1 E2)
    (COND ((IGREATERP (LENGTH E1) (LENGTH E2)) (MINUS 1))
          ((IGREATERP (LENGTH E2) (LENGTH E1)) 1)
          (T (MINUS (MO=DEGCOMP (REVERSE E1) (REVERSE E2)))))) 
(PUT 'MO=LEXCOMP 'NUMBER-OF-ARGS 2) 
(PUT 'MO=LEXCOMP 'DEFINED-ON-LINE '141) 
(PUT 'MO=LEXCOMP 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO=LEXCOMP 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MO=LEXCOMP (E1 E2)
    (COND ((NULL E1) (COND ((NULL E2) 0) (T (MO=LEXCOMP '(0) E2))))
          ((NULL E2) (MO=LEXCOMP E1 '(0)))
          ((EQUAL (CAR E1) (CAR E2)) (MO=LEXCOMP (CDR E1) (CDR E2)))
          ((IGREATERP (CAR E1) (CAR E2)) 1) (T (MINUS 1)))) 
(DE MO_COMP (V) (COND ((NULL (CAR V)) 0) (T (CAAR V)))) 
(PUT 'MO_COMP 'NUMBER-OF-ARGS 1) 
(PUT 'MO_COMP 'DEFINED-ON-LINE '151) 
(PUT 'MO_COMP 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO_COMP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'MO_COMP 'INLINE '(LAMBDA (V) (COND ((NULL (CAR V)) 0) (T (CAAR V))))) 
(PUT 'MO_FROM_EI 'NUMBER-OF-ARGS 1) 
(PUT 'MO_FROM_EI 'DEFINED-ON-LINE '155) 
(PUT 'MO_FROM_EI 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO_FROM_EI 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MO_FROM_EI (I)
    (COND ((EQUAL I 0) (CONS NIL (MO=DEGLIST NIL)))
          (T ((LAMBDA (X) (CONS X (MO=DEGLIST X))) (LIST I))))) 
(PUT 'MO_VDIVIDES? 'NUMBER-OF-ARGS 2) 
(PUT 'MO_VDIVIDES? 'DEFINED-ON-LINE '159) 
(PUT 'MO_VDIVIDES? 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO_VDIVIDES? 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MO_VDIVIDES? (V1 V2)
    (AND
     (EQN (COND ((NULL (CAR V1)) 0) (T (CAAR V1)))
          (COND ((NULL (CAR V2)) 0) (T (CAAR V2))))
     (MO_DIVIDES? V1 V2))) 
(PUT 'MO_DELETECOMP 'NUMBER-OF-ARGS 1) 
(PUT 'MO_DELETECOMP 'DEFINED-ON-LINE '163) 
(PUT 'MO_DELETECOMP 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO_DELETECOMP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MO_DELETECOMP (V)
    (COND ((NULL (CAR V)) V) ((NULL (CDAR V)) (CONS NIL (MO=DEGLIST NIL)))
          (T ((LAMBDA (X) (CONS X (MO=DEGLIST X))) (CONS 0 (CDAR V)))))) 
(PUT 'MO_TIMES_EI 'NUMBER-OF-ARGS 2) 
(PUT 'MO_TIMES_EI 'DEFINED-ON-LINE '169) 
(PUT 'MO_TIMES_EI 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO_TIMES_EI 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MO_TIMES_EI (I M)
    ((LAMBDA (X) (CONS X (MO=DEGLIST X)))
     (COND ((NULL (CAR M)) (LIST I)) (T (CONS (IPLUS2 I (CAAR M)) (CDAR M)))))) 
(PUT 'MO_DEG 'NUMBER-OF-ARGS 1) 
(PUT 'MO_DEG 'DEFINED-ON-LINE '174) 
(PUT 'MO_DEG 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO_DEG 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MO_DEG (M) (CDR M)) 
(PUT 'MO_GETDEGREE 'NUMBER-OF-ARGS 2) 
(PUT 'MO_GETDEGREE 'DEFINED-ON-LINE '177) 
(PUT 'MO_GETDEGREE 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO_GETDEGREE 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MO_GETDEGREE (V L)
    ((LAMBDA (A) (MO_DELETECOMP (COND (A (MO_SUM V (CDR A))) (T V))))
     (ASSOC (COND ((NULL (CAR V)) 0) (T (CAAR V))) L))) 
(PUT 'MO_LCM 'NUMBER-OF-ARGS 2) 
(PUT 'MO_LCM 'DEFINED-ON-LINE '185) 
(PUT 'MO_LCM 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO_LCM 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MO_LCM (M1 M2)
    (PROG (X E1 E2)
      (SETQ E1 (CAR M1))
      (SETQ E2 (CAR M2))
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND E1 E2)) (RETURN NIL)))
        (PROGN
         (SETQ X
                 (CONS
                  (COND ((IGREATERP (CAR E1) (CAR E2)) (CAR E1)) (T (CAR E2)))
                  X))
         (SETQ E1 (CDR E1))
         (SETQ E2 (CDR E2)))
        (GO WHILELABEL))
      (SETQ X (APPEND (REVERSIP X) (COND (E1 E1) (T E2))))
      (RETURN (CONS (MO=SHORTEN X) (MO=DEGLIST X))))) 
(PUT 'MO_GCD 'NUMBER-OF-ARGS 2) 
(PUT 'MO_GCD 'DEFINED-ON-LINE '196) 
(PUT 'MO_GCD 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO_GCD 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MO_GCD (M1 M2)
    (PROG (X E1 E2)
      (SETQ E1 (CAR M1))
      (SETQ E2 (CAR M2))
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND E1 E2)) (RETURN NIL)))
        (PROGN
         (SETQ X
                 (CONS
                  (COND ((ILESSP (CAR E1) (CAR E2)) (CAR E1)) (T (CAR E2))) X))
         (SETQ E1 (CDR E1))
         (SETQ E2 (CDR E2)))
        (GO WHILELABEL))
      (SETQ X (REVERSIP X))
      (RETURN (CONS (MO=SHORTEN X) (MO=DEGLIST X))))) 
(PUT 'MO_NEG 'NUMBER-OF-ARGS 1) 
(PUT 'MO_NEG 'DEFINED-ON-LINE '206) 
(PUT 'MO_NEG 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO_NEG 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MO_NEG (V)
    (CONS
     (PROG (X FORALL-RESULT FORALL-ENDPTR)
       (SETQ X (CAR V))
       (COND ((NULL X) (RETURN NIL)))
       (SETQ FORALL-RESULT
               (SETQ FORALL-ENDPTR
                       (CONS ((LAMBDA (X) (MINUS X)) (CAR X)) NIL)))
      LOOPLABEL
       (SETQ X (CDR X))
       (COND ((NULL X) (RETURN FORALL-RESULT)))
       (RPLACD FORALL-ENDPTR (CONS ((LAMBDA (X) (MINUS X)) (CAR X)) NIL))
       (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
       (GO LOOPLABEL))
     (PROG (X FORALL-RESULT FORALL-ENDPTR)
       (SETQ X (CDR V))
       (COND ((NULL X) (RETURN NIL)))
       (SETQ FORALL-RESULT
               (SETQ FORALL-ENDPTR
                       (CONS ((LAMBDA (X) (MINUS X)) (CAR X)) NIL)))
      LOOPLABEL
       (SETQ X (CDR X))
       (COND ((NULL X) (RETURN FORALL-RESULT)))
       (RPLACD FORALL-ENDPTR (CONS ((LAMBDA (X) (MINUS X)) (CAR X)) NIL))
       (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
       (GO LOOPLABEL)))) 
(PUT 'MO_SUM 'NUMBER-OF-ARGS 2) 
(PUT 'MO_SUM 'DEFINED-ON-LINE '210) 
(PUT 'MO_SUM 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO_SUM 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MO_SUM (M1 M2)
    ((LAMBDA (X) (CONS (MO=SHORTEN X) (MO=DEGLIST X)))
     (MO=SUM (CAR M1) (CAR M2)))) 
(PUT 'MO=SUM 'NUMBER-OF-ARGS 2) 
(PUT 'MO=SUM 'DEFINED-ON-LINE '215) 
(PUT 'MO=SUM 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO=SUM 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MO=SUM (E1 E2)
    (PROG (X)
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND E1 E2)) (RETURN NIL)))
        (PROGN
         (SETQ X (CONS (IPLUS2 (CAR E1) (CAR E2)) X))
         (SETQ E1 (CDR E1))
         (SETQ E2 (CDR E2)))
        (GO WHILELABEL))
      (RETURN (APPEND (REVERSIP X) (COND (E1 E1) (T E2)))))) 
(PUT 'MO_DIFF 'NUMBER-OF-ARGS 2) 
(PUT 'MO_DIFF 'DEFINED-ON-LINE '222) 
(PUT 'MO_DIFF 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO_DIFF 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MO_DIFF (M1 M2) (MO_SUM M1 (MO_NEG M2))) 
(PUT 'MO_QREM 'NUMBER-OF-ARGS 2) 
(PUT 'MO_QREM 'DEFINED-ON-LINE '224) 
(PUT 'MO_QREM 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO_QREM 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MO_QREM (M N)
    (PROG (M1 N1 Q Q1)
      (SETQ Q (MINUS 1))
      (SETQ M1 (CDAR M))
      (SETQ N1 (CDAR N))
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND M1 N1 (NEQ Q 0))) (RETURN NIL)))
        (PROGN
         (COND
          ((GREATERP (CAR N1) 0)
           (PROGN
            (SETQ Q1 (QUOTIENT (CAR M1) (CAR N1)))
            (COND ((OR (EQUAL Q (MINUS 1)) (GREATERP Q Q1)) (SETQ Q Q1)))
            NIL)))
         (SETQ N1 (CDR N1))
         (SETQ M1 (CDR M1))
         NIL)
        (GO WHILELABEL))
      (COND ((OR N1 (EQUAL Q (MINUS 1))) (SETQ Q 0)))
      (RETURN (CONS Q (MO_DIFF M (MO_POWER N Q)))))) 
(PUT 'MO_POWER 'NUMBER-OF-ARGS 2) 
(PUT 'MO_POWER 'DEFINED-ON-LINE '239) 
(PUT 'MO_POWER 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO_POWER 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MO_POWER (MO N)
    (CONS
     (PROG (X FORALL-RESULT FORALL-ENDPTR)
       (SETQ X (CAR MO))
       (COND ((NULL X) (RETURN NIL)))
       (SETQ FORALL-RESULT
               (SETQ FORALL-ENDPTR
                       (CONS ((LAMBDA (X) (ITIMES2 N X)) (CAR X)) NIL)))
      LOOPLABEL
       (SETQ X (CDR X))
       (COND ((NULL X) (RETURN FORALL-RESULT)))
       (RPLACD FORALL-ENDPTR (CONS ((LAMBDA (X) (ITIMES2 N X)) (CAR X)) NIL))
       (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
       (GO LOOPLABEL))
     (PROG (X FORALL-RESULT FORALL-ENDPTR)
       (SETQ X (CDR MO))
       (COND ((NULL X) (RETURN NIL)))
       (SETQ FORALL-RESULT
               (SETQ FORALL-ENDPTR
                       (CONS ((LAMBDA (X) (ITIMES2 N X)) (CAR X)) NIL)))
      LOOPLABEL
       (SETQ X (CDR X))
       (COND ((NULL X) (RETURN FORALL-RESULT)))
       (RPLACD FORALL-ENDPTR (CONS ((LAMBDA (X) (ITIMES2 N X)) (CAR X)) NIL))
       (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
       (GO LOOPLABEL)))) 
(PUT 'MO=PAIR 'NUMBER-OF-ARGS 2) 
(PUT 'MO=PAIR 'DEFINED-ON-LINE '244) 
(PUT 'MO=PAIR 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO=PAIR 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MO=PAIR (A B)
    (COND ((OR (NULL A) (NULL B)) NIL)
          (T (CONS (CONS (CAR A) (CAR B)) (MO=PAIR (CDR A) (CDR B)))))) 
(PUT 'MO_2LIST 'NUMBER-OF-ARGS 1) 
(PUT 'MO_2LIST 'DEFINED-ON-LINE '248) 
(PUT 'MO_2LIST 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO_2LIST 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MO_2LIST (M)
    (PROG (K)
      (SETQ K (CAR M))
      (RETURN
       (PROG (X FORALL-RESULT FORALL-ENDPTR)
         (SETQ X
                 (MO=PAIR (RING_NAMES CALI=BASERING)
                  (COND (K (CDR K)) (T NIL))))
        STARTOVER
         (COND ((NULL X) (RETURN NIL)))
         (SETQ FORALL-RESULT
                 ((LAMBDA (X) (COND ((NEQ (CDR X) 0) (LIST X)))) (CAR X)))
         (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
         (SETQ X (CDR X))
         (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
        LOOPLABEL
         (COND ((NULL X) (RETURN FORALL-RESULT)))
         (RPLACD FORALL-ENDPTR
                 ((LAMBDA (X) (COND ((NEQ (CDR X) 0) (LIST X)))) (CAR X)))
         (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
         (SETQ X (CDR X))
         (GO LOOPLABEL))))) 
(PUT 'MO_VAREXP 'NUMBER-OF-ARGS 2) 
(PUT 'MO_VAREXP 'DEFINED-ON-LINE '257) 
(PUT 'MO_VAREXP 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO_VAREXP 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MO_VAREXP (VAR M)
    (COND
     ((NOT (MEMBER VAR (RING_NAMES CALI=BASERING)))
      (TYPERR VAR "variable name"))
     (T
      (PROG (C)
        (SETQ C (ASSOC VAR (MO_2LIST M)))
        (RETURN (COND (C (CDR C)) (T 0))))))) 
(PUT 'MO_INC 'NUMBER-OF-ARGS 3) 
(PUT 'MO_INC 'DEFINED-ON-LINE '266) 
(PUT 'MO_INC 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO_INC 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE MO_INC (M X J)
    (PROG (N V)
      (COND
       ((NOT (MEMBER X (SETQ V (RING_ALL_NAMES CALI=BASERING))))
        (TYPERR X "dpoly variable")))
      (SETQ M (CAR M))
      (PROG ()
       WHILELABEL
        (COND ((NOT (NEQ X (CAR V))) (RETURN NIL)))
        (PROGN
         (COND (M (PROGN (SETQ N (CONS (CAR M) N)) (SETQ M (CDR M))))
               (T (SETQ N (CONS 0 N))))
         (SETQ V (CDR V))
         NIL)
        (GO WHILELABEL))
      (COND
       (M
        (PROGN
         (SETQ N (CONS (IPLUS2 (CAR M) J) N))
         (COND ((SETQ M (CDR M)) (SETQ N (NCONC (REVERSE M) N))))))
       (T (SETQ N (CONS J N))))
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND N (EQUAL (CAR N) 0))) (RETURN NIL)))
        (SETQ N (CDR N))
        (GO WHILELABEL))
      (SETQ N (REVERSIP N))
      (RETURN (CONS N (MO=DEGLIST N))))) 
(PUT 'MO_LINEAR 'NUMBER-OF-ARGS 1) 
(PUT 'MO_LINEAR 'DEFINED-ON-LINE '284) 
(PUT 'MO_LINEAR 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO_LINEAR 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MO_LINEAR (M)
    ((LAMBDA (U)
       (COND ((AND (EQUAL (LENGTH U) 1) (EQUAL (CDAR U) 1)) (CAAR U)) (T NIL)))
     (MO_2LIST M))) 
(PUT 'MO_ECART 'NUMBER-OF-ARGS 1) 
(PUT 'MO_ECART 'DEFINED-ON-LINE '290) 
(PUT 'MO_ECART 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO_ECART 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MO_ECART (M)
    (COND ((NULL (CAR M)) 0)
          (T
           ((LAMBDA (A)
              (MO=SPROD (CDAR (COND (A (MO_SUM (CDR A) M)) (T M)))
               (RING_ECART CALI=BASERING)))
            (ATSOC (COND ((NULL (CAR M)) 0) (T (CAAR M))) CALI=DEGREES))))) 
(PUT 'MO_RADICAL 'NUMBER-OF-ARGS 1) 
(PUT 'MO_RADICAL 'DEFINED-ON-LINE '297) 
(PUT 'MO_RADICAL 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO_RADICAL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MO_RADICAL (M)
    ((LAMBDA (X) (CONS X (MO=DEGLIST X)))
     (PROG (Y FORALL-RESULT FORALL-ENDPTR)
       (SETQ Y (CAR M))
       (COND ((NULL Y) (RETURN NIL)))
       (SETQ FORALL-RESULT
               (SETQ FORALL-ENDPTR
                       (CONS
                        ((LAMBDA (Y) (COND ((EQUAL Y 0) 0) (T 1))) (CAR Y))
                        NIL)))
      LOOPLABEL
       (SETQ Y (CDR Y))
       (COND ((NULL Y) (RETURN FORALL-RESULT)))
       (RPLACD FORALL-ENDPTR
               (CONS ((LAMBDA (Y) (COND ((EQUAL Y 0) 0) (T 1))) (CAR Y)) NIL))
       (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
       (GO LOOPLABEL)))) 
(PUT 'MO_SEED 'NUMBER-OF-ARGS 2) 
(PUT 'MO_SEED 'DEFINED-ON-LINE '302) 
(PUT 'MO_SEED 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO_SEED 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MO_SEED (M S)
    (PROG (M1 X V)
      (COND
       ((NOT (SUBSETP S (SETQ V (RING_ALL_NAMES CALI=BASERING))))
        (TYPERR S "dpoly name's list")))
      (SETQ M1 (CAR M))
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND M1 V)) (RETURN NIL)))
        (PROGN
         (SETQ X (CONS (COND ((MEMBER (CAR V) S) (CAR M1)) (T 0)) X))
         (SETQ M1 (CDR M1))
         (SETQ V (CDR V)))
        (GO WHILELABEL))
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND X (EQN (CAR X) 0))) (RETURN NIL)))
        (SETQ X (CDR X))
        (GO WHILELABEL))
      (SETQ X (REVERSIP X))
      (RETURN (CONS X (MO=DEGLIST X))))) 
(PUT 'MO_WCONVERT 'NUMBER-OF-ARGS 2) 
(PUT 'MO_WCONVERT 'DEFINED-ON-LINE '317) 
(PUT 'MO_WCONVERT 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO_WCONVERT 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MO_WCONVERT (M W)
    ((LAMBDA (X) (CONS X (MO=DEGLIST X)))
     (MO=SHORTEN
      (CONS 0
            (PROG (X FORALL-RESULT FORALL-ENDPTR)
              (SETQ X W)
              (COND ((NULL X) (RETURN NIL)))
              (SETQ FORALL-RESULT
                      (SETQ FORALL-ENDPTR
                              (CONS
                               ((LAMBDA (X)
                                  (COND ((CAR M) (MO=SPROD (CDAR M) X)) (T 0)))
                                (CAR X))
                               NIL)))
             LOOPLABEL
              (SETQ X (CDR X))
              (COND ((NULL X) (RETURN FORALL-RESULT)))
              (RPLACD FORALL-ENDPTR
                      (CONS
                       ((LAMBDA (X)
                          (COND ((CAR M) (MO=SPROD (CDAR M) X)) (T 0)))
                        (CAR X))
                       NIL))
              (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
              (GO LOOPLABEL)))))) 
(PUT 'MO_FROM_A 'NUMBER-OF-ARGS 1) 
(PUT 'MO_FROM_A 'DEFINED-ON-LINE '326) 
(PUT 'MO_FROM_A 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO_FROM_A 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MO_FROM_A (U)
    (COND
     ((NOT (MEMBER U (RING_ALL_NAMES CALI=BASERING)))
      (TYPERR U "dpoly variable"))
     (T
      (PROG (X Y)
        (SETQ Y
                (MO=SHORTEN
                 (PROG (X FORALL-RESULT FORALL-ENDPTR)
                   (SETQ X (RING_ALL_NAMES CALI=BASERING))
                   (COND ((NULL X) (RETURN NIL)))
                   (SETQ FORALL-RESULT
                           (SETQ FORALL-ENDPTR
                                   (CONS
                                    ((LAMBDA (X) (COND ((EQUAL X U) 1) (T 0)))
                                     (CAR X))
                                    NIL)))
                  LOOPLABEL
                   (SETQ X (CDR X))
                   (COND ((NULL X) (RETURN FORALL-RESULT)))
                   (RPLACD FORALL-ENDPTR
                           (CONS
                            ((LAMBDA (X) (COND ((EQUAL X U) 1) (T 0))) (CAR X))
                            NIL))
                   (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                   (GO LOOPLABEL))))
        (RETURN (CONS Y (MO=DEGLIST Y))))))) 
(PUT 'MO_2A 'NUMBER-OF-ARGS 1) 
(PUT 'MO_2A 'DEFINED-ON-LINE '337) 
(PUT 'MO_2A 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO_2A 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MO_2A (E) (MO=EXPVEC2A1 (CAR E) (RING_ALL_NAMES CALI=BASERING))) 
(PUT 'MO=EXPVEC2A1 'NUMBER-OF-ARGS 2) 
(PUT 'MO=EXPVEC2A1 'DEFINED-ON-LINE '341) 
(PUT 'MO=EXPVEC2A1 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO=EXPVEC2A1 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MO=EXPVEC2A1 (U V)
    (COND ((NULL U) NIL) ((EQUAL (CAR U) 0) (MO=EXPVEC2A1 (CDR U) (CDR V)))
          ((EQUAL (CAR U) 1) (CONS (CAR V) (MO=EXPVEC2A1 (CDR U) (CDR V))))
          (T
           (CONS (LIST 'EXPT (CAR V) (CAR U)) (MO=EXPVEC2A1 (CDR U) (CDR V)))))) 
(PUT 'MO_PRIN 'NUMBER-OF-ARGS 2) 
(PUT 'MO_PRIN 'DEFINED-ON-LINE '348) 
(PUT 'MO_PRIN 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO_PRIN 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MO_PRIN (E V) (MO=DPEVLPRI1 (CAR E) (RING_ALL_NAMES CALI=BASERING) V)) 
(PUT 'MO=DPEVLPRI1 'NUMBER-OF-ARGS 3) 
(PUT 'MO=DPEVLPRI1 'DEFINED-ON-LINE '353) 
(PUT 'MO=DPEVLPRI1 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO=DPEVLPRI1 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE MO=DPEVLPRI1 (E U V)
    (COND ((NULL E) NIL) ((EQUAL (CAR E) 0) (MO=DPEVLPRI1 (CDR E) (CDR U) V))
          (T
           (PROGN
            (COND (V (PRINT_LF "*")))
            (PRINT_LF (CAR U))
            (COND
             ((IGREATERP (CAR E) 1) (PROGN (PRINT_LF "^") (PRINT_LF (CAR E)))))
            (MO=DPEVLPRI1 (CDR E) (CDR U) T))))) 
(PUT 'MO_SUPPORT 'NUMBER-OF-ARGS 1) 
(PUT 'MO_SUPPORT 'DEFINED-ON-LINE '361) 
(PUT 'MO_SUPPORT 'DEFINED-IN-FILE 'CALI/MO.RED) 
(PUT 'MO_SUPPORT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MO_SUPPORT (M)
    (PROG (U)
      (PROG (X)
        (SETQ X (RING_NAMES CALI=BASERING))
       LAB
        (COND ((NULL X) (RETURN NIL)))
        ((LAMBDA (X)
           (COND ((MO_DIVIDES? (MO_FROM_A X) M) (SETQ U (CONS X U)))))
         (CAR X))
        (SETQ X (CDR X))
        (GO LAB))
      (RETURN (REVERSIP U)))) 
(ENDMODULE) 