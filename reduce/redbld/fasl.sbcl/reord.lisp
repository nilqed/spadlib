(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'REORD)) 
(FLUID '(ALGLIST* KORD* NCMP*)) 
(SETQ ALGLIST* (CONS NIL NIL)) 
(PUT 'REORDSQ 'NUMBER-OF-ARGS 1) 
(PUT 'REORDSQ 'DEFINED-ON-LINE '36) 
(PUT 'REORDSQ 'DEFINED-IN-FILE 'POLY/REORD.RED) 
(PUT 'REORDSQ 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REORDSQ (U) (CONS (REORDER (CAR U)) (REORDER (CDR U)))) 
(PUT 'REORDER 'NUMBER-OF-ARGS 1) 
(PUT 'REORDER 'DEFINED-ON-LINE '40) 
(PUT 'REORDER 'DEFINED-IN-FILE 'POLY/REORD.RED) 
(PUT 'REORDER 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REORDER (U)
    (COND ((OR (ATOM U) (ATOM (CAR U))) U)
          (T (RADDF (RMULTPF (CAAR U) (REORDER (CDAR U))) (REORDER (CDR U)))))) 
(PUT 'RADDF 'NUMBER-OF-ARGS 2) 
(PUT 'RADDF 'DEFINED-ON-LINE '46) 
(PUT 'RADDF 'DEFINED-IN-FILE 'POLY/REORD.RED) 
(PUT 'RADDF 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE RADDF (U V)
    (COND ((NULL U) V) ((NULL V) U) ((OR (ATOM U) (ATOM (CAR U))) (ADDD U V))
          ((OR (ATOM V) (ATOM (CAR V))) (ADDD V U))
          ((AND (EQ (CAR (CAAR U)) (CAR (CAAR V)))
                (EQN (CDR (CAAR U)) (CDR (CAAR V))))
           (CONS (CONS (CAAR U) (RADDF (CDAR U) (CDAR V)))
                 (RADDF (CDR U) (CDR V))))
          ((ORDPP (CAAR U) (CAAR V)) (CONS (CAR U) (RADDF (CDR U) V)))
          (T (CONS (CAR V) (RADDF U (CDR V)))))) 
(PUT 'RMULTPF 'NUMBER-OF-ARGS 2) 
(PUT 'RMULTPF 'DEFINED-ON-LINE '57) 
(PUT 'RMULTPF 'DEFINED-IN-FILE 'POLY/REORD.RED) 
(PUT 'RMULTPF 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE RMULTPF (U V)
    (COND ((NULL V) NIL)
          ((OR (OR (ATOM V) (ATOM (CAR V))) (REORDOP (CAR U) (CAAAR V)))
           (LIST (CONS U V)))
          (T (CONS (CONS (CAAR V) (RMULTPF U (CDAR V))) (RMULTPF U (CDR V)))))) 
(PUT 'REORDOP 'NUMBER-OF-ARGS 2) 
(PUT 'REORDOP 'DEFINED-ON-LINE '63) 
(PUT 'REORDOP 'DEFINED-IN-FILE 'POLY/REORD.RED) 
(PUT 'REORDOP 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE REORDOP (U V) (OR (AND *NCMP (NONCOMP1 U) (NONCOMP1 V)) (ORDOP U V))) 
(PUT 'KERNEL-LIST 'NUMBER-OF-ARGS 1) 
(PUT 'KERNEL-LIST 'DEFINED-ON-LINE '66) 
(PUT 'KERNEL-LIST 'DEFINED-IN-FILE 'POLY/REORD.RED) 
(PUT 'KERNEL-LIST 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE KERNEL-LIST (U)
    (PROG (X FORALL-RESULT FORALL-ENDPTR)
      (SETQ X U)
     STARTOVER
      (COND ((NULL X) (RETURN NIL)))
      (SETQ FORALL-RESULT
              ((LAMBDA (X)
                 (PROGN
                  (SETQ X (REVAL1 X T))
                  (COND ((EQCAR X 'LIST) (KERNEL-LIST (CDR X)))
                        (T (LIST (*A2K X))))))
               (CAR X)))
      (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
      (SETQ X (CDR X))
      (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
     LOOPLABEL
      (COND ((NULL X) (RETURN FORALL-RESULT)))
      (RPLACD FORALL-ENDPTR
              ((LAMBDA (X)
                 (PROGN
                  (SETQ X (REVAL1 X T))
                  (COND ((EQCAR X 'LIST) (KERNEL-LIST (CDR X)))
                        (T (LIST (*A2K X))))))
               (CAR X)))
      (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
      (SETQ X (CDR X))
      (GO LOOPLABEL))) 
(PUT 'KORDER 'NUMBER-OF-ARGS 1) 
(PUT 'KORDER 'DEFINED-ON-LINE '72) 
(PUT 'KORDER 'DEFINED-IN-FILE 'POLY/REORD.RED) 
(PUT 'KORDER 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE KORDER (U)
    (PROGN
     (SETQ KORD* (COND ((EQUAL U '(NIL)) NIL) (T (KERNEL-LIST U))))
     (RMSUBS))) 
(RLISTAT '(KORDER)) 
(PUT 'SETKORDER 'NUMBER-OF-ARGS 1) 
(PUT 'SETKORDER 'DEFINED-ON-LINE '78) 
(PUT 'SETKORDER 'DEFINED-IN-FILE 'POLY/REORD.RED) 
(PUT 'SETKORDER 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SETKORDER (U)
    (PROG (V)
      (SETQ V KORD*)
      (COND ((EQUAL U V) (RETURN V)))
      (SETQ KORD* U)
      (SETQ ALGLIST* (CONS NIL NIL))
      (RETURN V))) 
(PUT 'UPDKORDER 'NUMBER-OF-ARGS 1) 
(PUT 'UPDKORDER 'DEFINED-ON-LINE '87) 
(PUT 'UPDKORDER 'DEFINED-IN-FILE 'POLY/REORD.RED) 
(PUT 'UPDKORDER 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE UPDKORDER (U)
    (PROG (V W)
      (SETQ V KORD*)
      (SETQ W (CONS U (DELETE U V)))
      (COND ((EQUAL V W) (RETURN V)))
      (SETQ KORD* W)
      (SETQ ALGLIST* (CONS NIL NIL))
      (RETURN V))) 
(ENDMODULE) 