(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'LIST)) 
(FLUID '(ORIG* POSN*)) 
(GLOBAL '(CURSYM* SIMPCOUNT* SIMPLIMIT*)) 
(PUT 'LIST 'TAG 'LIST) 
(PUT 'LIST 'RTYPEFN 'QUOTELIST) 
(PUT 'QUOTELIST 'NUMBER-OF-ARGS 1) 
(PUT 'QUOTELIST 'DEFINED-ON-LINE '42) 
(PUT 'QUOTELIST 'DEFINED-IN-FILE 'RLISP/LIST.RED) 
(PUT 'QUOTELIST 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE QUOTELIST (U) 'LIST) 
(PUT 'QUOTELIST 'INLINE '(LAMBDA (U) 'LIST)) 
(PUT 'NCONC2 'NUMBER-OF-ARGS 2) 
(PUT 'NCONC2 'DEFINED-ON-LINE '47) 
(PUT 'NCONC2 'DEFINED-IN-FILE 'RLISP/LIST.RED) 
(PUT 'NCONC2 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE NCONC2 (U V)
    (PROG (W)
      (COND ((ATOM U) (RETURN V)))
      (SETQ W U)
      (PROG ()
       WHILELABEL
        (COND ((NOT (PAIRP (CDR W))) (RETURN NIL)))
        (SETQ W (CDR W))
        (GO WHILELABEL))
      (RPLACD W V)
      (RETURN W))) 
(PUT 'XREADLIST 'NUMBER-OF-ARGS 0) 
(PUT 'XREADLIST 'DEFINED-ON-LINE '60) 
(PUT 'XREADLIST 'DEFINED-IN-FILE 'RLISP/LIST.RED) 
(PUT 'XREADLIST 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE XREADLIST NIL
    (PROG (CURSYM DELIM LST LST2)
      (COND ((EQUAL (SCAN) '*RCBKT*) (PROGN (SCAN) (RETURN (LIST 'LIST)))))
     A
      (COND
       ((NULL LST) (PROGN (SETQ LST (SETQ LST2 (ACONC LST (XREAD1 'GROUP))))))
       (T (SETQ LST2 (NCONC2 LST2 (LIST (XREAD1 'GROUP))))))
      (SETQ CURSYM CURSYM*)
      (COND
       ((EQUAL CURSYM '*SEMICOL*)
        (SYMERR "Syntax error: semicolon in list" NIL))
       ((AND (EQUAL (SCAN) '*RCBKT*) (EQUAL CURSYM '*COMMA*))
        (SYMERR "Syntax error: invalid comma in list" NIL)))
      (COND ((EQUAL CURSYM '*RCBKT*) (RETURN (CONS 'LIST LST)))
            ((NULL DELIM) (SETQ DELIM CURSYM)))
      (GO A))) 
(PUT '*LCBKT* 'STAT 'XREADLIST) 
(NEWTOK '(({) *LCBKT*)) 
(NEWTOK '((}) *RCBKT*)) 
(FLAG '(*RCBKT*) 'DELIM) 
(FLAG '(*RCBKT*) 'NODEL) 
(PUT 'LIST 'EVFN 'LISTEVAL) 
(PUT 'LIST 'SIMPFN 'SIMPIDEN) 
(PUT 'GETRLIST 'NUMBER-OF-ARGS 1) 
(PUT 'GETRLIST 'DEFINED-ON-LINE '99) 
(PUT 'GETRLIST 'DEFINED-IN-FILE 'RLISP/LIST.RED) 
(PUT 'GETRLIST 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE GETRLIST (U)
    (COND ((EQCAR U 'LIST) (CDR U))
          (T (TYPERR (COND ((EQCAR U '*SQ) (PREPSQ (CADR U))) (T U)) "list")))) 
(PUT 'LISTEVAL 'NUMBER-OF-ARGS 2) 
(PUT 'LISTEVAL 'DEFINED-ON-LINE '103) 
(PUT 'LISTEVAL 'DEFINED-IN-FILE 'RLISP/LIST.RED) 
(PUT 'LISTEVAL 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE LISTEVAL (U V)
    (PROGN
     (COND
      ((GREATERP (SETQ SIMPCOUNT* (PLUS SIMPCOUNT* 1)) SIMPLIMIT*)
       (PROGN
        (SETQ SIMPCOUNT* 0)
        (RERROR 'RLISP 18 "Simplification recursion too deep"))))
     (SETQ U
             (COND
              ((ATOM U)
               ((LAMBDA (X)
                  (LISTEVAL
                   (COND ((FLAGP U 'SHARE) (EVAL U)) (X (CADR X))
                         (T (TYPERR U 'LIST)))
                   V))
                (GET U 'AVALUE)))
              ((EQUAL (CAR U) 'LIST)
               (CONS 'LIST
                     (PROG (X FORALL-RESULT FORALL-ENDPTR)
                       (SETQ X (CDR U))
                       (COND ((NULL X) (RETURN NIL)))
                       (SETQ FORALL-RESULT
                               (SETQ FORALL-ENDPTR
                                       (CONS
                                        ((LAMBDA (X) (REVAL1 X V)) (CAR X))
                                        NIL)))
                      LOOPLABEL
                       (SETQ X (CDR X))
                       (COND ((NULL X) (RETURN FORALL-RESULT)))
                       (RPLACD FORALL-ENDPTR
                               (CONS ((LAMBDA (X) (REVAL1 X V)) (CAR X)) NIL))
                       (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                       (GO LOOPLABEL))))
              (T
               ((LAMBDA (X)
                  (COND (X (APPLY2 X (CDR U) V))
                        (T (RERROR 'RLISP 19 "Illegal operation on lists"))))
                (GET (CAR U) 'LISTFN)))))
     (SETQ SIMPCOUNT* (DIFFERENCE SIMPCOUNT* 1))
     U)) 
(PUT 'MAKELIST 'NUMBER-OF-ARGS 1) 
(PUT 'MAKELIST 'DEFINED-ON-LINE '119) 
(PUT 'MAKELIST 'DEFINED-IN-FILE 'RLISP/LIST.RED) 
(PUT 'MAKELIST 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MAKELIST (U) (CONS 'LIST U)) 
(PUT 'MAKELIST 'INLINE '(LAMBDA (U) (CONS 'LIST U))) 
(PUT 'LIST 'LENGTHFN 'LENGTHCDR) 
(PUT 'LENGTHCDR 'NUMBER-OF-ARGS 1) 
(PUT 'LENGTHCDR 'DEFINED-ON-LINE '129) 
(PUT 'LENGTHCDR 'DEFINED-IN-FILE 'RLISP/LIST.RED) 
(PUT 'LENGTHCDR 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE LENGTHCDR (U) (LENGTH (CDR U))) 
(PUT 'LENGTHCDR 'INLINE '(LAMBDA (U) (LENGTH (CDR U)))) 
(PUT 'LIST 'PRIFN 'LISTPRI) 
(PUT 'LISTPRI 'NUMBER-OF-ARGS 1) 
(PUT 'LISTPRI 'DEFINED-ON-LINE '137) 
(PUT 'LISTPRI 'DEFINED-IN-FILE 'RLISP/LIST.RED) 
(PUT 'LISTPRI 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE LISTPRI (L)
    (PROG (ORIG SPLIT U)
      (SETQ U L)
      (SETQ L (CDR L))
      (PRIN2* (GET '*LCBKT* 'PRTCH))
      (SETQ ORIG ORIG*)
      (SETQ ORIG* (COND ((LESSP POSN* 18) POSN*) (T (PLUS ORIG* 3))))
      (COND ((NULL L) (GO B)))
      (SETQ SPLIT (ZEROP (TREESIZEP1 L 40)))
     A
      (MAPRINT (NEGNUMBERCHK (CAR L)) 0)
      (SETQ L (CDR L))
      (COND ((NULL L) (GO B)))
      (OPRIN '*COMMA*)
      (COND (SPLIT (TERPRI* T)))
      (GO A)
     B
      (PRIN2* (GET '*RCBKT* 'PRTCH))
      (SETQ ORIG* ORIG)
      (RETURN U))) 
(PUT 'TREESIZEP 'NUMBER-OF-ARGS 2) 
(PUT 'TREESIZEP 'DEFINED-ON-LINE '162) 
(PUT 'TREESIZEP 'DEFINED-IN-FILE 'RLISP/LIST.RED) 
(PUT 'TREESIZEP 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE TREESIZEP (U N) (EQUAL (TREESIZEP1 U N) 0)) 
(PUT 'TREESIZEP 'INLINE '(LAMBDA (U N) (ZEROP (TREESIZEP1 U N)))) 
(PUT 'TREESIZEP1 'NUMBER-OF-ARGS 2) 
(PUT 'TREESIZEP1 'DEFINED-ON-LINE '167) 
(PUT 'TREESIZEP1 'DEFINED-IN-FILE 'RLISP/LIST.RED) 
(PUT 'TREESIZEP1 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE TREESIZEP1 (U N)
    (COND ((ATOM U) (DIFFERENCE N 1))
          ((GREATERP (SETQ N (TREESIZEP1 (CAR U) N)) 0) (TREESIZEP1 (CDR U) N))
          (T 0))) 
(PUT 'LISTEVAL0 'NUMBER-OF-ARGS 1) 
(PUT 'LISTEVAL0 'DEFINED-ON-LINE '174) 
(PUT 'LISTEVAL0 'DEFINED-IN-FILE 'RLISP/LIST.RED) 
(PUT 'LISTEVAL0 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE LISTEVAL0 (U)
    (PROG (V)
      (COND
       ((GREATERP (SETQ SIMPCOUNT* (PLUS SIMPCOUNT* 1)) SIMPLIMIT*)
        (PROGN
         (SETQ SIMPCOUNT* 0)
         (RERROR 'RLISP 20 "Simplification recursion too deep"))))
      (COND
       ((IDP U)
        (COND ((FLAGP U 'SHARE) (SETQ U (LISTEVAL0 (EVAL U))))
              ((AND (SETQ V (GET U 'AVALUE)) (NEQ (CADR V) U))
               (SETQ U (LISTEVAL0 (CADR V)))))))
      (COND
       ((AND (NOT (ATOM U)) (EQUAL (GETRTYPE (CAR U)) 'ARRAY))
        (SETQ U (LISTEVAL0 (GETELV U)))))
      (SETQ SIMPCOUNT* (DIFFERENCE SIMPCOUNT* 1))
      (RETURN U))) 
(PUT 'RLISTP 'NUMBER-OF-ARGS 1) 
(PUT 'RLISTP 'DEFINED-ON-LINE '191) 
(PUT 'RLISTP 'DEFINED-IN-FILE 'RLISP/LIST.RED) 
(PUT 'RLISTP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RLISTP (U) (EQCAR U 'LIST)) 
(PUT 'RLISTP 'INLINE '(LAMBDA (U) (EQCAR U 'LIST))) 
(PUT 'RFIRST 'NUMBER-OF-ARGS 1) 
(PUT 'RFIRST 'DEFINED-ON-LINE '194) 
(PUT 'RFIRST 'DEFINED-IN-FILE 'RLISP/LIST.RED) 
(PUT 'RFIRST 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RFIRST (U)
    (PROG (X)
      (SETQ U (CAR U))
      (COND
       ((AND (NOT (EQCAR (SETQ X (LISTEVAL0 U)) 'LIST))
             (NOT (EQCAR (SETQ X (REVAL1 U NIL)) 'LIST)))
        (TYPERR U "list")))
      (COND ((NULL (CDR X)) (PARTERR U 1)) (T (RETURN (REVAL1 (CADR X) T)))))) 
(PUT 'FIRST 'PSOPFN 'RFIRST) 
(PUT 'PARTERR 'NUMBER-OF-ARGS 2) 
(PUT 'PARTERR 'DEFINED-ON-LINE '206) 
(PUT 'PARTERR 'DEFINED-IN-FILE 'RLISP/LIST.RED) 
(PUT 'PARTERR 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE PARTERR (U V) (MSGPRI "Expression" U "does not have part" V T)) 
(PUT 'RSECOND 'NUMBER-OF-ARGS 1) 
(PUT 'RSECOND 'DEFINED-ON-LINE '209) 
(PUT 'RSECOND 'DEFINED-IN-FILE 'RLISP/LIST.RED) 
(PUT 'RSECOND 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RSECOND (U)
    (PROG (X)
      (SETQ U (CAR U))
      (COND
       ((AND (NOT (EQCAR (SETQ X (LISTEVAL0 U)) 'LIST))
             (NOT (EQCAR (SETQ X (REVAL1 U NIL)) 'LIST)))
        (TYPERR U "list")))
      (COND ((OR (NULL (CDR X)) (NULL (CDDR X))) (PARTERR U 2))
            (T (RETURN (REVAL1 (CADDR X) T)))))) 
(PUT 'SECOND 'PSOPFN 'RSECOND) 
(PUT 'RTHIRD 'NUMBER-OF-ARGS 1) 
(PUT 'RTHIRD 'DEFINED-ON-LINE '220) 
(PUT 'RTHIRD 'DEFINED-IN-FILE 'RLISP/LIST.RED) 
(PUT 'RTHIRD 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RTHIRD (U)
    (PROG (X)
      (SETQ U (CAR U))
      (COND
       ((AND (NOT (EQCAR (SETQ X (LISTEVAL0 U)) 'LIST))
             (NOT (EQCAR (SETQ X (REVAL1 U NIL)) 'LIST)))
        (TYPERR U "list")))
      (COND
       ((OR (NULL (CDR X)) (NULL (CDDR X)) (NULL (CDDDR X))) (PARTERR U 3))
       (T (RETURN (REVAL1 (CADDDR X) T)))))) 
(PUT 'THIRD 'PSOPFN 'RTHIRD) 
(DEFLIST
 '((FIRST (LAMBDA (X) 'YETUNKNOWNTYPE)) (SECOND (LAMBDA (X) 'YETUNKNOWNTYPE))
   (THIRD (LAMBDA (X) 'YETUNKNOWNTYPE)) (PART (LAMBDA (X) 'YETUNKNOWNTYPE)))
 'RTYPEFN) 
(PUT 'RREST 'NUMBER-OF-ARGS 1) 
(PUT 'RREST 'DEFINED-ON-LINE '237) 
(PUT 'RREST 'DEFINED-IN-FILE 'RLISP/LIST.RED) 
(PUT 'RREST 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RREST (U)
    (PROG (X)
      (ARGNOCHK (CONS 'CDR U))
      (SETQ U (CAR U))
      (COND
       ((AND (NOT (EQCAR (SETQ X (LISTEVAL0 U)) 'LIST))
             (NOT (EQCAR (SETQ X (REVAL1 U NIL)) 'LIST)))
        (TYPERR U "list")))
      (COND ((NULL (CDR X)) (TYPERR U "non-empty list"))
            (T
             (RETURN
              (CONS 'LIST
                    (PROG (Y FORALL-RESULT FORALL-ENDPTR)
                      (SETQ Y (CDDR X))
                      (COND ((NULL Y) (RETURN NIL)))
                      (SETQ FORALL-RESULT
                              (SETQ FORALL-ENDPTR
                                      (CONS ((LAMBDA (Y) (REVAL1 Y T)) (CAR Y))
                                            NIL)))
                     LOOPLABEL
                      (SETQ Y (CDR Y))
                      (COND ((NULL Y) (RETURN FORALL-RESULT)))
                      (RPLACD FORALL-ENDPTR
                              (CONS ((LAMBDA (Y) (REVAL1 Y T)) (CAR Y)) NIL))
                      (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                      (GO LOOPLABEL)))))))) 
(PUT 'REST 'PSOPFN 'RREST) 
(DEFLIST '((FIRST 1) (SECOND 1) (THIRD 1) (REST 1)) 'NUMBER-OF-ARGS) 
(PUT 'RAPPEND 'NUMBER-OF-ARGS 1) 
(PUT 'RAPPEND 'DEFINED-ON-LINE '251) 
(PUT 'RAPPEND 'DEFINED-IN-FILE 'RLISP/LIST.RED) 
(PUT 'RAPPEND 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RAPPEND (U)
    (PROG (X Y)
      (ARGNOCHK (CONS 'APPEND U))
      (COND
       ((NULL (EQUAL (GETRTYPE (SETQ X (REVAL1 (CAR U) T))) 'LIST))
        (TYPERR X "list"))
       ((NULL (EQUAL (GETRTYPE (SETQ Y (REVAL1 (CADR U) T))) 'LIST))
        (TYPERR Y "list"))
       (T (RETURN (CONS 'LIST (APPEND (CDR X) (CDR Y)))))))) 
(PUT 'APPEND 'PSOPFN 'RAPPEND) 
(PUT 'RCONS 'NUMBER-OF-ARGS 1) 
(PUT 'RCONS 'DEFINED-ON-LINE '263) 
(PUT 'RCONS 'DEFINED-IN-FILE 'RLISP/LIST.RED) 
(PUT 'RCONS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RCONS (U)
    (PROG (X Y Z)
      (ARGNOCHK (CONS 'CONS U))
      (COND
       ((EQUAL (SETQ Y (GETRTYPEOR (SETQ X (REVLIS U)))) 'HVECTOR)
        (RETURN
         (COND
          ((AND (GET 'CONS 'OPMTCH) (SETQ Z (OPMTCH (CONS 'CONS X))))
           (REVAL1 Z T))
          (T (PREPSQ (SUBS2 (SIMPDOT X)))))))
       ((NOT (EQUAL (GETRTYPE (CADR X)) 'LIST)) (TYPERR X "list"))
       (T (RETURN (CONS 'LIST (CONS (CAR X) (CDADR X)))))))) 
(PUT 'CONS 'PSOPFN 'RCONS) 
(PUT 'RREVERSE 'NUMBER-OF-ARGS 1) 
(PUT 'RREVERSE 'DEFINED-ON-LINE '276) 
(PUT 'RREVERSE 'DEFINED-IN-FILE 'RLISP/LIST.RED) 
(PUT 'RREVERSE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RREVERSE (U)
    (PROGN
     (ARGNOCHK (CONS 'REVERSE U))
     (COND
      ((NULL (EQUAL (GETRTYPE (SETQ U (REVAL1 (CAR U) T))) 'LIST))
       (TYPERR U "list"))
      (T (CONS 'LIST (REVERSE (CDR U))))))) 
(PUT 'REVERSE 'PSOPFN 'RREVERSE) 
(PUT 'LISTMAP 'NUMBER-OF-ARGS 2) 
(PUT 'LISTMAP 'DEFINED-ON-LINE '285) 
(PUT 'LISTMAP 'DEFINED-IN-FILE 'RLISP/LIST.RED) 
(PUT 'LISTMAP 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE LISTMAP (U V)
    (PROG (X)
      (SETQ X (CADR U))
      (COND
       ((AND (NULL (EQCAR X 'LIST)) (NULL (EQCAR (SETQ X (REVAL1 X V)) 'LIST)))
        (TYPERR (CADR U) "list")))
      (RETURN
       (CONS 'LIST
             (PROG (J FORALL-RESULT FORALL-ENDPTR)
               (SETQ J (CDR X))
               (COND ((NULL J) (RETURN NIL)))
               (SETQ FORALL-RESULT
                       (SETQ FORALL-ENDPTR
                               (CONS
                                ((LAMBDA (J)
                                   (REVAL1 (CONS (CAR U) (CONS J (CDDR U))) V))
                                 (CAR J))
                                NIL)))
              LOOPLABEL
               (SETQ J (CDR J))
               (COND ((NULL J) (RETURN FORALL-RESULT)))
               (RPLACD FORALL-ENDPTR
                       (CONS
                        ((LAMBDA (J)
                           (REVAL1 (CONS (CAR U) (CONS J (CDDR U))) V))
                         (CAR J))
                        NIL))
               (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
               (GO LOOPLABEL)))))) 
(PUT 'LIST 'AGGREGATEFN 'LISTMAP) 
(FLUID '(SORTFCN*)) 
(PUT 'LISTSORT 'NUMBER-OF-ARGS 1) 
(PUT 'LISTSORT 'DEFINED-ON-LINE '300) 
(PUT 'LISTSORT 'DEFINED-IN-FILE 'RLISP/LIST.RED) 
(PUT 'LISTSORT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE LISTSORT (U)
    (PROG (L N W)
      (COND ((NEQ (LENGTH U) 2) (GO ERR)))
      (SETQ L (CDR (LISTEVAL (CAR U) NIL)))
      (SETQ SORTFCN* (CADR U))
      (COND ((SETQ W (GET SORTFCN* 'BOOLFN)) (SETQ SORTFCN* W)))
      (COND
       ((OR (NULL (GETD SORTFCN*))
            (AND (SETQ N (GET SORTFCN* 'NUMBER-OF-ARGS)) (NEQ N 2)))
        (GO ERR)))
      (RETURN
       (CONS 'LIST
             (SORT L
                   (OR W
                       (FUNCTION
                        (LAMBDA (X Y)
                          (BOOLVALUE*
                           (REVAL1 (LIST SORTFCN* (MKQUOTE X) (MKQUOTE Y))
                                   T))))))))
     ERR
      (REDERR "illegal call to list sort"))) 
(PUT 'SORT 'PSOPFN 'LISTSORT) 
(ENDMODULE) 