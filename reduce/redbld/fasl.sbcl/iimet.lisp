(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'IIMET)) 
(GLOBAL '(CURSYM* *VAL DIMENSION*)) 
(FLUID '(*EXP ALGLIST*)) 
(PUT 'ARRAY 'NUMBER-OF-ARGS 1) 
(PUT 'ARRAY 'DEFINED-ON-LINE '34) 
(PUT 'ARRAY 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'ARRAY 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE ARRAY (U)
    (PROG (MSG ERFG)
      (SETQ MSG *MSG)
      (SETQ *MSG NIL)
      (SETQ ERFG ERFG*)
      (SETQ ERFG* NIL)
      (ARRAYFN 'SYMBOLIC
               (PROG (A FORALL-RESULT FORALL-ENDPTR)
                 (SETQ A U)
                 (COND ((NULL A) (RETURN NIL)))
                 (SETQ FORALL-RESULT
                         (SETQ FORALL-ENDPTR
                                 (CONS
                                  ((LAMBDA (A)
                                     (CONS (CAR A) (SUB1LIS (CDR A))))
                                   (CAR A))
                                  NIL)))
                LOOPLABEL
                 (SETQ A (CDR A))
                 (COND ((NULL A) (RETURN FORALL-RESULT)))
                 (RPLACD FORALL-ENDPTR
                         (CONS
                          ((LAMBDA (A) (CONS (CAR A) (SUB1LIS (CDR A))))
                           (CAR A))
                          NIL))
                 (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                 (GO LOOPLABEL)))
      (SETQ ERFG* ERFG)
      (SETQ *MSG MSG))) 
(PUT 'SUB1LIS 'NUMBER-OF-ARGS 1) 
(PUT 'SUB1LIS 'DEFINED-ON-LINE '47) 
(PUT 'SUB1LIS 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'SUB1LIS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SUB1LIS (U)
    (COND ((NULL U) NIL) (T (CONS (DIFFERENCE (CAR U) 1) (SUB1LIS (CDR U)))))) 
(SETQ SFPROD* (PROGN (SETQ ALGLIST* (CONS NIL NIL)) 1)) 
(GLOBAL '(DATE**)) 
(SETQ DATE** "IIMET Ver 1.1.2") 
(PUT 'VERSION 'STAT 'RLIS) 
(PUT 'DIFF 'SIMPFN 'SIMPIDEN) 
(GLOBAL
 '(COORDS* ICOORDS* DVARS* GRIDS* GIVEN* SAME* DIFML* IOBJS* *TWOGRID *EQFU
   *FULLEQ *CENTERGRID)) 
(SWITCH (LIST 'TWOGRID 'EQFU 'FULLEQ 'CENTERGRID)) 
(SETQ *TWOGRID T) 
(SETQ *EQFU NIL) 
(SETQ *FULLEQ T) 
(SETQ *CENTERGRID T) 
(SETQ ICOORDS* '(I J K L M N I1 J1 K1 L1 M1 N1)) 
(PUT 'COORDFN 'NUMBER-OF-ARGS 0) 
(PUT 'COORDFN 'DEFINED-ON-LINE '75) 
(PUT 'COORDFN 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'COORDFN 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE COORDFN NIL
    (PROG (COR ICOR)
      (FLAG '(INTO) 'DELIM)
      (SETQ COR (REMCOMMA (XREAD NIL)))
      (REMFLAG '(INTO) 'DELIM)
      (COND ((EQ CURSYM* 'INTO) (SETQ ICOR (REMCOMMA (XREAD NIL))))
            ((EQ CURSYM* '*SEMICOL*) (SETQ ICOR ICOORDS*))
            (T (RETURN (SYMERR 'COORDFN T))))
      (RETURN (LIST 'PUTCOR (MKQUOTE COR) (MKQUOTE ICOR))))) 
(PUT 'COORDINATES 'STAT 'COORDFN) 
(FLAG '(PUTCOR) 'NOCHANGE) 
(PUT 'PUTCOR 'NUMBER-OF-ARGS 2) 
(PUT 'PUTCOR 'DEFINED-ON-LINE '96) 
(PUT 'PUTCOR 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'PUTCOR 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE PUTCOR (U V)
    (PROG (J)
      (SETQ J 1)
      (SETQ COORDS* U)
      (PROG ()
       WHILELABEL
        (COND ((NOT U) (RETURN NIL)))
        (PROGN
         (COND
          ((NOT (IDP (CAR U)))
           (MSGPRI " Coordinate " (CAR U) " must be identifier" NIL 'HOLD)))
         (COND
          ((NOT (OR (IDP (CAR V)) (FIXP (CAR V))))
           (MSGPRI " Index " (CAR V) " must be identifier or integer" NIL
                   'HOLD)))
         (PUT (CAR U) 'INDEX (LIST (CAR V)))
         (PUT (CAR V) 'COORD (LIST (CAR U)))
         (PUT (CAR U) 'NGRID J)
         (SETQ J (PLUS J 1))
         (PUT (CAR U) 'SIMPFN 'SIMPIDEN)
         (SETQ U (CDR U))
         (SETQ V (CDR V)))
        (GO WHILELABEL)))) 
(PUT 'TCAR 'NUMBER-OF-ARGS 1) 
(PUT 'TCAR 'DEFINED-ON-LINE '115) 
(PUT 'TCAR 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'TCAR 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE TCAR (U) (COND ((PAIRP U) (CAR U)) (T U))) 
(PUT 'GRID 'NUMBER-OF-ARGS 1) 
(PUT 'GRID 'DEFINED-ON-LINE '119) 
(PUT 'GRID 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'GRID 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE GRID (U) (EVAL (LIST (GET (CAR U) 'GRID) (MKQUOTE (CDR U))))) 
(PUT 'GRID 'STAT 'RLIS) 
(PUT 'UNIFORM 'GRID 'GRIDUNIF) 
(PUT 'GRIDUNIF 'NUMBER-OF-ARGS 1) 
(PUT 'GRIDUNIF 'DEFINED-ON-LINE '127) 
(PUT 'GRIDUNIF 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'GRIDUNIF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE GRIDUNIF (U) (FLAG U 'UNIFORM)) 
(PUT 'DEPENDENCE 'NUMBER-OF-ARGS 1) 
(PUT 'DEPENDENCE 'DEFINED-ON-LINE '130) 
(PUT 'DEPENDENCE 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'DEPENDENCE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE DEPENDENCE (U)
    (PROG (X Y Z GG L TE YY Y1 YL)
      (COND ((NULL COORDS*) (REDERR " Coordinates have not been defined yet")))
      (SETQ GG (EXPLODE '*GRID))
      (SETQ L (LIST (PLUS (LENGTH COORDS*) 1)))
     A
      (SETQ X (CAR U))
      (SETQ Y (CAR X))
      (COND
       ((IDP Y)
        (COND ((NOT (MEMQ Y DVARS*)) (SETQ DVARS* (CONS Y DVARS*))) (T NIL)))
       (T (RETURN (MSGPRI " Variable " Y " must be identifier" NIL 'HOLD))))
      (SETQ Z (CDR X))
      (SETQ X (CAR Z))
      (COND ((NOT (NUMBERP X)) (GO B)))
      (COND ((EQUAL X 1) (APPLY 'VECTORS (LIST Y)))
            ((EQUAL X 2) (APPLY 'DYADS (LIST Y))) ((EQUAL X 0) T)
            (T (RETURN (ERRPRI2 (CAR U) 'HOLD))))
      (SETQ Z (CDR Z))
     B
      (SETQ YL NIL)
      (SETQ YY (EXPLODE Y))
      (SETQ TE (REVAL1 Y NIL))
      (COND ((EQCAR TE 'TENSOR) (SETQ TE (CADDR TE))) (T (SETQ TE NIL)))
      (COND
       ((EQUAL TE 1)
        (PROG (I)
          (SETQ I 1)
         LAB
          (COND ((MINUSP (DIFFERENCE DIMENSION* I)) (RETURN NIL)))
          (PROGN
           (SETQ Y1 (INTERN (COMPRESS (APPEND YY (EXPLODE I)))))
           (SETQ YL (CONS Y1 YL))
           (SETK1 (LIST Y I) Y1 T)
           (SETQ X (INTERN (COMPRESS (APPEND (EXPLODE Y1) GG))))
           (PUT Y1 'GRID X)
           (EVAL (LIST 'ARRAY (MKQUOTE (LIST (CONS X L))))))
          (SETQ I (PLUS2 I 1))
          (GO LAB)))
       ((EQUAL TE 2)
        (PROG (I)
          (SETQ I 1)
         LAB
          (COND ((MINUSP (DIFFERENCE DIMENSION* I)) (RETURN NIL)))
          (PROG (J)
            (SETQ J 1)
           LAB
            (COND ((MINUSP (DIFFERENCE DIMENSION* J)) (RETURN NIL)))
            (PROGN
             (SETQ Y1
                     (INTERN
                      (COMPRESS (APPEND YY (APPEND (EXPLODE I) (EXPLODE J))))))
             (SETQ YL (CONS Y1 YL))
             (SETK1 (LIST Y I J) Y1 T)
             (SETQ X (INTERN (COMPRESS (APPEND (EXPLODE Y1) GG))))
             (PUT Y1 'GRID X)
             (EVAL (LIST 'ARRAY (MKQUOTE (LIST (CONS X L))))))
            (SETQ J (PLUS2 J 1))
            (GO LAB))
          (SETQ I (PLUS2 I 1))
          (GO LAB)))
       (T
        (PROGN
         (SETQ YL (CONS Y YL))
         (SETQ X (INTERN (COMPRESS (APPEND YY GG))))
         (PUT Y 'GRID X)
         (EVAL (LIST 'ARRAY (MKQUOTE (LIST (CONS X L))))))))
      (PROG (A)
        (SETQ A YL)
       LAB
        (COND ((NULL A) (RETURN NIL)))
        ((LAMBDA (A) (PUT A 'SIMPFN 'SIMPIDEN)) (CAR A))
        (SETQ A (CDR A))
        (GO LAB))
      (PUT Y 'NAMES (REVERSE YL))
      (COND
       ((MEMBER TE '(1 2))
        (PROGN (PUT Y 'KKVALUE (GET Y 'KVALUE)) (REMPROP Y 'KVALUE))))
      (PROG (V)
        (SETQ V Z)
       LAB
        (COND ((NULL V) (RETURN NIL)))
        ((LAMBDA (V)
           (COND
            ((MEMQ V COORDS*)
             (PROG (W)
               (SETQ W YL)
              LAB
               (COND ((NULL W) (RETURN NIL)))
               ((LAMBDA (W) (DEPEND1 W V T)) (CAR W))
               (SETQ W (CDR W))
               (GO LAB)))
            (T (MSGPRI " Identifier " V " is not coordinate" NIL 'HOLD))))
         (CAR V))
        (SETQ V (CDR V))
        (GO LAB))
      (SETQ U (CDR U))
      (COND (U (GO A)))
      (RETURN NIL))) 
(PUT 'DEPENDENCE 'STAT 'RLIS) 
(PUT 'GIVEN 'NUMBER-OF-ARGS 1) 
(PUT 'GIVEN 'DEFINED-ON-LINE '198) 
(PUT 'GIVEN 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'GIVEN 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE GIVEN (U)
    (PROG (X XNAM)
     A
      (SETQ X (CAR U))
      (SETQ XNAM (GET X 'NAMES))
      (COND
       ((NOT (IDP X)) (MSGPRI " Variable " X " must be identifier" NIL 'HOLD))
       (XNAM (SETQ GIVEN* (UNION XNAM GIVEN*)))
       (T (MSGPRI " Identifier " X " is not variable" NIL 'HOLD)))
      (SETQ U (CDR U))
      (COND (U (GO A)))
      (RETURN NIL))) 
(PUT 'GIVEN 'STAT 'RLIS) 
(PUT 'CLEARGIVEN 'NUMBER-OF-ARGS 0) 
(PUT 'CLEARGIVEN 'DEFINED-ON-LINE '215) 
(PUT 'CLEARGIVEN 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'CLEARGIVEN 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE CLEARGIVEN NIL (PROGN (REMFLAG GIVEN* 'NOEQ) (SETQ GIVEN* NIL))) 
(PUT 'CLEARGIVEN 'STAT 'ENDSTAT) 
(FLAG '(CLEARGIVEN) 'EVAL) 
(NEWTOK '((|.| |.|) ISGR)) 
(MKOP 'ISGR) 
(INFIX (LIST 'ISGR)) 
(SETQ GRIDS* '(ONE HALF)) 
(PUT 'TRLIS 'NUMBER-OF-ARGS 0) 
(PUT 'TRLIS 'DEFINED-ON-LINE '226) 
(PUT 'TRLIS 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'TRLIS 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE TRLIS NIL
    (PROG (X)
      (PUT '* 'NEWNAM 'TIMS)
      (SETQ X (RLIS))
      (REMPROP '* 'NEWNAM)
      (RETURN X))) 
(PUT 'FORMTR 'NUMBER-OF-ARGS 3) 
(PUT 'FORMTR 'DEFINED-ON-LINE '236) 
(PUT 'FORMTR 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'FORMTR 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE FORMTR (U VARS MODE) (LIST 'ISGRID (MKQUOTE (CDR U)))) 
(PUT 'ISGRID 'NUMBER-OF-ARGS 1) 
(PUT 'ISGRID 'DEFINED-ON-LINE '239) 
(PUT 'ISGRID 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'ISGRID 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE ISGRID (U)
    (PROG (X Y Z Z1 TE GD LZ LZ1)
     A
      (SETQ X (CAR U))
      (SETQ Y (CAR X))
      (SETQ X (CDR X))
      (COND
       ((NOT (MEMQ Y DVARS*))
        (RETURN (MSGPRI " Identifier " Y " is not variable" NIL 'HOLD))))
      (COND ((NULL X) (GO ER)))
      (SETQ TE (REVAL1 Y NIL))
      (SETQ TE (COND ((EQCAR TE 'TENSOR) (CADDR TE)) (T NIL)))
      (COND
       ((OR
         (AND (EQUAL TE 1) (NULL (ATOM X)) (FIDE_INDEXP (CAR X))
              (GRIDP (CDR X)))
         (AND (EQUAL TE 2) (NULL (ATOM X)) (FIDE_INDEXP (CAR X))
              (NULL (ATOM (CDR X))) (FIDE_INDEXP (CADR X)) (GRIDP (CDDR X)))
         (AND (OR (EQUAL TE 0) (NULL TE)) (NULL (ATOM X)) (GRIDP X)))
        T)
       (T (GO ER)))
      (COND
       ((EQUAL TE 1)
        (PROGN
         (SETQ Z (CAR X))
         (SETQ X (CDR X))
         (SETQ LZ NIL)
         (COND ((NUMBERP Z) (SETQ LZ (CONS Z LZ)))
               (T
                (PROG (I)
                  (SETQ I 1)
                 LAB
                  (COND ((MINUSP (DIFFERENCE DIMENSION* I)) (RETURN NIL)))
                  (SETQ LZ (CONS I LZ))
                  (SETQ I (PLUS2 I 1))
                  (GO LAB))))
         (PROG (A)
           (SETQ A LZ)
          LAB
           (COND ((NULL A) (RETURN NIL)))
           ((LAMBDA (A)
              (PROG (B)
                (SETQ B X)
               LAB
                (COND ((NULL B) (RETURN NIL)))
                ((LAMBDA (B)
                   (SETEL
                    (LIST
                     (GET (CADR (ASSOC (LIST Y A) (GET Y 'KKVALUE))) 'GRID)
                     (CAR B))
                    (CONS (CADR B) NIL)))
                 (CAR B))
                (SETQ B (CDR B))
                (GO LAB)))
            (CAR A))
           (SETQ A (CDR A))
           (GO LAB))))
       ((EQUAL TE 2)
        (PROGN
         (SETQ Z (CAR X))
         (SETQ Z1 (CADR X))
         (SETQ X (CDDR X))
         (SETQ LZ (SETQ LZ1 NIL))
         (COND ((NUMBERP Z) (SETQ LZ (CONS Z LZ)))
               (T
                (PROG (I)
                  (SETQ I 1)
                 LAB
                  (COND ((MINUSP (DIFFERENCE DIMENSION* I)) (RETURN NIL)))
                  (SETQ LZ (CONS I LZ))
                  (SETQ I (PLUS2 I 1))
                  (GO LAB))))
         (COND ((NUMBERP Z1) (SETQ LZ1 (CONS Z1 LZ1)))
               (T
                (PROG (I)
                  (SETQ I 1)
                 LAB
                  (COND ((MINUSP (DIFFERENCE DIMENSION* I)) (RETURN NIL)))
                  (SETQ LZ1 (CONS I LZ1))
                  (SETQ I (PLUS2 I 1))
                  (GO LAB))))
         (PROG (A)
           (SETQ A LZ)
          LAB
           (COND ((NULL A) (RETURN NIL)))
           ((LAMBDA (A)
              (PROG (B)
                (SETQ B LZ1)
               LAB
                (COND ((NULL B) (RETURN NIL)))
                ((LAMBDA (B)
                   (PROG (C)
                     (SETQ C X)
                    LAB
                     (COND ((NULL C) (RETURN NIL)))
                     ((LAMBDA (C)
                        (SETEL
                         (LIST
                          (GET (CADR (ASSOC (LIST Y A B) (GET Y 'KKVALUE)))
                               'GRID)
                          (CAR C))
                         (CONS (CADR C) NIL)))
                      (CAR C))
                     (SETQ C (CDR C))
                     (GO LAB)))
                 (CAR B))
                (SETQ B (CDR B))
                (GO LAB)))
            (CAR A))
           (SETQ A (CDR A))
           (GO LAB))))
       (T
        (PROG (C)
          (SETQ C X)
         LAB
          (COND ((NULL C) (RETURN NIL)))
          ((LAMBDA (C)
             (SETEL (LIST (GET Y 'GRID) (CAR C)) (CONS (CADR C) NIL)))
           (CAR C))
          (SETQ C (CDR C))
          (GO LAB))))
      (SETQ U (CDR U))
      (COND (U (GO A)))
      (RETURN NIL)
     ER
      (ERRPRI2 (CAR U) 'HOLD))) 
(PUT 'ISGRID 'STAT 'TRLIS) 
(PUT 'ISGRID 'FORMFN 'FORMTR) 
(PUT 'FIDE_INDEXP 'NUMBER-OF-ARGS 1) 
(PUT 'FIDE_INDEXP 'DEFINED-ON-LINE '296) 
(PUT 'FIDE_INDEXP 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'FIDE_INDEXP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FIDE_INDEXP (U)
    (OR (EQ U 'TIMS) (AND (NUMBERP U) (LESSP 0 U) (LESSP U DIMENSION*)))) 
(PUT 'GRIDP 'NUMBER-OF-ARGS 1) 
(PUT 'GRIDP 'DEFINED-ON-LINE '299) 
(PUT 'GRIDP 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'GRIDP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE GRIDP (U)
    (AND (NULL (ATOM U))
         (PROG (X)
          A
           (SETQ X (CAR U))
           (COND
            ((AND (NULL (ATOM X)) (EQ (CAR X) 'ISGR) (NULL (ATOM (CDR X)))
                  (MEMQ (CADR X) COORDS*) (NULL (ATOM (CDDR X)))
                  (MEMQ (CADDR X) GRIDS*))
             (RPLACA U (CDR X)))
            (T (RETURN NIL)))
           (SETQ X (CAR U))
           (RPLACA X (GET (CAR X) 'NGRID))
           (SETQ U (CDR U))
           (COND (U (GO A)))
           (RETURN T)))) 
(PUT 'GRIDEQ 'NUMBER-OF-ARGS 1) 
(PUT 'GRIDEQ 'DEFINED-ON-LINE '315) 
(PUT 'GRIDEQ 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'GRIDEQ 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE GRIDEQ (U)
    (PROG (X Y Z)
      (SETQ X U)
     A
      (SETQ Y (CAR X))
      (COND
       ((NOT (MEMQ (CAR Y) DVARS*))
        (RETURN (MSGPRI "Identifier " (CAR Y) " is not variable" NIL 'HOLD))))
      (SETQ Z (CDR Y))
     B
      (COND
       ((AND (NOT (ATOM (CAR Z))) (EQ (CAAR Z) 'ISGR) (MEMQ (CADAR Z) COORDS*)
             (MEMQ (CADDAR Z) GRIDS*))
        (PUT (CAR Y) (CADAR Z) (CADDAR Z)))
       (T (RETURN (ERRPRI2 U 'HOLD))))
      (SETQ Z (CDR Z))
      (COND (Z (GO B)))
      (SETQ X (CDR X))
      (COND (X (GO A)))
      (RETURN NIL))) 
(PUT 'GRIDEQ 'STAT 'RLIS) 
(FLUID
 '(COORD UNVARS SUNVARS INTERPOLP NOVARS NCOR NVAR INTP ICOR GVAR HI HIP1 HIP2
   HIM1 HIM2 LHS RHS LSUN LUN XXGRID RESAR)) 
(PUT 'ZERO 'NUMBER-OF-ARGS 1) 
(PUT 'ZERO 'DEFINED-ON-LINE '355) 
(PUT 'ZERO 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'ZERO 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE ZERO (U) (CONS NIL 1)) 
(PUT 'NGETVAR 'NUMBER-OF-ARGS 2) 
(PUT 'NGETVAR 'DEFINED-ON-LINE '358) 
(PUT 'NGETVAR 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'NGETVAR 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE NGETVAR (U V)
    (COND ((ATOM U) (GET U V)) ((ATOM (CAR U)) (GET (CAR U) V)) (T NIL))) 
(PUT 'NGRID 'NUMBER-OF-ARGS 1) 
(PUT 'NGRID 'DEFINED-ON-LINE '363) 
(PUT 'NGRID 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'NGRID 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE NGRID (U) (COND ((EQ U 'ONE) 'NONE) ((EQ U 'HALF) 'NHALF) (T NIL))) 
(PUT 'GNOT 'NUMBER-OF-ARGS 1) 
(PUT 'GNOT 'DEFINED-ON-LINE '368) 
(PUT 'GNOT 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'GNOT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE GNOT (U) (COND ((EQUAL U 'ONE) 'HALF) ((EQUAL U 'HALF) 'ONE) (T NIL))) 
(PUT 'SAME 'NUMBER-OF-ARGS 1) 
(PUT 'SAME 'DEFINED-ON-LINE '374) 
(PUT 'SAME 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'SAME 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SAME (U)
    (PROG (X Y Z BO)
      (COND ((NULL SAME*) (PROGN (SETQ SAME* (LIST U)) (RETURN NIL))))
      (SETQ X SAME*)
     A
      (SETQ Y (CAR X))
      (SETQ Z U)
      (SETQ BO NIL)
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND Z (NOT BO))) (RETURN NIL)))
        (PROGN (COND ((MEMQ (CAR Z) Y) (SETQ BO T))) (SETQ Z (CDR Z)))
        (GO WHILELABEL))
      (COND (BO (GO B)))
      (SETQ X (CDR X))
      (COND (X (GO A)))
      (SETQ SAME* (CONS U SAME*))
      (RETURN NIL)
     B
      (RPLACA X (UNION Y U))
      (RETURN NIL))) 
(PUT 'SAME 'STAT 'RLIS) 
(PUT 'CLEARSAME 'NUMBER-OF-ARGS 0) 
(PUT 'CLEARSAME 'DEFINED-ON-LINE '397) 
(PUT 'CLEARSAME 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'CLEARSAME 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE CLEARSAME NIL (SETQ SAME* NIL)) 
(PUT 'CLEARSAME 'STAT 'ENDSTAT) 
(FLAG '(CLEARSAME) 'EVAL) 
(PUT 'MKSAME 'NUMBER-OF-ARGS 0) 
(PUT 'MKSAME 'DEFINED-ON-LINE '403) 
(PUT 'MKSAME 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'MKSAME 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE MKSAME NIL
    (PROG (X Y Z YY BO)
      (SETQ X (EXPNDSAME))
     A
      (SETQ Y (CAR X))
      (SETQ YY Y)
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND YY (NOT (MEMQ (CAR YY) UNVARS)))) (RETURN NIL)))
        (SETQ YY (CDR YY))
        (GO WHILELABEL))
      (COND
       ((NULL YY)
        (PROGN
         (MSGPRI " Same declaration " NIL
                 (LIST Y " doesn't contain unknown variable") NIL 'HOLD)
         (GO B))))
      (COND
       ((NEQ Y YY) (PROGN (SETQ Z (CAR Y)) (RPLACA Y (CAR YY)) (RPLACA YY Z))))
      (SETQ Z (CAR Y))
      (SETQ YY (CDR Y))
      (PUT Z 'SAMES YY)
      (SETQ NOVARS (UNION NOVARS YY))
      (PROG (A)
        (SETQ A (CDR Y))
       LAB
        (COND ((NULL A) (RETURN NIL)))
        ((LAMBDA (A)
           (COND
            ((NOT (GET A 'GRID))
             (MSGPRI " Identifier " A " is not variable" NIL 'HOLD))
            (T (PUT A 'SAME Z))))
         (CAR A))
        (SETQ A (CDR A))
        (GO LAB))
      (PROG (I)
        (SETQ I 1)
       LAB
        (COND ((MINUSP (DIFFERENCE (LENGTH COORDS*) I)) (RETURN NIL)))
        (PROGN
         (SETQ YY Y)
         (SETQ BO NIL)
         (PROG ()
          WHILELABEL
           (COND ((NOT (AND YY (NOT BO))) (RETURN NIL)))
           (PROGN
            (SETQ BO (GETEL (LIST (GET (CAR YY) 'GRID) I)))
            (SETQ YY (CDR YY)))
           (GO WHILELABEL))
         (COND (BO (FILGRID Y BO I))))
        (SETQ I (PLUS2 I 1))
        (GO LAB))
     B
      (SETQ X (CDR X))
      (COND (X (GO A)))
      (SETQ SUNVARS (SETDIFF UNVARS NOVARS))
      (RETURN UNVARS))) 
(PUT 'FILGRID 'NUMBER-OF-ARGS 3) 
(PUT 'FILGRID 'DEFINED-ON-LINE '441) 
(PUT 'FILGRID 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'FILGRID 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE FILGRID (Y BO I)
    (PROG (YY BG)
      (SETQ YY Y)
      (PROG ()
       WHILELABEL
        (COND ((NOT YY) (RETURN NIL)))
        (PROGN
         (SETQ BG (GETEL (LIST (GET (CAR YY) 'GRID) I)))
         (COND ((NULL BG) (SETEL (LIST (GET (CAR YY) 'GRID) I) BO))
               ((EQ BG BO) T)
               (T
                (MSGPRI " Same declaration " NIL
                        (LIST Y " doesn't correspond to isgrid declarations")
                        NIL 'HOLD)))
         (SETQ YY (CDR YY)))
        (GO WHILELABEL)))) 
(PUT 'EXPNDSAME 'NUMBER-OF-ARGS 0) 
(PUT 'EXPNDSAME 'DEFINED-ON-LINE '456) 
(PUT 'EXPNDSAME 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'EXPNDSAME 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE EXPNDSAME NIL
    (PROG (X Y SAM)
      (SETQ X SAME*)
     A
      (SETQ Y
              (PROG (A FORALL-RESULT FORALL-ENDPTR)
                (SETQ A (CAR X))
               STARTOVER
                (COND ((NULL A) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        ((LAMBDA (A) (COPY1 (GET A 'NAMES))) (CAR A)))
                (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
                (SETQ A (CDR A))
                (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
               LOOPLABEL
                (COND ((NULL A) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        ((LAMBDA (A) (COPY1 (GET A 'NAMES))) (CAR A)))
                (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
                (SETQ A (CDR A))
                (GO LOOPLABEL)))
      (SETQ SAM (CONS Y SAM))
      (SETQ X (CDR X))
      (COND (X (GO A)))
      (RETURN SAM))) 
(PUT 'COPY1 'NUMBER-OF-ARGS 1) 
(PUT 'COPY1 'DEFINED-ON-LINE '468) 
(PUT 'COPY1 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'COPY1 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE COPY1 (U)
    (COND ((NULL U) NIL) ((ATOM U) U) (T (CONS (CAR U) (COPY1 (CDR U)))))) 
(PUT 'NRSAME 'NUMBER-OF-ARGS 0) 
(PUT 'NRSAME 'DEFINED-ON-LINE '473) 
(PUT 'NRSAME 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'NRSAME 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE NRSAME NIL
    (PROG (A)
      (SETQ A SUNVARS)
     LAB
      (COND ((NULL A) (RETURN NIL)))
      ((LAMBDA (A)
         (PROG (X NX)
           (SETQ X (GET A 'SAMES))
           (COND
            (X
             (PROGN
              (SETQ NX (GET A 'NRVAR))
              (PROG (B)
                (SETQ B X)
               LAB
                (COND ((NULL B) (RETURN NIL)))
                ((LAMBDA (B) (PUT B 'NRVAR NX)) (CAR B))
                (SETQ B (CDR B))
                (GO LAB)))))
           (RETURN NIL)))
       (CAR A))
      (SETQ A (CDR A))
      (GO LAB))) 
(PUT 'IIM 'NUMBER-OF-ARGS 1) 
(PUT 'IIM 'DEFINED-ON-LINE '485) 
(PUT 'IIM 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'IIM 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE IIM (U)
    (PROG (XX XXX BE BEB1 VAL TWOGR)
      (IIM1 U)
      (SETQ IOBJS* (APPEND UNVARS (APPEND COORDS* GIVEN*)))
      (SETQ VAL *VAL)
      (SETQ *VAL NIL)
      (SETQ NOVARS (SETQ SUNVARS NIL))
      (COND (SAME* (MKSAME)) (T (SETQ SUNVARS UNVARS)))
      (SETQ TWOGR *TWOGRID)
      (SETQ XXX (SETDIFF GIVEN* NOVARS))
      (COND
       (*TWOGRID
        (COND ((NULL XXX) (SETQ *TWOGRID NIL)) (T (FLAG XXX 'TWOGRID))))
       (T (SETQ SUNVARS (UNION SUNVARS XXX))))
      (FLAG GIVEN* 'NOEQ)
      (SETQ XXX 0)
      (PROG (A)
        (SETQ A SUNVARS)
       LAB
        (COND ((NULL A) (RETURN NIL)))
        ((LAMBDA (A) (PROGN (PUT A 'NRVAR XXX) (SETQ XXX (PLUS XXX 1))))
         (CAR A))
        (SETQ A (CDR A))
        (GO LAB))
      (COND (SAME* (NRSAME)))
      (SETQ XXX 0)
      (PROG (A)
        (SETQ A UNVARS)
       LAB
        (COND ((NULL A) (RETURN NIL)))
        ((LAMBDA (A) (PROGN (PUT A 'NREQ XXX) (SETQ XXX (PLUS XXX 1))))
         (CAR A))
        (SETQ A (CDR A))
        (GO LAB))
      (SETQ LUN (DIFFERENCE (LENGTH UNVARS) 1))
      (SETQ LSUN (DIFFERENCE (LENGTH SUNVARS) 1))
      (EVAL
       (LIST 'ARRAY (MKQUOTE (LIST (CONS '*F2 (ADD1LIS (LIST LUN LSUN 1)))))))
      (SETQ XXX COORDS*)
     D
      (SETQ COORD (CAR XXX))
      (SETQ ICOR (TCAR (GET COORD 'INDEX)))
      (SETQ DIFML* NIL)
      (PROG (I)
        (SETQ I 0)
       LAB
        (COND ((MINUSP (DIFFERENCE 10 I)) (RETURN NIL)))
        (SETQ DIFML*
                (APPEND DIFML*
                        (PROG (A FORALL-RESULT FORALL-ENDPTR)
                          (SETQ A (GETEL (LIST 'DIFM* I)))
                          (COND ((NULL A) (RETURN NIL)))
                          (SETQ FORALL-RESULT
                                  (SETQ FORALL-ENDPTR
                                          (CONS
                                           ((LAMBDA (A)
                                              (COND
                                               ((SETQ XX (ATSOC COORD (CDR A)))
                                                (CONS (CAR A) (CDR XX)))
                                               ((SETQ XX (ATSOC 'ALL (CDR A)))
                                                (CONS (CAR A) (CDR XX)))
                                               (T NIL)))
                                            (CAR A))
                                           NIL)))
                         LOOPLABEL
                          (SETQ A (CDR A))
                          (COND ((NULL A) (RETURN FORALL-RESULT)))
                          (RPLACD FORALL-ENDPTR
                                  (CONS
                                   ((LAMBDA (A)
                                      (COND
                                       ((SETQ XX (ATSOC COORD (CDR A)))
                                        (CONS (CAR A) (CDR XX)))
                                       ((SETQ XX (ATSOC 'ALL (CDR A)))
                                        (CONS (CAR A) (CDR XX)))
                                       (T NIL)))
                                    (CAR A))
                                   NIL))
                          (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                          (GO LOOPLABEL))))
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (SETQ DIFML*
              (PROG (A FORALL-RESULT FORALL-ENDPTR)
                (SETQ A DIFML*)
               STARTOVER
                (COND ((NULL A) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (COND ((NULL (CAR A)) NIL) (T (LIST (CAR A)))))
                (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
                (SETQ A (CDR A))
                (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
               LOOPLABEL
                (COND ((NULL A) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        (COND ((NULL (CAR A)) NIL) (T (LIST (CAR A)))))
                (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
                (SETQ A (CDR A))
                (GO LOOPLABEL)))
      (COND
       (*TWOGRID
        (SETQ DIFML*
                (PROG (A FORALL-RESULT FORALL-ENDPTR)
                  (SETQ A DIFML*)
                  (COND ((NULL A) (RETURN NIL)))
                  (SETQ FORALL-RESULT
                          (SETQ FORALL-ENDPTR
                                  (CONS
                                   ((LAMBDA (A)
                                      (COND
                                       ((AND (SETQ XX (CAADR A))
                                             (OR *EQFU
                                                 (MEMQ (CAAR XX) '(F G))))
                                        (CONS (CAR A) (EXTDIF (CDR A) NIL)))
                                       (T A)))
                                    (CAR A))
                                   NIL)))
                 LOOPLABEL
                  (SETQ A (CDR A))
                  (COND ((NULL A) (RETURN FORALL-RESULT)))
                  (RPLACD FORALL-ENDPTR
                          (CONS
                           ((LAMBDA (A)
                              (COND
                               ((AND (SETQ XX (CAADR A))
                                     (OR *EQFU (MEMQ (CAAR XX) '(F G))))
                                (CONS (CAR A) (EXTDIF (CDR A) NIL)))
                               (T A)))
                            (CAR A))
                           NIL))
                  (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                  (GO LOOPLABEL)))))
      (SETQ BE (IIM2))
      (IIM21 BE)
      (COND ((CAR BE) (SETQ BEB1 (IIM22 BE)))
            (T (SETQ BEB1 (LIST (CAR BE) (CADR BE) (CAR BE)))))
      (COND
       ((NOT (FIXP INTP))
        (MSGPRI " INTP after heuristic search " NIL
                (LIST "is not a number, INTP=" INTP) NIL NIL)))
      (COND ((NOT (EQUAL INTP 0)) (IIM3 BEB1)))
      (IIM4)
      (SETQ XXX (CDR XXX))
      (COND (XXX (GO D)))
      (IIM5)
      (PROG (A)
        (SETQ A '(RTYPE AVALUE DIMENSION))
       LAB
        (COND ((NULL A) (RETURN NIL)))
        ((LAMBDA (A) (REMPROP '*F2 A)) (CAR A))
        (SETQ A (CDR A))
        (GO LAB))
      (SETQ *VAL VAL)
      (SETQ *TWOGRID TWOGR)
      (RETURN NIL))) 
(PUT 'EXTDIF 'NUMBER-OF-ARGS 2) 
(PUT 'EXTDIF 'DEFINED-ON-LINE '546) 
(PUT 'EXTDIF 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'EXTDIF 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE EXTDIF (X LG)
    (PROG (OLDS NEWS Y GY XX LGRID GG G1)
      (SETQ LGRID (GET 'DIFM* 'GRIDS))
      (SETQ GY (CAAR X))
      (SETQ GG GY)
      (PROG (A)
        (SETQ A LG)
       LAB
        (COND ((NULL A) (RETURN NIL)))
        ((LAMBDA (A) (SETQ GG (DELETE (ATSOC A GG) GG))) (CAR A))
        (SETQ A (CDR A))
        (GO LAB))
      (COND (GG (SETQ GG (CAAR GG))) (T (RETURN X)))
      (SETQ X
              (PROG (A FORALL-RESULT FORALL-ENDPTR)
                (SETQ A X)
                (COND ((NULL A) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS ((LAMBDA (A) A) (CAR A)) NIL)))
               LOOPLABEL
                (SETQ A (CDR A))
                (COND ((NULL A) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR (CONS ((LAMBDA (A) A) (CAR A)) NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
     A
      (SETQ XX X)
      (SETQ Y (CAR X))
      (SETQ GY (CAR Y))
      (SETQ G1 (ATSOC GG GY))
      (SETQ GY (CONS (CONS GG (GNOT (CDR G1))) (DELETE G1 GY)))
      (SETQ GY (ACMEMB GY LGRID))
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND (CDR XX) (NOT (EQCAR (CADR XX) GY)))) (RETURN NIL)))
        (SETQ XX (CDR XX))
        (GO WHILELABEL))
      (COND
       ((CDR XX)
        (PROGN
         (SETQ OLDS (CONS Y (CONS (CADR XX) OLDS)))
         (SETQ Y
                 (COND
                  ((OR (GREATERP (CADR Y) (CADADR XX))
                       (AND (EQUAL (CADR Y) (CADADR XX))
                            (GREATERP (SUBLENGTH (CADDR Y))
                                      (SUBLENGTH (CAR (CDDADR XX))))))
                   (CADR XX))
                  (T Y)))
         (RPLACD XX (CDDR XX))))
       (T (SETQ OLDS (CONS Y OLDS))))
      (SETQ GY (CAR Y))
      (SETQ G1 (ATSOC GG GY))
      (SETQ GY (DELETE G1 GY))
      (COND ((NULL GY) T) ((SETQ XX (ACMEMB GY LGRID)) (SETQ GY XX))
            (T (NCONC LGRID (LIST GY))))
      (SETQ Y (CONS GY (CDR Y)))
      (SETQ NEWS (CONS Y NEWS))
      (SETQ X (CDR X))
      (COND (X (GO A)))
      (COND
       ((AND (SETQ XX (CAAR NEWS)) (OR *EQFU (MEMQ (CAAR XX) '(F G))))
        (PROGN
         (SETQ OLDS (EXTDIF OLDS (CONS GG LG)))
         (SETQ NEWS (EXTDIF NEWS LG)))))
      (RETURN (NCONC OLDS NEWS)))) 
(PUT 'SUBLENGTH 'NUMBER-OF-ARGS 1) 
(PUT 'SUBLENGTH 'DEFINED-ON-LINE '592) 
(PUT 'SUBLENGTH 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'SUBLENGTH 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SUBLENGTH (U) (COND ((ATOM U) 0) (T (PLUS (LENGTH U) (SUBLENGTHCA U))))) 
(PUT 'SUBLENGTHCA 'NUMBER-OF-ARGS 1) 
(PUT 'SUBLENGTHCA 'DEFINED-ON-LINE '596) 
(PUT 'SUBLENGTHCA 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'SUBLENGTHCA 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SUBLENGTHCA (U)
    (COND ((NULL U) 0) (T (PLUS (SUBLENGTH (CAR U)) (SUBLENGTHCA (CDR U)))))) 
(PUT 'IIM1 'NUMBER-OF-ARGS 1) 
(PUT 'IIM1 'DEFINED-ON-LINE '600) 
(PUT 'IIM1 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'IIM1 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE IIM1 (U)
    (PROG (X XX E TE EXP)
      (TERPRI)
      (PRIN2T "*****************************")
      (PRIN2 "*****      Program      *****          ")
      (PRIN2T DATE**)
      (PRIN2T "*****************************")
      (SETQ EXP *EXP)
      (SETQ *EXP T)
      (SETQ RHS (SETQ LHS (SETQ UNVARS NIL)))
      (COND ((NULL COORDS*) (RETURN (LPRIE " Coordinates defined not yet"))))
      (COND ((NULL DVARS*) (RETURN (LPRIE " Variables defined not yet"))))
      (PROG (V)
        (SETQ V DVARS*)
       LAB
        (COND ((NULL V) (RETURN NIL)))
        ((LAMBDA (V)
           (COND
            ((AND (EQCAR (SETQ TE (REVAL1 V NIL)) 'TENSOR)
                  (MEMBER (CADDR TE) '(1 2)))
             (PROGN (PUT V 'KVALUE (GET V 'KKVALUE)) (RMSUBS)))))
         (CAR V))
        (SETQ V (CDR V))
        (GO LAB))
      (COND ((OR (ATOM U) (NOT (IDP (CAR U)))) (RETURN (ERRPRI2 U 'HOLD))))
      (SETQ RESAR (CAR U))
      (SETQ U (CDR U))
     A
      (COND ((OR (ATOM U) (ATOM (CDR U))) (RETURN (ERRPRI2 U 'HOLD))))
      (SETQ X (CAR U))
      (COND
       ((NOT (IDP X))
        (RETURN (MSGPRI " Parameter " X " must be identifier" NIL 'HOLD)))
       ((NOT (MEMQ X DVARS*))
        (RETURN (MSGPRI " Identifier " X " is not variable" NIL 'HOLD)))
       ((MEMQ X UNVARS)
        (RETURN (MSGPRI " Variable " X " has second appearance" NIL 'HOLD)))
       ((MEMQ X GIVEN*)
        (RETURN (MSGPRI " Variable " X " cannot be declared given" NIL 'HOLD)))
       (T (SETQ UNVARS (CONS X UNVARS))))
      (SETQ E (CADR U))
      (COND
       ((NOT (EQEXPR E))
        (RETURN (MSGPRI " Parameter " E " must be equation" NIL 'HOLD)))
       (T
        (SETQ E
                (REVAL1
                 (LIST 'TIMES (LIST 'DIFFERENCE (CADR E) (CADDR E)) SFPROD*)
                 NIL))))
      (COND
       ((ATOM E) (RETURN (MSGPRI " Equation " E " must be P.D.E." NIL 'HOLD))))
      (SETQ TE (REVAL1 X NIL))
      (SETQ TE (COND ((EQCAR TE 'TENSOR) (CADDR TE)) (T NIL)))
      (COND
       ((OR (AND (EQUAL TE 1) (EQ (CAR E) 'TENSOR) (EQUAL (CADDR E) 1))
            (AND (EQUAL TE 2) (EQ (CAR E) 'TENSOR) (EQUAL (CADDR E) 2))
            (AND (NULL TE) (EQ (CAR E) 'TENSOR) (EQUAL (CADDR E) 0)))
        (SETQ E (CADDDR E)))
       ((AND (NULL TE) (EQ (CAR E) '*SQ)) (SETQ E (CADR E)))
       (T
        (RETURN
         (MSGPRI " Tensor order of" X " does not correspond to order of " E
                 'HOLD))))
      (SETQ LHS (CONS E LHS))
      (SETQ U (CDDR U))
      (COND (U (GO A)))
      (PROG (V)
        (SETQ V DVARS*)
       LAB
        (COND ((NULL V) (RETURN NIL)))
        ((LAMBDA (V)
           (COND
            ((AND (EQCAR (SETQ TE (REVAL1 V NIL)) 'TENSOR)
                  (MEMBER (CADDR TE) '(1 2)))
             (REMPROP V 'KVALUE))))
         (CAR V))
        (SETQ V (CDR V))
        (GO LAB))
     B
      (SETQ X (CAR UNVARS))
      (SETQ E (CAR LHS))
      (SETQ TE (REVAL1 X NIL))
      (SETQ TE (COND ((EQCAR TE 'TENSOR) (CADDR TE)) (T NIL)))
      (COND ((EQUAL TE 1) (SETQ RHS (APPEND E RHS)))
            ((EQUAL TE 2)
             (PROG (A)
               (SETQ A (REVERSE E))
              LAB
               (COND ((NULL A) (RETURN NIL)))
               ((LAMBDA (A) (SETQ RHS (APPEND A RHS))) (CAR A))
               (SETQ A (CDR A))
               (GO LAB)))
            (T (SETQ RHS (CONS E RHS))))
      (SETQ XX (APPEND (GET X 'NAMES) XX))
      (SETQ UNVARS (CDR UNVARS))
      (SETQ LHS (CDR LHS))
      (COND (UNVARS (GO B)))
      (SETQ UNVARS XX)
      (SETQ LHS RHS)
      (PUT 'DIFF 'SIMPFN 'ZERO)
      (SETQ ALGLIST* (CONS NIL NIL))
      (SETQ RHS
              (PROG (A FORALL-RESULT FORALL-ENDPTR)
                (SETQ A RHS)
                (COND ((NULL A) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS ((LAMBDA (A) (RESIMP A)) (CAR A)) NIL)))
               LOOPLABEL
                (SETQ A (CDR A))
                (COND ((NULL A) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        (CONS ((LAMBDA (A) (RESIMP A)) (CAR A)) NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (PUT 'DIFF 'SIMPFN 'SIMPIDEN)
      (SETQ ALGLIST* (CONS NIL NIL))
      (SETQ X LHS)
      (SETQ XX RHS)
      (TERPRI)
      (PRIN2T "      Partial Differential Equations")
      (PRIN2T "      ==============================")
      (TERPRI)
     C
      (RPLACA XX (NEGSQ (CAR XX)))
      (RPLACA X (PREPSQ* (ADDSQ (CAR X) (CAR XX))))
      (RPLACA XX (PREPSQ* (CAR XX)))
      (MAPRIN (CAR X))
      (PRIN2* "    =    ")
      (MAPRIN (CAR XX))
      (TERPRI* T)
      (RPLACA X (PREPSQ (SIMP (CAR X))))
      (RPLACA XX (PREPSQ (SIMP (CAR XX))))
      (SETQ X (CDR X))
      (SETQ XX (CDR XX))
      (COND (X (GO C)))
      (TERPRI)
      (SETQ X (DIFFERENCE (LENGTH LHS) 1))
      (COND
       ((EQUAL X 0)
        (EVAL (LIST 'ARRAY (MKQUOTE (LIST (CONS RESAR (ADD1LIS (LIST 1))))))))
       (T
        (EVAL
         (LIST 'ARRAY (MKQUOTE (LIST (CONS RESAR (ADD1LIS (LIST X 1)))))))))
      (SETQ *EXP EXP)
      (RETURN NIL))) 
(PUT 'IIM2 'NUMBER-OF-ARGS 0) 
(PUT 'IIM2 'DEFINED-ON-LINE '704) 
(PUT 'IIM2 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'IIM2 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE IIM2 NIL
    (PROG (B E XX DIHALF DIONE DIHALFC)
      (SETQ E (APPEND (EXPLODE 'H) (EXPLODE COORD)))
      (SETQ E (INTERN (COMPRESS E)))
      (COND
       ((FLAGP COORD 'UNIFORM) (SETQ HI (SETQ HIP1 (SETQ HIM1 (SETQ HIM2 E)))))
       (T
        (PROGN
         (PUT E 'SIMPFN 'SIMPIDEN)
         (SETQ XX (TCAR (GET COORD 'INDEX)))
         (SETQ HIM1 (LIST E (LIST 'DIFFERENCE XX 1)))
         (SETQ HIM2 (LIST E (LIST 'DIFFERENCE XX 2)))
         (SETQ HI (LIST E XX))
         (SETQ HIP2 (LIST E (LIST 'PLUS XX 2)))
         (SETQ HIP1 (LIST E (LIST 'PLUS XX 1))))))
      (SETQ DIHALF
              (LIST (CONS 'DI (LIST 'QUOTIENT (LIST 'PLUS HIM1 HI) 2))
                    (CONS 'DIM1 HIM1) (CONS 'DIP1 HI)
                    (CONS 'DIM2 (LIST 'QUOTIENT (LIST 'PLUS HIM2 HIM1) 2))
                    (CONS 'DIP2 (LIST 'QUOTIENT (LIST 'PLUS HI HIP1) 2))))
      (SETQ DIHALFC
              (LIST (CONS 'DI (LIST 'QUOTIENT (LIST 'PLUS HIP1 HI) 2))
                    (CONS 'DIM1 HI) (CONS 'DIP1 HIP1)
                    (CONS 'DIM2 (LIST 'QUOTIENT (LIST 'PLUS HI HIM1) 2))
                    (CONS 'DIP2 (LIST 'QUOTIENT (LIST 'PLUS HIP2 HIP1) 2))))
      (SETQ DIONE
              (LIST (CONS 'DI HI)
                    (CONS 'DIM1 (LIST 'QUOTIENT (LIST 'PLUS HIM1 HI) 2))
                    (CONS 'DIP1 (LIST 'QUOTIENT (LIST 'PLUS HI HIP1) 2))
                    (CONS 'DIM2 HIM1) (CONS 'DIP2 HIP1)))
      (PUT 'STEPS 'ONE
           (CONS (CONS 'I ICOR) (COND (*CENTERGRID DIONE) (T DIHALF))))
      (PUT 'STEPS 'HALF
           (CONS (CONS 'I (LIST 'PLUS ICOR '(QUOTIENT 1 2)))
                 (COND (*CENTERGRID DIHALFC) (T DIONE))))
      (SETQ NCOR (GET COORD 'NGRID))
      (SETQ E NIL)
      (PROG (A)
        (SETQ A SUNVARS)
       LAB
        (COND ((NULL A) (RETURN NIL)))
        ((LAMBDA (A)
           (COND
            ((AND (SETQ XX (GETEL (LIST (GET A 'GRID) NCOR))) (CAR XX))
             (SETQ E (CONS A E)))))
         (CAR A))
        (SETQ A (CDR A))
        (GO LAB))
      (SETQ B (SETDIFF SUNVARS E))
      (RETURN (LIST B E)))) 
(PUT 'FILFREE 'NUMBER-OF-ARGS 5) 
(PUT 'FILFREE 'DEFINED-ON-LINE '770) 
(PUT 'FILFREE 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'FILFREE 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE FILFREE (VAR VGRID FREELST PGR PEQ)
    (PROG (X NX GRN NV NG NGRN G1 G2 SAML BSAM ASAM EGRID)
      (SETQ X (NGETVAR VAR 'NRVAR))
     C
      (PUT VAR PGR VGRID)
      (SETQ EGRID VGRID)
      (COND ((FLAGP VAR 'NOEQ) (GO D)))
      (SETQ NX (NGETVAR VAR 'NREQ))
      (COND ((SETQ EGRID (GET VAR COORD)) (GO A)) (T (SETQ EGRID VGRID)))
      (PUT 'F2VAL 'FREE 'F2VZERO)
      (COND
       ((GREATERP (SETQ G1 (F2EVAL NX X 0)) (SETQ G2 (F2EVAL NX X 1)))
        (SETQ EGRID (GNOT VGRID))))
      (COND ((NOT (EQUAL G1 G2)) (GO A)))
      (PUT 'F2VAL 'FREE 'F2VMIN)
      (COND
       ((GREATERP (SETQ G1 (F2EVAL NX X 0)) (SETQ G2 (F2EVAL NX X 1)))
        (SETQ EGRID (GNOT VGRID))))
      (COND ((NOT (EQUAL G1 G2)) (GO A)))
      (PUT 'F2VAL 'FREE 'F2VMAX)
      (COND
       ((GREATERP (SETQ G1 (F2EVAL NX X 0)) (SETQ G2 (F2EVAL NX X 1)))
        (SETQ EGRID (GNOT VGRID))))
     A
      (PUT VAR PEQ EGRID)
      (SETQ GRN (GNOT EGRID))
      (SETQ NG (NGRID EGRID))
      (SETQ NGRN (NGRID GRN))
      (PROG (A)
        (SETQ A FREELST)
       LAB
        (COND ((NULL A) (RETURN NIL)))
        ((LAMBDA (A)
           (PROGN
            (SETQ NV (NGETVAR A 'NRVAR))
            (SETQ ASAM (CONS A (GET A 'SAMES)))
            (PROG (AA)
              (SETQ AA ASAM)
             LAB
              (COND ((NULL AA) (RETURN NIL)))
              ((LAMBDA (AA) (PUT AA PGR EGRID)) (CAR AA))
              (SETQ AA (CDR AA))
              (GO LAB))
            (PUT A NG (CFPLUS2 (GET A NG) (GETEL (LIST '*F2 NX NV 0))))
            (PROG (AA)
              (SETQ AA ASAM)
             LAB
              (COND ((NULL AA) (RETURN NIL)))
              ((LAMBDA (AA) (PUT AA PGR GRN)) (CAR AA))
              (SETQ AA (CDR AA))
              (GO LAB))
            (PUT A NGRN (CFPLUS2 (GET A NGRN) (GETEL (LIST '*F2 NX NV 1))))
            (PROG (AA)
              (SETQ AA ASAM)
             LAB
              (COND ((NULL AA) (RETURN NIL)))
              ((LAMBDA (AA) (REMPROP AA PGR)) (CAR AA))
              (SETQ AA (CDR AA))
              (GO LAB))))
         (CAR A))
        (SETQ A (CDR A))
        (GO LAB))
      (COND (BSAM (GO D)))
      (SETQ SAML (GET VAR 'SAMES))
      (SETQ BSAM T)
     D
      (COND ((NULL SAML) (GO B)))
      (SETQ VAR (CAR SAML))
      (SETQ SAML (CDR SAML))
      (GO C)
     B
      (RETURN EGRID))) 
(PUT 'F2EVAL 'NUMBER-OF-ARGS 3) 
(PUT 'F2EVAL 'DEFINED-ON-LINE '815) 
(PUT 'F2EVAL 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'F2EVAL 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE F2EVAL (I J K) (EVAL (GETEL (LIST '*F2 I J K)))) 
(PUT 'F2PLUS 'NUMBER-OF-ARGS 4) 
(PUT 'F2PLUS 'DEFINED-ON-LINE '818) 
(PUT 'F2PLUS 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'F2PLUS 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE F2PLUS (I J K L)
    (PROG (MA X Y)
      (COND
       ((PAIRP L)
        (COND
         ((AND (EQUAL (LENGTH (CAR L)) 2) (EQUAL (CADR L) (CADDR L)))
          (SETQ L (CADR L)))
         ((AND (EQUAL (LENGTH L) 3) (EQUAL (CADR L) (CADDR L))
               (EQUAL (CADR L) (CADDDR L)) (EQUAL (CADR L) (CAR (CDDDDR L))))
          (SETQ L (CADR L))))))
      (SETQ MA (LIST '*F2 I J K))
      (SETQ X (GETEL MA))
      (COND
       ((NUMBERP L)
        (COND ((NUMBERP X) (SETEL MA (PLUS X L)))
              (T (RPLACA X (PLUS (CAR X) L)))))
       ((NUMBERP X) (SETEL MA (LIST X L)))
       ((SETQ Y (ASSOC (CAR L) (CDR X)))
        (PROGN
         (RPLACA (CDR Y) (PLUS (CADR Y) (CADR L)))
         (RPLACA (CDDR Y) (PLUS (CADDR Y) (CADDR L)))
         (COND
          ((CDDAR L)
           (PROGN
            (RPLACA (CDDDR Y) (PLUS (CADDDR Y) (CADDDR L)))
            (RPLACA (CDDDDR Y) (PLUS (CAR (CDDDDR Y)) (CAR (CDDDDR L)))))))))
       (T (RPLACD X (CONS L (CDR X))))))) 
(PUT 'F2VAR 'NUMBER-OF-ARGS 1) 
(PUT 'F2VAR 'DEFINED-ON-LINE '842) 
(PUT 'F2VAR 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'F2VAR 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE F2VAR (U)
    (COND ((NUMBERP U) U)
          (T
           (CONS 'FPLUS
                 (CONS (CAR U)
                       (PROG (A FORALL-RESULT FORALL-ENDPTR)
                         (SETQ A (CDR U))
                         (COND ((NULL A) (RETURN NIL)))
                         (SETQ FORALL-RESULT
                                 (SETQ FORALL-ENDPTR
                                         (CONS
                                          ((LAMBDA (A)
                                             (LIST 'F2VAL (CAR A) (CDR A)))
                                           (CAR A))
                                          NIL)))
                        LOOPLABEL
                         (SETQ A (CDR A))
                         (COND ((NULL A) (RETURN FORALL-RESULT)))
                         (RPLACD FORALL-ENDPTR
                                 (CONS
                                  ((LAMBDA (A) (LIST 'F2VAL (CAR A) (CDR A)))
                                   (CAR A))
                                  NIL))
                         (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                         (GO LOOPLABEL))))))) 
(PUT 'F2VAL 'DEFINED-ON-LINE '850) 
(PUT 'F2VAL 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'F2VAL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DM F2VAL (X)
    (PROG (US NS U V W N1 N2 N3 N4 GU GV GW)
      (SETQ X (CDR X))
      (SETQ US (CAR X))
      (SETQ NS (CADR X))
      (SETQ U (CAR US))
      (SETQ V (CADR US))
      (SETQ N1 (CAR NS))
      (SETQ N2 (CADR NS))
      (SETQ GU (GET U XXGRID))
      (SETQ GV (GET V XXGRID))
      (COND
       ((CDDR US)
        (PROGN
         (SETQ W (CADDR US))
         (SETQ GW (GET W XXGRID))
         (SETQ N3 (CADDR NS))
         (SETQ N4 (CADDDR NS)))))
      (RETURN
       (MKQUOTE
        (COND
         (W
          (COND
           ((AND GU GV GW)
            (COND ((AND (EQ GU GV) (EQ GU GW)) N1) ((EQ GU GV) N2)
                  ((EQ GU GW) N3) ((EQ GV GW) N4)
                  (T (APPLY (GET 'F2VAL 'FREE) (LIST US NS)))))
           ((AND GU GV)
            (COND ((EQ GU GV) (APLF2VAL U W N1 N2)) (T (APLF2VAL U W N3 N4))))
           ((AND GU GW)
            (COND ((EQ GU GW) (APLF2VAL U V N1 N3)) (T (APLF2VAL U V N2 N4))))
           ((AND GV GW)
            (COND ((EQ GV GW) (APLF2VAL U V N1 N4)) (T (APLF2VAL U V N2 N3))))
           (T (APPLY (GET 'F2VAL 'FREE) (LIST US NS)))))
         ((AND GU GV) (COND ((EQ GU GV) N1) (T N2)))
         (T (APPLY (GET 'F2VAL 'FREE) (LIST US NS)))))))) 
(PUT 'APLF2VAL 'NUMBER-OF-ARGS 4) 
(PUT 'APLF2VAL 'DEFINED-ON-LINE '892) 
(PUT 'APLF2VAL 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'APLF2VAL 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE APLF2VAL (U V N1 N2)
    (APPLY (GET 'F2VAL 'FREE) (LIST (LIST U V) (LIST N1 N2)))) 
(PUT 'FPLUS 'DEFINED-ON-LINE '895) 
(PUT 'FPLUS 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'FPLUS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DM FPLUS (U)
    (PROG (X Y Z)
      (SETQ U (CDR U))
      (SETQ Y (CAR U))
     A
      (SETQ U (CDR U))
      (SETQ Z (EVAL (CAR U)))
      (COND ((NUMBERP Z) (SETQ Y (PLUS Y Z))) (T (SETQ X (CONS Z X))))
      (COND ((CDR U) (GO A)))
      (RETURN (MKQUOTE (COND (X (CONS 'FPLUS (CONS Y X))) (T Y)))))) 
(PUT 'CFPLUS2 'NUMBER-OF-ARGS 2) 
(PUT 'CFPLUS2 'DEFINED-ON-LINE '911) 
(PUT 'CFPLUS2 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'CFPLUS2 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE CFPLUS2 (U V)
    (PROG (F2V)
      (SETQ F2V (GET 'F2VAL 'FREE))
      (PUT 'F2VAL 'FREE 'F2VUNCHANGE)
      (COND ((NOT (FIXP U)) (SETQ U (EVAL U))))
      (COND ((NOT (FIXP V)) (SETQ V (EVAL V))))
      (PUT 'F2VAL 'FREE F2V)
      (RETURN
       (COND
        ((FIXP U)
         (COND ((FIXP V) (PLUS U V))
               (T (CONS 'FPLUS (CONS (PLUS (CADR V) U) (CDDR V))))))
        ((NUMBERP V) (PROGN (RPLACA (CDR U) (PLUS (CADR U) V)) U))
        (T
         (PROGN
          (RPLACA (CDR U) (PLUS (CADR U) (CADR V)))
          (NCONC U (CDDR V)))))))) 
(PUT 'F2VUNCHANGE 'NUMBER-OF-ARGS 2) 
(PUT 'F2VUNCHANGE 'DEFINED-ON-LINE '930) 
(PUT 'F2VUNCHANGE 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'F2VUNCHANGE 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE F2VUNCHANGE (US NS) (LIST 'F2VAL US NS)) 
(PUT 'F2VZERO 'NUMBER-OF-ARGS 2) 
(PUT 'F2VZERO 'DEFINED-ON-LINE '933) 
(PUT 'F2VZERO 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'F2VZERO 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE F2VZERO (US NS) 0) 
(PUT 'F2VPLUS 'NUMBER-OF-ARGS 2) 
(PUT 'F2VPLUS 'DEFINED-ON-LINE '936) 
(PUT 'F2VPLUS 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'F2VPLUS 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE F2VPLUS (US NS) (EVAL (CONS 'PLUS NS))) 
(PUT 'F2VMAX 'NUMBER-OF-ARGS 2) 
(PUT 'F2VMAX 'DEFINED-ON-LINE '939) 
(PUT 'F2VMAX 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'F2VMAX 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE F2VMAX (US NS) (EVAL (CONS 'MAX NS))) 
(PUT 'F2VMIN 'NUMBER-OF-ARGS 2) 
(PUT 'F2VMIN 'DEFINED-ON-LINE '942) 
(PUT 'F2VMIN 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'F2VMIN 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE F2VMIN (US NS) (EVAL (CONS 'MIN NS))) 
(PUT 'F2VAL 'FSELECT 'F2VPLUS) 
(PUT 'F2VAL 'FGRID 'F2VMIN) 
(PUT 'IIM21 'NUMBER-OF-ARGS 1) 
(PUT 'IIM21 'DEFINED-ON-LINE '948) 
(PUT 'IIM21 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'IIM21 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE IIM21 (U)
    (PROG (B E LH LHE XX RH BDEF)
      (SETQ B (CAR U))
      (SETQ E (CADR U))
      (PROG (I)
        (SETQ I 0)
       LAB
        (COND ((MINUSP (DIFFERENCE LUN I)) (RETURN NIL)))
        (PROG (J)
          (SETQ J 0)
         LAB
          (COND ((MINUSP (DIFFERENCE LSUN J)) (RETURN NIL)))
          (PROGN (SETEL (LIST '*F2 I J 0) 0) (SETEL (LIST '*F2 I J 1) 0))
          (SETQ J (PLUS2 J 1))
          (GO LAB))
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (SETQ NVAR 0)
      (SETQ LH LHS)
      (SETQ RH RHS)
      (SETQ INTERPOLP NIL)
      (PUT 'INTT 'SIMPFN 'SIMPIDEN)
     A
      (SETQ LHE (CAR LH))
      (SETQ LHE (FORMLNR (LIST 'INTT LHE COORD)))
      (RPLACA LH LHE)
      (SETQ BDEF T)
      (PROG (VAR)
        (SETQ VAR SUNVARS)
       LAB
        (COND ((NULL VAR) (RETURN NIL)))
        ((LAMBDA (VAR) (COND ((GET VAR COORD) T) (T (SETQ BDEF NIL))))
         (CAR VAR))
        (SETQ VAR (CDR VAR))
        (GO LAB))
      (COND ((AND (NULL B) BDEF) (GO C)))
      (PUT 'INTT 'SIMPFN 'SIMPINTT)
      (SETQ ALGLIST* (CONS NIL NIL))
      (SIMP LHE)
      (PUT 'INTT 'SIMPFN 'SIMPIDEN)
      (COND
       (*FULLEQ
        (PROGN
         (SETQ LHE (CAR RH))
         (SETQ LHE (FORMLNR (LIST 'INTT LHE COORD)))
         (PUT 'INTT 'SIMPFN 'SIMPINTT)
         (SIMP LHE)
         (SETQ ALGLIST* (CONS NIL NIL))
         (PUT 'INTT 'SIMPFN 'SIMPIDEN)
         (SETQ RH (CDR RH)))))
     C
      (SETQ NVAR (PLUS NVAR 1))
      (SETQ LH (CDR LH))
      (COND (LH (GO A)))
      (PROG (I)
        (SETQ I 0)
       LAB
        (COND ((MINUSP (DIFFERENCE LUN I)) (RETURN NIL)))
        (PROG (J)
          (SETQ J 0)
         LAB
          (COND ((MINUSP (DIFFERENCE LSUN J)) (RETURN NIL)))
          (PROG (K)
            (SETQ K 0)
           LAB
            (COND ((MINUSP (DIFFERENCE 1 K)) (RETURN NIL)))
            (SETEL (LIST '*F2 I J K) (F2VAR (GETEL (LIST '*F2 I J K))))
            (SETQ K (PLUS2 K 1))
            (GO LAB))
          (SETQ J (PLUS2 J 1))
          (GO LAB))
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (SETQ XXGRID 'XGRID)
      (PROG (A)
        (SETQ A B)
       LAB
        (COND ((NULL A) (RETURN NIL)))
        ((LAMBDA (A) (PROGN (PUT A 'NONE 0) (PUT A 'NHALF 0))) (CAR A))
        (SETQ A (CDR A))
        (GO LAB))
      (PROG (A)
        (SETQ A E)
       LAB
        (COND ((NULL A) (RETURN NIL)))
        ((LAMBDA (A)
           (FILFREE A (CAR (GETEL (LIST (GET A 'GRID) NCOR))) B 'XGRID 'EQ))
         (CAR A))
        (SETQ A (CDR A))
        (GO LAB))
      (SETQ INTP 0)
      (PROG (A)
        (SETQ A E)
       LAB
        (COND ((NULL A) (RETURN NIL)))
        ((LAMBDA (A)
           (COND
            ((MEMQ A UNVARS)
             (PROGN
              (SETQ XX (NGETVAR A 'NREQ))
              (PROG (C)
                (SETQ C E)
               LAB
                (COND ((NULL C) (RETURN NIL)))
                ((LAMBDA (C)
                   (COND ((EQ (GET C 'XGRID) (GET A 'EQ)) (INTPFPLUS XX C 0))
                         (T (INTPFPLUS XX C 1))))
                 (CAR C))
                (SETQ C (CDR C))
                (GO LAB))))))
         (CAR A))
        (SETQ A (CDR A))
        (GO LAB))
      (PROG (A)
        (SETQ A B)
       LAB
        (COND ((NULL A) (RETURN NIL)))
        ((LAMBDA (A)
           (PROGN (PUT A 'FONE (GET A 'NONE)) (PUT A 'FHALF (GET A 'NHALF))))
         (CAR A))
        (SETQ A (CDR A))
        (GO LAB))
      (RETURN NIL))) 
(PUT 'IIM22 'NUMBER-OF-ARGS 1) 
(PUT 'IIM22 'DEFINED-ON-LINE '1018) 
(PUT 'IIM22 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'IIM22 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE IIM22 (U)
    (PROG (B E BB B1 B2 X XX X1 NV G1 G2)
      (SETQ B (CAR U))
      (SETQ E (CADR U))
      (SETQ BB B)
     F
      (SETQ X (CAR BB))
      (PUT 'F2VAL 'FREE (GET 'F2VAL 'FSELECT))
      (SETQ XX (ABS (DIFFERENCE (EVAL (GET X 'NONE)) (EVAL (GET X 'NHALF)))))
      (SETQ B2 (CDR BB))
      (PROG ()
       WHILELABEL
        (COND ((NOT B2) (RETURN NIL)))
        (COND
         ((LESSP XX
                 (SETQ X1
                         (ABS
                          (DIFFERENCE (EVAL (GET (CAR B2) 'NONE))
                                      (EVAL (GET (CAR B2) 'NHALF))))))
          (PROGN (SETQ X (CAR B2)) (SETQ XX X1) (SETQ B2 (CDR B2))))
         (T (SETQ B2 (CDR B2))))
        (GO WHILELABEL))
      (SETQ B1 (CONS X B1))
      (SETQ BB (DELETE X BB))
      (PUT 'F2VAL 'FREE (GET 'F2VAL 'FGRID))
      (PUT X 'XGRID 'ONE)
      (SETQ G1 (EVAL (GET X 'NONE)))
      (PUT X 'XGRID 'HALF)
      (SETQ G2 (EVAL (GET X 'NHALF)))
      (COND ((GREATERP G1 G2) (SETQ XX 'HALF)) (T (SETQ XX 'ONE)))
      (FILFREE X XX BB 'XGRID 'EQ)
      (INTPGPLUS X XX)
      (PROG (AX)
        (SETQ AX (CONS X (GET X 'SAMES)))
       LAB
        (COND ((NULL AX) (RETURN NIL)))
        ((LAMBDA (AX)
           (COND
            ((MEMQ AX UNVARS)
             (PROGN
              (SETQ X1 (NGETVAR AX 'NREQ))
              (PROG (A)
                (SETQ A (APPEND B1 E))
               LAB
                (COND ((NULL A) (RETURN NIL)))
                ((LAMBDA (A)
                   (COND
                    ((EQUAL (GET A 'XGRID) (GET AX 'EQ)) (INTPFPLUS X1 A 0))
                    (T (INTPFPLUS X1 A 1))))
                 (CAR A))
                (SETQ A (CDR A))
                (GO LAB))))))
         (CAR AX))
        (SETQ AX (CDR AX))
        (GO LAB))
      (COND (BB (GO F)))
      (RETURN (LIST B E B1)))) 
(PUT 'INTPFPLUS 'NUMBER-OF-ARGS 3) 
(PUT 'INTPFPLUS 'DEFINED-ON-LINE '1056) 
(PUT 'INTPFPLUS 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'INTPFPLUS 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE INTPFPLUS (NX1 A N)
    (SETQ INTP (CFPLUS2 INTP (GETEL (LIST '*F2 NX1 (NGETVAR A 'NRVAR) N))))) 
(PUT 'INTPGPLUS 'NUMBER-OF-ARGS 2) 
(PUT 'INTPGPLUS 'DEFINED-ON-LINE '1059) 
(PUT 'INTPGPLUS 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'INTPGPLUS 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE INTPGPLUS (A GA) (SETQ INTP (CFPLUS2 INTP (GET A (NGRID GA))))) 
(PUT 'IIM3 'NUMBER-OF-ARGS 1) 
(PUT 'IIM3 'DEFINED-ON-LINE '1062) 
(PUT 'IIM3 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'IIM3 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE IIM3 (U)
    (PROG (B E B1 BB)
      (PRIN2T " Backtracking needed in grid optimalization")
      (SETQ B (CAR U))
      (SETQ E (CADR U))
      (SETQ B1 (CADDR U))
      (PROG (A)
        (SETQ A B)
       LAB
        (COND ((NULL A) (RETURN NIL)))
        ((LAMBDA (A)
           (PROGN (PUT A 'NONE (GET A 'FONE)) (PUT A 'NHALF (GET A 'FHALF))))
         (CAR A))
        (SETQ A (CDR A))
        (GO LAB))
      (SETQ XXGRID 'BXGRID)
      (NBXGRID E 'BXGRID 'BEQ 'XGRID 'EQ)
      (PUT 'F2VAL 'FREE 'F2VUNCHANGE)
      (VARYBACK B1 NIL)
      (PROG (A)
        (SETQ A (UNION UNVARS GIVEN*))
       LAB
        (COND ((NULL A) (RETURN NIL)))
        ((LAMBDA (A) (PROGN (REMPROP A 'BXGRID) (REMPROP A 'BEQ))) (CAR A))
        (SETQ A (CDR A))
        (GO LAB))
      (RETURN NIL))) 
(PUT 'NBXGRID 'NUMBER-OF-ARGS 5) 
(PUT 'NBXGRID 'DEFINED-ON-LINE '1082) 
(PUT 'NBXGRID 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'NBXGRID 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE NBXGRID (U NG NE OG OE)
    (PROG (A)
      (SETQ A U)
     LAB
      (COND ((NULL A) (RETURN NIL)))
      ((LAMBDA (A)
         (PROG (B)
           (SETQ B (CONS A (GET A 'SAMES)))
          LAB
           (COND ((NULL B) (RETURN NIL)))
           ((LAMBDA (B) (PROGN (PUT B NG (GET B OG)) (PUT B NE (GET B OE))))
            (CAR B))
           (SETQ B (CDR B))
           (GO LAB)))
       (CAR A))
      (SETQ A (CDR A))
      (GO LAB))) 
(PUT 'VARYBACK 'NUMBER-OF-ARGS 2) 
(PUT 'VARYBACK 'DEFINED-ON-LINE '1088) 
(PUT 'VARYBACK 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'VARYBACK 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE VARYBACK (BB B1)
    (COND
     ((NULL BB)
      (PROG (NONE NHALF N EQG I J)
        (SETQ N 0)
        (PROG (A)
          (SETQ A UNVARS)
         LAB
          (COND ((NULL A) (RETURN NIL)))
          ((LAMBDA (A)
             (PROGN
              (SETQ NONE (SETQ NHALF 0))
              (SETQ I (GET A 'NREQ))
              (PROG (B)
                (SETQ B SUNVARS)
               LAB
                (COND ((NULL B) (RETURN NIL)))
                ((LAMBDA (B)
                   (PROGN
                    (SETQ J (GET B 'NRVAR))
                    (SETQ NONE
                            (PLUS NONE
                                  (COND
                                   ((EQ (GET B 'BXGRID) 'ONE) (F2EVAL I J 0))
                                   (T (F2EVAL I J 1)))))
                    (SETQ NHALF
                            (PLUS NHALF
                                  (COND
                                   ((EQ (GET B 'BXGRID) 'HALF) (F2EVAL I J 0))
                                   (T (F2EVAL I J 1)))))))
                 (CAR B))
                (SETQ B (CDR B))
                (GO LAB))
              (PUT A 'BEQ
                   (COND ((SETQ EQG (GET A COORD)) EQG) ((LEQ NONE NHALF) 'ONE)
                         (T 'HALF)))
              (SETQ N
                      (PLUS N
                            (COND
                             (EQG
                              (COND ((EQ EQG 'ONE) NONE) ((EQ EQG 'HALF) NHALF)
                                    (T
                                     (PROGN
                                      (MSGPRI "VARYBACK " EQG NIL NIL 'HOLD)
                                      0))))
                             ((LEQ NONE NHALF) NONE) (T NHALF))))))
           (CAR A))
          (SETQ A (CDR A))
          (GO LAB))
        (COND
         ((LESSP N INTP)
          (PROGN
           (NBXGRID B1 'XGRID 'EQ 'BXGRID 'BEQ)
           (PROG (A)
             (SETQ A UNVARS)
            LAB
             (COND ((NULL A) (RETURN NIL)))
             ((LAMBDA (A) (PUT A 'EQ (GET A 'BEQ))) (CAR A))
             (SETQ A (CDR A))
             (GO LAB))
           (SETQ INTP N))))))
     ((EQUAL INTP 0) T) (T (PROGN (VARB BB B1 'ONE) (VARB BB B1 'HALF))))) 
(PUT 'VARB 'NUMBER-OF-ARGS 3) 
(PUT 'VARB 'DEFINED-ON-LINE '1123) 
(PUT 'VARB 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'VARB 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE VARB (BB B1 XX)
    (PROG (X)
      (SETQ X (CAR BB))
      (PROG (A)
        (SETQ A (CONS X (GET X 'SAMES)))
       LAB
        (COND ((NULL A) (RETURN NIL)))
        ((LAMBDA (A) (PUT A 'BXGRID XX)) (CAR A))
        (SETQ A (CDR A))
        (GO LAB))
      (RETURN (VARYBACK (CDR BB) (CONS X B1))))) 
(PUT 'IIM4 'NUMBER-OF-ARGS 0) 
(PUT 'IIM4 'DEFINED-ON-LINE '1135) 
(PUT 'IIM4 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'IIM4 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE IIM4 NIL
    (PROG (LH RH X LHE VAR)
      (SETQ INTP (QUOTIENT INTP 6))
      (PRIN2 INTP)
      (PRIN2 " interpolations are needed in ")
      (PRIN2 COORD)
      (PRIN2T " coordinate")
      (PROG (A)
        (SETQ A UNVARS)
       LAB
        (COND ((NULL A) (RETURN NIL)))
        ((LAMBDA (A)
           (PROGN
            (PRIN2 "  Equation for ")
            (PRIN2 A)
            (PRIN2 " variable is integrated in ")
            (PRIN2 (GET A 'EQ))
            (PRIN2T " grid point")))
         (CAR A))
        (SETQ A (CDR A))
        (GO LAB))
      (SETQ INTERPOLP T)
      (PUT 'INTT 'SIMPFN 'SIMPINTERPOL)
      (SETQ LH LHS)
      (SETQ RH RHS)
      (SETQ X UNVARS)
     J
      (SETQ VAR (CAR X))
      (SETQ GVAR (GET VAR 'EQ))
      (SETQ LHE (CAR LH))
      (SETQ ALGLIST* (CONS NIL NIL))
      (SETQ LHE (PREPSQ (SIMP LHE)))
      (RPLACA LH LHE)
      (SETQ LHE (CAR RH))
      (SETQ LHE (FORMLNR (LIST 'INTT LHE COORD)))
      (SETQ LHE (PREPSQ (SIMP LHE)))
      (RPLACA RH LHE)
      (SETQ X (CDR X))
      (SETQ LH (CDR LH))
      (SETQ RH (CDR RH))
      (COND (X (GO J)))
      (PUT 'INTT 'SIMPFN 'SIMPIDEN)
      (RETURN LHS))) 
(PUT 'IIM5 'NUMBER-OF-ARGS 0) 
(PUT 'IIM5 'DEFINED-ON-LINE '1172) 
(PUT 'IIM5 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'IIM5 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE IIM5 NIL
    (PROG (LH RH VAL NREQ AR)
      (SETQ VAL *VAL)
      (SETQ *VAL NIL)
      (PROG (A)
        (SETQ A (UNION (UNION UNVARS SUNVARS) GIVEN*))
       LAB
        (COND ((NULL A) (RETURN NIL)))
        ((LAMBDA (A)
           (PROGN
            (REMPROP A 'XGRID)
            (REMPROP A 'EQ)
            (REMPROP A 'NREQ)
            (REMPROP A 'NRVAR)
            (REMPROP A 'SAMES)
            (REMPROP A 'NONE)
            (REMPROP A 'NHALF)
            (REMPROP A 'FONE)
            (REMPROP A 'FHALF)))
         (CAR A))
        (SETQ A (CDR A))
        (GO LAB))
      (REMFLAG GIVEN* 'TWOGRID)
      (REMFLAG GIVEN* 'NOEQ)
      (TERPRI)
      (PRIN2T "         Equations after Discretization Using IIM :")
      (PRIN2T "         ==========================================")
      (TERPRI)
      (SETQ LH LHS)
      (SETQ RH RHS)
      (SETQ NREQ 0)
     K
      (RPLACA LH (PREPSQ* (SIMP* (CAR LH))))
      (MAPRIN (CAR LH))
      (PRIN2* "   =   ")
      (RPLACA RH (PREPSQ* (SIMP* (CAR RH))))
      (MAPRIN (CAR RH))
      (TERPRI* T)
      (TERPRI)
      (SETQ AR
              (COND ((NULL (CDR LHS)) (LIST RESAR 0)) (T (LIST RESAR NREQ 0))))
      (SETEL AR (CAR LH))
      (SETQ AR
              (COND ((NULL (CDR LHS)) (LIST RESAR 1)) (T (LIST RESAR NREQ 1))))
      (SETEL AR (CAR RH))
      (SETQ LH (CDR LH))
      (SETQ RH (CDR RH))
      (SETQ NREQ (PLUS NREQ 1))
      (COND (LH (GO K)))
      (SETQ *VAL VAL)
      (RETURN NIL))) 
(PUT 'IIM 'STAT 'RLIS) 
(ARRAYFN 'SYMBOLIC (LIST (LIST 'DIFM* 10))) 
(PUT 'ISCOMPOSEDOF 'NUMBER-OF-ARGS 3) 
(PUT 'ISCOMPOSEDOF 'DEFINED-ON-LINE '1219) 
(PUT 'ISCOMPOSEDOF 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'ISCOMPOSEDOF 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE ISCOMPOSEDOF (X OBJS OPS)
    (COND ((NULL X) NIL)
          ((ATOM X) (COND ((IDP X) (MEMQ X OBJS)) ((FIXP X) T) (T NIL)))
          ((AND (IDP (CAR X)) (MEMQ (CAR X) OPS) (CDR X))
           (ISCOMPOS (CDR X) OBJS OPS))
          (T NIL))) 
(PUT 'ISCOMPOS 'NUMBER-OF-ARGS 3) 
(PUT 'ISCOMPOS 'DEFINED-ON-LINE '1228) 
(PUT 'ISCOMPOS 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'ISCOMPOS 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE ISCOMPOS (X OBJS OPS)
    (COND ((NULL X) T)
          ((IDP (CAR X)) (AND (MEMQ (CAR X) OBJS) (ISCOMPOS (CDR X) OBJS OPS)))
          ((NUMBERP (CAR X)) (ISCOMPOS (CDR X) OBJS OPS)) ((ATOM (CAR X)) NIL)
          ((IDP (CAAR X))
           (AND (MEMQ (CAAR X) OPS) (CDAR X) (ISCOMPOS (CDAR X) OBJS OPS)
                (ISCOMPOS (CDR X) OBJS OPS)))
          (T NIL))) 
(GLOBAL '(DIFCONST* DIFFUNCS*)) 
(SETQ DIFCONST* '(I N DI DIM1 DIP1 DIM2 DIP2)) 
(SETQ DIFFUNCS* NIL) 
(PUT 'DIFCONST 'NUMBER-OF-ARGS 1) 
(PUT 'DIFCONST 'DEFINED-ON-LINE '1242) 
(PUT 'DIFCONST 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'DIFCONST 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE DIFCONST (U) (SETQ DIFCONST* (APPEND U DIFCONST*))) 
(PUT 'DIFCONST 'STAT 'RLIS) 
(PUT 'DIFFUNC 'NUMBER-OF-ARGS 1) 
(PUT 'DIFFUNC 'DEFINED-ON-LINE '1247) 
(PUT 'DIFFUNC 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'DIFFUNC 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE DIFFUNC (U)
    (PROGN
     (SETQ DIFFUNCS* (APPEND U DIFFUNCS*))
     (PROG (A)
       (SETQ A U)
      LAB
       (COND ((NULL A) (RETURN NIL)))
       ((LAMBDA (A) (PUT A 'MATCHEQ 'MATCHDFUNC)) (CAR A))
       (SETQ A (CDR A))
       (GO LAB)))) 
(PUT 'DIFFUNC 'STAT 'RLIS) 
(PUT 'MATCHDFUNC 'NUMBER-OF-ARGS 2) 
(PUT 'MATCHDFUNC 'DEFINED-ON-LINE '1253) 
(PUT 'MATCHDFUNC 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'MATCHDFUNC 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MATCHDFUNC (U V)
    (PROG (X Y)
      (RETURN
       (COND ((AND (NULL U) (NULL V)) (LIST T)) ((OR (NULL U) (NULL V)) NIL)
             ((AND (SETQ X (MATCHEQ (CAR U) (CAR V)))
                   (SETQ Y (MATCHDFUNC (CDR U) (CDR V))))
              (UNION X Y))
             (T NIL))))) 
(PUT 'DIFMATCH 'NUMBER-OF-ARGS 1) 
(PUT 'DIFMATCH 'DEFINED-ON-LINE '1264) 
(PUT 'DIFMATCH 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'DIFMATCH 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE DIFMATCH (U)
    (PROG (L GDS GDSF PL X DX Y Z COOR)
      (SETQ COOR (CAR U))
      (COND ((NOT (ATOM COOR)) (GO ER)))
      (SETQ U (CDR U))
      (SETQ X (CAR U))
      (COND
       ((NOT
         (ISCOMPOSEDOF X '(U F X N V W G)
          (APPEND DIFFUNCS* '(DIFF TIMES EXPT QUOTIENT RECIP))))
        (GO ER)))
      (SETQ X (PREPSQ (SIMP X)))
      (SETQ L (COND ((ATOM X) 0) (T (LENGTH X))))
      (SETQ X (CONS X NIL))
      (COND
       ((NULL (SETQ Y (GETEL (LIST 'DIFM* L))))
        (SETEL (LIST 'DIFM* L) (LIST X)))
       ((SETQ Z (ASSOC (CAR X) Y)) (SETQ X Z)) (T (NCONC Y (LIST X))))
      (SETQ Y (CDR U))
     A
      (SETQ GDS NIL)
      (SETQ GDSF NIL)
      (COND ((NOT (EQEXPR (CAR Y))) (GO B)))
     A1
      (COND
       ((NOT (AND (MEMQ (CADAR Y) '(U V W F G)) (MEMQ (CADDAR Y) GRIDS*)))
        (GO ER)))
      (COND
       ((MEMQ (CADAR Y) '(F G))
        (SETQ GDSF (CONS (CONS (CADAR Y) (CADDAR Y)) GDSF)))
       (T (SETQ GDS (CONS (CONS (CADAR Y) (CADDAR Y)) GDS))))
      (SETQ Y (CDR Y))
      (COND ((NULL Y) (GO ER)))
      (COND ((EQEXPR (CAR Y)) (GO A1)))
     B
      (COND ((NOT (FIXP (CAR Y))) (GO ER)))
      (SETQ PL (CAR Y))
      (SETQ Y (CDR Y))
      (COND ((NULL Y) (GO ER)))
      (COND
       ((NOT
         (ISCOMPOSEDOF (CAR Y) DIFCONST*
          (APPEND DIFFUNCS*
                  '(U X F V W G PLUS MINUS DIFFERENCE TIMES QUOTIENT RECIP
                    EXPT))))
        (GO ER)))
      (SETQ DX (CAR Y))
      (SETQ Y (CDR Y))
      (SETQ GDS (NCONC GDSF GDS))
      (DEFDFMATCH X GDS PL (LIST DX) COOR)
      (COND (Y (GO A)))
      (RETURN NIL)
     ER
      (ERRPRI2 Y 'HOLD))) 
(PUT 'DEFDFMATCH 'NUMBER-OF-ARGS 5) 
(PUT 'DEFDFMATCH 'DEFINED-ON-LINE '1306) 
(PUT 'DEFDFMATCH 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'DEFDFMATCH 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE DEFDFMATCH (X GDS PL DX COOR)
    (PROG (Y Z YY)
      (SETQ Y (GET 'DIFM* 'GRIDS))
      (COND ((NULL Y) (PUT 'DIFM* 'GRIDS (LIST GDS))) ((NULL GDS) T)
            ((SETQ Z (ACMEMB GDS Y)) (SETQ GDS Z)) (T (NCONC Y (LIST GDS))))
      (SETQ Y (CDR X))
      (COND
       (Y
        (COND
         ((SETQ YY (ATSOC COOR Y))
          (COND
           ((SETQ Z (ASSOC GDS (CDR YY)))
            (PROGN
             (RPLACD Z (CONS PL DX))
             (MSGPRI " Difference scheme for " (CAR X) " redefined " NIL NIL)))
           (T (NCONC (CDR YY) (LIST (CONS GDS (CONS PL DX)))))))
         (T (NCONC Y (LIST (CONS COOR (LIST (CONS GDS (CONS PL DX)))))))))
       (T (RPLACD X (LIST (CONS COOR (LIST (CONS GDS (CONS PL DX))))))))
      (RETURN Y))) 
(DEFLIST '((DIFMATCH RLIS) (CLEARDIFMATCH ENDSTAT)) 'STAT) 
(PUT 'CLEARDIFMATCH 'NUMBER-OF-ARGS 0) 
(PUT 'CLEARDIFMATCH 'DEFINED-ON-LINE '1329) 
(PUT 'CLEARDIFMATCH 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'CLEARDIFMATCH 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE CLEARDIFMATCH NIL
    (PROG (I)
      (SETQ I 0)
     LAB
      (COND ((MINUSP (DIFFERENCE 10 I)) (RETURN NIL)))
      (SETEL (LIST 'DIFM* (*S2I I)) NIL)
      (SETQ I (PLUS2 I 1))
      (GO LAB))) 
(FLAG '(CLEARDIFMATCH) 'EVAL) 
(PUT 'ACMEMB 'NUMBER-OF-ARGS 2) 
(PUT 'ACMEMB 'DEFINED-ON-LINE '1334) 
(PUT 'ACMEMB 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'ACMEMB 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE ACMEMB (U V)
    (COND ((NULL V) NIL) ((ACEQ U (CAR V)) (CAR V)) (T (ACMEMB U (CDR V))))) 
(PUT 'ACEQ 'NUMBER-OF-ARGS 2) 
(PUT 'ACEQ 'DEFINED-ON-LINE '1339) 
(PUT 'ACEQ 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'ACEQ 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE ACEQ (U V)
    (COND ((NULL U) (NULL V)) ((NULL V) NIL)
          ((MEMBER (CAR U) V) (ACEQ (CDR U) (DELETE (CAR U) V))) (T NIL))) 
(PUT 'MATCHEQ 'NUMBER-OF-ARGS 2) 
(PUT 'MATCHEQ 'DEFINED-ON-LINE '1345) 
(PUT 'MATCHEQ 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'MATCHEQ 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MATCHEQ (U V)
    (COND ((OR (NULL U) (NULL V)) NIL)
          ((NUMBERP U) (COND ((EQUAL U V) (LIST T)) (T NIL)))
          ((ATOM U)
           (PROG (X)
             (SETQ X
                     (EVAL
                      (LIST (GET U 'MATCHEQ) (MKQUOTE U)
                            (MKQUOTE (COND ((ATOM V) (LIST V)) (T V))))))
             (RETURN
              (COND (X X)
                    ((AND (NULL *EXP) (PAIRP V)
                          (MEMQ (CAR V) '(PLUS DIFFERENCE)))
                     (MATCHLINEAR U V))
                    (T NIL)))))
          ((ATOM V) NIL)
          ((AND (ATOM (CAR U)) (EQ (CAR U) (CAR V)))
           (EVAL
            (LIST (GET (CAR U) 'MATCHEQ) (MKQUOTE (CDR U)) (MKQUOTE (CDR V)))))
          ((AND (NULL *EXP) (MEMQ (CAR V) '(PLUS DIFFERENCE))
                (EQ (CAR U) 'DIFF))
           (MATCHLINEAR U V))
          (T NIL))) 
(AEVAL (OPERATOR (LIST 'MATCHPLUS))) 
(FLUID '(UU VV)) 
(PUT 'MATCHLINEAR 'NUMBER-OF-ARGS 2) 
(PUT 'MATCHLINEAR 'DEFINED-ON-LINE '1371) 
(PUT 'MATCHLINEAR 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'MATCHLINEAR 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MATCHLINEAR (U V)
    (PROG (X UU VV ALG)
      (COND
       ((NOT (ATOM U))
        (RETURN
         (COND ((EQ (CAR U) 'DIFF) (MATCHLINDF U V))
               ((EQ (CAR U) 'TIMES) (MATCHLINTIMES U V)) (T NIL)))))
      (SETQ UU U)
      (SETQ VV 'FIRST)
      (SETQ X (FORMLNR (LIST 'MATCHPLUS V COORD)))
      (PUT 'MATCHPLUS 'SIMPFN 'MATCHP)
      (SETQ ALG ALGLIST*)
      (SETQ ALGLIST* (CONS NIL NIL))
      (SIMP X)
      (SETQ ALGLIST* ALG)
      (PUT 'MATCHPLUS 'SIMPFN 'SIMPIDEN)
      (RETURN (COND (VV (LIST (CONS U (COND (INTERPOLP V) (T VV))))) (T NIL))))) 
(PUT 'MATCHP 'NUMBER-OF-ARGS 1) 
(PUT 'MATCHP 'DEFINED-ON-LINE '1393) 
(PUT 'MATCHP 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'MATCHP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MATCHP (Y)
    (PROG (X)
      (COND ((NULL VV) (RETURN (CONS NIL 1))))
      (SETQ X (MATCHEQ UU (CAR Y)))
      (COND ((NULL X) (RETURN (PROG () (SETQ VV NIL) (RETURN (CONS NIL 1))))))
      (COND
       ((EQ VV 'FIRST)
        (RETURN (PROG () (SETQ VV (CDAR X)) (RETURN (CONS NIL 1))))))
      (COND ((MAINVAREQ VV (CDAR X)) (RETURN (CONS NIL 1))))
      (SETQ VV NIL)
      (RETURN (CONS NIL 1)))) 
(UNFLUID '(UU VV)) 
(PUT 'MAINVAREQ 'NUMBER-OF-ARGS 2) 
(PUT 'MAINVAREQ 'DEFINED-ON-LINE '1415) 
(PUT 'MAINVAREQ 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'MAINVAREQ 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MAINVAREQ (X Y)
    (COND ((ATOM X) (EQ X Y)) ((MEMQ (CAR X) IOBJS*) (EQ (CAR X) (CAR Y)))
          ((MEMQ (CAR X) '(DIFF EXPT))
           (AND (EQ (CAR Y) (CAR X)) (MAINVAREQ (CADR X) (CADR Y))
                (EQUAL (CDDR X) (CDDR Y))))
          (T NIL))) 
(PUT 'TLIST 'NUMBER-OF-ARGS 1) 
(PUT 'TLIST 'DEFINED-ON-LINE '1422) 
(PUT 'TLIST 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'TLIST 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE TLIST (X) (COND ((ATOM X) (LIST X)) (T X))) 
(PUT 'MATCHLINDF 'NUMBER-OF-ARGS 2) 
(PUT 'MATCHLINDF 'DEFINED-ON-LINE '1426) 
(PUT 'MATCHLINDF 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'MATCHLINDF 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MATCHLINDF (U V)
    (PROG (X Y B)
      (SETQ X
              (PROG (A FORALL-RESULT FORALL-ENDPTR)
                (SETQ A (CDR V))
                (COND ((NULL A) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS ((LAMBDA (A) (FSAMEDF A)) (CAR A)) NIL)))
               LOOPLABEL
                (SETQ A (CDR A))
                (COND ((NULL A) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        (CONS ((LAMBDA (A) (FSAMEDF A)) (CAR A)) NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (SETQ Y (CDAR X))
      (COND ((NULL Y) (RETURN NIL)))
      (SETQ X
              (PROG (A FORALL-RESULT FORALL-ENDPTR)
                (SETQ A X)
                (COND ((NULL A) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS
                                 ((LAMBDA (A)
                                    (COND ((EQUAL Y (CDR A)) (CAR A))
                                          (T (SETQ B T))))
                                  (CAR A))
                                 NIL)))
               LOOPLABEL
                (SETQ A (CDR A))
                (COND ((NULL A) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        (CONS
                         ((LAMBDA (A)
                            (COND ((EQUAL Y (CDR A)) (CAR A)) (T (SETQ B T))))
                          (CAR A))
                         NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (COND (B (RETURN NIL)))
      (SETQ X (CONS (CONS (CAR V) X) Y))
      (RETURN (MATCHDF (CDR U) X)))) 
(PUT 'FSAMEDF 'NUMBER-OF-ARGS 1) 
(PUT 'FSAMEDF 'DEFINED-ON-LINE '1439) 
(PUT 'FSAMEDF 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'FSAMEDF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FSAMEDF (U)
    (PROG (X)
      (RETURN
       (COND ((ATOM U) (CONS NIL NIL))
             ((EQ (CAR U) 'MINUS)
              (PROGN
               (SETQ X (FSAMEDF (CADR U)))
               (CONS (LIST 'MINUS (CAR X)) (CDR X))))
             ((EQ (CAR U) 'DIFF) (CONS (CADR U) (CDDR U)))
             ((EQ (CAR U) 'TIMES)
              (PROG (Y Z)
                (SETQ X (CDR U))
               A
                (COND ((OR (NULL X) (EQUAL Y T)) (GO B)))
                (COND ((NUMBERP (CAR X)) (SETQ Z (CONS (CAR X) Z)))
                      ((EQCAR (CAR X) 'DIFF)
                       (PROGN
                        (COND (Y (SETQ Y T)) (T (SETQ Y (CDDAR X))))
                        (SETQ Z (CONS (CADAR X) Z))))
                      ((DEPENDS (CAR X) COORD) (SETQ Y T))
                      (T (SETQ Z (CONS (CAR X) Z))))
                (SETQ X (CDR X))
                (GO A)
               B
                (RETURN
                 (COND ((EQUAL Y T) (CONS NIL NIL))
                       (T (CONS (CONS 'TIMES Z) Y))))))
             (T (CONS NIL NIL)))))) 
(PUT 'MATCHLINTIMES 'NUMBER-OF-ARGS 2) 
(PUT 'MATCHLINTIMES 'DEFINED-ON-LINE '1468) 
(PUT 'MATCHLINTIMES 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'MATCHLINTIMES 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MATCHLINTIMES (U V)
    (PROG (X Y Z)
      (SETQ Y (CADR V))
      (COND ((EQCAR Y 'TIMES) (SETQ Y (CDR Y)))
            ((AND (EQCAR Y 'MINUS) (EQCAR (CADR Y) 'TIMES))
             (SETQ Y (CONS (MINUS 1) (CDADR Y))))
            (T (RETURN NIL)))
      (SETQ X
              (PROG (A FORALL-RESULT FORALL-ENDPTR)
                (SETQ A (CDR V))
                (COND ((NULL A) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS
                                 ((LAMBDA (A)
                                    (COND
                                     ((EQCAR A 'TIMES)
                                      (PROGN (SETQ Y (INTERSECT Y (CDR A))) A))
                                     ((AND (EQCAR A 'MINUS)
                                           (EQCAR (CADR A) 'TIMES))
                                      (PROGN
                                       (SETQ Y (INTERSECT Y (CDADR A)))
                                       (CONS 'TIMES
                                             (CONS (MINUS 1) (CDADR A)))))
                                     (T (SETQ Y NIL))))
                                  (CAR A))
                                 NIL)))
               LOOPLABEL
                (SETQ A (CDR A))
                (COND ((NULL A) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        (CONS
                         ((LAMBDA (A)
                            (COND
                             ((EQCAR A 'TIMES)
                              (PROGN (SETQ Y (INTERSECT Y (CDR A))) A))
                             ((AND (EQCAR A 'MINUS) (EQCAR (CADR A) 'TIMES))
                              (PROGN
                               (SETQ Y (INTERSECT Y (CDADR A)))
                               (CONS 'TIMES (CONS (MINUS 1) (CDADR A)))))
                             (T (SETQ Y NIL))))
                          (CAR A))
                         NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (COND ((NULL Y) (RETURN NIL)))
      (SETQ X
              (PROG (A FORALL-RESULT FORALL-ENDPTR)
                (SETQ A X)
                (COND ((NULL A) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS
                                 ((LAMBDA (A)
                                    (PROGN
                                     (SETQ Z (SETDIFF (CDR A) Y))
                                     (COND ((NULL (CDR Z)) (CAR Z))
                                           (T (CONS 'TIMES Z)))))
                                  (CAR A))
                                 NIL)))
               LOOPLABEL
                (SETQ A (CDR A))
                (COND ((NULL A) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        (CONS
                         ((LAMBDA (A)
                            (PROGN
                             (SETQ Z (SETDIFF (CDR A) Y))
                             (COND ((NULL (CDR Z)) (CAR Z))
                                   (T (CONS 'TIMES Z)))))
                          (CAR A))
                         NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (SETQ X (CONS (CAR V) X))
      (RETURN (MATCHTIMES (CDR U) (CONS X Y))))) 
(PUT 'INTERSECT 'NUMBER-OF-ARGS 2) 
(PUT 'INTERSECT 'DEFINED-ON-LINE '1491) 
(PUT 'INTERSECT 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'INTERSECT 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE INTERSECT (U V)
    (COND ((OR (NULL U) (NULL V)) NIL)
          ((MEMBER (CAR U) V) (CONS (CAR U) (INTERSECT (CDR U) V)))
          (T (INTERSECT (CDR U) V)))) 
(PUT 'MATCHU 'NUMBER-OF-ARGS 2) 
(PUT 'MATCHU 'DEFINED-ON-LINE '1496) 
(PUT 'MATCHU 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'MATCHU 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MATCHU (U V)
    (COND
     ((OR (MEMQ (CAR V) UNVARS) (AND *EQFU (MEMQ (CAR V) GIVEN*)))
      (LIST (CONS U V)))
     ((AND (EQ (CAR V) 'DIFF) (NOT (MEMQ COORD (CDDR V)))
           (MATCHEQ U (TLIST (CADR V))))
      (LIST (CONS U (CONS (CAR V) (CONS (TLIST (CADR V)) (CDDR V))))))
     ((EQ (CAR V) 'TIMES)
      (PROG (X B1 VV)
        (SETQ X
                (PROG (A FORALL-RESULT FORALL-ENDPTR)
                  (SETQ A (CDR V))
                  (COND ((NULL A) (RETURN NIL)))
                  (SETQ FORALL-RESULT
                          (SETQ FORALL-ENDPTR
                                  (CONS ((LAMBDA (A) A) (CAR A)) NIL)))
                 LOOPLABEL
                  (SETQ A (CDR A))
                  (COND ((NULL A) (RETURN FORALL-RESULT)))
                  (RPLACD FORALL-ENDPTR (CONS ((LAMBDA (A) A) (CAR A)) NIL))
                  (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                  (GO LOOPLABEL)))
        (SETQ VV (CONS (CAR V) X))
        (SETQ B1 0)
        (PROG ()
         WHILELABEL
          (COND ((NOT (AND X (LESSP B1 2))) (RETURN NIL)))
          (PROGN
           (COND
            ((DEPENDS (CAR X) COORD)
             (PROGN
              (SETQ B1 (PLUS B1 1))
              (COND ((ATOM (CAR X)) (RPLACA X (LIST (CAR X))))))))
           (SETQ X (CDR X)))
          (GO WHILELABEL))
        (RETURN
         (COND ((OR (EQUAL B1 0) (GREATERP B1 1)) NIL) (T (CONS U VV))))))
     (T NIL))) 
(PUT 'U 'MATCHEQ 'MATCHU) 
(PUT 'V 'MATCHEQ 'MATCHU) 
(PUT 'W 'MATCHEQ 'MATCHU) 
(PUT 'MATCHF 'NUMBER-OF-ARGS 2) 
(PUT 'MATCHF 'DEFINED-ON-LINE '1522) 
(PUT 'MATCHF 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'MATCHF 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MATCHF (U V)
    (COND ((MEMQ (CAR V) GIVEN*) (LIST (CONS U V)))
          ((AND (EQ (CAR V) 'DIFF) (NOT (MEMQ COORD (CDDR V)))
                (MATCHF U (TLIST (CADR V))))
           (LIST (CONS U (CONS (CAR V) (CONS (TLIST (CADR V)) (CDDR V))))))
          (T NIL))) 
(PUT 'F 'MATCHEQ 'MATCHF) 
(PUT 'G 'MATCHEQ 'MATCHF) 
(PUT 'MATCHX 'NUMBER-OF-ARGS 2) 
(PUT 'MATCHX 'DEFINED-ON-LINE '1532) 
(PUT 'MATCHX 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'MATCHX 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MATCHX (U V) (COND ((EQ (CAR V) COORD) (LIST T)) (T NIL))) 
(PUT 'X 'MATCHEQ 'MATCHX) 
(PUT 'MATCHTIMES 'NUMBER-OF-ARGS 2) 
(PUT 'MATCHTIMES 'DEFINED-ON-LINE '1538) 
(PUT 'MATCHTIMES 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'MATCHTIMES 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MATCHTIMES (U V)
    (PROG (BOOL BO X Y Y1 ASL)
      (SETQ X U)
     A
      (SETQ Y (CONS T V))
     D
      (SETQ BOOL NIL)
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND (NOT BOOL) (CDR Y))) (RETURN NIL)))
        (PROGN (SETQ Y (CDR Y)) (SETQ BOOL (MATCHEQ (CAR X) (CAR Y))))
        (GO WHILELABEL))
      (COND ((NULL BOOL) (GO B)))
      (SETQ BO BOOL)
     C
      (COND
       ((AND (NOT (ATOM BO)) (NOT (ATOM (CAR BO))))
        (SETQ Y1 (ATSOC (CAAR BO) ASL)))
       (T (SETQ Y1 NIL)))
      (COND ((AND Y1 (NOT (EQUAL Y1 (CAR BO)))) (GO D)))
      (SETQ BO (CDR BO))
      (COND (BO (GO C)))
      (SETQ V (DELETE (CAR Y) V))
      (SETQ X (CDR X))
      (SETQ ASL (UNION BOOL ASL))
      (COND (X (GO A)))
      (COND (V (RETURN NIL)))
      (RETURN ASL)
     B
      (RETURN
       (COND
        ((AND (NULL (CDR V)) (CDR X))
         (COND ((SETQ Y (MATCHEQ (CONS 'TIMES X) (CAR V))) (UNION ASL Y))
               (T NIL)))
        (T NIL))))) 
(PUT 'TIMES 'MATCHEQ 'MATCHTIMES) 
(PUT 'MATCHEXPT 'NUMBER-OF-ARGS 2) 
(PUT 'MATCHEXPT 'DEFINED-ON-LINE '1568) 
(PUT 'MATCHEXPT 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'MATCHEXPT 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MATCHEXPT (U V)
    (COND
     ((FIXP (CADR U))
      (COND ((EQUAL (CADR U) (CADR V)) (MATCHEQ (CAR U) (CAR V))) (T NIL)))
     ((EQUAL (CADR U) 'N)
      (PROG (X)
        (SETQ X (MATCHEQ (CAR U) (CAR V)))
        (RETURN (COND (X (CONS (CONS 'N (CADR V)) X)) (T NIL)))))
     (T NIL))) 
(PUT 'EXPT 'MATCHEQ 'MATCHEXPT) 
(PUT 'MATCHQUOT 'NUMBER-OF-ARGS 2) 
(PUT 'MATCHQUOT 'DEFINED-ON-LINE '1583) 
(PUT 'MATCHQUOT 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'MATCHQUOT 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MATCHQUOT (U V)
    (PROG (MAN MAD)
      (RETURN
       (COND
        ((AND (SETQ MAN (MATCHEQ (CAR U) (CAR V)))
              (SETQ MAD (MATCHEQ (CADR U) (CADR V))))
         (UNION MAN MAD))
        (T NIL))))) 
(PUT 'QUOTIENT 'MATCHEQ 'MATCHQUOT) 
(PUT 'MATCHRECIP 'NUMBER-OF-ARGS 2) 
(PUT 'MATCHRECIP 'DEFINED-ON-LINE '1594) 
(PUT 'MATCHRECIP 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'MATCHRECIP 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MATCHRECIP (U V) (MATCHEQ (CAR U) (CAR V))) 
(PUT 'RECIP 'MATCHEQ 'MATCHRECIP) 
(PUT 'MATCHDF 'NUMBER-OF-ARGS 2) 
(PUT 'MATCHDF 'DEFINED-ON-LINE '1599) 
(PUT 'MATCHDF 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'MATCHDF 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MATCHDF (U V)
    (PROG (X ASL Y)
      (SETQ ASL (MATCHEQ (CAR U) (CAR V)))
      (COND ((NULL ASL) (RETURN NIL)))
      (SETQ Y (SETQ X (APPEND (CDR V) NIL)))
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND X (NEQ (CAR X) COORD))) (RETURN NIL)))
        (SETQ X (CDR X))
        (GO WHILELABEL))
      (COND ((NULL X) (RETURN NIL))
            ((NULL (CDDR U))
             (COND ((OR (NULL (CDR X)) (IDP (CADR X))) (GO DF1))
                   (T (RETURN NIL))))
            ((AND (CDR X) (EQUAL (CADDR U) (CADR X))) T) (T (RETURN NIL)))
      (RPLACD X (CDDR X))
     DF1
      (SETQ Y (DELETE COORD Y))
      (COND ((OR (NULL Y) (NULL INTERPOLP)) (RETURN ASL))
            (T
             (RETURN (LIST (CONS (CAR U) (CONS 'DIFF (CONS (CDAR ASL) Y))))))))) 
(PUT 'DIFF 'MATCHEQ 'MATCHDF) 
(PUT 'FINDDIFM 'NUMBER-OF-ARGS 1) 
(PUT 'FINDDIFM 'DEFINED-ON-LINE '1621) 
(PUT 'FINDDIFM 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'FINDDIFM 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FINDDIFM (U)
    (PROG (X V ASL EQFU B BFNTWO BFTWO1)
      (SETQ EQFU *EQFU)
      (COND (EQFU (SETQ *EQFU NIL)))
     A
      (SETQ X (CONS T DIFML*))
      (SETQ BFTWO1 BFNTWO)
      (SETQ BFNTWO NIL)
      (COND (*EQFU (SETQ B T)))
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND (CDR X) (NOT ASL))) (RETURN NIL)))
        (PROGN
         (SETQ X (CDR X))
         (SETQ ASL (MATCHEQ (CAAR X) U))
         (COND
          (ASL
           (PROG (A)
             (SETQ A ASL)
            LAB
             (COND ((NULL A) (RETURN NIL)))
             ((LAMBDA (A)
                (COND
                 ((AND (NOT (ATOM A)) (MEMQ (CAR A) '(F G))
                       (OR (MEMQ (CADR A) NOVARS)
                           (AND (NULL *TWOGRID) (MEMQ (CADR A) SUNVARS)))
                       (NULL (ATSOC (CAR A) (CAADAR X))))
                  (SETQ BFNTWO T))))
              (CAR A))
             (SETQ A (CDR A))
             (GO LAB))))
         (COND (BFNTWO (SETQ ASL NIL))))
        (GO WHILELABEL))
      (SETQ *EQFU EQFU)
      (COND ((NULL ASL) (COND ((AND (NULL B) EQFU) (GO A)) (T (GO NM)))))
      (RETURN (LIST (CONS (CONS 'X COORD) (DELETE T ASL)) (CDAR X)))
     NM
      (COND
       ((AND (EQCAR U 'TIMES) (NULL *EXP))
        (PROGN
         (SETQ *EXP T)
         (SETQ ALGLIST* (CONS NIL NIL))
         (SETQ V (PREPSQ (SIMP U)))
         (SETQ V (FORMLNR (LIST 'INTT V COORD)))
         (SETQ *EXP NIL)
         (COND
          ((AND (NULL (ATOM V)) (MEMQ (CAR V) '(PLUS DIFFERENCE)))
           (RETURN (CONS 'SPECIAL (SIMP V))))))))
      (MSGPRI " Matching of " U " term not find " NIL 'HOLD)
      (COND
       ((OR BFNTWO BFTWO1)
        (LPRIE " Variable of type F not defined on grids in DIFMATCH")))
      (RETURN NIL))) 
(PUT 'TDIFPAIR 'NUMBER-OF-ARGS 1) 
(PUT 'TDIFPAIR 'DEFINED-ON-LINE '1660) 
(PUT 'TDIFPAIR 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'TDIFPAIR 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE TDIFPAIR (X)
    (PROGN
     (COND
      ((EQCAR X 'DIFF)
       (COND
        ((EQCAR (CADR X) 'TIMES)
         (PROGN
          (SETQ X (CDADR X))
          (PROG ()
           WHILELABEL
            (COND ((NOT (AND X (NOT (DEPENDS (CAR X) COORD)))) (RETURN NIL)))
            (SETQ X (CDR X))
            (GO WHILELABEL))
          (SETQ X (TDIFPAIR (CAR X)))))
        (T (SETQ X (CADR X))))))
     (COND ((PAIRP X) (SETQ X (CAR X))))
     X)) 
(PUT 'SIMPINTT 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPINTT 'DEFINED-ON-LINE '1671) 
(PUT 'SIMPINTT 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'SIMPINTT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPINTT (U)
    (PROG (ASL AGDSL L X NV Y X1 Y1 NV1 N1 N2 NN1 NN2 X2 Y2 NV2 N3 N4 N5 N6
           LGRIDS GDS)
      (SETQ U (PREPSQ (SIMP (CAR U))))
      (COND ((EQUAL U 1) (GO R)))
      (SETQ ASL (FINDDIFM U))
      (COND ((OR (NULL ASL) (EQCAR ASL 'SPECIAL)) (GO R)))
      (SETQ AGDSL (CADR ASL))
      (SETQ ASL (CAR ASL))
      (SETQ GDS (CAAR AGDSL))
      (SETQ L (LENGTH GDS))
      (COND ((EQUAL L 0) (GO R)))
     A
      (SETQ Y (CAAR GDS))
      (SETQ X (ATSOC Y ASL))
      (COND ((NULL X) (GO ER1)))
      (SETQ X (TDIFPAIR (CDR X)))
      (COND
       ((AND *TWOGRID (FLAGP X 'TWOGRID))
        (COND ((EQUAL L 1) (GO R))
              (T
               (PROGN
                (SETQ GDS (CDR GDS))
                (SETQ L (DIFFERENCE L 1))
                (GO A))))))
      (SETQ NV (NGETVAR X 'NRVAR))
      (COND ((EQUAL L 1) (GO L1)) (T (GO L2)))
     L1
      (SETQ X (ASSOC (LIST (CONS Y 'ONE)) AGDSL))
      (COND ((NULL X) (GO ER2)))
      (F2PLUS NVAR NV 0 (TIMES 6 (CADR X)))
      (SETQ X (ASSOC (LIST (CONS Y 'HALF)) AGDSL))
      (COND ((NULL X) (GO ER2)))
      (F2PLUS NVAR NV 1 (TIMES 6 (CADR X)))
      (GO R)
     L2
      (SETQ Y1 (CAADR GDS))
      (SETQ X1 (ATSOC Y1 ASL))
      (COND ((NULL X1) (GO ER1)))
      (SETQ X1 (TDIFPAIR (CDR X1)))
      (COND
       ((AND *TWOGRID (FLAGP X1 'TWOGRID))
        (COND ((EQUAL L 2) (GO L1))
              (T
               (PROGN
                (SETQ GDS (CDR GDS))
                (SETQ L (DIFFERENCE L 1))
                (GO L2))))))
      (SETQ NV1 (NGETVAR X1 'NRVAR))
      (SETQ LGRIDS (GET 'DIFM* 'GRIDS))
      (COND ((EQUAL L 3) (GO L3)) ((GREATERP L 3) (GO ER)))
     L20
      (SETQ N1
              (ATSOC (ACMEMB (LIST (CONS Y 'ONE) (CONS Y1 'ONE)) LGRIDS)
                     AGDSL))
      (SETQ N2
              (ATSOC (ACMEMB (LIST (CONS Y 'ONE) (CONS Y1 'HALF)) LGRIDS)
                     AGDSL))
      (SETQ NN1
              (ATSOC (ACMEMB (LIST (CONS Y 'HALF) (CONS Y1 'HALF)) LGRIDS)
                     AGDSL))
      (SETQ NN2
              (ATSOC (ACMEMB (LIST (CONS Y 'HALF) (CONS Y1 'ONE)) LGRIDS)
                     AGDSL))
      (COND ((AND N1 N2 NN1 NN2) T) (T (GO ER2)))
      (SETQ N1 (CADR N1))
      (SETQ N2 (CADR N2))
      (SETQ NN1 (CADR NN1))
      (SETQ NN2 (CADR NN2))
     L21
      (ADD2SINT NV NV1 X X1 N1 N2 NN1 NN2)
      (GO R)
     L3
      (SETQ Y2 (CAADDR GDS))
      (SETQ X2 (ATSOC Y2 ASL))
      (COND ((NULL X2) (GO ER1)))
      (SETQ X2 (TDIFPAIR (CDR X2)))
      (COND ((AND *TWOGRID (FLAGP X2 'TWOGRID)) (GO L20)))
      (SETQ NV2 (NGETVAR X2 'NRVAR))
      (SETQ N1
              (ATSOC
               (ACMEMB (LIST (CONS Y 'ONE) (CONS Y1 'ONE) (CONS Y2 'ONE))
                LGRIDS)
               AGDSL))
      (SETQ N2
              (ATSOC
               (ACMEMB (LIST (CONS Y 'HALF) (CONS Y1 'HALF) (CONS Y2 'HALF))
                LGRIDS)
               AGDSL))
      (SETQ NN1
              (ATSOC
               (ACMEMB (LIST (CONS Y 'ONE) (CONS Y1 'ONE) (CONS Y2 'HALF))
                LGRIDS)
               AGDSL))
      (SETQ NN2
              (ATSOC
               (ACMEMB (LIST (CONS Y 'HALF) (CONS Y1 'HALF) (CONS Y2 'ONE))
                LGRIDS)
               AGDSL))
      (SETQ N3
              (ATSOC
               (ACMEMB (LIST (CONS Y 'ONE) (CONS Y1 'HALF) (CONS Y2 'ONE))
                LGRIDS)
               AGDSL))
      (SETQ N4
              (ATSOC
               (ACMEMB (LIST (CONS Y 'HALF) (CONS Y1 'ONE) (CONS Y2 'HALF))
                LGRIDS)
               AGDSL))
      (SETQ N5
              (ATSOC
               (ACMEMB (LIST (CONS Y 'ONE) (CONS Y1 'HALF) (CONS Y2 'HALF))
                LGRIDS)
               AGDSL))
      (SETQ N6
              (ATSOC
               (ACMEMB (LIST (CONS Y 'HALF) (CONS Y1 'ONE) (CONS Y2 'ONE))
                LGRIDS)
               AGDSL))
      (COND ((AND N1 N2 NN1 NN2 N3 N4 N5 N6) T) (T (GO ER2)))
      (SETQ N1 (CADR N1))
      (SETQ N2 (CADR N2))
      (SETQ NN1 (CADR NN1))
      (SETQ NN2 (CADR NN2))
      (SETQ N3 (CADR N3))
      (SETQ N4 (CADR N4))
      (SETQ N5 (CADR N5))
      (SETQ N6 (CADR N6))
      (COND
       ((AND (EQUAL N1 NN1) (EQUAL N2 NN2) (EQUAL N3 N5) (EQUAL N4 N6))
        (PROGN (SETQ N2 N3) (SETQ NN1 NN2) (SETQ NN2 N4) (GO L21)))
       ((AND (EQUAL N1 N3) (EQUAL N2 N4) (EQUAL NN1 N5) (EQUAL NN2 N6))
        (PROGN
         (SETQ N2 NN1)
         (SETQ NN1 N4)
         (SETQ X1 X2)
         (SETQ NV1 NV2)
         (GO L21)))
       ((AND (EQUAL N1 N6) (EQUAL N2 N5) (EQUAL NN1 N4) (EQUAL NN2 N3))
        (PROGN
         (SETQ N2 NN2)
         (SETQ NN1 N5)
         (SETQ NN2 N4)
         (SETQ X X2)
         (SETQ NV NV2)
         (GO L21))))
      (ADD3SINT NV NV1 NV2 X X1 X2 N1 N2 N3 N4 N5 N6 NN1 NN2)
     R
      (RETURN (CONS NIL 1))
     ER
      (MSGPRI NIL L " Free vars not yet implemented " NIL 'HOLD)
      (GO R)
     ER1
      (MSGPRI " Failed matching of variables in  " U (LIST ASL AGDSL) NIL
              'HOLD)
      (GO R)
     ER2
      (MSGPRI " All grids not given for term  " U (LIST ASL AGDSL) NIL 'HOLD)
      (GO R))) 
(PUT 'ADD2SINT 'NUMBER-OF-ARGS 8) 
(PUT 'ADD2SINT 'DEFINED-ON-LINE '1783) 
(PUT 'ADD2SINT 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'ADD2SINT 'PROCEDURE_TYPE
     '(ARROW
       (TIMES GENERAL GENERAL GENERAL GENERAL GENERAL GENERAL GENERAL GENERAL)
       GENERAL)) 
(DE ADD2SINT (NV NV1 X X1 N1 N2 NN1 NN2)
    (PROG ()
      (COND
       ((AND (EQUAL N1 N2) (EQUAL NN1 NN2))
        (PROGN
         (F2PLUS NVAR NV 0 (TIMES 6 N1))
         (F2PLUS NVAR NV 1 (TIMES 6 NN1))
         (RETURN NIL)))
       ((AND (EQUAL N1 NN2) (EQUAL N2 NN1))
        (PROGN
         (F2PLUS NVAR NV1 0 (TIMES 6 N1))
         (F2PLUS NVAR NV1 1 (TIMES 6 N2))
         (RETURN NIL))))
      (SETQ N1 (TIMES 3 N1))
      (SETQ N2 (TIMES 3 N2))
      (SETQ NN1 (TIMES 3 NN1))
      (SETQ NN2 (TIMES 3 NN2))
      (SETQ X (LIST X X1))
      (F2PLUS NVAR NV 0 (LIST X N1 N2))
      (F2PLUS NVAR NV 1 (LIST X NN1 NN2))
      (SETQ X (REVERSE X))
      (F2PLUS NVAR NV1 0 (LIST X N1 NN2))
      (F2PLUS NVAR NV1 1 (LIST X NN1 N2))
      (RETURN NIL))) 
(PUT 'ADD3SINT 'NUMBER-OF-ARGS 14) 
(PUT 'ADD3SINT 'DEFINED-ON-LINE '1807) 
(PUT 'ADD3SINT 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'ADD3SINT 'PROCEDURE_TYPE
     '(ARROW
       (TIMES GENERAL GENERAL GENERAL GENERAL GENERAL GENERAL GENERAL GENERAL
              GENERAL GENERAL GENERAL GENERAL GENERAL GENERAL)
       GENERAL)) 
(DE ADD3SINT (NV NV1 NV2 X X1 X2 N1 N2 N3 N4 N5 N6 NN1 NN2)
    (PROG ()
      (SETQ N1 (TIMES 2 N1))
      (SETQ N2 (TIMES 2 N2))
      (SETQ NN1 (TIMES 2 NN1))
      (SETQ NN2 (TIMES 2 NN2))
      (SETQ N3 (TIMES 2 N3))
      (SETQ N4 (TIMES 2 N4))
      (SETQ N5 (TIMES 2 N5))
      (SETQ N6 (TIMES 2 N6))
      (SETQ X (LIST X X1 X2))
      (F2PLUS NVAR NV 0 (LIST X N1 NN1 N3 N5))
      (F2PLUS NVAR NV 1 (LIST X N2 NN2 N4 N6))
      (F2PLUS NVAR NV1 0 (LIST X N1 NN1 N4 N6))
      (F2PLUS NVAR NV1 1 (LIST X N2 NN2 N3 N5))
      (F2PLUS NVAR NV2 0 (LIST X N1 NN2 N3 N6))
      (F2PLUS NVAR NV2 1 (LIST X N2 NN1 N4 N5))
      (RETURN NIL))) 
(PUT 'SIMPINTERPOL 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPINTERPOL 'DEFINED-ON-LINE '1827) 
(PUT 'SIMPINTERPOL 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'SIMPINTERPOL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPINTERPOL (U)
    (PROG (ASL AGDSL GDS X Y XX A)
      (SETQ U (PREPSQ (SIMP (CAR U))))
      (COND
       ((AND (EQCAR U 'DIFF) (NOT (MEMQ COORD (CDDR U))))
        (RETURN
         (PROGN
          (SETQ ASL *EXP)
          (SETQ *EXP T)
          (SETQ ALGLIST* (CONS NIL NIL))
          (SETQ U
                  (SIMP
                   (FORMLNR
                    (CONS 'DIFF
                          (CONS
                           (PREPSQ
                            (SIMP (FORMLNR (LIST 'INTT (CADR U) COORD))))
                           (CDDR U))))))
          (SETQ *EXP ASL)
          U))))
      (SETQ ASL (FINDDIFM U))
      (COND ((NULL ASL) (RETURN (CONS NIL 1)))
            ((EQCAR ASL 'SPECIAL) (RETURN (CDR ASL))))
      (SETQ AGDSL (CADR ASL))
      (SETQ ASL (CAR ASL))
      (COND ((NOT (MEMQ GVAR GRIDS*)) (GO ERG)))
      (SETQ ASL (APPEND ASL (GET 'STEPS GVAR)))
      (COND ((NULL (CAAR AGDSL)) (RETURN (SIMP (SUBLAP ASL (CADDAR AGDSL))))))
      (SETQ A (CAAR AGDSL))
     B
      (COND ((NULL A) (GO C)))
      (SETQ Y (CAAR A))
      (SETQ X (ATSOC Y ASL))
      (COND ((NULL X) (GO ER1)))
      (SETQ XX (CDR X))
      (SETQ X (GETGRID XX))
      (COND ((EQ GVAR 'HALF) (SETQ X (GNOT X))))
      (COND ((AND *TWOGRID (TWOGRIDP XX)) T)
            (T (SETQ GDS (CONS (CONS Y X) GDS))))
      (SETQ A (CDR A))
      (GO B)
     C
      (COND ((NULL GDS) (GO A)))
      (SETQ Y (GET 'DIFM* 'GRIDS))
      (SETQ X (ACMEMB GDS Y))
      (COND ((NULL X) (GO ER1)))
      (SETQ GDS X)
     A
      (SETQ X (ASSOC GDS AGDSL))
      (COND ((NULL X) (GO ERG)))
      (SETQ X (CADDR X))
      (RETURN (SIMP (SUBLAP ASL X)))
     ER1
      (MSGPRI " Failed matching of " U (LIST ASL AGDSL GDS) NIL 'HOLD)
      (RETURN (CONS NIL 1))
     ERG
      (MSGPRI " Bad grids " U (LIST ASL AGDSL GDS) NIL 'HOLD)
      (RETURN (CONS NIL 1)))) 
(PUT 'TWOGRIDP 'NUMBER-OF-ARGS 1) 
(PUT 'TWOGRIDP 'DEFINED-ON-LINE '1879) 
(PUT 'TWOGRIDP 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'TWOGRIDP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE TWOGRIDP (U)
    (PROG (X)
      (RETURN
       (COND
        ((ATOM U)
         (COND
          ((FLAGP U 'TWOGRID)
           (COND
            ((AND *TWOGRID (MEMQ U GIVEN*) (GETEL (LIST (GET U 'GRID) NCOR)))
             NIL)
            (T T)))
          (T NIL)))
        ((FLAGP (CAR U) 'TWOGRID)
         (COND
          ((AND *TWOGRID (MEMQ (CAR U) GIVEN*)
                (GETEL (LIST (GET (CAR U) 'GRID) NCOR)))
           NIL)
          (T T)))
        ((MEMQ (CAR U) '(DIFF PLUS DIFFERENCE)) (TWOGRIDP (CADR U)))
        ((EQ (CAR U) 'TIMES) (TWOGRIDPTI (CDR U))) (T NIL))))) 
(PUT 'TWOGRIDPTI 'NUMBER-OF-ARGS 1) 
(PUT 'TWOGRIDPTI 'DEFINED-ON-LINE '1899) 
(PUT 'TWOGRIDPTI 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'TWOGRIDPTI 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE TWOGRIDPTI (U)
    (PROG (X)
     A
      (SETQ X (TWOGRIDP (CAR U)))
      (COND (X (RETURN X)))
      (SETQ U (CDR U))
      (COND (U (GO A)))
      (RETURN NIL))) 
(PUT 'GETGRID 'NUMBER-OF-ARGS 1) 
(PUT 'GETGRID 'DEFINED-ON-LINE '1910) 
(PUT 'GETGRID 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'GETGRID 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE GETGRID (U)
    (PROG (X)
      (RETURN
       (COND
        ((ATOM U)
         (COND ((SETQ X (GET U 'XGRID)) X)
               ((AND *TWOGRID (MEMQ U GIVEN*)
                     (SETQ X (GETEL (LIST (GET U 'GRID) NCOR))))
                (CAR X))
               (T NIL)))
        ((SETQ X (GET (CAR U) 'XGRID)) X)
        ((AND *TWOGRID (MEMQ (CAR U) GIVEN*)
              (SETQ X (GETEL (LIST (GET (CAR U) 'GRID) NCOR))))
         (CAR X))
        ((EQ (CAR U) 'DIFF)
         (COND ((ATOM (CADR U)) (GETGRID (CADR U))) (T (GETGRID (CADR U)))))
        ((MEMQ (CAR U) '(PLUS DIFFERENCE)) (GETGRID (CADR U)))
        ((EQ (CAR U) 'TIMES) (GETGTI (CDR U))) (T NIL))))) 
(PUT 'GETGTI 'NUMBER-OF-ARGS 1) 
(PUT 'GETGTI 'DEFINED-ON-LINE '1933) 
(PUT 'GETGTI 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'GETGTI 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE GETGTI (U)
    (PROG (X)
     A
      (SETQ X (GETGRID (CAR U)))
      (COND (X (RETURN X)))
      (SETQ U (CDR U))
      (COND (U (GO A)))
      (RETURN NIL))) 
(PUT 'SUBLAP 'NUMBER-OF-ARGS 2) 
(PUT 'SUBLAP 'DEFINED-ON-LINE '1943) 
(PUT 'SUBLAP 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'SUBLAP 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE SUBLAP (U V)
    (PROG (X)
      (RETURN
       (COND ((OR (NULL U) (NULL V)) V)
             ((ATOM V)
              (COND ((NUMBERP V) V) ((SETQ X (ATSOC V U)) (CDR X)) (T V)))
             ((FLAGP (CAR V) 'APP) (SUBLAP1 U V))
             (T (CONS (SUBLAP U (CAR V)) (SUBLAP U (CDR V)))))))) 
(FLAG '(U F V W X G) 'APP) 
(PUT 'SUBLAP1 'NUMBER-OF-ARGS 2) 
(PUT 'SUBLAP1 'DEFINED-ON-LINE '1960) 
(PUT 'SUBLAP1 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'SUBLAP1 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE SUBLAP1 (U V)
    (PROG (X Y)
      (SETQ X (ATSOC (CAR V) U))
      (COND
       ((NULL X)
        (RETURN (MSGPRI " Substitution for " V " not find" NIL 'HOLD))))
      (SETQ X (CDR X))
      (SETQ Y
              (PROG (A FORALL-RESULT FORALL-ENDPTR)
                (SETQ A (CDR V))
                (COND ((NULL A) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS
                                 ((LAMBDA (A) (IREV (SUBLAP U A))) (CAR A))
                                 NIL)))
               LOOPLABEL
                (SETQ A (CDR A))
                (COND ((NULL A) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        (CONS ((LAMBDA (A) (IREV (SUBLAP U A))) (CAR A)) NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (RETURN
       (COND
        ((EQCAR X 'DIFF) (CONS 'DIFF (CONS (SUBAPPEND (CADR X) Y) (CDDR X))))
        (T (SUBAPPEND X Y)))))) 
(PUT 'SUBAPPEND 'NUMBER-OF-ARGS 2) 
(PUT 'SUBAPPEND 'DEFINED-ON-LINE '1973) 
(PUT 'SUBAPPEND 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'SUBAPPEND 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE SUBAPPEND (X Y)
    (COND
     ((ATOM X)
      (COND ((AND (MEMQ X IOBJS*) (DEPENDS X COORD)) (CONS X Y)) (T X)))
     ((AND (MEMQ (CAR X) IOBJS*) (DEPENDS (CAR X) COORD)) (APPEND X Y))
     (T
      (CONS (CAR X)
            (PROG (A FORALL-RESULT FORALL-ENDPTR)
              (SETQ A (CDR X))
              (COND ((NULL A) (RETURN NIL)))
              (SETQ FORALL-RESULT
                      (SETQ FORALL-ENDPTR
                              (CONS ((LAMBDA (A) (SUBAPPEND A Y)) (CAR A))
                                    NIL)))
             LOOPLABEL
              (SETQ A (CDR A))
              (COND ((NULL A) (RETURN FORALL-RESULT)))
              (RPLACD FORALL-ENDPTR
                      (CONS ((LAMBDA (A) (SUBAPPEND A Y)) (CAR A)) NIL))
              (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
              (GO LOOPLABEL)))))) 
(PUT 'IREV 'NUMBER-OF-ARGS 1) 
(PUT 'IREV 'DEFINED-ON-LINE '1979) 
(PUT 'IREV 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'IREV 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE IREV (U)
    (PROG ()
      (SETQ U (SIMP U))
      (RETURN
       (COND
        ((AND (EQUAL (CDAAAR U) 1) (EQUAL (CDAAR U) (CDR U)) (FIXP (CDAR U)))
         (COND
          ((EQUAL (CDR U) 1)
           (COND
            ((LESSP (CDAR U) 0) (LIST 'DIFFERENCE (CAAAAR U) (MINUS (CDAR U))))
            (T (LIST 'PLUS (CAAAAR U) (CDAR U)))))
          ((LESSP (CDAR U) 0)
           (LIST 'DIFFERENCE (CAAAAR U)
                 (LIST 'QUOTIENT (MINUS (CDAR U)) (CDR U))))
          (T (LIST 'PLUS (CAAAAR U) (LIST 'QUOTIENT (CDAR U) (CDR U))))))
        (T (PREPSQ U)))))) 
(UNFLUID
 '(COORD UNVARS SUNVARS INTERPOLP NOVARS NCOR NVAR INTP ICOR GVAR HI HIP1 HIP2
   HIM1 HIM2 LHS RHS LSUN LUN XXGRID RESAR)) 
(PUT 'GENTEMPST 'NUMBER-OF-ARGS 0) 
(PUT 'GENTEMPST 'DEFINED-ON-LINE '2008) 
(PUT 'GENTEMPST 'DEFINED-IN-FILE 'FIDE/IIMET.RED) 
(PUT 'GENTEMPST 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE GENTEMPST NIL (LIST 'GENTEMP (XREAD T))) 
(PUT 'GENTEMP 'STAT 'GENTEMPST) 
(PUT 'GENTEMP 'FORMFN 'FORMGENTRAN) 
(PUT 'OUTTEMP 'STAT 'ENDSTAT) 
(FLAG '(OUTTEMP) 'EVAL) 
(ENDMODULE) 