(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'SMALLMOD)) 
(FLUID '(*BALANCED_MOD CURRENT-MODULUS MODULUS/2)) 
(GLOBAL '(LARGEST-SMALL-MODULUS)) 
(PUT 'SET-MODULUS 'NUMBER-OF-ARGS 1) 
(PUT 'SET-MODULUS 'DEFINED-ON-LINE '37) 
(PUT 'SET-MODULUS 'DEFINED-IN-FILE 'RTOOLS/SMALLMOD.RED) 
(PUT 'SET-MODULUS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SET-MODULUS (P) (SET-GENERAL-MODULUS P)) 
(PUT 'SET-SMALL-MODULUS 'NUMBER-OF-ARGS 1) 
(PUT 'SET-SMALL-MODULUS 'DEFINED-ON-LINE '39) 
(PUT 'SET-SMALL-MODULUS 'DEFINED-IN-FILE 'RTOOLS/SMALLMOD.RED) 
(PUT 'SET-SMALL-MODULUS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SET-SMALL-MODULUS (P)
    (PROG (PREVIOUS-MODULUS)
      (COND
       ((GREATERP P LARGEST-SMALL-MODULUS)
        (RERROR 'ALG 9 (LIST "Overlarge modulus" P "being used"))))
      (SETQ PREVIOUS-MODULUS CURRENT-MODULUS)
      (SETQ CURRENT-MODULUS P)
      (SETQ MODULUS/2 (QUOTIENT P 2))
      (RETURN PREVIOUS-MODULUS))) 
(DE MODULAR-PLUS (A B)
    (PROG (RESULT)
      (SETQ RESULT (IPLUS2 A B))
      (COND
       ((NOT (ILESSP RESULT CURRENT-MODULUS))
        (SETQ RESULT (IDIFFERENCE RESULT CURRENT-MODULUS))))
      (RETURN RESULT))) 
(PUT 'MODULAR-PLUS 'NUMBER-OF-ARGS 2) 
(PUT 'MODULAR-PLUS 'DEFINED-ON-LINE '51) 
(PUT 'MODULAR-PLUS 'DEFINED-IN-FILE 'RTOOLS/SMALLMOD.RED) 
(PUT 'MODULAR-PLUS 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(PUTC 'MODULAR-PLUS 'INLINE
      '(LAMBDA (A B)
         (PROG (RESULT)
           (SETQ RESULT (IPLUS2 A B))
           (COND
            ((NOT (ILESSP RESULT CURRENT-MODULUS))
             (SETQ RESULT (IDIFFERENCE RESULT CURRENT-MODULUS))))
           (RETURN RESULT)))) 
(DE MODULAR-DIFFERENCE (A B)
    (PROG (RESULT)
      (SETQ RESULT (IDIFFERENCE A B))
      (COND ((IMINUSP RESULT) (SETQ RESULT (IPLUS2 RESULT CURRENT-MODULUS))))
      (RETURN RESULT))) 
(PUT 'MODULAR-DIFFERENCE 'NUMBER-OF-ARGS 2) 
(PUT 'MODULAR-DIFFERENCE 'DEFINED-ON-LINE '59) 
(PUT 'MODULAR-DIFFERENCE 'DEFINED-IN-FILE 'RTOOLS/SMALLMOD.RED) 
(PUT 'MODULAR-DIFFERENCE 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(PUTC 'MODULAR-DIFFERENCE 'INLINE
      '(LAMBDA (A B)
         (PROG (RESULT)
           (SETQ RESULT (IDIFFERENCE A B))
           (COND
            ((IMINUSP RESULT) (SETQ RESULT (IPLUS2 RESULT CURRENT-MODULUS))))
           (RETURN RESULT)))) 
(PUT 'MODULAR-NUMBER 'NUMBER-OF-ARGS 1) 
(PUT 'MODULAR-NUMBER 'DEFINED-ON-LINE '66) 
(PUT 'MODULAR-NUMBER 'DEFINED-IN-FILE 'RTOOLS/SMALLMOD.RED) 
(PUT 'MODULAR-NUMBER 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MODULAR-NUMBER (A)
    (PROG ()
      (COND ((NOT (ATOM A)) (TYPERR A "integer in modular-number")))
      (SETQ A (REMAINDER A CURRENT-MODULUS))
      (COND ((IMINUSP A) (SETQ A (IPLUS2 A CURRENT-MODULUS))))
      (RETURN A))) 
(DE MODULAR-TIMES (A B) (REMAINDER (TIMES A B) CURRENT-MODULUS)) 
(PUT 'MODULAR-TIMES 'NUMBER-OF-ARGS 2) 
(PUT 'MODULAR-TIMES 'DEFINED-ON-LINE '74) 
(PUT 'MODULAR-TIMES 'DEFINED-IN-FILE 'RTOOLS/SMALLMOD.RED) 
(PUT 'MODULAR-TIMES 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(PUTC 'MODULAR-TIMES 'INLINE
      '(LAMBDA (A B) (REMAINDER (TIMES A B) CURRENT-MODULUS))) 
(PUT 'MODULAR-RECIPROCAL 'NUMBER-OF-ARGS 1) 
(PUT 'MODULAR-RECIPROCAL 'DEFINED-ON-LINE '77) 
(PUT 'MODULAR-RECIPROCAL 'DEFINED-IN-FILE 'RTOOLS/SMALLMOD.RED) 
(PUT 'MODULAR-RECIPROCAL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MODULAR-RECIPROCAL (A)
    (COND
     ((AND *BALANCED_MOD (LESSP A 0))
      (RECIPROCAL-BY-GCD CURRENT-MODULUS (IPLUS2 A CURRENT-MODULUS) 0 1))
     (T (RECIPROCAL-BY-GCD CURRENT-MODULUS A 0 1)))) 
(PUT 'RECIPROCAL-BY-GCD 'NUMBER-OF-ARGS 4) 
(PUT 'RECIPROCAL-BY-GCD 'DEFINED-ON-LINE '83) 
(PUT 'RECIPROCAL-BY-GCD 'DEFINED-IN-FILE 'RTOOLS/SMALLMOD.RED) 
(PUT 'RECIPROCAL-BY-GCD 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE RECIPROCAL-BY-GCD (A B X Y)
    (COND ((EQUAL B 0) (RERROR 'ALG 10 "Invalid modular division"))
          ((EQUAL B 1) (COND ((IMINUSP Y) (IPLUS2 Y CURRENT-MODULUS)) (T Y)))
          (T
           (PROG (W)
             (SETQ W (IQUOTIENT A B))
             (RETURN
              (RECIPROCAL-BY-GCD B (IDIFFERENCE A (ITIMES2 B W)) Y
                                 (IDIFFERENCE X (ITIMES2 Y W)))))))) 
(PUT 'SAFE-MODULAR-RECIPROCAL 'NUMBER-OF-ARGS 1) 
(PUT 'SAFE-MODULAR-RECIPROCAL 'DEFINED-ON-LINE '99) 
(PUT 'SAFE-MODULAR-RECIPROCAL 'DEFINED-IN-FILE 'RTOOLS/SMALLMOD.RED) 
(PUT 'SAFE-MODULAR-RECIPROCAL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SAFE-MODULAR-RECIPROCAL (A)
    (COND
     ((AND *BALANCED_MOD (LESSP A 0))
      (SAFE-RECIPROCAL-BY-GCD CURRENT-MODULUS (IPLUS2 A CURRENT-MODULUS) 0 1))
     (T (SAFE-RECIPROCAL-BY-GCD CURRENT-MODULUS A 0 1)))) 
(PUT 'SAFE-RECIPROCAL-BY-GCD 'NUMBER-OF-ARGS 4) 
(PUT 'SAFE-RECIPROCAL-BY-GCD 'DEFINED-ON-LINE '105) 
(PUT 'SAFE-RECIPROCAL-BY-GCD 'DEFINED-IN-FILE 'RTOOLS/SMALLMOD.RED) 
(PUT 'SAFE-RECIPROCAL-BY-GCD 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE SAFE-RECIPROCAL-BY-GCD (A B X Y)
    (COND ((EQUAL B 0) NIL)
          ((EQUAL B 1) (COND ((IMINUSP Y) (IPLUS2 Y CURRENT-MODULUS)) (T Y)))
          (T
           (PROG (W)
             (SETQ W (IQUOTIENT A B))
             (RETURN
              (SAFE-RECIPROCAL-BY-GCD B (IDIFFERENCE A (ITIMES2 B W)) Y
                                      (IDIFFERENCE X (ITIMES2 Y W)))))))) 
(DE MODULAR-QUOTIENT (A B)
    (REMAINDER (TIMES A (MODULAR-RECIPROCAL B)) CURRENT-MODULUS)) 
(PUT 'MODULAR-QUOTIENT 'NUMBER-OF-ARGS 2) 
(PUT 'MODULAR-QUOTIENT 'DEFINED-ON-LINE '121) 
(PUT 'MODULAR-QUOTIENT 'DEFINED-IN-FILE 'RTOOLS/SMALLMOD.RED) 
(PUT 'MODULAR-QUOTIENT 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(PUTC 'MODULAR-QUOTIENT 'INLINE
      '(LAMBDA (A B)
         (REMAINDER (TIMES A (MODULAR-RECIPROCAL B)) CURRENT-MODULUS))) 
(DE MODULAR-MINUS (A)
    (COND ((EQUAL A 0) A) (T (IDIFFERENCE CURRENT-MODULUS A)))) 
(PUT 'MODULAR-MINUS 'NUMBER-OF-ARGS 1) 
(PUT 'MODULAR-MINUS 'DEFINED-ON-LINE '125) 
(PUT 'MODULAR-MINUS 'DEFINED-IN-FILE 'RTOOLS/SMALLMOD.RED) 
(PUT 'MODULAR-MINUS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'MODULAR-MINUS 'INLINE
      '(LAMBDA (A) (COND ((EQUAL A 0) A) (T (IDIFFERENCE CURRENT-MODULUS A))))) 
(PUT 'MODULAR-EXPT 'NUMBER-OF-ARGS 2) 
(PUT 'MODULAR-EXPT 'DEFINED-ON-LINE '128) 
(PUT 'MODULAR-EXPT 'DEFINED-IN-FILE 'RTOOLS/SMALLMOD.RED) 
(PUT 'MODULAR-EXPT 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MODULAR-EXPT (A N)
    (COND ((EQUAL N 0) 1) ((EQUAL N 1) A)
          ((AND (GEQ N (DIFFERENCE CURRENT-MODULUS 1))
                (PRIMEP CURRENT-MODULUS))
           (MODULAR-EXPT A (REMAINDER N (DIFFERENCE CURRENT-MODULUS 1))))
          (T
           (PROG (X)
             (SETQ X (MODULAR-EXPT A (QUOTIENT N 2)))
             (SETQ X (REMAINDER (TIMES X X) CURRENT-MODULUS))
             (COND
              ((NOT (EQUAL (REMAINDER N 2) 0))
               (SETQ X (REMAINDER (TIMES X A) CURRENT-MODULUS))))
             (RETURN X))))) 
(SET-MODULUS 1) 
(ENDMODULE) 