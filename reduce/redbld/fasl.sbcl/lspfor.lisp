(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'LSPFOR)) 
(NULL (SETQ *MODE 'SYMBOLIC)) 
(FLUID '(*F90)) 
(SWITCH (LIST 'F90)) 
(FLUID '(*GENDECS)) 
(SWITCH (LIST 'GENDECS)) 
(FLUID '(*GETDECS)) 
(FLUID '(*MAKECALLS)) 
(SWITCH (LIST 'MAKECALLS)) 
(SETQ *MAKECALLS T) 
(GLOBAL
 '(GENTRANLANG* FORTLINELEN* MINFORTLINELEN* FORTCURRIND* *FORTCURRIND*
   TABLEN*)) 
(SHARE (LIST 'FORTCURRIND* 'FORTLINELEN* 'MINFORTLINELEN* 'TABLEN*)) 
(SETQ FORTCURRIND* (PROGN (SETQ ALGLIST* (CONS NIL NIL)) 0)) 
(SETQ *FORTCURRIND* 6) 
(SETQ FORTLINELEN* (PROGN (SETQ ALGLIST* (CONS NIL NIL)) 72)) 
(SETQ MINFORTLINELEN* (PROGN (SETQ ALGLIST* (CONS NIL NIL)) 40)) 
(FLUID '(*DOUBLE)) 
(SWITCH (LIST 'DOUBLE)) 
(GLOBAL '(*NOTFORTRANFUNS* *ENDOFLOOPSTACK* *SUBPROGNAME*)) 
(SETQ *NOTFORTRANFUNS* '(ACOSH ASINH ATANH COT DILOG EI ERF SEC)) 
(SETQ *ENDOFLOOPSTACK* NIL) 
(SETQ *SUBPROGNAME* NIL) 
(GLOBAL '(*DO* DEFTYPE*)) 
(GLOBAL '(*LEGALFORTTYPES*)) 
(SETQ *LEGALFORTTYPES*
        '(REAL INTEGER COMPLEX REAL*8 COMPLEX*16 LOGICAL |IMPLICIT INTEGER|
          |IMPLICIT REAL| |IMPLICIT COMPLEX| |IMPLICIT REAL*8|
          |IMPLICIT COMPLEX*16| |IMPLICIT LOGICAL|)) 
(GLOBAL '(*STDOUT*)) 
(GLOBAL '(*POSN* |$#|)) 
(PUT 'FORTRAN 'FORMATTER 'FORMATFORT) 
(PUT 'FORTRAN 'CODEGEN 'FORTCODE) 
(PUT 'FORTRAN 'PROCTEM 'PROCFORTTEM) 
(PUT 'FORTRAN 'GENDECS 'FORTDECS) 
(PUT 'FORTRAN 'ASSIGNER 'MKFFORTASSIGN) 
(PUT 'FORTRAN 'BOOLEAN-TYPE 'LOGICAL) 
(PUT 'FORTCODE 'NUMBER-OF-ARGS 1) 
(PUT 'FORTCODE 'DEFINED-ON-LINE '103) 
(PUT 'FORTCODE 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'FORTCODE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FORTCODE (FORMS)
    (PROG (F FORALL-RESULT FORALL-ENDPTR)
      (SETQ F FORMS)
     STARTOVER
      (COND ((NULL F) (RETURN NIL)))
      (SETQ FORALL-RESULT
              ((LAMBDA (F)
                 (COND ((ATOM F) (FORTEXP F))
                       ((MEMQ (CAR F) '(|:RD:| |:CR:| |:CRN:| |:GI:|))
                        (FORTEXP F))
                       ((OR (LISPSTMTP F) (LISPSTMTGPP F))
                        (COND
                         (*GENDECS
                          (PROG (R)
                            (SETQ R
                                    (APPEND
                                     (FORTDECS (SYMTABGET '*MAIN* '*DECS*))
                                     (FORTSTMT F)))
                            (SYMTABREM '*MAIN* '*DECS*)
                            (RETURN R)))
                         (T (FORTSTMT F))))
                       ((LISPDEFP F) (FORTSUBPROG F)) (T (FORTEXP F))))
               (CAR F)))
      (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
      (SETQ F (CDR F))
      (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
     LOOPLABEL
      (COND ((NULL F) (RETURN FORALL-RESULT)))
      (RPLACD FORALL-ENDPTR
              ((LAMBDA (F)
                 (COND ((ATOM F) (FORTEXP F))
                       ((MEMQ (CAR F) '(|:RD:| |:CR:| |:CRN:| |:GI:|))
                        (FORTEXP F))
                       ((OR (LISPSTMTP F) (LISPSTMTGPP F))
                        (COND
                         (*GENDECS
                          (PROG (R)
                            (SETQ R
                                    (APPEND
                                     (FORTDECS (SYMTABGET '*MAIN* '*DECS*))
                                     (FORTSTMT F)))
                            (SYMTABREM '*MAIN* '*DECS*)
                            (RETURN R)))
                         (T (FORTSTMT F))))
                       ((LISPDEFP F) (FORTSUBPROG F)) (T (FORTEXP F))))
               (CAR F)))
      (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
      (SETQ F (CDR F))
      (GO LOOPLABEL))) 
(PUT 'FORTSUBPROG 'NUMBER-OF-ARGS 1) 
(PUT 'FORTSUBPROG 'DEFINED-ON-LINE '129) 
(PUT 'FORTSUBPROG 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'FORTSUBPROG 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FORTSUBPROG (DEFF)
    (PROG (TYPE STYPE NAME PARAMS BODY LASTST R)
      (SETQ NAME (SETQ *SUBPROGNAME* (CADR DEFF)))
      (COND
       ((AND (ONEP (LENGTH (SETQ BODY (CDDDR DEFF)))) (LISPSTMTGPP (CAR BODY)))
        (PROGN
         (SETQ BODY (CDAR BODY))
         (COND ((NULL (CAR BODY)) (SETQ BODY (CDR BODY)))))))
      (COND
       ((LISPRETURNP (SETQ LASTST (CAR (REVERSE BODY))))
        (SETQ BODY (APPEND BODY (LIST '(END)))))
       ((NOT (LISPENDP LASTST))
        (SETQ BODY (APPEND BODY (LIST '(RETURN) '(END))))))
      (SETQ TYPE (SYMTABGET NAME NAME))
      (COND (TYPE (SETQ TYPE (CADR TYPE))))
      (SETQ STYPE
              (OR (SYMTABGET NAME '*TYPE*)
                  (COND ((OR TYPE (FUNCTIONFORMP BODY NAME)) 'FUNCTION)
                        (T 'SUBROUTINE))))
      (SYMTABREM NAME '*TYPE*)
      (SETQ PARAMS (OR (SYMTABGET NAME '*PARAMS*) (CADDR DEFF)))
      (SYMTABREM NAME '*PARAMS*)
      (COND
       ((AND *GETDECS (NULL TYPE) (EQ STYPE 'FUNCTION)) (SETQ TYPE DEFTYPE*)))
      (COND
       (TYPE
        (PROGN
         (SYMTABREM NAME NAME)
         (COND
          (*DOUBLE
           (COND ((MEMQ TYPE '(REAL REAL*8)) (SETQ TYPE '|DOUBLE PRECISION|))
                 ((EQ TYPE 'COMPLEX) (SETQ TYPE 'COMPLEX*16)))))
         NIL)))
      (SETQ R (MKFFORTSUBPROGDEC TYPE STYPE NAME PARAMS))
      (COND (*GENDECS (SETQ R (APPEND R (FORTDECS (SYMTABGET NAME '*DECS*))))))
      (SETQ R
              (APPEND R
                      (PROG (S FORALL-RESULT FORALL-ENDPTR)
                        (SETQ S BODY)
                       STARTOVER
                        (COND ((NULL S) (RETURN NIL)))
                        (SETQ FORALL-RESULT
                                ((LAMBDA (S) (FORTSTMT S)) (CAR S)))
                        (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
                        (SETQ S (CDR S))
                        (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
                       LOOPLABEL
                        (COND ((NULL S) (RETURN FORALL-RESULT)))
                        (RPLACD FORALL-ENDPTR
                                ((LAMBDA (S) (FORTSTMT S)) (CAR S)))
                        (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
                        (SETQ S (CDR S))
                        (GO LOOPLABEL))))
      (COND (*GENDECS (PROGN (SYMTABREM NAME NIL) (SYMTABREM NAME '*DECS*))))
      (RETURN R))) 
(PUT 'FORTDECS 'NUMBER-OF-ARGS 1) 
(PUT 'FORTDECS 'DEFINED-ON-LINE '173) 
(PUT 'FORTDECS 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'FORTDECS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FORTDECS (DECS)
    (PROG (TL FORALL-RESULT FORALL-ENDPTR)
      (SETQ TL (FORMTYPELISTS DECS))
     STARTOVER
      (COND ((NULL TL) (RETURN NIL)))
      (SETQ FORALL-RESULT
              ((LAMBDA (TL) (MKFFORTDEC (CAR TL) (CDR TL))) (CAR TL)))
      (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
      (SETQ TL (CDR TL))
      (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
     LOOPLABEL
      (COND ((NULL TL) (RETURN FORALL-RESULT)))
      (RPLACD FORALL-ENDPTR
              ((LAMBDA (TL) (MKFFORTDEC (CAR TL) (CDR TL))) (CAR TL)))
      (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
      (SETQ TL (CDR TL))
      (GO LOOPLABEL))) 
(PUT 'FORTEXP 'NUMBER-OF-ARGS 1) 
(PUT 'FORTEXP 'DEFINED-ON-LINE '181) 
(PUT 'FORTEXP 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'FORTEXP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FORTEXP (EXP) (FORTEXP1 EXP 0)) 
(PUT 'FORTEXP1 'NUMBER-OF-ARGS 2) 
(PUT 'FORTEXP1 'DEFINED-ON-LINE '184) 
(PUT 'FORTEXP1 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'FORTEXP1 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE FORTEXP1 (EXP WTIN)
    (COND ((ATOM EXP) (LIST (FORTRANNAME EXP)))
          ((AND (LISTP EXP) (ONEP (LENGTH EXP))) (FORTRANNAME EXP))
          ((OPTYPE (CAR EXP))
           (PROG (WT OP RES)
             (SETQ WT (FORTRANPRECEDENCE (CAR EXP)))
             (SETQ OP (FORTRANOP (CAR EXP)))
             (SETQ EXP (CDR EXP))
             (COND
              ((ONEP (LENGTH EXP))
               (SETQ RES (CONS OP (FORTEXP1 (CAR EXP) WT))))
              (T
               (PROGN
                (SETQ RES (FORTEXP1 (CAR EXP) WT))
                (COND
                 ((EQ OP '+)
                  (PROG ()
                   WHILELABEL
                    (COND ((NOT (SETQ EXP (CDR EXP))) (RETURN NIL)))
                    (PROGN
                     (COND
                      ((OR (ATOM (CAR EXP)) (NEQ (CAAR EXP) 'MINUS))
                       (SETQ RES (APPEND RES (LIST OP)))))
                     (SETQ RES (APPEND RES (FORTEXP1 (CAR EXP) WT))))
                    (GO WHILELABEL)))
                 ((EQ OP '**)
                  (PROG ()
                   WHILELABEL
                    (COND ((NOT (SETQ EXP (CDR EXP))) (RETURN NIL)))
                    (PROG ()
                      (COND
                       ((AND (NUMBERP (CAR EXP)) (LESSP (CAR EXP) 0))
                        (SETQ RES
                                (APPEND (APPEND RES (LIST OP))
                                        (INSERTPARENS
                                         (FORTEXP1 (CAR EXP) WT)))))
                       (T
                        (SETQ RES
                                (APPEND (APPEND RES (LIST OP))
                                        (FORTEXP1 (CAR EXP) WT))))))
                    (GO WHILELABEL)))
                 (T
                  (PROG ()
                   WHILELABEL
                    (COND ((NOT (SETQ EXP (CDR EXP))) (RETURN NIL)))
                    (SETQ RES
                            (APPEND (APPEND RES (LIST OP))
                                    (FORTEXP1 (CAR EXP) WT)))
                    (GO WHILELABEL)))))))
             (COND ((GEQ WTIN WT) (SETQ RES (INSERTPARENS RES))))
             (RETURN RES)))
          ((EQ (CAR EXP) 'LITERAL) (FORTLITERAL EXP))
          ((EQ (CAR EXP) 'RANGE)
           (APPEND (FORTEXP (CADR EXP)) (CONS '|:| (FORTEXP (CADDR EXP)))))
          ((EQ (CAR EXP) '|:RD:|)
           (COND ((ATOM (CDR EXP)) (LIST (CDR EXP)))
                 (T
                  (PROG (MT DOTPOS |:LOWER-SCI:| |:UPPER-SCI:|)
                    (SETQ DOTPOS 0)
                    (SETQ |:LOWER-SCI:| 0)
                    (SETQ |:UPPER-SCI:| 0)
                    (SETQ MT (|RD:EXPLODE| EXP))
                    (SETQ EXP (CAR MT))
                    (SETQ MT (PLUS (CADR MT) (DIFFERENCE (CADDR MT) 1)))
                    (SETQ EXP
                            (APPEND (LIST 'LITERAL (CAR EXP) '|.|) (CDR EXP)))
                    (COND
                     ((NULL (EQUAL MT 0))
                      (SETQ EXP
                              (APPEND EXP
                                      (LIST (COND (*DOUBLE '|d|) (T '|e|))
                                            MT))))
                     (*DOUBLE (SETQ EXP (APPEND EXP '(|d| 0)))))
                    (RETURN (FORTLITERAL EXP))))))
          ((EQ (CAR EXP) '|:CRN:|) (FORTEXP1 (*CRN2CR EXP) WTIN))
          ((EQ (CAR EXP) '|:GI:|) (FORTEXP1 (*GI2CR EXP) WTIN))
          ((EQ (CAR EXP) '|:CR:|)
           (COND
            ((AND *DOUBLE *F90)
             (CONS '|CMPLX(|
                   (APPEND (FORTEXP1 (CONS '|:RD:| (CADR EXP)) WTIN)
                           (CONS '|,|
                                 (APPEND
                                  (FORTEXP1 (CONS '|:RD:| (CDDR EXP)) WTIN)
                                  (LIST '|,| '|KIND(1.0d0)| '|)|))))))
            (T
             (CONS '|CMPLX(|
                   (APPEND (FORTEXP1 (CONS '|:RD:| (CADR EXP)) WTIN)
                           (CONS '|,|
                                 (APPEND
                                  (FORTEXP1 (CONS '|:RD:| (CDDR EXP)) WTIN)
                                  (LIST '|)|))))))))
          (T
           (PROG (OP RES INTRINSIC)
             (SETQ INTRINSIC (GET (CAR EXP) '*FORTRANNAME*))
             (SETQ OP (FORTRANNAME (CAR EXP)))
             (SETQ EXP (CDR EXP))
             (SETQ RES
                     (CDR
                      (PROG (U FORALL-RESULT FORALL-ENDPTR)
                        (SETQ U EXP)
                       STARTOVER
                        (COND ((NULL U) (RETURN NIL)))
                        (SETQ FORALL-RESULT
                                ((LAMBDA (U)
                                   (CONS '|,|
                                         (COND ((NOT INTRINSIC) (FORTEXP1 U 0))
                                               ((FIXP U) (LIST (FLOAT U)))
                                               ((OR (ISFLOAT U)
                                                    (MEMQ OP '(REAL DBLE)))
                                                (FORTEXP1 U 0))
                                               (T
                                                (CONS (FORTRANNAME 'REAL)
                                                      (INSERTPARENS
                                                       (FORTEXP1 U 0)))))))
                                 (CAR U)))
                        (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
                        (SETQ U (CDR U))
                        (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
                       LOOPLABEL
                        (COND ((NULL U) (RETURN FORALL-RESULT)))
                        (RPLACD FORALL-ENDPTR
                                ((LAMBDA (U)
                                   (CONS '|,|
                                         (COND ((NOT INTRINSIC) (FORTEXP1 U 0))
                                               ((FIXP U) (LIST (FLOAT U)))
                                               ((OR (ISFLOAT U)
                                                    (MEMQ OP '(REAL DBLE)))
                                                (FORTEXP1 U 0))
                                               (T
                                                (CONS (FORTRANNAME 'REAL)
                                                      (INSERTPARENS
                                                       (FORTEXP1 U 0)))))))
                                 (CAR U)))
                        (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
                        (SETQ U (CDR U))
                        (GO LOOPLABEL))))
             (RETURN (CONS OP (INSERTPARENS RES))))))) 
(PUT 'ISFLOAT 'NUMBER-OF-ARGS 1) 
(PUT 'ISFLOAT 'DEFINED-ON-LINE '287) 
(PUT 'ISFLOAT 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'ISFLOAT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE ISFLOAT (U)
    (OR (FLOATP U) (AND (IDP U) (DECLARED-AS-FLOAT U))
        (AND (PAIRP U)
             (OR (EQ (CAR U) '|:RD:|) (GET (CAR U) '*FORTRANNAME*)
                 (DECLARED-AS-FLOAT (CAR U)))))) 
(PUT 'FORTRANOP 'NUMBER-OF-ARGS 1) 
(PUT 'FORTRANOP 'DEFINED-ON-LINE '296) 
(PUT 'FORTRANOP 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'FORTRANOP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FORTRANOP (OP) (OR (GET OP '*FORTRANOP*) OP)) 
(PUT 'OR '*FORTRANOP* '.OR.) 
(PUT 'AND '*FORTRANOP* '.AND.) 
(PUT 'NOT '*FORTRANOP* '.NOT.) 
(PUT 'EQUAL '*FORTRANOP* '.EQ.) 
(PUT 'NEQ '*FORTRANOP* '.NE.) 
(PUT 'GREATERP '*FORTRANOP* '.GT.) 
(PUT 'GEQ '*FORTRANOP* '.GE.) 
(PUT 'LESSP '*FORTRANOP* '.LT.) 
(PUT 'LEQ '*FORTRANOP* '.LE.) 
(PUT 'PLUS '*FORTRANOP* '+) 
(PUT 'TIMES '*FORTRANOP* '*) 
(PUT 'QUOTIENT '*FORTRANOP* '/) 
(PUT 'MINUS '*FORTRANOP* '-) 
(PUT 'EXPT '*FORTRANOP* '**) 
(PUT 'FORTRANNAME 'NUMBER-OF-ARGS 1) 
(PUT 'FORTRANNAME 'DEFINED-ON-LINE '316) 
(PUT 'FORTRANNAME 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'FORTRANNAME 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FORTRANNAME (A)
    (COND ((STRINGP A) (STRINGTOATOM A))
          (T
           (PROGN
            (COND
             ((MEMQ A *NOTFORTRANFUNS*)
              (PROGN
               (WRS (CDR *STDOUT*))
               (PRIN2 "*** WARNING: ")
               (PRIN1 A)
               (PRIN2T " is not an intrinsic Fortran function")
               NIL)))
            (COND (*DOUBLE (OR (GET A '*DOUBLENAME*) A))
                  (T (OR (GET A '*FORTRANNAME*) A))))))) 
(PUT 'TRUE '*FORTRANNAME* '.TRUE.) 
(PUT 'FALSE '*FORTRANNAME* '.FALSE.) 
(PUT 'ABS '*FORTRANNAME* 'ABS) 
(PUT 'SQRT '*FORTRANNAME* 'SQRT) 
(PUT 'EXP '*FORTRANNAME* 'EXP) 
(PUT 'LOG '*FORTRANNAME* 'ALOG) 
(PUT 'LN '*FORTRANNAME* 'ALOG) 
(PUT 'SIN '*FORTRANNAME* 'SIN) 
(PUT 'COS '*FORTRANNAME* 'COS) 
(PUT 'TAN '*FORTRANNAME* 'TAN) 
(PUT 'ACOS '*FORTRANNAME* 'ACOS) 
(PUT 'ASIN '*FORTRANNAME* 'ASIN) 
(PUT 'ATAN '*FORTRANNAME* 'ATAN) 
(PUT 'SINH '*FORTRANNAME* 'SINH) 
(PUT 'COSH '*FORTRANNAME* 'COSH) 
(PUT 'TANH '*FORTRANNAME* 'TANH) 
(PUT 'REAL '*FORTRANNAME* 'REAL) 
(PUT 'MAX '*FORTRANNAME* 'AMAX1) 
(PUT 'MIN '*FORTRANNAME* 'AMIN1) 
(PUT 'ABS '*DOUBLENAME* 'DABS) 
(PUT 'SQRT '*DOUBLENAME* 'DSQRT) 
(PUT 'EXP '*DOUBLENAME* 'DEXP) 
(PUT 'LOG '*DOUBLENAME* 'DLOG) 
(PUT 'LN '*DOUBLENAME* 'DLOG) 
(PUT 'SIN '*DOUBLENAME* 'DSIN) 
(PUT 'COS '*DOUBLENAME* 'DCOS) 
(PUT 'TAN '*DOUBLENAME* 'DTAN) 
(PUT 'ACOS '*DOUBLENAME* 'DACOS) 
(PUT 'ASIN '*DOUBLENAME* 'DASIN) 
(PUT 'ATAN '*DOUBLENAME* 'DATAN) 
(PUT 'SINH '*DOUBLENAME* 'DSINH) 
(PUT 'COSH '*DOUBLENAME* 'DCOSH) 
(PUT 'TANH '*DOUBLENAME* 'DTANH) 
(PUT 'TRUE '*DOUBLENAME* '.TRUE.) 
(PUT 'FALSE '*DOUBLENAME* '.FALSE.) 
(PUT 'REAL '*DOUBLENAME* 'DBLE) 
(PUT 'MAX '*DOUBLENAME* 'DMAX1) 
(PUT 'MIN '*DOUBLENAME* 'DMIN1) 
(PUT 'FORTRANPRECEDENCE 'NUMBER-OF-ARGS 1) 
(PUT 'FORTRANPRECEDENCE 'DEFINED-ON-LINE '382) 
(PUT 'FORTRANPRECEDENCE 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'FORTRANPRECEDENCE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FORTRANPRECEDENCE (OP) (OR (GET OP '*FORTRANPRECEDENCE*) 9)) 
(PUT 'OR '*FORTRANPRECEDENCE* 1) 
(PUT 'AND '*FORTRANPRECEDENCE* 2) 
(PUT 'NOT '*FORTRANPRECEDENCE* 3) 
(PUT 'EQUAL '*FORTRANPRECEDENCE* 4) 
(PUT 'NEQ '*FORTRANPRECEDENCE* 4) 
(PUT 'GREATERP '*FORTRANPRECEDENCE* 4) 
(PUT 'GEQ '*FORTRANPRECEDENCE* 4) 
(PUT 'LESSP '*FORTRANPRECEDENCE* 4) 
(PUT 'LEQ '*FORTRANPRECEDENCE* 4) 
(PUT 'PLUS '*FORTRANPRECEDENCE* 5) 
(PUT 'TIMES '*FORTRANPRECEDENCE* 6) 
(PUT 'QUOTIENT '*FORTRANPRECEDENCE* 6) 
(PUT 'MINUS '*FORTRANPRECEDENCE* 7) 
(PUT 'EXPT '*FORTRANPRECEDENCE* 8) 
(PUT 'FORTSTMT 'NUMBER-OF-ARGS 1) 
(PUT 'FORTSTMT 'DEFINED-ON-LINE '404) 
(PUT 'FORTSTMT 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'FORTSTMT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FORTSTMT (STMT)
    (COND ((NULL STMT) NIL) ((LISPLABELP STMT) (FORTSTMTNUM STMT))
          ((EQ (CAR STMT) 'LITERAL) (FORTLITERAL STMT))
          ((LISPREADP STMT) (FORTREAD STMT))
          ((LISPASSIGNP STMT) (FORTASSIGN STMT))
          ((LISPPRINTP STMT) (FORTWRITE STMT)) ((LISPCONDP STMT) (FORTIF STMT))
          ((LISPBREAKP STMT) (FORTBREAK STMT)) ((LISPGOP STMT) (FORTGOTO STMT))
          ((LISPRETURNP STMT) (FORTRETURN STMT))
          ((LISPSTOPP STMT) (FORTSTOP STMT)) ((LISPENDP STMT) (FORTEND STMT))
          ((LISPWHILEP STMT) (FORTWHILE STMT))
          ((LISPREPEATP STMT) (FORTREPEAT STMT))
          ((LISPFORP STMT) (FORTFOR STMT))
          ((LISPSTMTGPP STMT) (FORTSTMTGP STMT))
          ((LISPDEFP STMT) (FORTSUBPROG STMT))
          ((LISPCALLP STMT) (FORTCALL STMT)))) 
(PUT 'FORTASSIGN 'NUMBER-OF-ARGS 1) 
(PUT 'FORTASSIGN 'DEFINED-ON-LINE '443) 
(PUT 'FORTASSIGN 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'FORTASSIGN 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FORTASSIGN (STMT) (MKFFORTASSIGN (CADR STMT) (CADDR STMT))) 
(PUT 'FORTBREAK 'NUMBER-OF-ARGS 1) 
(PUT 'FORTBREAK 'DEFINED-ON-LINE '446) 
(PUT 'FORTBREAK 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'FORTBREAK 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FORTBREAK (STMT)
    (COND
     ((NULL *ENDOFLOOPSTACK*)
      (GENTRANERR 'E NIL "BREAK NOT INSIDE LOOP - CANNOT BE TRANSLATED" NIL))
     ((ATOM (CAR *ENDOFLOOPSTACK*))
      (PROG (N1)
        (SETQ N1 (GENSTMTNUM))
        (RPLACA *ENDOFLOOPSTACK* (LIST (CAR *ENDOFLOOPSTACK*) N1))
        (RETURN (MKFFORTGO N1))))
     (T (MKFFORTGO (CADAR *ENDOFLOOPSTACK*))))) 
(PUT 'FORTCALL 'NUMBER-OF-ARGS 1) 
(PUT 'FORTCALL 'DEFINED-ON-LINE '460) 
(PUT 'FORTCALL 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'FORTCALL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FORTCALL (STMT) (MKFFORTCALL (CAR STMT) (CDR STMT))) 
(PUT 'FORTFOR 'NUMBER-OF-ARGS 1) 
(PUT 'FORTFOR 'DEFINED-ON-LINE '463) 
(PUT 'FORTFOR 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'FORTFOR 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FORTFOR (STMT)
    (PROG (N1 RESULT VAR LOEXP STEPEXP HIEXP STMTLST)
      (SETQ VAR (CADR STMT))
      (SETQ STMT (CDDR STMT))
      (SETQ LOEXP (CAAR STMT))
      (SETQ STEPEXP (CADAR STMT))
      (SETQ HIEXP (CADDAR STMT))
      (SETQ STMTLST (CDDR STMT))
      (SETQ N1 (GENSTMTNUM))
      (SETQ *ENDOFLOOPSTACK* (CONS N1 *ENDOFLOOPSTACK*))
      (SETQ RESULT (MKFFORTDO N1 VAR LOEXP HIEXP STEPEXP))
      (INDENTFORTLEVEL (PLUS 1))
      (SETQ RESULT
              (APPEND RESULT
                      (PROG (ST FORALL-RESULT FORALL-ENDPTR)
                        (SETQ ST STMTLST)
                       STARTOVER
                        (COND ((NULL ST) (RETURN NIL)))
                        (SETQ FORALL-RESULT
                                ((LAMBDA (ST) (FORTSTMT ST)) (CAR ST)))
                        (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
                        (SETQ ST (CDR ST))
                        (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
                       LOOPLABEL
                        (COND ((NULL ST) (RETURN FORALL-RESULT)))
                        (RPLACD FORALL-ENDPTR
                                ((LAMBDA (ST) (FORTSTMT ST)) (CAR ST)))
                        (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
                        (SETQ ST (CDR ST))
                        (GO LOOPLABEL))))
      (INDENTFORTLEVEL (MINUS 1))
      (SETQ RESULT (APPEND RESULT (MKFFORTCONTINUE N1)))
      (COND
       ((PAIRP (CAR *ENDOFLOOPSTACK*))
        (SETQ RESULT
                (APPEND RESULT (MKFFORTCONTINUE (CADAR *ENDOFLOOPSTACK*))))))
      (SETQ *ENDOFLOOPSTACK* (CDR *ENDOFLOOPSTACK*))
      (RETURN RESULT))) 
(PUT 'FORTEND 'NUMBER-OF-ARGS 1) 
(PUT 'FORTEND 'DEFINED-ON-LINE '485) 
(PUT 'FORTEND 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'FORTEND 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FORTEND (STMT) (MKFFORTEND)) 
(PUT 'FORTGOTO 'NUMBER-OF-ARGS 1) 
(PUT 'FORTGOTO 'DEFINED-ON-LINE '488) 
(PUT 'FORTGOTO 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'FORTGOTO 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FORTGOTO (STMT)
    (PROG (STMTNUM)
      (COND
       ((NOT (SETQ STMTNUM (GET (CADR STMT) '*STMTNUM*)))
        (SETQ STMTNUM (PUT (CADR STMT) '*STMTNUM* (GENSTMTNUM)))))
      (RETURN (MKFFORTGO STMTNUM)))) 
(PUT 'FORTIF 'NUMBER-OF-ARGS 1) 
(PUT 'FORTIF 'DEFINED-ON-LINE '496) 
(PUT 'FORTIF 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'FORTIF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FORTIF (STMT)
    (PROG (R ST)
      (SETQ R (MKFFORTIF (CAADR STMT)))
      (INDENTFORTLEVEL (PLUS 1))
      (SETQ ST (SEQTOGP (CDADR STMT)))
      (COND
       ((AND (EQCAR ST 'COND) (EQUAL (LENGTH ST) 2))
        (SETQ ST (MKSTMTGP 0 (LIST ST)))))
      (SETQ R (APPEND R (FORTSTMT ST)))
      (INDENTFORTLEVEL (MINUS 1))
      (SETQ STMT (CDR STMT))
      (PROG ()
       WHILELABEL
        (COND
         ((NOT (AND (SETQ STMT (CDR STMT)) (NEQ (CAAR STMT) T))) (RETURN NIL)))
        (PROGN
         (SETQ R (APPEND R (MKFFORTELSEIF (CAAR STMT))))
         (INDENTFORTLEVEL (PLUS 1))
         (SETQ ST (SEQTOGP (CDAR STMT)))
         (COND
          ((AND (EQCAR ST 'COND) (EQUAL (LENGTH ST) 2))
           (SETQ ST (MKSTMTGP 0 (LIST ST)))))
         (SETQ R (APPEND R (FORTSTMT ST)))
         (INDENTFORTLEVEL (MINUS 1)))
        (GO WHILELABEL))
      (COND
       (STMT
        (PROGN
         (SETQ R (APPEND R (MKFFORTELSE)))
         (INDENTFORTLEVEL (PLUS 1))
         (SETQ ST (SEQTOGP (CDAR STMT)))
         (COND
          ((AND (EQCAR ST 'COND) (EQUAL (LENGTH ST) 2))
           (SETQ ST (MKSTMTGP 0 (LIST ST)))))
         (SETQ R (APPEND R (FORTSTMT ST)))
         (INDENTFORTLEVEL (MINUS 1)))))
      (RETURN (APPEND R (MKFFORTENDIF))))) 
(PUT 'MKFFORTIF 'NUMBER-OF-ARGS 1) 
(PUT 'MKFFORTIF 'DEFINED-ON-LINE '530) 
(PUT 'MKFFORTIF 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'MKFFORTIF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MKFFORTIF (EXP)
    (APPEND (APPEND (LIST (MKFORTTAB) 'IF BLANK '|(|) (FORTEXP EXP))
            (LIST '|)| BLANK 'THEN (MKFORTTERPRI)))) 
(PUT 'MKFFORTELSEIF 'NUMBER-OF-ARGS 1) 
(PUT 'MKFFORTELSEIF 'DEFINED-ON-LINE '534) 
(PUT 'MKFFORTELSEIF 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'MKFFORTELSEIF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MKFFORTELSEIF (EXP)
    (APPEND
     (APPEND (LIST (MKFORTTAB) 'ELSE BLANK 'IF BLANK '|(|) (FORTEXP EXP))
     (LIST '|)| 'THEN (MKCTERPRI)))) 
(PUT 'MKFFORTELSE 'NUMBER-OF-ARGS 0) 
(PUT 'MKFFORTELSE 'DEFINED-ON-LINE '539) 
(PUT 'MKFFORTELSE 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'MKFFORTELSE 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE MKFFORTELSE NIL (LIST (MKFORTTAB) 'ELSE (MKFORTTERPRI))) 
(PUT 'MKFFORTENDIF 'NUMBER-OF-ARGS 0) 
(PUT 'MKFFORTENDIF 'DEFINED-ON-LINE '542) 
(PUT 'MKFFORTENDIF 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'MKFFORTENDIF 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE MKFFORTENDIF NIL (LIST (MKFORTTAB) 'ENDIF (MKFORTTERPRI))) 
(PUT 'FORTLITERAL 'NUMBER-OF-ARGS 1) 
(PUT 'FORTLITERAL 'DEFINED-ON-LINE '545) 
(PUT 'FORTLITERAL 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'FORTLITERAL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FORTLITERAL (STMT) (MKFFORTLITERAL (CDR STMT))) 
(PUT 'FORTREAD 'NUMBER-OF-ARGS 1) 
(PUT 'FORTREAD 'DEFINED-ON-LINE '548) 
(PUT 'FORTREAD 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'FORTREAD 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FORTREAD (STMT) (MKFFORTREAD (CADR STMT))) 
(PUT 'FORTREPEAT 'NUMBER-OF-ARGS 1) 
(PUT 'FORTREPEAT 'DEFINED-ON-LINE '551) 
(PUT 'FORTREPEAT 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'FORTREPEAT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FORTREPEAT (STMT)
    (PROG (N RESULT STMTLST LOGEXP)
      (SETQ STMTLST (REVERSE (CDR STMT)))
      (SETQ LOGEXP (CAR STMTLST))
      (SETQ STMTLST (REVERSE (CDR STMTLST)))
      (SETQ N (GENSTMTNUM))
      (SETQ *ENDOFLOOPSTACK* (CONS 'DUMMY *ENDOFLOOPSTACK*))
      (SETQ RESULT (MKFFORTCONTINUE N))
      (INDENTFORTLEVEL (PLUS 1))
      (SETQ RESULT
              (APPEND RESULT
                      (PROG (ST FORALL-RESULT FORALL-ENDPTR)
                        (SETQ ST STMTLST)
                       STARTOVER
                        (COND ((NULL ST) (RETURN NIL)))
                        (SETQ FORALL-RESULT
                                ((LAMBDA (ST) (FORTSTMT ST)) (CAR ST)))
                        (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
                        (SETQ ST (CDR ST))
                        (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
                       LOOPLABEL
                        (COND ((NULL ST) (RETURN FORALL-RESULT)))
                        (RPLACD FORALL-ENDPTR
                                ((LAMBDA (ST) (FORTSTMT ST)) (CAR ST)))
                        (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
                        (SETQ ST (CDR ST))
                        (GO LOOPLABEL))))
      (INDENTFORTLEVEL (MINUS 1))
      (SETQ RESULT (APPEND RESULT (MKFFORTIFGO (LIST 'NOT LOGEXP) N)))
      (COND
       ((PAIRP (CAR *ENDOFLOOPSTACK*))
        (SETQ RESULT
                (APPEND RESULT (MKFFORTCONTINUE (CADAR *ENDOFLOOPSTACK*))))))
      (SETQ *ENDOFLOOPSTACK* (CDR *ENDOFLOOPSTACK*))
      (RETURN RESULT))) 
(PUT 'FORTRETURN 'NUMBER-OF-ARGS 1) 
(PUT 'FORTRETURN 'DEFINED-ON-LINE '570) 
(PUT 'FORTRETURN 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'FORTRETURN 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FORTRETURN (STMT)
    (COND ((ONEP (LENGTH STMT)) (MKFFORTRETURN))
          (*SUBPROGNAME*
           (APPEND (MKFFORTASSIGN *SUBPROGNAME* (CADR STMT)) (MKFFORTRETURN)))
          (T
           (GENTRANERR 'E NIL
            "RETURN NOT INSIDE FUNCTION - CANNOT BE TRANSLATED" NIL)))) 
(PUT 'FORTSTMTGP 'NUMBER-OF-ARGS 1) 
(PUT 'FORTSTMTGP 'DEFINED-ON-LINE '580) 
(PUT 'FORTSTMTGP 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'FORTSTMTGP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FORTSTMTGP (STMTGP)
    (PROGN
     (COND ((EQ (CAR STMTGP) 'PROGN) (SETQ STMTGP (CDR STMTGP)))
           (T (SETQ STMTGP (CDDR STMTGP))))
     (PROG (STMT FORALL-RESULT FORALL-ENDPTR)
       (SETQ STMT STMTGP)
      STARTOVER
       (COND ((NULL STMT) (RETURN NIL)))
       (SETQ FORALL-RESULT ((LAMBDA (STMT) (FORTSTMT STMT)) (CAR STMT)))
       (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
       (SETQ STMT (CDR STMT))
       (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
      LOOPLABEL
       (COND ((NULL STMT) (RETURN FORALL-RESULT)))
       (RPLACD FORALL-ENDPTR ((LAMBDA (STMT) (FORTSTMT STMT)) (CAR STMT)))
       (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
       (SETQ STMT (CDR STMT))
       (GO LOOPLABEL)))) 
(PUT 'FORTSTMTNUM 'NUMBER-OF-ARGS 1) 
(PUT 'FORTSTMTNUM 'DEFINED-ON-LINE '589) 
(PUT 'FORTSTMTNUM 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'FORTSTMTNUM 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FORTSTMTNUM (LABEL)
    (PROG (STMTNUM)
      (COND
       ((NOT (SETQ STMTNUM (GET LABEL '*STMTNUM*)))
        (SETQ STMTNUM (PUT LABEL '*STMTNUM* (GENSTMTNUM)))))
      (RETURN (MKFFORTCONTINUE STMTNUM)))) 
(PUT 'FORTSTOP 'NUMBER-OF-ARGS 1) 
(PUT 'FORTSTOP 'DEFINED-ON-LINE '597) 
(PUT 'FORTSTOP 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'FORTSTOP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FORTSTOP (STMT) (MKFFORTSTOP)) 
(PUT 'FORTWHILE 'NUMBER-OF-ARGS 1) 
(PUT 'FORTWHILE 'DEFINED-ON-LINE '600) 
(PUT 'FORTWHILE 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'FORTWHILE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FORTWHILE (STMT)
    (PROG (N1 N2 RESULT LOGEXP STMTLST)
      (SETQ LOGEXP (CADR STMT))
      (SETQ STMTLST (CDDR STMT))
      (SETQ N1 (GENSTMTNUM))
      (SETQ N2 (GENSTMTNUM))
      (SETQ *ENDOFLOOPSTACK* (CONS N2 *ENDOFLOOPSTACK*))
      (SETQ RESULT
              (APPEND (LIST N1 BLANK) (MKFFORTIFGO (LIST 'NOT LOGEXP) N2)))
      (INDENTFORTLEVEL (PLUS 1))
      (SETQ RESULT
              (APPEND RESULT
                      (PROG (ST FORALL-RESULT FORALL-ENDPTR)
                        (SETQ ST STMTLST)
                       STARTOVER
                        (COND ((NULL ST) (RETURN NIL)))
                        (SETQ FORALL-RESULT
                                ((LAMBDA (ST) (FORTSTMT ST)) (CAR ST)))
                        (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
                        (SETQ ST (CDR ST))
                        (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
                       LOOPLABEL
                        (COND ((NULL ST) (RETURN FORALL-RESULT)))
                        (RPLACD FORALL-ENDPTR
                                ((LAMBDA (ST) (FORTSTMT ST)) (CAR ST)))
                        (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
                        (SETQ ST (CDR ST))
                        (GO LOOPLABEL))))
      (SETQ RESULT (APPEND RESULT (MKFFORTGO N1)))
      (INDENTFORTLEVEL (MINUS 1))
      (SETQ RESULT (APPEND RESULT (MKFFORTCONTINUE N2)))
      (COND
       ((PAIRP (CAR *ENDOFLOOPSTACK*))
        (SETQ RESULT
                (APPEND RESULT (MKFFORTCONTINUE (CADAR *ENDOFLOOPSTACK*))))))
      (SETQ *ENDOFLOOPSTACK* (CDR *ENDOFLOOPSTACK*))
      (RETURN RESULT))) 
(PUT 'FORTWRITE 'NUMBER-OF-ARGS 1) 
(PUT 'FORTWRITE 'DEFINED-ON-LINE '620) 
(PUT 'FORTWRITE 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'FORTWRITE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FORTWRITE (STMT) (MKFFORTWRITE (CDR STMT))) 
(DE FORTEXP_NAME (U)
    (COND ((ATOM U) (LIST U))
          (T (RPLACA (FORTEXP (CONS 'DUMMYARRAYTOKEN (CDR U))) (CAR U))))) 
(PUT 'FORTEXP_NAME 'NUMBER-OF-ARGS 1) 
(PUT 'FORTEXP_NAME 'DEFINED-ON-LINE '634) 
(PUT 'FORTEXP_NAME 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'FORTEXP_NAME 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'FORTEXP_NAME 'INLINE
      '(LAMBDA (U)
         (COND ((ATOM U) (LIST U))
               (T (RPLACA (FORTEXP (CONS 'DUMMYARRAYTOKEN (CDR U))) (CAR U)))))) 
(PUT 'MKFFORTASSIGN 'NUMBER-OF-ARGS 2) 
(PUT 'MKFFORTASSIGN 'DEFINED-ON-LINE '638) 
(PUT 'MKFFORTASSIGN 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'MKFFORTASSIGN 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MKFFORTASSIGN (LHS RHS)
    (APPEND
     (APPEND
      (CONS (MKFORTTAB)
            (COND ((ATOM LHS) (LIST LHS))
                  (T
                   (RPLACA (FORTEXP (CONS 'DUMMYARRAYTOKEN (CDR LHS)))
                           (CAR LHS)))))
      (CONS '= (FORTEXP RHS)))
     (LIST (MKFORTTERPRI)))) 
(PUT 'MKFFORTCALL 'NUMBER-OF-ARGS 2) 
(PUT 'MKFFORTCALL 'DEFINED-ON-LINE '642) 
(PUT 'MKFFORTCALL 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'MKFFORTCALL 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MKFFORTCALL (FNAME PARAMS)
    (PROGN
     (COND
      (PARAMS
       (SETQ PARAMS
               (APPEND
                (APPEND (LIST '|(|)
                        (PROG (P FORALL-RESULT FORALL-ENDPTR)
                          (SETQ P (INSERTCOMMAS PARAMS))
                         STARTOVER
                          (COND ((NULL P) (RETURN NIL)))
                          (SETQ FORALL-RESULT
                                  ((LAMBDA (P) (FORTEXP P)) (CAR P)))
                          (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
                          (SETQ P (CDR P))
                          (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
                         LOOPLABEL
                          (COND ((NULL P) (RETURN FORALL-RESULT)))
                          (RPLACD FORALL-ENDPTR
                                  ((LAMBDA (P) (FORTEXP P)) (CAR P)))
                          (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
                          (SETQ P (CDR P))
                          (GO LOOPLABEL)))
                (LIST '|)|)))))
     (COND
      (*MAKECALLS
       (APPEND (APPEND (LIST (MKFORTTAB) 'CALL BLANK) (FORTEXP FNAME))
               (APPEND PARAMS (LIST (MKFORTTERPRI)))))
      (T (APPEND (FORTEXP FNAME) PARAMS))))) 
(PUT 'MKFFORTCONTINUE 'NUMBER-OF-ARGS 1) 
(PUT 'MKFFORTCONTINUE 'DEFINED-ON-LINE '659) 
(PUT 'MKFFORTCONTINUE 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'MKFFORTCONTINUE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MKFFORTCONTINUE (STMTNUM)
    (LIST STMTNUM BLANK (MKFORTTAB) 'CONTINUE (MKFORTTERPRI))) 
(PUT 'MKFFORTDEC 'NUMBER-OF-ARGS 2) 
(PUT 'MKFFORTDEC 'DEFINED-ON-LINE '662) 
(PUT 'MKFFORTDEC 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'MKFFORTDEC 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MKFFORTDEC (TYPE VARLIST)
    (PROGN
     (COND ((EQUAL TYPE 'SCALAR) (SETQ TYPE DEFTYPE*)))
     (COND
      ((AND TYPE (NULL (MEMQ TYPE *LEGALFORTTYPES*)))
       (GENTRANERR 'E TYPE "Illegal Fortran type. " NIL)))
     (SETQ TYPE (OR TYPE 'DIMENSION))
     (COND
      (*DOUBLE
       (COND ((MEMQ TYPE '(REAL REAL*8)) (SETQ TYPE '|DOUBLE PRECISION|))
             ((MEMQ TYPE '(|IMPLICIT REAL| |IMPLICIT REAL*8|))
              (SETQ TYPE '|IMPLICIT DOUBLE PRECISION|))
             ((EQ TYPE 'COMPLEX) (SETQ TYPE 'COMPLEX*16))
             ((EQ TYPE '|IMPLICIT COMPLEX|)
              (SETQ TYPE '|IMPLICIT COMPLEX*16|)))))
     (SETQ VARLIST
             (PROG (V FORALL-RESULT FORALL-ENDPTR)
               (SETQ V (INSERTCOMMAS VARLIST))
              STARTOVER
               (COND ((NULL V) (RETURN NIL)))
               (SETQ FORALL-RESULT
                       ((LAMBDA (V)
                          (COND ((ATOM V) (LIST V))
                                (T
                                 (RPLACA
                                  (FORTEXP (CONS 'DUMMYARRAYTOKEN (CDR V)))
                                  (CAR V)))))
                        (CAR V)))
               (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
               (SETQ V (CDR V))
               (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
              LOOPLABEL
               (COND ((NULL V) (RETURN FORALL-RESULT)))
               (RPLACD FORALL-ENDPTR
                       ((LAMBDA (V)
                          (COND ((ATOM V) (LIST V))
                                (T
                                 (RPLACA
                                  (FORTEXP (CONS 'DUMMYARRAYTOKEN (CDR V)))
                                  (CAR V)))))
                        (CAR V)))
               (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
               (SETQ V (CDR V))
               (GO LOOPLABEL)))
     (COND
      ((IMPLICITP TYPE)
       (APPEND (LIST (MKFORTTAB) TYPE BLANK '|(|)
               (APPEND VARLIST (LIST '|)| (MKFORTTERPRI)))))
      (T
       (APPEND (LIST (MKFORTTAB) TYPE BLANK)
               (APPEND VARLIST (LIST (MKFORTTERPRI)))))))) 
(PUT 'MKFFORTDO 'NUMBER-OF-ARGS 5) 
(PUT 'MKFFORTDO 'DEFINED-ON-LINE '690) 
(PUT 'MKFFORTDO 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'MKFFORTDO 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE MKFFORTDO (STMTNUM VAR LO HI INCR)
    (PROGN
     (COND ((ONEP INCR) (SETQ INCR NIL))
           (INCR (SETQ INCR (CONS '|,| (FORTEXP INCR)))))
     (APPEND
      (APPEND
       (APPEND (LIST (MKFORTTAB) *DO* BLANK STMTNUM BLANK) (FORTEXP VAR))
       (APPEND (CONS '= (FORTEXP LO)) (CONS '|,| (FORTEXP HI))))
      (APPEND INCR (LIST (MKFORTTERPRI)))))) 
(PUT 'MKFFORTEND 'NUMBER-OF-ARGS 0) 
(PUT 'MKFFORTEND 'DEFINED-ON-LINE '702) 
(PUT 'MKFFORTEND 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'MKFFORTEND 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE MKFFORTEND NIL (LIST (MKFORTTAB) 'END (MKFORTTERPRI))) 
(PUT 'MKFFORTGO 'NUMBER-OF-ARGS 1) 
(PUT 'MKFFORTGO 'DEFINED-ON-LINE '705) 
(PUT 'MKFFORTGO 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'MKFFORTGO 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MKFFORTGO (STMTNUM) (LIST (MKFORTTAB) 'GOTO BLANK STMTNUM (MKFORTTERPRI))) 
(PUT 'MKFFORTIFGO 'NUMBER-OF-ARGS 2) 
(PUT 'MKFFORTIFGO 'DEFINED-ON-LINE '708) 
(PUT 'MKFFORTIFGO 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'MKFFORTIFGO 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MKFFORTIFGO (EXP STMTNUM)
    (APPEND (APPEND (LIST (MKFORTTAB) 'IF BLANK '|(|) (FORTEXP EXP))
            (LIST '|)| BLANK 'GOTO BLANK STMTNUM (MKFORTTERPRI)))) 
(PUT 'MKFFORTLITERAL 'NUMBER-OF-ARGS 1) 
(PUT 'MKFFORTLITERAL 'DEFINED-ON-LINE '712) 
(PUT 'MKFFORTLITERAL 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'MKFFORTLITERAL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MKFFORTLITERAL (ARGS)
    (PROG (*LOWER)
      (RETURN
       (PROG (A FORALL-RESULT FORALL-ENDPTR)
         (SETQ A ARGS)
        STARTOVER
         (COND ((NULL A) (RETURN NIL)))
         (SETQ FORALL-RESULT
                 ((LAMBDA (A)
                    (COND ((EQ A 'TAB*) (LIST (MKFORTTAB)))
                          ((EQ A 'CR*) (LIST (MKFORTTERPRI)))
                          ((PAIRP A) (FORTEXP A)) (T (LIST (STRIPQUOTES A)))))
                  (CAR A)))
         (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
         (SETQ A (CDR A))
         (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
        LOOPLABEL
         (COND ((NULL A) (RETURN FORALL-RESULT)))
         (RPLACD FORALL-ENDPTR
                 ((LAMBDA (A)
                    (COND ((EQ A 'TAB*) (LIST (MKFORTTAB)))
                          ((EQ A 'CR*) (LIST (MKFORTTERPRI)))
                          ((PAIRP A) (FORTEXP A)) (T (LIST (STRIPQUOTES A)))))
                  (CAR A)))
         (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
         (SETQ A (CDR A))
         (GO LOOPLABEL))))) 
(PUT 'MKFFORTREAD 'NUMBER-OF-ARGS 1) 
(PUT 'MKFFORTREAD 'DEFINED-ON-LINE '721) 
(PUT 'MKFFORTREAD 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'MKFFORTREAD 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MKFFORTREAD (VAR)
    (APPEND (LIST (MKFORTTAB) 'READ '|(*,*)| BLANK)
            (APPEND (FORTEXP VAR) (LIST (MKFORTTERPRI))))) 
(PUT 'MKFFORTRETURN 'NUMBER-OF-ARGS 0) 
(PUT 'MKFFORTRETURN 'DEFINED-ON-LINE '725) 
(PUT 'MKFFORTRETURN 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'MKFFORTRETURN 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE MKFFORTRETURN NIL (LIST (MKFORTTAB) 'RETURN (MKFORTTERPRI))) 
(PUT 'MKFFORTSTOP 'NUMBER-OF-ARGS 0) 
(PUT 'MKFFORTSTOP 'DEFINED-ON-LINE '728) 
(PUT 'MKFFORTSTOP 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'MKFFORTSTOP 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE MKFFORTSTOP NIL (LIST (MKFORTTAB) 'STOP (MKFORTTERPRI))) 
(PUT 'MKFFORTSUBPROGDEC 'NUMBER-OF-ARGS 4) 
(PUT 'MKFFORTSUBPROGDEC 'DEFINED-ON-LINE '731) 
(PUT 'MKFFORTSUBPROGDEC 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'MKFFORTSUBPROGDEC 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE MKFFORTSUBPROGDEC (TYPE STYPE NAME PARAMS)
    (PROGN
     (COND
      (PARAMS
       (SETQ PARAMS
               (APPEND
                (CONS '|(|
                      (PROG (P FORALL-RESULT FORALL-ENDPTR)
                        (SETQ P (INSERTCOMMAS PARAMS))
                       STARTOVER
                        (COND ((NULL P) (RETURN NIL)))
                        (SETQ FORALL-RESULT ((LAMBDA (P) (FORTEXP P)) (CAR P)))
                        (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
                        (SETQ P (CDR P))
                        (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
                       LOOPLABEL
                        (COND ((NULL P) (RETURN FORALL-RESULT)))
                        (RPLACD FORALL-ENDPTR
                                ((LAMBDA (P) (FORTEXP P)) (CAR P)))
                        (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
                        (SETQ P (CDR P))
                        (GO LOOPLABEL)))
                (LIST '|)|)))))
     (COND (TYPE (SETQ TYPE (LIST (MKFORTTAB) TYPE BLANK STYPE BLANK)))
           (T (SETQ TYPE (LIST (MKFORTTAB) STYPE BLANK))))
     (APPEND (APPEND TYPE (FORTEXP NAME))
             (APPEND PARAMS (LIST (MKFORTTERPRI)))))) 
(PUT 'MKFFORTWRITE 'NUMBER-OF-ARGS 1) 
(PUT 'MKFFORTWRITE 'DEFINED-ON-LINE '745) 
(PUT 'MKFFORTWRITE 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'MKFFORTWRITE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MKFFORTWRITE (ARGLIST)
    (APPEND
     (APPEND (LIST (MKFORTTAB) 'WRITE '|(*,*)| BLANK)
             (PROG (ARG FORALL-RESULT FORALL-ENDPTR)
               (SETQ ARG (INSERTCOMMAS ARGLIST))
              STARTOVER
               (COND ((NULL ARG) (RETURN NIL)))
               (SETQ FORALL-RESULT ((LAMBDA (ARG) (FORTEXP ARG)) (CAR ARG)))
               (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
               (SETQ ARG (CDR ARG))
               (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
              LOOPLABEL
               (COND ((NULL ARG) (RETURN FORALL-RESULT)))
               (RPLACD FORALL-ENDPTR ((LAMBDA (ARG) (FORTEXP ARG)) (CAR ARG)))
               (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
               (SETQ ARG (CDR ARG))
               (GO LOOPLABEL)))
     (LIST (MKFORTTERPRI)))) 
(PUT 'MKFORTTAB 'NUMBER-OF-ARGS 0) 
(PUT 'MKFORTTAB 'DEFINED-ON-LINE '754) 
(PUT 'MKFORTTAB 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'MKFORTTAB 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE MKFORTTAB NIL (LIST 'FORTTAB (PLUS FORTCURRIND* 6))) 
(PUT 'INDENTFORTLEVEL 'NUMBER-OF-ARGS 1) 
(PUT 'INDENTFORTLEVEL 'DEFINED-ON-LINE '758) 
(PUT 'INDENTFORTLEVEL 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'INDENTFORTLEVEL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE INDENTFORTLEVEL (N)
    (SETQ FORTCURRIND*
            (PROGN
             (SETQ ALGLIST* (CONS NIL NIL))
             (PLUS FORTCURRIND* (TIMES N TABLEN*))))) 
(PUT 'MKFORTTERPRI 'NUMBER-OF-ARGS 0) 
(PUT 'MKFORTTERPRI 'DEFINED-ON-LINE '762) 
(PUT 'MKFORTTERPRI 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'MKFORTTERPRI 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE MKFORTTERPRI NIL (LIST 'FORTTERPRI)) 
(FLUID '(MAXINT)) 
(SETQ MAXINT (DIFFERENCE (EXPT 2 31) 1)) 
(PUT 'FORMATFORT 'NUMBER-OF-ARGS 1) 
(PUT 'FORMATFORT 'DEFINED-ON-LINE '771) 
(PUT 'FORMATFORT 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'FORMATFORT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FORMATFORT (LST)
    (PROG (LINELEN STR *LOWER)
      (SETQ LINELEN (LINELENGTH 300))
      (SETQ *POSN* 0)
      (PROG (ELT)
        (SETQ ELT LST)
       LAB
        (COND ((NULL ELT) (RETURN NIL)))
        ((LAMBDA (ELT)
           (COND ((PAIRP ELT) (LISPEVAL ELT))
                 (T
                  (PROGN
                   (COND
                    ((AND (FIXP ELT)
                          (OR (GREATERP ELT MAXINT)
                              (LESSP ELT (MINUS MAXINT))))
                     (SETQ ELT (CDR (I2RD* ELT)))))
                   (SETQ STR (EXPLODE2 ELT))
                   (COND
                    ((FLOATP ELT)
                     (COND
                      (*DOUBLE
                       (COND ((MEMQ 'E STR) (SETQ STR (SUBST '|d| 'E STR)))
                             ((MEMQ '|e| STR) (SETQ STR (SUBST '|d| '|e| STR)))
                             (T (SETQ STR (APPEND STR '(D |0|))))))
                      ((MEMQ 'E STR) (SETQ STR (SUBST '|e| 'E STR))))))
                   (COND
                    ((GREATERP (PLUS *POSN* (LENGTH STR)) FORTLINELEN*)
                     (FORTCONTLINE)))
                   (PROG (U)
                     (SETQ U STR)
                    LAB
                     (COND ((NULL U) (RETURN NIL)))
                     ((LAMBDA (U) (PPRIN2 U)) (CAR U))
                     (SETQ U (CDR U))
                     (GO LAB))))))
         (CAR ELT))
        (SETQ ELT (CDR ELT))
        (GO LAB))
      (LINELENGTH LINELEN))) 
(PUT 'FORTCONTLINE 'NUMBER-OF-ARGS 0) 
(PUT 'FORTCONTLINE 'DEFINED-ON-LINE '799) 
(PUT 'FORTCONTLINE 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'FORTCONTLINE 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE FORTCONTLINE NIL
    (PROGN (FORTTERPRI) (PPRIN2 "     .") (FORTTAB *FORTCURRIND*) (PPRIN2 " "))) 
(PUT 'FORTTERPRI 'NUMBER-OF-ARGS 0) 
(PUT 'FORTTERPRI 'DEFINED-ON-LINE '807) 
(PUT 'FORTTERPRI 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'FORTTERPRI 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE FORTTERPRI NIL (PTERPRI)) 
(PUT 'FORTTAB 'NUMBER-OF-ARGS 1) 
(PUT 'FORTTAB 'DEFINED-ON-LINE '810) 
(PUT 'FORTTAB 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'FORTTAB 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FORTTAB (N)
    (PROGN
     (SETQ *FORTCURRIND*
             (MAX (MIN0 N (DIFFERENCE FORTLINELEN* MINFORTLINELEN*)) 6))
     (COND
      ((GREATERP (SETQ N (DIFFERENCE *FORTCURRIND* *POSN*)) 0)
       (PPRIN2 (NSPACES N)))))) 
(PUT 'PROCFORTTEM 'NUMBER-OF-ARGS 0) 
(PUT 'PROCFORTTEM 'DEFINED-ON-LINE '821) 
(PUT 'PROCFORTTEM 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'PROCFORTTEM 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE PROCFORTTEM NIL
    (PROG (C LINELEN *LOWER)
      (SETQ LINELEN (LINELENGTH 150))
      (SETQ C (PROCFORTCOMM))
      (PROG ()
       WHILELABEL
        (COND ((NOT (NEQ C $EOF$)) (RETURN NIL)))
        (COND
         ((MEMQ C '(|f| F |s| S))
          (PROGN (PPRIN2 C) (SETQ C (PROCSUBPROGHEADING C))))
         ((EQ C $EOL$) (PROGN (PTERPRI) (SETQ C (PROCFORTCOMM))))
         ((EQ C '|;|) (SETQ C (PROCACTIVE)))
         (T (PROGN (PPRIN2 C) (SETQ C (READCH)))))
        (GO WHILELABEL))
      (LINELENGTH LINELEN))) 
(PUT 'PROCFORTCOMM 'NUMBER-OF-ARGS 0) 
(PUT 'PROCFORTCOMM 'DEFINED-ON-LINE '835) 
(PUT 'PROCFORTCOMM 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'PROCFORTCOMM 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE PROCFORTCOMM NIL
    (PROG (C)
      (PROG ()
       WHILELABEL
        (COND ((NOT (MEMQ (SETQ C (READCH)) '(|c| C))) (RETURN NIL)))
        (PROGN
         (PPRIN2 C)
         (PROG ()
          REPEATLABEL
           (COND ((NEQ (SETQ C (READCH)) $EOL$) (PPRIN2 C)))
           (COND ((NOT (EQ C $EOL$)) (GO REPEATLABEL))))
         (PTERPRI))
        (GO WHILELABEL))
      (RETURN C))) 
(PUT 'PROCSUBPROGHEADING 'NUMBER-OF-ARGS 1) 
(PUT 'PROCSUBPROGHEADING 'DEFINED-ON-LINE '856) 
(PUT 'PROCSUBPROGHEADING 'DEFINED-IN-FILE 'GENTRAN/LSPFOR.RED) 
(PUT 'PROCSUBPROGHEADING 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PROCSUBPROGHEADING (C)
    (PROG (LST NAME I PROPNAME)
      (SETQ LST
              (COND
               ((MEMQ C '(|f| F))
                '((|u| U) (|n| N) (|c| C) (|t| T) (|i| I) (|o| O) (|n| N)))
               (T
                '((|u| U) (|b| B) (|r| R) (|o| O) (|u| U) (|t| T) (|i| I)
                  (|n| N) (|e| E)))))
      (PROG ()
       WHILELABEL
        (COND
         ((NOT (AND LST (MEMQ (SETQ C (READCH)) (CAR LST)))) (RETURN NIL)))
        (PROGN (PPRIN2 C) (SETQ LST (CDR LST)))
        (GO WHILELABEL))
      (COND (LST (RETURN C)))
      (SETQ C (FLUSHSPACES (READCH)))
      (PROG ()
       WHILELABEL
        (COND ((NOT (NOT (OR (SEPRP C) (EQ C '|(|)))) (RETURN NIL)))
        (PROGN (SETQ NAME (ACONC NAME C)) (PPRIN2 C) (SETQ C (READCH)))
        (GO WHILELABEL))
      (SETQ NAME (INTERN (COMPRESS NAME)))
      (COND ((NOT *GENDECS) (SYMTABPUT NAME NIL NIL)))
      (SETQ PROPNAME
              (COND ((EQ GENTRANLANG* 'FORTRAN) '*FORTRANNAME*)
                    (T '*RATFORNAME*)))
      (PUT '$0 PROPNAME NAME)
      (SETQ C (FLUSHSPACES C))
      (COND ((NEQ C '|(|) (RETURN C)))
      (SETQ I 1)
      (PPRIN2 C)
      (SETQ C (READCH))
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND (NEQ C '|)|) (NEQ C '|;|))) (RETURN NIL)))
        (PROGN
         (PROG ()
          WHILELABEL
           (COND
            ((NOT (AND (NEQ C '|;|) (OR (SEPRP C) (EQ C '|,|)))) (RETURN NIL)))
           (PROGN
            (COND ((EQ C $EOL$) (PTERPRI)) (T (PPRIN2 C)))
            (SETQ C (READCH)))
           (GO WHILELABEL))
         (COND
          ((NEQ C '|;|)
           (PROGN
            (SETQ NAME (LIST C))
            (PPRIN2 C)
            (PROG ()
             WHILELABEL
              (COND
               ((NOT
                 (NOT
                  (OR (SEPRP (SETQ C (READCH)))
                      (MEMQ C (LIST '|,| '|;| '|)|)))))
                (RETURN NIL)))
              (PROGN (SETQ NAME (ACONC NAME C)) (PPRIN2 C))
              (GO WHILELABEL))
            (PUT (INTERN (COMPRESS (APPEND (EXPLODE2 '$) (EXPLODE2 I))))
                 PROPNAME (INTERN (COMPRESS NAME)))
            (SETQ I (ADD1 I))
            (SETQ C (FLUSHSPACES C))
            NIL)))
         NIL)
        (GO WHILELABEL))
      (SETQ |$#| (PROGN (SETQ ALGLIST* (CONS NIL NIL)) (SUB1 I)))
      (PROG ()
       WHILELABEL
        (COND
         ((NOT
           (GET
            (SETQ NAME (INTERN (COMPRESS (APPEND (EXPLODE2 '$) (EXPLODE2 I)))))
            PROPNAME))
          (RETURN NIL)))
        (REMPROP NAME PROPNAME)
        (GO WHILELABEL))
      (RETURN C))) 
(ENDMODULE) 