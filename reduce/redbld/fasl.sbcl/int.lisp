(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'INT)) 
(CREATE-PACKAGE
 '(INT CONTENTS CSOLVE IDEPEND DF2Q DISTRIB DIVIDE DRIVER SYMINT INTFAC IBASICS
   MAKEVARS JPATCHES REFORM SIMPSQRT HACKSQRT SQRTF ISOLVE TIDYSQRT TRCASE
   HALFANGL TRIALDIV VECT DINT)
 '(INT TRANS)) 
(FLUID '(*NOEXTEND *PVAR FRLIS* GAUSSIANI)) 
(GLOBAL '(GENSYMCOUNT INITL*)) 
(SETQ *PVAR '_A) 
(SETQ GAUSSIANI (LIST (CONS (GETPOWER (FKERN '(SQRT -1)) 1) 1))) 
(SETQ GENSYMCOUNT 0) 
(SETQ INITL* (APPEND '(*NOEXTEND) INITL*)) 
(FLAG '(INTERR) 'TRANSFER) 
(FLAG '(ATAN DILOG EI ERF EXPT LOG TAN) 'TRANSCENDENTAL) 
(SETQ FRLIS* (UNION '(=X =Y) FRLIS*)) 
(PUT 'DF 'OPMTCH
     (CONS '(((INT =Y =X) =X) (NIL . T) (EVL* =Y) NIL) (GET 'DF 'OPMTCH))) 
(PUT 'INT 'OPMTCH
     (CONS '(((DF =Y =X) =X) (NIL . T) (EVL* =Y) NIL) (GET 'INT 'OPMTCH))) 
(PUT 'EVL* 'OPMTCH '(((=X) (NIL . T) =X NIL))) 
(PUT 'EVL* 'SIMPFN 'SIMPIDEN) 
(PUT 'FLATTEN 'NUMBER-OF-ARGS 1) 
(PUT 'FLATTEN 'DEFINED-ON-LINE '76) 
(PUT 'FLATTEN 'DEFINED-IN-FILE 'INT/INT.RED) 
(PUT 'FLATTEN 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FLATTEN (U)
    (COND ((NULL U) NIL) ((ATOM U) (LIST U))
          ((ATOM (CAR U)) (CONS (CAR U) (FLATTEN (CDR U))))
          (T (NCONC (FLATTEN (CAR U)) (FLATTEN (CDR U)))))) 
(PUT 'INT-GENSYM1 'NUMBER-OF-ARGS 1) 
(PUT 'INT-GENSYM1 'DEFINED-ON-LINE '82) 
(PUT 'INT-GENSYM1 'DEFINED-IN-FILE 'INT/INT.RED) 
(PUT 'INT-GENSYM1 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE INT-GENSYM1 (U)
    (PROGN
     (SETQ GENSYMCOUNT (PLUS GENSYMCOUNT 1))
     (COMPRESS
      (APPEND (EXPLODE '!) (APPEND (EXPLODE U) (EXPLODE GENSYMCOUNT)))))) 
(PUT 'MKNILL 'NUMBER-OF-ARGS 1) 
(PUT 'MKNILL 'DEFINED-ON-LINE '87) 
(PUT 'MKNILL 'DEFINED-IN-FILE 'INT/INT.RED) 
(PUT 'MKNILL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MKNILL (N)
    (COND ((EQUAL N 0) NIL) (T (CONS NIL (MKNILL (DIFFERENCE N 1)))))) 
(DE ARGOF (U) (CADR U)) 
(PUT 'ARGOF 'NUMBER-OF-ARGS 1) 
(PUT 'ARGOF 'DEFINED-ON-LINE '94) 
(PUT 'ARGOF 'DEFINED-IN-FILE 'INT/INT.RED) 
(PUT 'ARGOF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'ARGOF 'INLINE '(LAMBDA (U) (CADR U))) 
(PUT 'NTHROOT 'SIMPFN 'SIMPIDEN) 
(FLAG '(NEWTOK INFIX) 'EVAL) 
(NEWTOK '((|.| ~ *) INT_MULT)) 
(NEWTOK '((|.| ~ +) INT_ADD)) 
(INFIX (LIST 'INT_MULT 'INT_ADD)) 
(PRECEDENCE (LIST 'INT_ADD 'ADD)) 
(PRECEDENCE (LIST 'INT_MULT 'MULT)) 
(DE INT_MULT (A B) (CONS A B)) 
(PUT 'INT_MULT 'NUMBER-OF-ARGS 2) 
(PUT 'INT_MULT 'DEFINED-ON-LINE '119) 
(PUT 'INT_MULT 'DEFINED-IN-FILE 'INT/INT.RED) 
(PUT 'INT_MULT 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(PUTC 'INT_MULT 'INLINE '(LAMBDA (A B) (CONS A B))) 
(DE INT_ADD (A B) (CONS A B)) 
(PUT 'INT_ADD 'NUMBER-OF-ARGS 2) 
(PUT 'INT_ADD 'DEFINED-ON-LINE '122) 
(PUT 'INT_ADD 'DEFINED-IN-FILE 'INT/INT.RED) 
(PUT 'INT_ADD 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(PUTC 'INT_ADD 'INLINE '(LAMBDA (A B) (CONS A B))) 
(PUT 'INT_RED 'NUMBER-OF-ARGS 1) 
(PUTC 'INT_RED 'INLINE '(LAMBDA (U) (CDR U))) 
(DE INT_RED (U) (CDR U)) 
(PUT 'INT_RED 'SETQFN '(LAMBDA (U V) (SETCDR U V))) 
(PUT 'SET_INT_RED 'NUMBER-OF-ARGS 2) 
(PUTC 'SET_INT_RED 'INLINE '(LAMBDA (U V) (SETCDR U V))) 
(DE SET_INT_RED (U V) (SETCDR U V)) 
(PUT 'INT_LC 'NUMBER-OF-ARGS 1) 
(PUTC 'INT_LC 'INLINE '(LAMBDA (U) (CDAR U))) 
(DE INT_LC (U) (CDAR U)) 
(PUT 'INT_LC 'SETQFN '(LAMBDA (U V) (SETCDR (CAR U) V))) 
(PUT 'SET_INT_LC 'NUMBER-OF-ARGS 2) 
(PUTC 'SET_INT_LC 'INLINE '(LAMBDA (U V) (SETCDR (CAR U) V))) 
(DE SET_INT_LC (U V) (SETCDR (CAR U) V)) 
(PUT 'INT_LPOW 'NUMBER-OF-ARGS 1) 
(PUTC 'INT_LPOW 'INLINE '(LAMBDA (U) (CAAR U))) 
(DE INT_LPOW (U) (CAAR U)) 
(PUT 'INT_LPOW 'SETQFN '(LAMBDA (U V) (SETCAR (CAR U) V))) 
(PUT 'SET_INT_LPOW 'NUMBER-OF-ARGS 2) 
(PUTC 'SET_INT_LPOW 'INLINE '(LAMBDA (U V) (SETCAR (CAR U) V))) 
(DE SET_INT_LPOW (U V) (SETCAR (CAR U) V)) 
(PUT 'INT_LT 'NUMBER-OF-ARGS 1) 
(PUTC 'INT_LT 'INLINE '(LAMBDA (U) (CAR U))) 
(DE INT_LT (U) (CAR U)) 
(PUT 'INT_LT 'SETQFN '(LAMBDA (U V) (SETCAR U V))) 
(PUT 'SET_INT_LT 'NUMBER-OF-ARGS 2) 
(PUTC 'SET_INT_LT 'INLINE '(LAMBDA (U V) (SETCAR U V))) 
(DE SET_INT_LT (U V) (SETCAR U V)) 
NIL 
(DEFLIST
 '((INT_MULT (ARROW (TIMES INT_POWER SQ) INT_TERM))
   (INT_ADD (ARROW (TIMES INT_TERM INT_DF) INT_DF))
   (INT_POW (ARROW INT_DF INT_POWER)) (INT_LC (ARROW INT_DF SQ))
   (INT_RED (ARROW INT_DF INT_DF)))
 'PROCEDURE_TYPE) 
(ENDMODULE) 