(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'TAYIMPL)) 
(EXPORTS (LIST 'IMPLICIT_TAYLOR 'INVERSE_TAYLOR)) 
(IMPORTS
 (LIST '*F2Q '*N2F 'DIFFSQ 'ERRORP 'ERRORSET* 'INVSQ 'LEQ 'MKQUOTE 'MK*SQ 'MVAR
       'NEGSQ 'NUMR 'QUOTSQ 'REVERSIP 'SIMP* 'SUBEVAL 'TYPERR 'HAS-TAYLOR*
       'MAKE-TAYLOR* 'TAYLOR-KERNEL-SQ-P 'TAYMAKECOEFF 'TAYLOR-ERROR 'ADDTAYLOR
       'MULTTAYLOR 'MULTTAYLORSQ 'DIFFTAYLOR 'TAYLOREXPAND 'PREPTAYLOR*1
       'SUBSUBTAYLOR)) 
(FLUID '(*TRTAYLOR)) 
(PUT 'IMPLICIT_TAYLOR 'NUMBER-OF-ARGS 6) 
(PUT 'IMPLICIT_TAYLOR 'DEFINED-ON-LINE '70) 
(PUT 'IMPLICIT_TAYLOR 'DEFINED-IN-FILE 'TAYLOR/TAYIMPL.RED) 
(PUT 'IMPLICIT_TAYLOR 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE IMPLICIT_TAYLOR (F X Y X0 Y0 N)
    (PROG (Z L *TAYEXPANDING*)
      (SETQ F (SIMP* F))
      (SETQ L
              (LIST 'SUBSQ (MKQUOTE F)
                    (MKQUOTE (LIST (CONS X X0) (CONS Y Y0)))))
      (SETQ Z (ERRORSET* Z *TRTAYLOR))
      (COND ((ERRORP Z) (TAYLOR-ERROR 'IMPLICIT_TAYLOR NIL))
            ((NOT (NULL (CAR Z)))
             (TAYLOR-ERROR 'IMPLICIT_TAYLOR
              "      Input expression non-zero at given point")))
      (SETQ *TAYEXPANDING* T)
      (SETQ L
              (LIST 'IMPLICIT_TAYLOR1 (MKQUOTE F) (MKQUOTE X) (MKQUOTE Y)
                    (MKQUOTE X0) (MKQUOTE Y0) (MKQUOTE N)))
      (SETQ Z (ERRORSET* L *TRTAYLOR))
      (COND ((NOT (ERRORP Z)) (RETURN (CAR Z)))
            (T (TAYLOR-ERROR 'IMPLICIT_TAYLOR NIL))))) 
(PUT 'IMPLICIT_TAYLOR1 'NUMBER-OF-ARGS 6) 
(PUT 'IMPLICIT_TAYLOR1 'DEFINED-ON-LINE '93) 
(PUT 'IMPLICIT_TAYLOR1 'DEFINED-IN-FILE 'TAYLOR/TAYIMPL.RED) 
(PUT 'IMPLICIT_TAYLOR1 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE IMPLICIT_TAYLOR1 (F X Y X0 Y0 N)
    (PROG (FT FN F1 G)
      (COND
       ((LEQ N 0)
        (RETURN
         (LIST 'TAYLOR* (LIST (CONS (LIST (LIST 0)) (SIMP* Y0)))
               (LIST (LIST (LIST X) X0 N (PLUS N 1))) NIL NIL))))
      (SETQ FT (MULTSQ (NEGSQ (DIFFSQ F X)) (INVSQ (DIFFSQ F Y))))
      (SETQ F1 (TAYLOREXPAND FT (LIST (LIST (LIST X) X0 N (PLUS N 1)))))
      (COND
       ((NOT (AND (KERNP F1) (EQCAR (CAAAR (CAR F1)) 'TAYLOR*)))
        (TYPERR F "implicit function")))
      (SETQ FN (SETQ F1 (CAAAR (CAR F1))))
      (SETQ G
              (LIST
               (CONS (LIST (LIST 1))
                     (SIMP* (SUBSUBTAYLOR (LIST (CONS X X0) (CONS Y Y0)) F1)))
               (CONS (LIST (LIST 0)) (SIMP* Y0))))
      (PROG (I)
        (SETQ I 2)
       LAB
        (COND ((MINUSP (DIFFERENCE N I)) (RETURN NIL)))
        (PROGN
         (SETQ FN
                 (MULTTAYLORSQ
                  (ADDTAYLOR (DIFFTAYLOR FN X)
                   (MULTTAYLOR (DIFFTAYLOR FN Y) F1))
                  (INVSQ (CONS (COND ((ZEROP I) NIL) (T I)) 1))))
         (SETQ G
                 (CONS
                  (CONS (LIST (LIST I))
                        (SIMP*
                         (SUBSUBTAYLOR (LIST (CONS X X0) (CONS Y Y0)) FN)))
                  G)))
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (RETURN (CONSTRUCT-TAYLOR* (REVERSIP G) X X0 N)))) 
(FLAG '(IMPLICIT_TAYLOR) 'OPFN) 
(PUT 'CONSTRUCT-TAYLOR* 'NUMBER-OF-ARGS 4) 
(PUT 'CONSTRUCT-TAYLOR* 'DEFINED-ON-LINE '117) 
(PUT 'CONSTRUCT-TAYLOR* 'DEFINED-IN-FILE 'TAYLOR/TAYIMPL.RED) 
(PUT 'CONSTRUCT-TAYLOR* 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE CONSTRUCT-TAYLOR* (CFL X X0 N)
    (COND
     ((NOT (SMEMBER 'TAYLOR* CFL))
      (LIST 'TAYLOR* CFL (LIST (LIST (LIST X) X0 N (PLUS N 1))) NIL NIL))
     (T
      (MK*SQ
       (TAYLOREXPAND
        (SIMP* (PREPTAYLOR*1 CFL (LIST (LIST (LIST X) X0 N (PLUS N 1))) NIL))
        (LIST (LIST (LIST X) X0 N (PLUS N 1)))))))) 
(FLAG '(IMPLICIT_TAYLOR) 'OPFN) 
(PUT 'INVERSE_TAYLOR 'NUMBER-OF-ARGS 5) 
(PUT 'INVERSE_TAYLOR 'DEFINED-ON-LINE '126) 
(PUT 'INVERSE_TAYLOR 'DEFINED-IN-FILE 'TAYLOR/TAYIMPL.RED) 
(PUT 'INVERSE_TAYLOR 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE INVERSE_TAYLOR (F Y X Y0 N)
    (PROG (L *TAYEXPANDING*)
      (SETQ *TAYEXPANDING* T)
      (SETQ L
              (LIST 'INVERSE_TAYLOR1 (MKQUOTE (SIMP* F)) (MKQUOTE X)
                    (MKQUOTE Y)
                    (MKQUOTE (SUBEVAL (LIST (LIST 'REPLACEBY Y Y0) F)))
                    (MKQUOTE Y0) (MKQUOTE N)))
      (SETQ X (ERRORSET* L *TRTAYLOR))
      (COND ((NOT (ERRORP X)) (RETURN (CAR X)))
            (T (TAYLOR-ERROR 'INVERSE_TAYLOR NIL))))) 
(PUT 'INVERSE_TAYLOR1 'NUMBER-OF-ARGS 6) 
(PUT 'INVERSE_TAYLOR1 'DEFINED-ON-LINE '141) 
(PUT 'INVERSE_TAYLOR1 'DEFINED-IN-FILE 'TAYLOR/TAYIMPL.RED) 
(PUT 'INVERSE_TAYLOR1 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE INVERSE_TAYLOR1 (F X Y X0 Y0 N)
    (PROG (FN F1 G)
      (COND ((LESSP N 0) (SETQ N 0)))
      (SETQ F1
              (TAYLOREXPAND (INVSQ (DIFFSQ F Y))
               (LIST (LIST (LIST Y) Y0 N (PLUS N 1)))))
      (COND
       ((NOT (AND (KERNP F1) (EQCAR (CAAAR (CAR F1)) 'TAYLOR*)))
        (TYPERR F "implicit function")))
      (SETQ FN (SETQ F1 (CAAAR (CAR F1))))
      (SETQ G
              (LIST
               (CONS (LIST (LIST 1))
                     (SIMP* (SUBSUBTAYLOR (LIST (CONS Y Y0)) F1)))
               (CONS (LIST (LIST 0)) (SIMP* Y0))))
      (PROG (I)
        (SETQ I 2)
       LAB
        (COND ((MINUSP (DIFFERENCE N I)) (RETURN NIL)))
        (PROGN
         (SETQ FN
                 (MULTTAYLORSQ (MULTTAYLOR (DIFFTAYLOR FN Y) F1)
                  (INVSQ (CONS (COND ((ZEROP I) NIL) (T I)) 1))))
         (SETQ G
                 (CONS
                  (CONS (LIST (LIST I))
                        (SIMP* (SUBSUBTAYLOR (LIST (CONS Y Y0)) FN)))
                  G)))
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (RETURN (CONSTRUCT-TAYLOR* (REVERSIP G) X X0 N)))) 
(FLAG '(INVERSE_TAYLOR) 'OPFN) 
(ENDMODULE) 