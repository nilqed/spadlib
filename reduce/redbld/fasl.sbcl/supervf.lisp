(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'SUPERVF)) 
(NULL (SETQ *MODE 'SYMBOLIC)) 
(PUT 'EXT 'SIMPFN 'SIMPIDEN) 
(GLOBAL '(*NATURAL_WEDGES)) 
(SETQ *NATURAL_WEDGES NIL) 
(FLAG '(NATURAL_WEDGES) 'SWITCH) 
(PUT 'NATURAL_WEDGES 'SIMPFG
     '((T (NATURAL_WEDGES_HANDLER T)) (NIL (NATURAL_WEDGES_HANDLER NIL)))) 
(AEVAL (NULL (SETQ *MODE 'ALGEBRAIC))) 
(FLAG '(SUPER_VECTORFIELD) 'OPFN) 
(PUT 'SUPER_VECTORFIELD 'NUMBER-OF-ARGS 3) 
(PUT 'SUPER_VECTORFIELD 'DEFINED-ON-LINE '63) 
(PUT 'SUPER_VECTORFIELD 'DEFINED-IN-FILE 'CDIFF/SUPERVF.RED) 
(PUT 'SUPER_VECTORFIELD 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE SUPER_VECTORFIELD (OPERATOR_NAME EVEN_VARIABLES ODD_VARIABLES)
    (PROG (ODD_DIMENSION)
      (COND
       ((NOT (IDP OPERATOR_NAME))
        (MSGPRI "SUPER_VECTORFIELD:" OPERATOR_NAME "is not an identifier" NIL
                T)))
      (PUT OPERATOR_NAME 'SIMPFN 'SUPER_DER_SIMP)
      (FLAG (LIST OPERATOR_NAME) 'FULL)
      (SETQ EVEN_VARIABLES
              (COND ((NULL EVEN_VARIABLES) EVEN_VARIABLES)
                    ((ATOM EVEN_VARIABLES) (LIST EVEN_VARIABLES))
                    ((EQUAL (CAR EVEN_VARIABLES) 'LIST) (CDR EVEN_VARIABLES))
                    (T EVEN_VARIABLES)))
      (SETQ ODD_VARIABLES
              (COND ((NULL ODD_VARIABLES) ODD_VARIABLES)
                    ((ATOM ODD_VARIABLES) (LIST ODD_VARIABLES))
                    ((EQUAL (CAR ODD_VARIABLES) 'LIST) (CDR ODD_VARIABLES))
                    (T ODD_VARIABLES)))
      (SETQ ODD_DIMENSION 0)
      (PROG (KERNEL)
        (SETQ KERNEL ODD_VARIABLES)
       LAB
        (COND ((NULL KERNEL) (RETURN NIL)))
        ((LAMBDA (KERNEL)
           (COND
            ((OR (NEQ (LENGTH KERNEL) 2) (NEQ (CAR KERNEL) 'EXT)
                 (NOT (FIXP (CADR KERNEL))))
             (MSGPRI "SUPER_VECTORFIELD:" KERNEL "not a valid odd variable" NIL
                     T))
            (T (SETQ ODD_DIMENSION (MAX ODD_DIMENSION (CADR KERNEL))))))
         (CAR KERNEL))
        (SETQ KERNEL (CDR KERNEL))
        (GO LAB))
      (PUT OPERATOR_NAME 'VARIABLES EVEN_VARIABLES)
      (PUT OPERATOR_NAME 'EVEN_DIMENSION (LENGTH EVEN_VARIABLES))
      (PUT OPERATOR_NAME 'ODD_DIMENSION ODD_DIMENSION)
      (PUT OPERATOR_NAME 'SETKFN 'SETK_SUPER_VECTORFIELD)
      (RETURN (LIST 'LIST (LENGTH EVEN_VARIABLES) ODD_DIMENSION)))) 
(FLAG '(VECTORFIELD) 'OPFN) 
(PUT 'VECTORFIELD 'NUMBER-OF-ARGS 2) 
(PUT 'VECTORFIELD 'DEFINED-ON-LINE '97) 
(PUT 'VECTORFIELD 'DEFINED-IN-FILE 'CDIFF/SUPERVF.RED) 
(PUT 'VECTORFIELD 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE VECTORFIELD (OPERATOR_NAME VARIABLES)
    (SUPER_VECTORFIELD OPERATOR_NAME VARIABLES NIL)) 
(FLAG '(ADD_VARIABLES_TO_VECTORFIELD) 'OPFN) 
(PUT 'ADD_VARIABLES_TO_VECTORFIELD 'NUMBER-OF-ARGS 2) 
(PUT 'ADD_VARIABLES_TO_VECTORFIELD 'DEFINED-ON-LINE '102) 
(PUT 'ADD_VARIABLES_TO_VECTORFIELD 'DEFINED-IN-FILE 'CDIFF/SUPERVF.RED) 
(PUT 'ADD_VARIABLES_TO_VECTORFIELD 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE ADD_VARIABLES_TO_VECTORFIELD (OPERATOR_NAME VARIABLES)
    (COND
     ((NEQ (GET OPERATOR_NAME 'SIMPFN) 'SUPER_DER_SIMP)
      (MSGPRI "ADD_VARIABLE_TO_VECTORFIELD:" OPERATOR_NAME "not a vectorfield"
              NIL T))
     (T
      (PROGN
       (SETQ VARIABLES
               (APPEND (GET OPERATOR_NAME 'VARIABLES)
                       (COND ((NULL VARIABLES) VARIABLES)
                             ((ATOM VARIABLES) (LIST VARIABLES))
                             ((EQUAL (CAR VARIABLES) 'LIST) (CDR VARIABLES))
                             (T VARIABLES))))
       (PUT OPERATOR_NAME 'VARIABLES VARIABLES)
       (PUT OPERATOR_NAME 'EVEN_DIMENSION (LENGTH VARIABLES)))))) 
(FLAG '(ADD_ODD_VARIABLES_TO_VECTORFIELD) 'OPFN) 
(PUT 'ADD_ODD_VARIABLES_TO_VECTORFIELD 'NUMBER-OF-ARGS 2) 
(PUT 'ADD_ODD_VARIABLES_TO_VECTORFIELD 'DEFINED-ON-LINE '116) 
(PUT 'ADD_ODD_VARIABLES_TO_VECTORFIELD 'DEFINED-IN-FILE 'CDIFF/SUPERVF.RED) 
(PUT 'ADD_ODD_VARIABLES_TO_VECTORFIELD 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE ADD_ODD_VARIABLES_TO_VECTORFIELD (OPERATOR_NAME ODD_VARIABLES)
    (COND
     ((NEQ (GET OPERATOR_NAME 'SIMPFN) 'SUPER_DER_SIMP)
      (MSGPRI "ADD_VARIABLE_TO_VECTORFIELD:" OPERATOR_NAME "not a vectorfield"
              NIL T))
     (T
      (PROG (ODD_DIMENSION)
        (SETQ ODD_VARIABLES
                (COND ((NULL ODD_VARIABLES) ODD_VARIABLES)
                      ((ATOM ODD_VARIABLES) (LIST ODD_VARIABLES))
                      ((EQUAL (CAR ODD_VARIABLES) 'LIST) (CDR ODD_VARIABLES))
                      (T ODD_VARIABLES)))
        (SETQ ODD_DIMENSION (GET OPERATOR_NAME 'ODD_DIMENSION))
        (PROG (KERNEL)
          (SETQ KERNEL ODD_VARIABLES)
         LAB
          (COND ((NULL KERNEL) (RETURN NIL)))
          ((LAMBDA (KERNEL)
             (COND
              ((OR (NEQ (LENGTH KERNEL) 2) (NEQ (CAR KERNEL) 'EXT)
                   (NOT (FIXP (CADR KERNEL))))
               (MSGPRI "SUPER_VECTORFIELD:" KERNEL "not a valid odd variable"
                       NIL T))
              (T (SETQ ODD_DIMENSION (MAX ODD_DIMENSION (CADR KERNEL))))))
           (CAR KERNEL))
          (SETQ KERNEL (CDR KERNEL))
          (GO LAB))
        (RETURN (PUT OPERATOR_NAME 'ODD_DIMENSION ODD_DIMENSION)))))) 
(PUT 'MERGE_LISTS 'NUMBER-OF-ARGS 2) 
(PUT 'MERGE_LISTS 'DEFINED-ON-LINE '138) 
(PUT 'MERGE_LISTS 'DEFINED-IN-FILE 'CDIFF/SUPERVF.RED) 
(PUT 'MERGE_LISTS 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MERGE_LISTS (X1 X2)
    (PROG (CX1 CX2 LX2 CLX2 ODDSKIP SIGN)
      (SETQ SIGN 1)
      (SETQ X1 (REVERSE X1))
      (COND (X1 (SETQ CX1 (CAR X1))) (T (GO B)))
     A
      (COND (X2 (SETQ CX2 (CAR X2))) (T (GO B)))
      (COND ((LESSP CX1 CX2) (GO B)))
      (SETQ LX2 (CONS CX2 LX2))
      (SETQ ODDSKIP (NOT ODDSKIP))
      (SETQ X2 (CDR X2))
      (GO A)
     B
      (COND ((NULL X1) (RETURN (CONS SIGN (REVERSIP2 LX2 X2)))))
      (COND ((NULL LX2) (RETURN (CONS SIGN (REVERSIP2 X1 X2)))))
      (SETQ CLX2 (CAR LX2))
      (COND ((AND (EQUAL CX1 CLX2) (GREATERP CX1 0)) (RETURN NIL)))
      (COND ((GREATERP CX1 CLX2) (GO B1)))
      (SETQ X2 (CONS CLX2 X2))
      (SETQ LX2 (CDR LX2))
      (SETQ ODDSKIP (NOT ODDSKIP))
      (GO B)
     B1
      (SETQ X2 (CONS CX1 X2))
      (SETQ X1 (CDR X1))
      (COND ((AND ODDSKIP (GREATERP CX1 0)) (SETQ SIGN (MINUS SIGN))))
      (COND (X1 (SETQ CX1 (CAR X1))))
      (GO B))) 
(PUT 'EXT_MULT 'NUMBER-OF-ARGS 2) 
(PUT 'EXT_MULT 'DEFINED-ON-LINE '180) 
(PUT 'EXT_MULT 'DEFINED-IN-FILE 'CDIFF/SUPERVF.RED) 
(PUT 'EXT_MULT 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE EXT_MULT (X1 X2)
    ((LAMBDA (X)
       (COND ((NULL X) (CONS NIL 1)) ((NULL (CDR X)) (CONS 1 1))
             (T
              (CONS
               (CONS (CONS (CONS (*A2K (CONS 'EXT (CDR X))) 1) (CAR X)) NIL)
               1))))
     (MERGE_LISTS (CDR X1) (CDR X2)))) 
(PUT 'SUPER_DER_SIMP 'NUMBER-OF-ARGS 1) 
(PUT 'SUPER_DER_SIMP 'DEFINED-ON-LINE '187) 
(PUT 'SUPER_DER_SIMP 'DEFINED-IN-FILE 'CDIFF/SUPERVF.RED) 
(PUT 'SUPER_DER_SIMP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SUPER_DER_SIMP (U)
    (COND
     ((EQUAL (LENGTH U) 2)
      (PROG (DERIVATION_NAME VARIABLES EVEN_COMPONENTS ODD_COMPONENTS
             SPLITTED_NUMR SPLITTED_DENR)
        (SETQ DERIVATION_NAME (REVAL1 (CAR U) T))
        (SETQ VARIABLES (GET DERIVATION_NAME 'VARIABLES))
        (SETQ U (SIMP* (CADR U)))
        (SETQ SPLITTED_NUMR (SPLIT_FORM (CAR U) '(EXT)))
        (SETQ SPLITTED_NUMR
                (CONS (CONS (LIST 'EXT) (CAR SPLITTED_NUMR))
                      (CDR SPLITTED_NUMR)))
        (SETQ SPLITTED_DENR (SPLIT_FORM (CDR U) '(EXT)))
        (SETQ SPLITTED_DENR
                (CONS (CONS (LIST 'EXT) (CAR SPLITTED_DENR))
                      (CDR SPLITTED_DENR)))
        (SETQ EVEN_COMPONENTS
                (PROG (I FORALL-RESULT FORALL-ENDPTR)
                  (SETQ I 1)
                  (COND
                   ((MINUSP
                     (DIFFERENCE (GET DERIVATION_NAME 'EVEN_DIMENSION) I))
                    (RETURN NIL)))
                  (SETQ FORALL-RESULT
                          (SETQ FORALL-ENDPTR
                                  (CONS
                                   ((LAMBDA (COMPONENT)
                                      (CONS (NTH VARIABLES I)
                                            (SPLIT_EXT COMPONENT '(EXT))))
                                    (SIMP* (LIST DERIVATION_NAME 0 I)))
                                   NIL)))
                 LOOPLABEL
                  (SETQ I (PLUS2 I 1))
                  (COND
                   ((MINUSP
                     (DIFFERENCE (GET DERIVATION_NAME 'EVEN_DIMENSION) I))
                    (RETURN FORALL-RESULT)))
                  (RPLACD FORALL-ENDPTR
                          (CONS
                           ((LAMBDA (COMPONENT)
                              (CONS (NTH VARIABLES I)
                                    (SPLIT_EXT COMPONENT '(EXT))))
                            (SIMP* (LIST DERIVATION_NAME 0 I)))
                           NIL))
                  (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                  (GO LOOPLABEL)))
        (SETQ ODD_COMPONENTS
                (PROG (I FORALL-RESULT FORALL-ENDPTR)
                  (SETQ I 1)
                  (COND
                   ((MINUSP
                     (DIFFERENCE (GET DERIVATION_NAME 'ODD_DIMENSION) I))
                    (RETURN NIL)))
                  (SETQ FORALL-RESULT
                          (SETQ FORALL-ENDPTR
                                  (CONS
                                   ((LAMBDA (COMPONENT)
                                      (CONS I (SPLIT_EXT COMPONENT '(EXT))))
                                    (SIMP* (LIST DERIVATION_NAME 1 I)))
                                   NIL)))
                 LOOPLABEL
                  (SETQ I (PLUS2 I 1))
                  (COND
                   ((MINUSP
                     (DIFFERENCE (GET DERIVATION_NAME 'ODD_DIMENSION) I))
                    (RETURN FORALL-RESULT)))
                  (RPLACD FORALL-ENDPTR
                          (CONS
                           ((LAMBDA (COMPONENT)
                              (CONS I (SPLIT_EXT COMPONENT '(EXT))))
                            (SIMP* (LIST DERIVATION_NAME 1 I)))
                           NIL))
                  (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                  (GO LOOPLABEL)))
        (RETURN
         (ADDSQ
          (MULTSQ
           (ADDSQ (EVEN_ACTION EVEN_COMPONENTS SPLITTED_NUMR)
                  (ODD_ACTION ODD_COMPONENTS SPLITTED_NUMR))
           (INVSQ (CONS (CDR U) 1)))
          (NEGSQ
           (MULTSQ
            (SUPER_PRODUCT_SQ (EVEN_ACTION EVEN_COMPONENTS SPLITTED_DENR)
             (CONS (CAR U) 1))
            (INVSQ
             (CONS
              (COND (*PHYSOP-LOADED (PHYSOP-MULTF (CDR U) (CDR U)))
                    (T (POLY-MULTF (CDR U) (CDR U))))
              1))))))))
     (T (SIMPIDEN U)))) 
(PUT 'SPLIT_EXT 'NUMBER-OF-ARGS 2) 
(PUT 'SPLIT_EXT 'DEFINED-ON-LINE '222) 
(PUT 'SPLIT_EXT 'DEFINED-IN-FILE 'CDIFF/SUPERVF.RED) 
(PUT 'SPLIT_EXT 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE SPLIT_EXT (SQ OP_LIST)
    (PROG (DENR_SQ SPLITTED_FORM)
      (SETQ DENR_SQ (CDR SQ))
      (SETQ SPLITTED_FORM (SPLIT_FORM (CAR SQ) OP_LIST))
      (RETURN
       (CONS (CONS (LIST 'EXT) (CANCEL (CONS (CAR SPLITTED_FORM) DENR_SQ)))
             (PROG (KC_PAIR FORALL-RESULT FORALL-ENDPTR)
               (SETQ KC_PAIR (CDR SPLITTED_FORM))
               (COND ((NULL KC_PAIR) (RETURN NIL)))
               (SETQ FORALL-RESULT
                       (SETQ FORALL-ENDPTR
                               (CONS
                                ((LAMBDA (KC_PAIR)
                                   (CONS (CAR KC_PAIR)
                                         (CANCEL
                                          (CONS (CDR KC_PAIR) DENR_SQ))))
                                 (CAR KC_PAIR))
                                NIL)))
              LOOPLABEL
               (SETQ KC_PAIR (CDR KC_PAIR))
               (COND ((NULL KC_PAIR) (RETURN FORALL-RESULT)))
               (RPLACD FORALL-ENDPTR
                       (CONS
                        ((LAMBDA (KC_PAIR)
                           (CONS (CAR KC_PAIR)
                                 (CANCEL (CONS (CDR KC_PAIR) DENR_SQ))))
                         (CAR KC_PAIR))
                        NIL))
               (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
               (GO LOOPLABEL)))))) 
(PUT 'EVEN_ACTION 'NUMBER-OF-ARGS 2) 
(PUT 'EVEN_ACTION 'DEFINED-ON-LINE '232) 
(PUT 'EVEN_ACTION 'DEFINED-IN-FILE 'CDIFF/SUPERVF.RED) 
(PUT 'EVEN_ACTION 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE EVEN_ACTION (COMPONENTS SPLITTED_FORM)
    (PROG (ACTION)
      (SETQ ACTION (CONS NIL 1))
      (PROG (KC_PAIR)
        (SETQ KC_PAIR SPLITTED_FORM)
       LAB
        (COND ((NULL KC_PAIR) (RETURN NIL)))
        ((LAMBDA (KC_PAIR)
           (SETQ ACTION
                   (ADDSQ ACTION
                          (EVEN_ACTION_SF COMPONENTS (CDR KC_PAIR)
                           (CAR KC_PAIR) 1))))
         (CAR KC_PAIR))
        (SETQ KC_PAIR (CDR KC_PAIR))
        (GO LAB))
      (RETURN ACTION))) 
(PUT 'EVEN_ACTION_SF 'NUMBER-OF-ARGS 4) 
(PUT 'EVEN_ACTION_SF 'DEFINED-ON-LINE '242) 
(PUT 'EVEN_ACTION_SF 'DEFINED-IN-FILE 'CDIFF/SUPERVF.RED) 
(PUT 'EVEN_ACTION_SF 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE EVEN_ACTION_SF (COMPONENTS SF EXT_KERNEL FAC)
    (PROG (ACTION)
      (SETQ ACTION (CONS NIL 1))
      (PROG ()
       WHILELABEL
        (COND ((NOT (NOT (OR (ATOM SF) (ATOM (CAR SF))))) (RETURN NIL)))
        (PROGN
         (SETQ ACTION
                 (ADDSQ ACTION
                        (EVEN_ACTION_TERM COMPONENTS (CAR SF) EXT_KERNEL FAC)))
         (SETQ SF (CDR SF)))
        (GO WHILELABEL))
      (RETURN ACTION))) 
(PUT 'EVEN_ACTION_TERM 'NUMBER-OF-ARGS 4) 
(PUT 'EVEN_ACTION_TERM 'DEFINED-ON-LINE '252) 
(PUT 'EVEN_ACTION_TERM 'DEFINED-IN-FILE 'CDIFF/SUPERVF.RED) 
(PUT 'EVEN_ACTION_TERM 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE EVEN_ACTION_TERM (COMPONENTS TERM EXT_KERNEL FAC)
    (ADDSQ
     (EVEN_ACTION_POW COMPONENTS (CAR TERM) EXT_KERNEL
      (CONS
       (COND (*PHYSOP-LOADED (PHYSOP-MULTF FAC (CDR TERM)))
             (T (POLY-MULTF FAC (CDR TERM))))
       1))
     (EVEN_ACTION_SF COMPONENTS (CDR TERM) EXT_KERNEL
      ((LAMBDA (G137)
         (COND (*PHYSOP-LOADED (PHYSOP-MULTF FAC G137))
               (T (POLY-MULTF FAC G137))))
       (LIST (CONS (CAR TERM) 1)))))) 
(PUT 'EVEN_ACTION_POW 'NUMBER-OF-ARGS 4) 
(PUT 'EVEN_ACTION_POW 'DEFINED-ON-LINE '259) 
(PUT 'EVEN_ACTION_POW 'DEFINED-IN-FILE 'CDIFF/SUPERVF.RED) 
(PUT 'EVEN_ACTION_POW 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE EVEN_ACTION_POW (COMPONENTS POW EXT_KERNEL FAC)
    (PROG (KERNEL N COMPONENT DERIVATIVE ACTION ACTIVE_COMPONENTS)
      (SETQ KERNEL (CAR POW))
      (SETQ N (CDR POW))
      (COND
       ((SETQ COMPONENT (ASSOC KERNEL COMPONENTS))
        (RETURN
         (PROGN
          (SETQ DERIVATIVE
                  (COND ((EQUAL N 1) (CONS 1 1))
                        (T
                         (CONS
                          (CONS (CONS (CONS KERNEL (DIFFERENCE N 1)) N) NIL)
                          1))))
          (SETQ ACTION (COMPONENT_ACTION COMPONENT EXT_KERNEL DERIVATIVE))
          (MULTSQ ACTION FAC)))))
      (SETQ ACTIVE_COMPONENTS (FIND_ACTIVE_COMPONENTS KERNEL COMPONENTS NIL))
      (SETQ ACTION (CONS NIL 1))
      (PROG (COMPONENT)
        (SETQ COMPONENT ACTIVE_COMPONENTS)
       LAB
        (COND ((NULL COMPONENT) (RETURN NIL)))
        ((LAMBDA (COMPONENT)
           (PROGN
            (SETQ DERIVATIVE (DIFFP POW (CAR COMPONENT)))
            (SETQ ACTION
                    (ADDSQ ACTION
                           (COMPONENT_ACTION COMPONENT EXT_KERNEL
                            DERIVATIVE)))))
         (CAR COMPONENT))
        (SETQ COMPONENT (CDR COMPONENT))
        (GO LAB))
      (RETURN (MULTSQ ACTION FAC)))) 
(PUT 'COMPONENT_ACTION 'NUMBER-OF-ARGS 3) 
(PUT 'COMPONENT_ACTION 'DEFINED-ON-LINE '285) 
(PUT 'COMPONENT_ACTION 'DEFINED-IN-FILE 'CDIFF/SUPERVF.RED) 
(PUT 'COMPONENT_ACTION 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE COMPONENT_ACTION (COMPONENT EXT_KERNEL COEFFICIENT)
    (PROG (ACTION)
      (SETQ ACTION (CONS NIL 1))
      (PROG (KC_PAIR)
        (SETQ KC_PAIR (CDR COMPONENT))
       LAB
        (COND ((NULL KC_PAIR) (RETURN NIL)))
        ((LAMBDA (KC_PAIR)
           ((LAMBDA (EXT_PRODUCT EVEN_COEFFICIENT)
              (COND
               ((CAR EXT_PRODUCT)
                (SETQ ACTION
                        (ADDSQ ACTION
                               (MULTSQ (MULTSQ EXT_PRODUCT EVEN_COEFFICIENT)
                                       COEFFICIENT))))))
            (EXT_MULT (CAR KC_PAIR) EXT_KERNEL) (CDR KC_PAIR)))
         (CAR KC_PAIR))
        (SETQ KC_PAIR (CDR KC_PAIR))
        (GO LAB))
      (RETURN ACTION))) 
(PUT 'FIND_ACTIVE_COMPONENTS 'NUMBER-OF-ARGS 3) 
(PUT 'FIND_ACTIVE_COMPONENTS 'DEFINED-ON-LINE '298) 
(PUT 'FIND_ACTIVE_COMPONENTS 'DEFINED-IN-FILE 'CDIFF/SUPERVF.RED) 
(PUT 'FIND_ACTIVE_COMPONENTS 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE FIND_ACTIVE_COMPONENTS (KERNEL COMPONENTS COMPONENTS_FOUND)
    (PROG ()
      (SETQ COMPONENTS_FOUND
              (UPDATE_COMPONENTS
               (CONS KERNEL
                     ((LAMBDA (DEPL_ENTRY)
                        (COND (DEPL_ENTRY (CDR DEPL_ENTRY))))
                      (ASSOC KERNEL DEPL*)))
               COMPONENTS COMPONENTS_FOUND))
      (COND
       ((NOT (ATOM KERNEL))
        (PROG (ELEMENT)
          (SETQ ELEMENT KERNEL)
         LAB
          (COND ((NULL ELEMENT) (RETURN NIL)))
          ((LAMBDA (ELEMENT)
             (SETQ COMPONENTS_FOUND
                     (FIND_ACTIVE_COMPONENTS ELEMENT COMPONENTS
                      COMPONENTS_FOUND)))
           (CAR ELEMENT))
          (SETQ ELEMENT (CDR ELEMENT))
          (GO LAB))))
      (RETURN COMPONENTS_FOUND))) 
(PUT 'UPDATE_COMPONENTS 'NUMBER-OF-ARGS 3) 
(PUT 'UPDATE_COMPONENTS 'DEFINED-ON-LINE '311) 
(PUT 'UPDATE_COMPONENTS 'DEFINED-IN-FILE 'CDIFF/SUPERVF.RED) 
(PUT 'UPDATE_COMPONENTS 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE UPDATE_COMPONENTS (DEPENDENCIES COMPONENTS COMPONENTS_FOUND)
    (PROG (COMPONENT)
      (PROG (KERNEL)
        (SETQ KERNEL DEPENDENCIES)
       LAB
        (COND ((NULL KERNEL) (RETURN NIL)))
        ((LAMBDA (KERNEL)
           (COND
            ((AND (SETQ COMPONENT (ASSOC KERNEL COMPONENTS))
                  (NOT (ASSOC KERNEL COMPONENTS_FOUND)))
             (SETQ COMPONENTS_FOUND (CONS COMPONENT COMPONENTS_FOUND)))))
         (CAR KERNEL))
        (SETQ KERNEL (CDR KERNEL))
        (GO LAB))
      (RETURN COMPONENTS_FOUND))) 
(PUT 'ODD_ACTION 'NUMBER-OF-ARGS 2) 
(PUT 'ODD_ACTION 'DEFINED-ON-LINE '321) 
(PUT 'ODD_ACTION 'DEFINED-IN-FILE 'CDIFF/SUPERVF.RED) 
(PUT 'ODD_ACTION 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE ODD_ACTION (COMPONENTS SPLITTED_FORM)
    (PROG (ACTION SIGN DERIVATIVE KERNEL COEFFICIENT COMPONENT)
      (SETQ ACTION (CONS NIL 1))
      (PROG (KC_PAIR)
        (SETQ KC_PAIR SPLITTED_FORM)
       LAB
        (COND ((NULL KC_PAIR) (RETURN NIL)))
        ((LAMBDA (KC_PAIR)
           (PROGN
            (SETQ KERNEL (CAR KC_PAIR))
            (SETQ COEFFICIENT (CONS (CDR KC_PAIR) 1))
            (SETQ SIGN T)
            (PROG (I)
              (SETQ I (CDR KERNEL))
             LAB
              (COND ((NULL I) (RETURN NIL)))
              ((LAMBDA (I)
                 (PROGN
                  (SETQ SIGN (NOT SIGN))
                  (SETQ DERIVATIVE (*A2K (DELETE I KERNEL)))
                  (SETQ COMPONENT (ASSOC I COMPONENTS))
                  (SETQ ACTION
                          (ADDSQ ACTION
                                 (COMPONENT_ACTION COMPONENT DERIVATIVE
                                  (COND (SIGN (NEGSQ COEFFICIENT))
                                        (T COEFFICIENT)))))))
               (CAR I))
              (SETQ I (CDR I))
              (GO LAB))))
         (CAR KC_PAIR))
        (SETQ KC_PAIR (CDR KC_PAIR))
        (GO LAB))
      (RETURN ACTION))) 
(PUT 'SETK_SUPER_VECTORFIELD 'NUMBER-OF-ARGS 2) 
(PUT 'SETK_SUPER_VECTORFIELD 'DEFINED-ON-LINE '341) 
(PUT 'SETK_SUPER_VECTORFIELD 'DEFINED-IN-FILE 'CDIFF/SUPERVF.RED) 
(PUT 'SETK_SUPER_VECTORFIELD 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE SETK_SUPER_VECTORFIELD (VAL VALUE)
    (PROG (VECTORFIELD VAR VARIABLES I TUPLE)
      (COND ((NEQ (LENGTH VAL) 2) (RETURN (LET2 VAL VALUE NIL T))))
      (SETQ VECTORFIELD (CAR VAL))
      (SETQ VAR (CADR VAL))
      (SETQ TUPLE
              (COND
               ((AND (NOT (ATOM VAR)) (EQUAL (CAR VAR) 'EXT)
                     (EQUAL (LENGTH VAR) 2))
                (LIST 1 (CADR VAR)))
               (T
                (PROGN
                 (SETQ VARIABLES (GET VECTORFIELD 'VARIABLES))
                 (SETQ I 1)
                 (PROG ()
                  WHILELABEL
                   (COND
                    ((NOT (AND VARIABLES (NEQ VAR (CAR VARIABLES))))
                     (RETURN NIL)))
                   (PROGN (SETQ VARIABLES (CDR VARIABLES)) (SETQ I (PLUS I 1)))
                   (GO WHILELABEL))
                 (COND
                  ((NULL VARIABLES)
                   (MSGPRI "SETK_SUPER_VECTORFIELD:" VAR
                           "not a valid variable for" VECTORFIELD T))
                  (T (LIST 0 I)))))))
      (RETURN (LET2 (CONS VECTORFIELD TUPLE) VALUE NIL T)))) 
(FLAG '(SUPER_PRODUCT) 'OPFN) 
(PUT 'SUPER_PRODUCT 'NUMBER-OF-ARGS 2) 
(PUT 'SUPER_PRODUCT 'DEFINED-ON-LINE '365) 
(PUT 'SUPER_PRODUCT 'DEFINED-IN-FILE 'CDIFF/SUPERVF.RED) 
(PUT 'SUPER_PRODUCT 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE SUPER_PRODUCT (X Y) (MK*SQ (SUBS2 (SUPER_PRODUCT_SQ (SIMP X) (SIMP Y))))) 
(PUT 'SUPER_PRODUCT_SQ 'NUMBER-OF-ARGS 2) 
(PUT 'SUPER_PRODUCT_SQ 'DEFINED-ON-LINE '368) 
(PUT 'SUPER_PRODUCT_SQ 'DEFINED-IN-FILE 'CDIFF/SUPERVF.RED) 
(PUT 'SUPER_PRODUCT_SQ 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE SUPER_PRODUCT_SQ (X Y)
    (PROG (SPLITTED_X SPLITTED_Y PRODUCT)
      (SETQ SPLITTED_X (SPLIT_EXT X '(EXT)))
      (SETQ SPLITTED_Y (SPLIT_EXT Y '(EXT)))
      (SETQ PRODUCT (CONS NIL 1))
      (PROG (TERM_X)
        (SETQ TERM_X SPLITTED_X)
       LAB
        (COND ((NULL TERM_X) (RETURN NIL)))
        ((LAMBDA (TERM_X)
           (PROG (TERM_Y)
             (SETQ TERM_Y SPLITTED_Y)
            LAB
             (COND ((NULL TERM_Y) (RETURN NIL)))
             ((LAMBDA (TERM_Y)
                (SETQ PRODUCT
                        (ADDSQ PRODUCT
                               (MULTSQ (MULTSQ (CDR TERM_X) (CDR TERM_Y))
                                       (EXT_MULT (CAR TERM_X) (CAR TERM_Y))))))
              (CAR TERM_Y))
             (SETQ TERM_Y (CDR TERM_Y))
             (GO LAB)))
         (CAR TERM_X))
        (SETQ TERM_X (CDR TERM_X))
        (GO LAB))
      (RETURN PRODUCT))) 
(PUT 'NATURAL_WEDGES_HANDLER 'NUMBER-OF-ARGS 1) 
(PUT 'NATURAL_WEDGES_HANDLER 'DEFINED-ON-LINE '382) 
(PUT 'NATURAL_WEDGES_HANDLER 'DEFINED-IN-FILE 'CDIFF/SUPERVF.RED) 
(PUT 'NATURAL_WEDGES_HANDLER 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE NATURAL_WEDGES_HANDLER (ON_OFF)
    (PROG (SAVE_SWITCH)
      (COND
       (ON_OFF
        (PROGN
         (NEWTOK '((^ ^) SUPER_PRODUCT))
         (PRECEDENCE (LIST 'SUPER_PRODUCT 'TIMES))
         (PUT 'EXT 'PRIFN 'WEDGE_PRINT)))
       (T
        (PROGN
         (SETQ SAVE_SWITCH (GET '^ 'SWITCH*))
         (SETQ SAVE_SWITCH
                 (CONS (DELETE (ASSOC '^ (CAR SAVE_SWITCH)) (CAR SAVE_SWITCH))
                       (CDR SAVE_SWITCH)))
         (PUT '^ 'SWITCH* SAVE_SWITCH)
         (REMPROP 'EXT 'PRIFN)))))) 
(PUT 'WEDGE_PRINT 'NUMBER-OF-ARGS 1) 
(PUT 'WEDGE_PRINT 'DEFINED-ON-LINE '397) 
(PUT 'WEDGE_PRINT 'DEFINED-IN-FILE 'CDIFF/SUPERVF.RED) 
(PUT 'WEDGE_PRINT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE WEDGE_PRINT (EXT_KERNEL)
    (COND ((LEQ (LENGTH EXT_KERNEL) 2) (PRINT_ALIAS EXT_KERNEL))
          (T
           ((LAMBDA (KERNELS_ON_LIST)
              (INPRINT 'SUPER_PRODUCT 0 KERNELS_ON_LIST))
            (PROG (ARG FORALL-RESULT FORALL-ENDPTR)
              (SETQ ARG (CDR EXT_KERNEL))
              (COND ((NULL ARG) (RETURN NIL)))
              (SETQ FORALL-RESULT
                      (SETQ FORALL-ENDPTR
                              (CONS ((LAMBDA (ARG) (LIST 'EXT ARG)) (CAR ARG))
                                    NIL)))
             LOOPLABEL
              (SETQ ARG (CDR ARG))
              (COND ((NULL ARG) (RETURN FORALL-RESULT)))
              (RPLACD FORALL-ENDPTR
                      (CONS ((LAMBDA (ARG) (LIST 'EXT ARG)) (CAR ARG)) NIL))
              (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
              (GO LOOPLABEL)))))) 
(ENDMODULE) 