(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'PLOTIMP2)) 
(FLUID '(IMP2-TRIACOUNT* IMP2-TRIAS* *IMP2-TRACE)) 
(FLUID '(*SHOW_GRID *TEST_PLOT PLOT-CONTOUR * PLOT-REFINE*)) 
(SETQ IMP2-TRIACOUNT* 0) 
(PUT 'PLOTEVAL2XYIMPL 'NUMBER-OF-ARGS 5) 
(PUT 'PLOTEVAL2XYIMPL 'DEFINED-ON-LINE '49) 
(PUT 'PLOTEVAL2XYIMPL 'DEFINED-IN-FILE 'PLOT/PLOTIMP2.RED) 
(PUT 'PLOTEVAL2XYIMPL 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE PLOTEVAL2XYIMPL (RX RY F X Y)
    (PROG (LL L FORM G)
      (PROG (C)
        (SETQ C PLOT-CONTOUR*)
       LAB
        (COND ((NULL C) (RETURN NIL)))
        ((LAMBDA (C)
           (PROGN
            (SETQ FORM (PLOT-FORM-PREP (LIST 'DIFFERENCE (CDR F) C) X Y))
            (SETQ L
                    (IMP2-PLOT (CAR RX) (CADR RX) (CAR RY) (CADR RY)
                     (PLOT-POINTS NIL) FORM))
            (SETQ LL (APPEND LL L))
            NIL))
         (CAR C))
        (SETQ C (CDR C))
        (GO LAB))
      (COND
       ((AND *SHOW_GRID (NULL (CDR PLOT-CONTOUR*)))
        (SETQ G (IMP2-SHOW-MESHES))))
      (APPLY (GET PLOTDRIVER* 'PLOT-2IMP)
             (LIST X Y LL G (CAR RX) (CADR RX) (CAR RY) (CADR RY))))) 
(PUT 'IMP2-INIT 'NUMBER-OF-ARGS 0) 
(PUT 'IMP2-INIT 'DEFINED-ON-LINE '62) 
(PUT 'IMP2-INIT 'DEFINED-IN-FILE 'PLOT/PLOTIMP2.RED) 
(PUT 'IMP2-INIT 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE IMP2-INIT NIL
    (PROGN
     (IMP2-FINIT)
     (COND ((NULL IMP2-TRIAS*) (SETQ IMP2-TRIAS* (MKXVECT)))))) 
(PUT 'IMP2-FINIT 'NUMBER-OF-ARGS 0) 
(PUT 'IMP2-FINIT 'DEFINED-ON-LINE '66) 
(PUT 'IMP2-FINIT 'DEFINED-IN-FILE 'PLOT/PLOTIMP2.RED) 
(PUT 'IMP2-FINIT 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE IMP2-FINIT NIL
    (PROGN
     (COND
      (IMP2-TRIAS*
       (PROG (I)
         (SETQ I 0)
        LAB
         (COND ((MINUSP (DIFFERENCE IMP2-TRIACOUNT* I)) (RETURN NIL)))
         (XPUTV IMP2-TRIAS* I NIL)
         (SETQ I (PLUS2 I 1))
         (GO LAB))))
     (SETQ IMP2-TRIACOUNT* 0)
     NIL)) 
(PUT 'MK-POINT 'NUMBER-OF-ARGS 3) 
(PUT 'MK-POINT 'DEFINED-ON-LINE '72) 
(PUT 'MK-POINT 'DEFINED-IN-FILE 'PLOT/PLOTIMP2.RED) 
(PUT 'MK-POINT 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE MK-POINT (X0 Y0 FCN)
    ((LAMBDA (POINT)
       (COND ((CADDR POINT) POINT)
             (T (REDERR "Implicit function cannot be plotted"))))
     (LIST X0 Y0 (APPLY2 FCN X0 Y0)))) 
(PUT 'DELETIP1 'NUMBER-OF-ARGS 2) 
(PUT 'DELETIP1 'DEFINED-ON-LINE '79) 
(PUT 'DELETIP1 'DEFINED-IN-FILE 'PLOT/PLOTIMP2.RED) 
(PUT 'DELETIP1 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE DELETIP1 (U V)
    (AND (PAIRP (CDR V))
         (COND ((EQUAL U (CADR V)) (RPLACD V (CDDR V)))
               (T (DELETIP1 U (CDR V)))))) 
(PUT 'DELETIP 'NUMBER-OF-ARGS 2) 
(PUT 'DELETIP 'DEFINED-ON-LINE '86) 
(PUT 'DELETIP 'DEFINED-IN-FILE 'PLOT/PLOTIMP2.RED) 
(PUT 'DELETIP 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE DELETIP (U V)
    (COND ((NOT (PAIRP V)) V) ((EQUAL U (CAR V)) (CDR V))
          (T (PROGN (DELETIP1 U V) V)))) 
(FLAG '(DELETIP) 'RLISP) 
(PUT 'IMP2-DELETE-PT-REFERENCE 'NUMBER-OF-ARGS 2) 
(PUT 'IMP2-DELETE-PT-REFERENCE 'DEFINED-ON-LINE '97) 
(PUT 'IMP2-DELETE-PT-REFERENCE 'DEFINED-IN-FILE 'PLOT/PLOTIMP2.RED) 
(PUT 'IMP2-DELETE-PT-REFERENCE 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE IMP2-DELETE-PT-REFERENCE (I P) (SETCDR (CDDR P) (DELETIP I (CDDDR P)))) 
(PUT 'MK-TRIA 'NUMBER-OF-ARGS 4) 
(PUT 'MK-TRIA 'DEFINED-ON-LINE '100) 
(PUT 'MK-TRIA 'DEFINED-IN-FILE 'PLOT/PLOTIMP2.RED) 
(PUT 'MK-TRIA 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE MK-TRIA (I P1 P2 P3)
    (PROG (P)
      (SETQ I (OR I (SETQ IMP2-TRIACOUNT* (IPLUS2 IMP2-TRIACOUNT* 1))))
      (SETQ P (LIST I P1 P2 P3 (IMP2-TRIA-ZEROP* P1 P2 P3)))
      (XPUTV IMP2-TRIAS* I P)
      (ACONC P1 I)
      (ACONC P2 I)
      (ACONC P3 I)
      (COND (*IMP2-TRACE (PRINT-TRIA "new triangle " P)))
      (RETURN P))) 
(PUT 'PRINT-TRIA 'NUMBER-OF-ARGS 2) 
(PUT 'PRINT-TRIA 'DEFINED-ON-LINE '112) 
(PUT 'PRINT-TRIA 'DEFINED-IN-FILE 'PLOT/PLOTIMP2.RED) 
(PUT 'PRINT-TRIA 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE PRINT-TRIA (TX W)
    (PROGN
     (PRIN2 TX)
     (PRIN2 (CAR W))
     (SETQ W (CDR W))
     (PRIN2L
      (LIST (LIST (CAR (CAR W)) (CADR (CAR W)) (LIST (CADDR (CAR W))))
            (LIST (CAR (CADR W)) (CADR (CADR W)) (LIST (CADDR (CADR W))))
            (LIST (CAR (CADDR W)) (CADR (CADDR W)) (LIST (CADDR (CADDR W))))))
     (TERPRI)
     NIL)) 
(PUT 'IMP2-TRIA-ZEROP* 'NUMBER-OF-ARGS 3) 
(PUT 'IMP2-TRIA-ZEROP* 'DEFINED-ON-LINE '120) 
(PUT 'IMP2-TRIA-ZEROP* 'DEFINED-IN-FILE 'PLOT/PLOTIMP2.RED) 
(PUT 'IMP2-TRIA-ZEROP* 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE IMP2-TRIA-ZEROP* (P1 P2 P3)
    (PROG (F1 F2 F3)
      (SETQ F1 (CADDR P1))
      (SETQ F2 (CADDR P2))
      (SETQ F3 (CADDR P3))
      (RETURN (OR (LEQ (TIMES F1 F2) 0.0) (LEQ (TIMES F1 F3) 0.0))))) 
(PUT 'IMP2-TRIA-ZEROP 'NUMBER-OF-ARGS 1) 
(PUT 'IMP2-TRIA-ZEROP 'DEFINED-ON-LINE '129) 
(PUT 'IMP2-TRIA-ZEROP 'DEFINED-IN-FILE 'PLOT/PLOTIMP2.RED) 
(PUT 'IMP2-TRIA-ZEROP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE IMP2-TRIA-ZEROP (W) (CADDDR (CDR W))) 
(PUT 'IMP2-NEIGHBOURS 'NUMBER-OF-ARGS 1) 
(PUT 'IMP2-NEIGHBOURS 'DEFINED-ON-LINE '133) 
(PUT 'IMP2-NEIGHBOURS 'DEFINED-IN-FILE 'PLOT/PLOTIMP2.RED) 
(PUT 'IMP2-NEIGHBOURS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE IMP2-NEIGHBOURS (P)
    (PROG (L P1 P2 P3 N)
      (SETQ N 0)
      (COND ((FIXP P) (SETQ P (XGETV IMP2-TRIAS* P))))
      (SETQ N (CAR P))
      (SETQ P (CDR P))
      (SETQ P1 (DELETE N (CDDDR (CAR P))))
      (SETQ P2 (DELETE N (CDDDR (CADR P))))
      (SETQ P3 (DELETE N (CDDDR (CADDR P))))
      (SETQ L
              (LIST (FIND-ONE-COMMON P1 P2) (FIND-ONE-COMMON P2 P3)
                    (FIND-ONE-COMMON P3 P1)))
      (PROG ()
       WHILELABEL
        (COND ((NOT (MEMQ NIL L)) (RETURN NIL)))
        (SETQ L (DELETIP NIL L))
        (GO WHILELABEL))
      (RETURN
       (PROG (W FORALL-RESULT FORALL-ENDPTR)
         (SETQ W L)
         (COND ((NULL W) (RETURN NIL)))
         (SETQ FORALL-RESULT
                 (SETQ FORALL-ENDPTR
                         (CONS ((LAMBDA (W) (XGETV IMP2-TRIAS* W)) (CAR W))
                               NIL)))
        LOOPLABEL
         (SETQ W (CDR W))
         (COND ((NULL W) (RETURN FORALL-RESULT)))
         (RPLACD FORALL-ENDPTR
                 (CONS ((LAMBDA (W) (XGETV IMP2-TRIAS* W)) (CAR W)) NIL))
         (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
         (GO LOOPLABEL))))) 
(PUT 'IMP2-EDGE-LENGTH 'NUMBER-OF-ARGS 2) 
(PUT 'IMP2-EDGE-LENGTH 'DEFINED-ON-LINE '149) 
(PUT 'IMP2-EDGE-LENGTH 'DEFINED-IN-FILE 'PLOT/PLOTIMP2.RED) 
(PUT 'IMP2-EDGE-LENGTH 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE IMP2-EDGE-LENGTH (P1 P2)
    (PROG (DX DY)
     NIL
      (SETQ DX (DIFFERENCE (CAR P1) (CAR P2)))
      (SETQ DY (DIFFERENCE (CADR P1) (CADR P2)))
      (RETURN (SQRT (PLUS (TIMES DX DX) (TIMES DY DY)))))) 
(PUT 'IMP2-TRIA-SURFACE 'NUMBER-OF-ARGS 1) 
(PUT 'IMP2-TRIA-SURFACE 'DEFINED-ON-LINE '157) 
(PUT 'IMP2-TRIA-SURFACE 'DEFINED-IN-FILE 'PLOT/PLOTIMP2.RED) 
(PUT 'IMP2-TRIA-SURFACE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE IMP2-TRIA-SURFACE (W)
    (PROG (X1 X2 X3 Y1 Y2 Y3 P1 P2 P3)
     NIL
      (SETQ W (CDR W))
      (SETQ X1 (CAR (SETQ P1 (CAR W))))
      (SETQ Y1 (CADR P1))
      (SETQ X2 (CAR (SETQ P2 (CADR W))))
      (SETQ Y2 (CADR P2))
      (SETQ X3 (CAR (SETQ P3 (CADDR W))))
      (SETQ Y3 (CADR P3))
      (RETURN
       (ABS
        (TIMES 0.5
               (PLUS (TIMES X1 (DIFFERENCE Y2 Y3))
                     (TIMES X2 (DIFFERENCE Y3 Y1))
                     (TIMES X3 (DIFFERENCE Y1 Y2)))))))) 
(PUT 'IMP2-TRIA-LENGTH 'NUMBER-OF-ARGS 1) 
(PUT 'IMP2-TRIA-LENGTH 'DEFINED-ON-LINE '167) 
(PUT 'IMP2-TRIA-LENGTH 'DEFINED-IN-FILE 'PLOT/PLOTIMP2.RED) 
(PUT 'IMP2-TRIA-LENGTH 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE IMP2-TRIA-LENGTH (W)
    (PROG (P1 P2 P3)
      (SETQ W (CDR W))
      (SETQ P1 (CAR W))
      (SETQ P2 (CADR W))
      (SETQ P3 (CADDR W))
      (RETURN
       (TIMES 0.3
              (PLUS (IMP2-EDGE-LENGTH P1 P2) (IMP2-EDGE-LENGTH P2 P3)
                    (IMP2-EDGE-LENGTH P3 P1)))))) 
(PUT 'IMP2-TRIA-MIDPOINT 'NUMBER-OF-ARGS 1) 
(PUT 'IMP2-TRIA-MIDPOINT 'DEFINED-ON-LINE '177) 
(PUT 'IMP2-TRIA-MIDPOINT 'DEFINED-IN-FILE 'PLOT/PLOTIMP2.RED) 
(PUT 'IMP2-TRIA-MIDPOINT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE IMP2-TRIA-MIDPOINT (W)
    (PROGN
     (SETQ W (CDR W))
     (LIST (QUOTIENT (PLUS (CAR (CAR W)) (CAR (CADR W)) (CAR (CADDR W))) 3.0)
           (QUOTIENT (PLUS (CADR (CAR W)) (CADR (CADR W)) (CADR (CADDR W)))
                     3.0)))) 
(PUT 'IMP2-TRIA-GOODPOINT 'NUMBER-OF-ARGS 2) 
(PUT 'IMP2-TRIA-GOODPOINT 'DEFINED-ON-LINE '187) 
(PUT 'IMP2-TRIA-GOODPOINT 'DEFINED-IN-FILE 'PLOT/PLOTIMP2.RED) 
(PUT 'IMP2-TRIA-GOODPOINT 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE IMP2-TRIA-GOODPOINT (W FN)
    (PROG (P1 P2 P3 F1 F2 F3 S1 S2 S3)
      (SETQ W (CDR W))
      (SETQ P1 (CAR W))
      (SETQ P2 (CADR W))
      (SETQ P3 (CADDR W))
      (COND
       ((EQUAL (SETQ F1 (CADDR P1)) 0.0) (RETURN (LIST (CAR P1) (CADR P1))))
       ((EQUAL (SETQ F2 (CADDR P2)) 0.0) (RETURN (LIST (CAR P2) (CADR P2))))
       ((EQUAL (SETQ F3 (CADDR P3)) 0.0) (RETURN (LIST (CAR P3) (CADR P3)))))
      (SETQ S1 (LESSP F1 0.0))
      (SETQ S2 (LESSP F2 0.0))
      (SETQ S3 (LESSP F3 0.0))
      (RETURN
       (COND ((EQUAL S1 S2) (IMP2-TRIA-GOODPOINT1 P1 F1 P3 F3 P2 F2 FN))
             ((EQUAL S1 S3) (IMP2-TRIA-GOODPOINT1 P1 F1 P2 F2 P3 F3 FN))
             (T (IMP2-TRIA-GOODPOINT1 P2 F2 P1 F1 P3 F3 FN)))))) 
(PUT 'IMP2-TRIA-GOODPOINT1 'NUMBER-OF-ARGS 7) 
(PUT 'IMP2-TRIA-GOODPOINT1 'DEFINED-ON-LINE '223) 
(PUT 'IMP2-TRIA-GOODPOINT1 'DEFINED-IN-FILE 'PLOT/PLOTIMP2.RED) 
(PUT 'IMP2-TRIA-GOODPOINT1 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL GENERAL GENERAL GENERAL)
       GENERAL)) 
(DE IMP2-TRIA-GOODPOINT1 (P1 F1 P2 F2 P3 F3 FN)
    (PROG (X1 X2 Y1 Y2 X3 Y3 S)
     NIL
      (SETQ F1 (TIMES (PLUS F1 F3) 0.5))
      (SETQ X1 (TIMES (PLUS (CAR P1) (CAR P3)) 0.5))
      (SETQ Y1 (TIMES (PLUS (CADR P1) (CADR P3)) 0.5))
      (SETQ X2 (CAR P2))
      (SETQ Y2 (CADR P2))
      (SETQ S (DIFFERENCE F2 F1))
      (SETQ X3 (QUOTIENT (DIFFERENCE (TIMES X1 F2) (TIMES X2 F1)) S))
      (SETQ Y3 (QUOTIENT (DIFFERENCE (TIMES Y1 F2) (TIMES Y2 F1)) S))
      (SETQ F3 (APPLY2 FN X3 Y3))
      (COND
       ((GEQ (TIMES F2 F3) 0)
        (PROGN
         (SETQ S (DIFFERENCE F1 F3))
         (SETQ X3 (QUOTIENT (DIFFERENCE (TIMES X3 F1) (TIMES X1 F3)) S))
         (SETQ Y3 (QUOTIENT (DIFFERENCE (TIMES Y3 F1) (TIMES Y1 F3)) S))))
       (T
        (PROGN
         (SETQ S (DIFFERENCE F2 F3))
         (SETQ X3 (QUOTIENT (DIFFERENCE (TIMES X3 F2) (TIMES X2 F3)) S))
         (SETQ Y3 (QUOTIENT (DIFFERENCE (TIMES Y3 F2) (TIMES Y2 F3)) S)))))
     DONE
      (RETURN (LIST X3 Y3)))) 
(PUT 'IMP2-TRI-REFINE-ONE-TRIA 'NUMBER-OF-ARGS 2) 
(PUT 'IMP2-TRI-REFINE-ONE-TRIA 'DEFINED-ON-LINE '247) 
(PUT 'IMP2-TRI-REFINE-ONE-TRIA 'DEFINED-IN-FILE 'PLOT/PLOTIMP2.RED) 
(PUT 'IMP2-TRI-REFINE-ONE-TRIA 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE IMP2-TRI-REFINE-ONE-TRIA (W FN)
    (PROG (P1 P2 P3 PN XN YN NEW NB Y I X1 X2 Y1 Y2 D1 D2 D3 S)
      (SETQ I 0)
     NIL
      (COND ((FIXP W) (SETQ W (XGETV IMP2-TRIAS* W))))
      (COND (*IMP2-TRACE (PRINT-TRIA "refine " W)))
      (SETQ I (CAR W))
      (SETQ W (CDR W))
      (IMP2-DELETE-PT-REFERENCE I (CAR W))
      (IMP2-DELETE-PT-REFERENCE I (CADR W))
      (IMP2-DELETE-PT-REFERENCE I (CADDR W))
      (SETQ D1 (IMP2-EDGE-LENGTH (CAR W) (CADR W)))
      (SETQ D2 (IMP2-EDGE-LENGTH (CADR W) (CADDR W)))
      (SETQ D3 (IMP2-EDGE-LENGTH (CAR W) (CADDR W)))
      (COND
       ((AND (GEQ D1 D2) (GEQ D1 D3))
        (PROGN (SETQ P1 (CAR W)) (SETQ P2 (CADR W)) (SETQ P3 (CADDR W))))
       ((AND (GEQ D2 D1) (GEQ D2 D3))
        (PROGN (SETQ P1 (CADR W)) (SETQ P2 (CADDR W)) (SETQ P3 (CAR W))))
       (T (PROGN (SETQ P1 (CAR W)) (SETQ P2 (CADDR W)) (SETQ P3 (CADR W)))))
      (SETQ NB (FIND-ONE-COMMON (CDDDR P1) (CDDDR P2)))
      (SETQ S (PLUS 0.45 (TIMES 0.01 (RANDOM 10))))
      (SETQ X1 (CAR P1))
      (SETQ Y1 (CADR P1))
      (SETQ X2 (CAR P2))
      (SETQ Y2 (CADR P2))
      (SETQ XN (PLUS (TIMES X1 S) (TIMES X2 (DIFFERENCE 1.0 S))))
      (SETQ YN (PLUS (TIMES Y1 S) (TIMES Y2 (DIFFERENCE 1.0 S))))
      (SETQ PN (MK-POINT XN YN FN))
     CONSTRUCT
      (SETQ NEW (CONS (MK-TRIA I P1 PN P3) NEW))
      (SETQ NEW (CONS (MK-TRIA NIL P2 PN P3) NEW))
      (COND ((NULL NB) (RETURN NEW)))
      (SETQ W NB)
      (SETQ NB NIL)
      (COND ((FIXP W) (SETQ W (XGETV IMP2-TRIAS* W))))
      (SETQ I (CAR W))
      (SETQ W (CDR W))
      (IMP2-DELETE-PT-REFERENCE I (CAR W))
      (IMP2-DELETE-PT-REFERENCE I (CADR W))
      (IMP2-DELETE-PT-REFERENCE I (CADDR W))
      (SETQ P3
              (COND ((NOT (OR (EQ (SETQ Y (CAR W)) P1) (EQ Y P2))) Y)
                    ((NOT (OR (EQ (SETQ Y (CADR W)) P1) (EQ Y P2))) Y)
                    (T (CADDR W))))
      (GO CONSTRUCT))) 
(PUT 'FIND-ONE-COMMON 'NUMBER-OF-ARGS 2) 
(PUT 'FIND-ONE-COMMON 'DEFINED-ON-LINE '332) 
(PUT 'FIND-ONE-COMMON 'DEFINED-IN-FILE 'PLOT/PLOTIMP2.RED) 
(PUT 'FIND-ONE-COMMON 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE FIND-ONE-COMMON (U V)
    (COND ((NULL U) NIL) ((MEMQ (CAR U) V) (CAR U))
          (T (FIND-ONE-COMMON (CDR U) V)))) 
(PUT 'IMP2-PLOT 'NUMBER-OF-ARGS 6) 
(PUT 'IMP2-PLOT 'DEFINED-ON-LINE '340) 
(PUT 'IMP2-PLOT 'DEFINED-IN-FILE 'PLOT/PLOTIMP2.RED) 
(PUT 'IMP2-PLOT 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE IMP2-PLOT (XLO XHI YLO YHI PTS FCN)
    (PROG (P1 P2 P3 P4 SF Z)
      (IMP2-INIT)
      (SETQ P1 (MK-POINT XLO YLO FCN))
      (SETQ P2 (MK-POINT XHI YLO FCN))
      (SETQ P3 (MK-POINT XHI YHI FCN))
      (SETQ P4 (MK-POINT XLO YHI FCN))
      (MK-TRIA NIL P1 P2 P3)
      (MK-TRIA NIL P1 P3 P4)
      (SETQ SF
              (TIMES (PLUS (DIFFERENCE XHI XLO) (DIFFERENCE YHI YLO))
                     (QUOTIENT 1.5 (FLOAT PTS))))
      (SETQ Z (IMP2-PLOT-REFINE SF FCN))
      (COND
       (*IMP2-TRACE
        (PROG (W)
          (SETQ W Z)
         LAB
          (COND ((NULL W) (RETURN NIL)))
          ((LAMBDA (W) (PRINT-TRIA "zero triangle:" W)) (CAR W))
          (SETQ W (CDR W))
          (GO LAB))))
      (COND (*TEST_PLOT (PRINT "collect")))
      (SETQ Z (IMP2-PLOT-COLLECT Z))
      (COND (*TEST_PLOT (PRINT "draw")))
      (SETQ Z (IMP2-PLOT-DRAW Z FCN))
      (COND ((NOT *SHOW_GRID) (IMP2-FINIT)))
      (RETURN Z))) 
(PUT 'IMP2-PLOT-REFINE 'NUMBER-OF-ARGS 2) 
(PUT 'IMP2-PLOT-REFINE 'DEFINED-ON-LINE '362) 
(PUT 'IMP2-PLOT-REFINE 'DEFINED-IN-FILE 'PLOT/PLOTIMP2.RED) 
(PUT 'IMP2-PLOT-REFINE 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE IMP2-PLOT-REFINE (SFLIMIT FCN)
    (PROG (Z ZN W S LIMIT2 AGAIN I J)
      (SETQ I 0)
      (SETQ J 0)
      (SETQ LIMIT2 (TIMES 0.15 SFLIMIT))
      (SETQ AGAIN T)
      (COND (*TEST_PLOT (PRINT "phase1")))
     PHASE1
      (SETQ Z NIL)
      (SETQ AGAIN NIL)
      (PROG (I)
        (SETQ I IMP2-TRIACOUNT*)
       LAB
        (COND ((MINUSP (TIMES (MINUS 1) (DIFFERENCE 1 I))) (RETURN NIL)))
        (PROGN
         (SETQ W (XGETV IMP2-TRIAS* I))
         (COND
          ((GREATERP (IMP2-TRIA-LENGTH W) SFLIMIT)
           (PROGN (SETQ AGAIN T) (IMP2-TRI-REFINE-ONE-TRIA W FCN)))
          ((AND (NOT AGAIN) (IMP2-TRIA-ZEROP W)) (SETQ Z (CONS (CAR W) Z))))
         NIL)
        (SETQ I (PLUS2 I (MINUS 1)))
        (GO LAB))
      (SETQ J (IPLUS2 J 1))
      (COND ((OR (ILESSP (PLUS J J) PLOT-REFINE*) AGAIN) (GO PHASE1)))
      (COND (*TEST_PLOT (PRINT "phase2")))
     PHASE2
      (PROG (W)
        (SETQ W Z)
       LAB
        (COND ((NULL W) (RETURN NIL)))
        ((LAMBDA (W)
           (COND
            ((GREATERP
              (SETQ S (IMP2-TRIA-LENGTH (SETQ W (XGETV IMP2-TRIAS* W))))
              LIMIT2)
             (PROGN
              (PROG (Q)
                (SETQ Q (IMP2-TRI-REFINE-ONE-TRIA W FCN))
               LAB
                (COND ((NULL Q) (RETURN NIL)))
                ((LAMBDA (Q)
                   (COND
                    ((AND (IMP2-TRIA-ZEROP Q) (NOT (MEMQ (CAR Q) ZN)))
                     (SETQ ZN (CONS (CAR Q) ZN)))))
                 (CAR Q))
                (SETQ Q (CDR Q))
                (GO LAB))))))
         (CAR W))
        (SETQ W (CDR W))
        (GO LAB))
      (SETQ Z ZN)
      (SETQ ZN NIL)
      (COND (Z (GO PHASE2)))
      (COND (*TEST_PLOT (PRINT "phase3")))
     PHASE3
      (PROG (I)
        (SETQ I IMP2-TRIACOUNT*)
       LAB
        (COND ((MINUSP (TIMES (MINUS 1) (DIFFERENCE 1 I))) (RETURN NIL)))
        (IMP2-REFINE-PHASE3 I I (QUOTIENT PLOT-REFINE* 2) FCN
         (TIMES LIMIT2 0.3))
        (SETQ I (PLUS2 I (MINUS 1)))
        (GO LAB))
      (SETQ Z
              (PROG (I FORALL-RESULT FORALL-ENDPTR)
                (SETQ I 1)
               STARTOVER
                (COND ((MINUSP (DIFFERENCE IMP2-TRIACOUNT* I)) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (COND
                         ((IMP2-TRIA-ZEROP (SETQ W (XGETV IMP2-TRIAS* I)))
                          (LIST W))))
                (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
                (SETQ I (PLUS2 I 1))
                (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
               LOOPLABEL
                (COND
                 ((MINUSP (DIFFERENCE IMP2-TRIACOUNT* I))
                  (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        (COND
                         ((IMP2-TRIA-ZEROP (SETQ W (XGETV IMP2-TRIAS* I)))
                          (LIST W))))
                (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
                (SETQ I (PLUS2 I 1))
                (GO LOOPLABEL)))
      (RETURN Z))) 
(PUT 'IMP2-REFINE-PHASE3 'NUMBER-OF-ARGS 5) 
(PUT 'IMP2-REFINE-PHASE3 'DEFINED-ON-LINE '413) 
(PUT 'IMP2-REFINE-PHASE3 'DEFINED-IN-FILE 'PLOT/PLOTIMP2.RED) 
(PUT 'IMP2-REFINE-PHASE3 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE IMP2-REFINE-PHASE3 (I LOW LEV FN LTH)
    (PROG (W C)
      (SETQ C 0)
      (COND ((EQUAL LEV 0) (RETURN NIL)))
      (SETQ W (COND ((NUMBERP I) (XGETV IMP2-TRIAS* I)) (T I)))
      (COND
       ((OR (LESSP (CAR W) LOW) (LESSP (IMP2-TRIA-LENGTH W) LTH))
        (RETURN NIL)))
      (SETQ LEV (DIFFERENCE LEV 1))
      (PROG (Q)
        (SETQ Q (IMP2-NEIGHBOURS W))
       LAB
        (COND ((NULL Q) (RETURN NIL)))
        ((LAMBDA (Q) (COND ((IMP2-TRIA-ZEROP Q) (SETQ C (PLUS C 1))))) (CAR Q))
        (SETQ Q (CDR Q))
        (GO LAB))
      (COND ((IMP2-TRIA-ZEROP W) (COND ((EQN C 2) (RETURN NIL))))
            (T (COND ((ILESSP C 2) (RETURN NIL)))))
      (PROG (Q)
        (SETQ Q (IMP2-TRI-REFINE-ONE-TRIA W FN))
       LAB
        (COND ((NULL Q) (RETURN NIL)))
        ((LAMBDA (Q) (IMP2-REFINE-PHASE3 Q LOW LEV FN LTH)) (CAR Q))
        (SETQ Q (CDR Q))
        (GO LAB)))) 
(PUT 'IMP2-PLOT-COLLECT 'NUMBER-OF-ARGS 1) 
(PUT 'IMP2-PLOT-COLLECT 'DEFINED-ON-LINE '428) 
(PUT 'IMP2-PLOT-COLLECT 'DEFINED-IN-FILE 'PLOT/PLOTIMP2.RED) 
(PUT 'IMP2-PLOT-COLLECT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE IMP2-PLOT-COLLECT (Z)
    (PROG (LINES L Q P S)
      (PROG (W1)
        (SETQ W1 Z)
       LAB
        (COND ((NULL W1) (RETURN NIL)))
        ((LAMBDA (W1)
           (PROG (W2)
             (SETQ W2 (IMP2-NEIGHBOURS W1))
            LAB
             (COND ((NULL W2) (RETURN NIL)))
             ((LAMBDA (W2)
                (COND
                 ((AND (GREATERP (CAR W2) (CAR W1)) (IMP2-TRIA-ZEROP W2))
                  (SETQ Q (CONS (CONS W1 W2) Q)))))
              (CAR W2))
             (SETQ W2 (CDR W2))
             (GO LAB)))
         (CAR W1))
        (SETQ W1 (CDR W1))
        (GO LAB))
     LINELOOP
      (COND ((NULL Q) (RETURN LINES)))
      (SETQ L (LIST (CAAR Q) (SETQ P (CDAR Q))))
      (SETQ Q (CDR Q))
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND Q P)) (RETURN NIL)))
        (PROGN
         (COND
          ((SETQ S (ATSOC P Q)) (SETQ L (NCONC L (LIST (SETQ P (CDR S))))))
          ((SETQ S (RASSOC P Q)) (SETQ L (NCONC L (LIST (SETQ P (CAR S)))))))
         (COND (S (SETQ Q (DELETE S Q))) (T (SETQ P NIL)))
         NIL)
        (GO WHILELABEL))
      (SETQ P (CAR L))
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND Q P)) (RETURN NIL)))
        (PROGN
         (COND ((SETQ S (RASSOC P Q)) (SETQ L (CONS (SETQ P (CAR S)) L)))
               ((SETQ S (ATSOC P Q)) (SETQ L (CONS (SETQ P (CDR S)) L))))
         (COND (S (SETQ Q (DELETE S Q))) (T (SETQ P NIL)))
         NIL)
        (GO WHILELABEL))
      (SETQ LINES (CONS L LINES))
      (GO LINELOOP))) 
(PUT 'IMP2-PLOT-DRAW 'NUMBER-OF-ARGS 2) 
(PUT 'IMP2-PLOT-DRAW 'DEFINED-ON-LINE '460) 
(PUT 'IMP2-PLOT-DRAW 'DEFINED-IN-FILE 'PLOT/PLOTIMP2.RED) 
(PUT 'IMP2-PLOT-DRAW 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE IMP2-PLOT-DRAW (L FN)
    (PROG (R S Q)
      (SETQ Q
              (PROG (W FORALL-RESULT FORALL-ENDPTR)
                (SETQ W L)
                (COND ((NULL W) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS
                                 ((LAMBDA (W)
                                    (PROGN
                                     (SETQ R NIL)
                                     (PROG (Q FORALL-RESULT FORALL-ENDPTR)
                                       (SETQ Q W)
                                      STARTOVER
                                       (COND ((NULL Q) (RETURN NIL)))
                                       (SETQ FORALL-RESULT
                                               ((LAMBDA (Q)
                                                  (PROGN
                                                   (SETQ S
                                                           (IMP2-TRIA-GOODPOINT
                                                            Q FN))
                                                   (COND
                                                    ((NEQ R S)
                                                     (LIST (SETQ R S))))))
                                                (CAR Q)))
                                       (SETQ FORALL-ENDPTR
                                               (LASTPAIR FORALL-RESULT))
                                       (SETQ Q (CDR Q))
                                       (COND
                                        ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
                                      LOOPLABEL
                                       (COND ((NULL Q) (RETURN FORALL-RESULT)))
                                       (RPLACD FORALL-ENDPTR
                                               ((LAMBDA (Q)
                                                  (PROGN
                                                   (SETQ S
                                                           (IMP2-TRIA-GOODPOINT
                                                            Q FN))
                                                   (COND
                                                    ((NEQ R S)
                                                     (LIST (SETQ R S))))))
                                                (CAR Q)))
                                       (SETQ FORALL-ENDPTR
                                               (LASTPAIR FORALL-ENDPTR))
                                       (SETQ Q (CDR Q))
                                       (GO LOOPLABEL))))
                                  (CAR W))
                                 NIL)))
               LOOPLABEL
                (SETQ W (CDR W))
                (COND ((NULL W) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        (CONS
                         ((LAMBDA (W)
                            (PROGN
                             (SETQ R NIL)
                             (PROG (Q FORALL-RESULT FORALL-ENDPTR)
                               (SETQ Q W)
                              STARTOVER
                               (COND ((NULL Q) (RETURN NIL)))
                               (SETQ FORALL-RESULT
                                       ((LAMBDA (Q)
                                          (PROGN
                                           (SETQ S (IMP2-TRIA-GOODPOINT Q FN))
                                           (COND
                                            ((NEQ R S) (LIST (SETQ R S))))))
                                        (CAR Q)))
                               (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
                               (SETQ Q (CDR Q))
                               (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
                              LOOPLABEL
                               (COND ((NULL Q) (RETURN FORALL-RESULT)))
                               (RPLACD FORALL-ENDPTR
                                       ((LAMBDA (Q)
                                          (PROGN
                                           (SETQ S (IMP2-TRIA-GOODPOINT Q FN))
                                           (COND
                                            ((NEQ R S) (LIST (SETQ R S))))))
                                        (CAR Q)))
                               (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
                               (SETQ Q (CDR Q))
                               (GO LOOPLABEL))))
                          (CAR W))
                         NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (RETURN Q))) 
(PUT 'IMP2-SHOW-MESHES 'NUMBER-OF-ARGS 0) 
(PUT 'IMP2-SHOW-MESHES 'DEFINED-ON-LINE '472) 
(PUT 'IMP2-SHOW-MESHES 'DEFINED-IN-FILE 'PLOT/PLOTIMP2.RED) 
(PUT 'IMP2-SHOW-MESHES 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE IMP2-SHOW-MESHES NIL
    (PROG (D L W S P1 P2 I)
      (SETQ I 0)
      (SETQ I 1)
     LOOP
      (SETQ W (XGETV IMP2-TRIAS* I))
      (COND ((NULL W) (PROGN (IMP2-FINIT) (RETURN L))))
      (SETQ W (CDR W))
      (SETQ D
              (LIST (LIST (CAR (CAR W)) (CADR (CAR W)))
                    (LIST (CAR (CADR W)) (CADR (CADR W)))
                    (LIST (CAR (CADDR W)) (CADR (CADDR W)))
                    (LIST (CAR (CAR W)) (CADR (CAR W)))))
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND D (CDR D))) (RETURN NIL)))
        (PROGN
         (SETQ P1 (CAR D))
         (SETQ P2 (CADR D))
         (SETQ D (CDR D))
         (COND
          ((GREATERP (CAR P1) (CAR P2))
           (PROGN (SETQ W P2) (SETQ P2 P1) (SETQ P1 W))))
         (SETQ S (LIST P1 P2))
         (COND ((NOT (MEMBER S L)) (SETQ L (CONS S L)))))
        (GO WHILELABEL))
      (SETQ I (PLUS I 1))
      (GO LOOP))) 
(ENDMODULE) 