(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'GINT)) 
(GLOBAL '(DOMAINLIST*)) 
(FLUID '(*COMPLEX *GCD)) 
(SWITCH (LIST 'COMPLEX)) 
(SETQ DOMAINLIST* (UNION '(|:GI:|) DOMAINLIST*)) 
(PUT 'SETCMPXMODE 'NUMBER-OF-ARGS 2) 
(PUT 'SETCMPXMODE 'DEFINED-ON-LINE '38) 
(PUT 'SETCMPXMODE 'DEFINED-IN-FILE 'POLY/GINT.RED) 
(PUT 'SETCMPXMODE 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE SETCMPXMODE (U BOOL)
    (PROG (X Y)
      (SETQ X (GET U 'TAG))
      (COND
       ((EQ U 'COMPLEX)
        (COND
         ((NULL DMODE*)
          (RETURN
           (COND ((NULL BOOL) NIL)
                 (T
                  (PROGN
                   (PUT 'I 'IDVALFN 'MKDGI)
                   (SETDMODE1 'COMPLEX BOOL))))))
         ((NULL BOOL)
          (RETURN
           (COND ((NULL *COMPLEX) NIL)
                 ((EQ (GET DMODE* 'DNAME) 'COMPLEX)
                  (PROGN (REMPROP 'I 'IDVALFN) (SETDMODE1 'COMPLEX NIL)))
                 (T
                  (PROGN
                   (REMPROP 'I 'IDVALFN)
                   (SETDMODE1 (GET (GET DMODE* 'REALTYPE) 'DNAME) T))))))
         ((OR (EQ DMODE* '|:GI:|) (GET DMODE* 'REALTYPE)) (RETURN NIL))
         ((NOT (SETQ Y (GET DMODE* 'CMPXTYPE))) (DMODERR DMODE* X))
         (T
          (PROGN
           (PUT 'I 'IDVALFN (GET Y 'IVALUE))
           (RETURN (SETDMODE1 (GET Y 'DNAME) BOOL))))))
       ((NULL BOOL)
        (COND
         ((EQ U (SETQ Y (GET (GET DMODE* 'REALTYPE) 'DNAME)))
          (PROGN (PUT 'I 'IDVALFN 'MKDGI) (RETURN (SETDMODE1 'COMPLEX T))))
         ((NULL Y) (RETURN NIL)) (T (OFFMODERR U Y))))
       (T
        (PROGN
         (SETQ U (GET U 'TAG))
         (SETQ Y (GET U 'CMPXTYPE))
         (COND ((NULL Y) (DMODERR U '|:GI:|)))
         (PUT 'I 'IDVALFN (GET Y 'IVALUE))
         (RETURN (SETDMODE1 (GET Y 'DNAME) BOOL))))))) 
(PUT 'INTGCDD 'NUMBER-OF-ARGS 2) 
(PUT 'INTGCDD 'DEFINED-ON-LINE '75) 
(PUT 'INTGCDD 'DEFINED-IN-FILE 'POLY/GINT.RED) 
(PUT 'INTGCDD 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE INTGCDD (U V)
    (COND ((NULL U) V)
          ((ATOM U)
           (COND ((ATOM V) (GCDN U V)) (T (GCDN (CADR V) (GCDN (CDDR V) U)))))
          ((ATOM V) (INTGCDD V U)) (T (INTGCDD (CADR U) (INTGCDD (CDDR U) V))))) 
(PUT 'COMPLEX 'TAG '|:GI:|) 
(PUT '|:GI:| 'DNAME 'COMPLEX) 
(PUT '|:GI:| 'I2D '*I2GI) 
(PUT '|:GI:| 'MINUSP '|GIMINUSP:|) 
(PUT '|:GI:| 'ZEROP '|GIZEROP:|) 
(PUT '|:GI:| 'ONEP '|GIONEP:|) 
(PUT '|:GI:| 'PLUS '|GIPLUS:|) 
(PUT '|:GI:| 'DIFFERENCE '|GIDIFFERENCE:|) 
(PUT '|:GI:| 'TIMES '|GITIMES:|) 
(PUT '|:GI:| 'QUOTIENT '|GIQUOTIENT:|) 
(PUT '|:GI:| 'DIVIDE '|GIDIVIDE:|) 
(PUT '|:GI:| 'GCD '|GIGCD:|) 
(PUT '|:GI:| 'FACTORFN '|GIFACTOR:|) 
(PUT '|:GI:| 'PREPFN '|GIPREP:|) 
(PUT '|:GI:| 'INTEQUIVFN '|GINTEQUIV:|) 
(PUT '|:GI:| 'SPECPRN '|GIPRN:|) 
(PUT '|:GI:| 'PRIFN '|GIPRN:|) 
(PUT '|:GI:| 'CMPXFN 'MKGI) 
(PUT '|:GI:| 'UNITSFN '|:GI:UNITCONV|) 
(PUT '|:GI:UNITCONV| 'NUMBER-OF-ARGS 2) 
(PUT '|:GI:UNITCONV| 'DEFINED-ON-LINE '104) 
(PUT '|:GI:UNITCONV| 'DEFINED-IN-FILE 'POLY/GINT.RED) 
(PUT '|:GI:UNITCONV| 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE |:GI:UNITCONV| (U V) (UNITCONV U V (GET '|:GI:| 'UNITS))) 
(PUT '|:GI:| 'UNITS
     '(((|:GI:| 0 . 1) |:GI:| 0 . -1) ((|:GI:| 0 . -1) |:GI:| 0 . 1))) 
(PUT 'UNITCONV 'NUMBER-OF-ARGS 3) 
(PUT 'UNITCONV 'DEFINED-ON-LINE '110) 
(PUT 'UNITCONV 'DEFINED-IN-FILE 'POLY/GINT.RED) 
(PUT 'UNITCONV 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE UNITCONV (U V W)
    (PROG (Z)
     A
      (COND ((NULL W) (RETURN U)))
      (SETQ Z (QUOTF1 V (CAAR W)))
      (COND ((OR (NULL Z) (NOT (FIXP Z))) (PROGN (SETQ W (CDR W)) (GO A))))
      (SETQ Z
              (COND (*PHYSOP-LOADED (PHYSOP-MULTF (CDR U) (CDAR W)))
                    (T (POLY-MULTF (CDR U) (CDAR W)))))
      (SETQ W
              (COND (*PHYSOP-LOADED (PHYSOP-MULTF (CAR U) (CDAR W)))
                    (T (POLY-MULTF (CAR U) (CDAR W)))))
      (COND ((MINUSF Z) (PROGN (SETQ W (NEGF W)) (SETQ Z (NEGF Z)))))
      (RETURN (CONS W Z)))) 
(PUT '*I2GI 'NUMBER-OF-ARGS 1) 
(PUT '*I2GI 'DEFINED-ON-LINE '121) 
(PUT '*I2GI 'DEFINED-IN-FILE 'POLY/GINT.RED) 
(PUT '*I2GI 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE *I2GI (U) (CONS '|:GI:| (CONS U 0))) 
(PUT '|GIMINUSP:| 'NUMBER-OF-ARGS 1) 
(PUT '|GIMINUSP:| 'DEFINED-ON-LINE '123) 
(PUT '|GIMINUSP:| 'DEFINED-IN-FILE 'POLY/GINT.RED) 
(PUT '|GIMINUSP:| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |GIMINUSP:| (U)
    (COND ((EQUAL (CADR U) 0) (MINUSP (CDDR U))) (T (MINUSP (CADR U))))) 
(PUT '|GIZEROP:| 'NUMBER-OF-ARGS 1) 
(PUT '|GIZEROP:| 'DEFINED-ON-LINE '127) 
(PUT '|GIZEROP:| 'DEFINED-IN-FILE 'POLY/GINT.RED) 
(PUT '|GIZEROP:| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |GIZEROP:| (U) (AND (EQUAL (CADR U) 0) (EQUAL (CDDR U) 0))) 
(PUT '|GIONEP:| 'NUMBER-OF-ARGS 1) 
(PUT '|GIONEP:| 'DEFINED-ON-LINE '130) 
(PUT '|GIONEP:| 'DEFINED-IN-FILE 'POLY/GINT.RED) 
(PUT '|GIONEP:| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |GIONEP:| (U) (AND (EQUAL (CADR U) 1) (EQUAL (CDDR U) 0))) 
(PUT '|GINTEQUIV:| 'NUMBER-OF-ARGS 1) 
(PUT '|GINTEQUIV:| 'DEFINED-ON-LINE '133) 
(PUT '|GINTEQUIV:| 'DEFINED-IN-FILE 'POLY/GINT.RED) 
(PUT '|GINTEQUIV:| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |GINTEQUIV:| (U) (COND ((EQUAL (CDDR U) 0) (CADR U)) (T NIL))) 
(PUT 'MKDGI 'NUMBER-OF-ARGS 1) 
(PUT 'MKDGI 'DEFINED-ON-LINE '136) 
(PUT 'MKDGI 'DEFINED-IN-FILE 'POLY/GINT.RED) 
(PUT 'MKDGI 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MKDGI (U) (CONS (CONS '|:GI:| (CONS 0 1)) 1)) 
(PUT 'MKGI 'NUMBER-OF-ARGS 2) 
(PUT 'MKGI 'DEFINED-ON-LINE '139) 
(PUT 'MKGI 'DEFINED-IN-FILE 'POLY/GINT.RED) 
(PUT 'MKGI 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MKGI (RE IM) (CONS '|:GI:| (CONS RE IM))) 
(PUT '|GIPLUS:| 'NUMBER-OF-ARGS 2) 
(PUT '|GIPLUS:| 'DEFINED-ON-LINE '142) 
(PUT '|GIPLUS:| 'DEFINED-IN-FILE 'POLY/GINT.RED) 
(PUT '|GIPLUS:| 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE |GIPLUS:| (U V) (MKGI (PLUS (CADR U) (CADR V)) (PLUS (CDDR U) (CDDR V)))) 
(PUT '|GIDIFFERENCE:| 'NUMBER-OF-ARGS 2) 
(PUT '|GIDIFFERENCE:| 'DEFINED-ON-LINE '145) 
(PUT '|GIDIFFERENCE:| 'DEFINED-IN-FILE 'POLY/GINT.RED) 
(PUT '|GIDIFFERENCE:| 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE |GIDIFFERENCE:| (U V)
    (MKGI (DIFFERENCE (CADR U) (CADR V)) (DIFFERENCE (CDDR U) (CDDR V)))) 
(PUT '|GITIMES:| 'NUMBER-OF-ARGS 2) 
(PUT '|GITIMES:| 'DEFINED-ON-LINE '148) 
(PUT '|GITIMES:| 'DEFINED-IN-FILE 'POLY/GINT.RED) 
(PUT '|GITIMES:| 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE |GITIMES:| (U V)
    ((LAMBDA (R1 I1 R2 I2)
       (MKGI (DIFFERENCE (TIMES R1 R2) (TIMES I1 I2))
             (PLUS (TIMES R1 I2) (TIMES R2 I1))))
     (CADR U) (CDDR U) (CADR V) (CDDR V))) 
(PUT '|GIQUOTIENT:| 'NUMBER-OF-ARGS 2) 
(PUT '|GIQUOTIENT:| 'DEFINED-ON-LINE '153) 
(PUT '|GIQUOTIENT:| 'DEFINED-IN-FILE 'POLY/GINT.RED) 
(PUT '|GIQUOTIENT:| 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE |GIQUOTIENT:| (U V)
    (PROG (R1 I1 R2 I2 D RR II)
      (SETQ R1 0)
      (SETQ I1 0)
      (SETQ R2 0)
      (SETQ I2 0)
      (SETQ D 0)
      (SETQ R1 (CADR U))
      (SETQ I1 (CDDR U))
      (SETQ R2 (CADR V))
      (SETQ I2 (CDDR V))
      (SETQ D (PLUS (TIMES R2 R2) (TIMES I2 I2)))
      (SETQ RR (DIVIDE (PLUS (TIMES R1 R2) (TIMES I1 I2)) D))
      (SETQ II (DIVIDE (DIFFERENCE (TIMES I1 R2) (TIMES I2 R1)) D))
      (RETURN
       (COND
        ((AND (EQUAL (CDR II) 0) (EQUAL (CDR RR) 0)) (MKGI (CAR RR) (CAR II)))
        (T (CONS '|:GI:| (CONS 0 0))))))) 
(PUT '|GIDIVIDE:| 'NUMBER-OF-ARGS 2) 
(PUT '|GIDIVIDE:| 'DEFINED-ON-LINE '165) 
(PUT '|GIDIVIDE:| 'DEFINED-IN-FILE 'POLY/GINT.RED) 
(PUT '|GIDIVIDE:| 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE |GIDIVIDE:| (U V)
    (PROG (R1 I1 R2 I2 D RR IR RQ IQ)
      (SETQ R1 0)
      (SETQ I1 0)
      (SETQ R2 0)
      (SETQ I2 0)
      (SETQ D 0)
      (SETQ RR 0)
      (SETQ IR 0)
      (SETQ RQ 0)
      (SETQ IQ 0)
      (SETQ R1 (CADR U))
      (SETQ I1 (CDDR U))
      (SETQ R2 (CADR V))
      (SETQ I2 (CDDR V))
      (SETQ D (PLUS (TIMES R2 R2) (TIMES I2 I2)))
      (SETQ RQ (PLUS (TIMES R1 R2) (TIMES I1 I2)))
      (SETQ IQ (DIFFERENCE (TIMES I1 R2) (TIMES I2 R1)))
      (SETQ RQ
              (CAR
               (DIVIDE
                (PLUS (TIMES 2 RQ)
                      (COND ((LESSP RQ 0) (PLUS (MINUS D) 1))
                            (T (DIFFERENCE D 1))))
                (TIMES 2 D))))
      (SETQ IQ
              (CAR
               (DIVIDE
                (PLUS (TIMES 2 IQ)
                      (COND ((LESSP IQ 0) (PLUS (MINUS D) 1))
                            (T (DIFFERENCE D 1))))
                (TIMES 2 D))))
      (SETQ RR (DIFFERENCE R1 (DIFFERENCE (TIMES RQ R2) (TIMES IQ I2))))
      (SETQ IR (DIFFERENCE I1 (PLUS (TIMES IQ R2) (TIMES RQ I2))))
      (RETURN (CONS (MKGI RQ IQ) (MKGI RR IR))))) 
(PUT 'GIREMAINDER 'NUMBER-OF-ARGS 2) 
(PUT 'GIREMAINDER 'DEFINED-ON-LINE '183) 
(PUT 'GIREMAINDER 'DEFINED-IN-FILE 'POLY/GINT.RED) 
(PUT 'GIREMAINDER 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE GIREMAINDER (U V)
    (PROG (R1 I1 R2 I2 D RR IR RQ IQ)
      (SETQ R1 0)
      (SETQ I1 0)
      (SETQ R2 0)
      (SETQ I2 0)
      (SETQ D 0)
      (SETQ RR 0)
      (SETQ IR 0)
      (SETQ RQ 0)
      (SETQ IQ 0)
      (SETQ R1 (CADR U))
      (SETQ I1 (CDDR U))
      (SETQ R2 (CADR V))
      (SETQ I2 (CDDR V))
      (SETQ D (PLUS (TIMES R2 R2) (TIMES I2 I2)))
      (SETQ RQ (PLUS (TIMES R1 R2) (TIMES I1 I2)))
      (SETQ IQ (DIFFERENCE (TIMES I1 R2) (TIMES I2 R1)))
      (SETQ RQ
              (CAR
               (DIVIDE
                (PLUS (TIMES 2 RQ)
                      (COND ((LESSP RQ 0) (PLUS (MINUS D) 1))
                            (T (DIFFERENCE D 1))))
                (TIMES 2 D))))
      (SETQ IQ
              (CAR
               (DIVIDE
                (PLUS (TIMES 2 IQ)
                      (COND ((LESSP IQ 0) (PLUS (MINUS D) 1))
                            (T (DIFFERENCE D 1))))
                (TIMES 2 D))))
      (SETQ RR (DIFFERENCE R1 (DIFFERENCE (TIMES RQ R2) (TIMES IQ I2))))
      (SETQ IR (DIFFERENCE I1 (PLUS (TIMES IQ R2) (TIMES RQ I2))))
      (RETURN (CONS '|:GI:| (CONS RR IR))))) 
(PUT '|GIGCD:| 'NUMBER-OF-ARGS 2) 
(PUT '|GIGCD:| 'DEFINED-ON-LINE '198) 
(PUT '|GIGCD:| 'DEFINED-IN-FILE 'POLY/GINT.RED) 
(PUT '|GIGCD:| 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE |GIGCD:| (U V)
    (COND ((|GIZEROP:| V) (FQA U)) (T (|GIGCD:| V (GIREMAINDER U V))))) 
(PUT 'FQA 'NUMBER-OF-ARGS 1) 
(PUT 'FQA 'DEFINED-ON-LINE '202) 
(PUT 'FQA 'DEFINED-IN-FILE 'POLY/GINT.RED) 
(PUT 'FQA 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FQA (U)
    (COND ((EQUAL (CDDR U) 0) (ABS (CADR U)))
          ((EQUAL (CADR U) 0) (CONS '|:GI:| (CONS (ABS (CDDR U)) 0)))
          ((GREATERP (TIMES (CADR U) (CDDR U)) 0)
           (CONS '|:GI:| (CONS (ABS (CADR U)) (ABS (CDDR U)))))
          (T (CONS '|:GI:| (CONS (ABS (CDDR U)) (ABS (CADR U))))))) 
(PUT '|GIFACTOR:| 'NUMBER-OF-ARGS 1) 
(PUT '|GIFACTOR:| 'DEFINED-ON-LINE '210) 
(PUT '|GIFACTOR:| 'DEFINED-IN-FILE 'POLY/GINT.RED) 
(PUT '|GIFACTOR:| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |GIFACTOR:| (U)
    (PROG (X Y NORM AFTRS FTRS MVU DMODE* *EXP W Z L BOOL S)
      (SETQ S 0)
      (SETQ *EXP T)
      (SETQ W 1)
      (COND
       ((REALP U) (PROGN (SETQ U (FCTRF U)) (SETQ W (CAR U)) (SETQ U (CDR U))))
       (T (SETQ U (LIST (CONS U 1)))))
      (PROG (F)
        (SETQ F U)
       LAB
        (COND ((NULL F) (RETURN NIL)))
        ((LAMBDA (F)
           (PROG ()
             (SETQ U (CAR F))
             (SETQ DMODE* '|:GI:|)
             (SETQ MVU (POWER-SORT (POWERS U)))
             (SETQ BOOL (CONTAINS-ODDPOWER MVU))
             (COND
              ((AND (REALP U) BOOL)
               (PROGN
                (SETQ U (NORMALIZE-LCGI U))
                (SETQ W (MULTD (CAR U) W))
                (SETQ AFTRS (CONS (CONS (CDR U) 1) AFTRS))
                (RETURN NIL))))
             (SETQ MVU (CAAR MVU))
             (SETQ Y U)
             (GO B)
            A
             (SETQ L
                     (LIST
                      (CONS MVU
                            (PREPF
                             (ADDF (LIST (CONS (CONS MVU 1) 1))
                                   (MULTD S (LIST (CONS (CONS 'I 1) 1))))))))
             (SETQ U (CAR (SUBF1 Y L)))
            B
             (COND
              ((REALP U)
               (COND
                (BOOL
                 (PROGN
                  (SETQ Y (NORMALIZE-LCGI Y))
                  (SETQ W (MULTD (CAR Y) W))
                  (SETQ AFTRS (CONS (CONS (CDR Y) 1) AFTRS))
                  (RETURN NIL)))
                (T (PROGN (SETQ S (DIFFERENCE S 1)) (GO A))))))
             (SETQ NORM
                     ((LAMBDA (G589)
                        (COND (*PHYSOP-LOADED (PHYSOP-MULTF U G589))
                              (T (POLY-MULTF U G589))))
                      (CONJGD U)))
             (COND
              ((NOT (SQFRP NORM)) (PROGN (SETQ S (DIFFERENCE S 1)) (GO A))))
             (SETQ DMODE* NIL)
             (SETQ FTRS (FCTRF NORM))
             (SETQ DMODE* '|:GI:|)
             (COND
              ((NULL (CDDR FTRS))
               (PROGN
                (SETQ Y (NORMALIZE-LCGI Y))
                (SETQ W (MULTD (CAR Y) W))
                (SETQ AFTRS (CONS (CONS (CDR Y) 1) AFTRS))
                (RETURN NIL))))
             (SETQ W (CAR FTRS))
             (SETQ L
                     (COND ((EQUAL S 0) NIL)
                           (T
                            (LIST
                             (CONS MVU
                                   (PREPF
                                    (ADDF (LIST (CONS (CONS MVU 1) 1))
                                          (NEGF
                                           (MULTD S
                                                  (LIST
                                                   (CONS (CONS 'I 1)
                                                         1)))))))))))
             (PROG (J)
               (SETQ J (CDR FTRS))
              LAB
               (COND ((NULL J) (RETURN NIL)))
               ((LAMBDA (J)
                  (PROGN
                   (SETQ X (GCDF* (CAR J) U))
                   (SETQ U (QUOTF* U X))
                   (SETQ Z (COND (L (CAR (SUBF1 X L))) (T X)))
                   (SETQ Z (NORMALIZE-LCGI Z))
                   (SETQ W (MULTD (CAR Z) W))
                   (SETQ AFTRS (CONS (CONS (CDR Z) 1) AFTRS))))
                (CAR J))
               (SETQ J (CDR J))
               (GO LAB))
             (SETQ W
                     (COND (*PHYSOP-LOADED (PHYSOP-MULTF U W))
                           (T (POLY-MULTF U W))))))
         (CAR F))
        (SETQ F (CDR F))
        (GO LAB))
      (RETURN (CONS W AFTRS)))) 
(PUT 'NORMALIZE-LCGI 'NUMBER-OF-ARGS 1) 
(PUT 'NORMALIZE-LCGI 'DEFINED-ON-LINE '265) 
(PUT 'NORMALIZE-LCGI 'DEFINED-IN-FILE 'POLY/GINT.RED) 
(PUT 'NORMALIZE-LCGI 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE NORMALIZE-LCGI (U)
    (PROG (L X Y)
      (SETQ L (LNC U))
      (COND
       ((NUMBERP L)
        (RETURN (COND ((MINUSP L) (CONS (MINUS 1) (NEGF U))) (T (CONS 1 U))))))
      (SETQ X (GET '|:GI:| 'UNITS))
     A
      (COND ((NULL X) (RETURN (CONS 1 U))))
      (SETQ Y (QUOTF1 L (CAAR X)))
      (COND ((OR (NULL Y) (NULL (FIXP Y))) (PROGN (SETQ X (CDR X)) (GO A))))
      (SETQ U (MULTD (CDAR X) U))
      (RETURN
       (COND ((MINUSF U) (CONS (NEGF (CAAR X)) (NEGF U)))
             (T (CONS (CAAR X) U)))))) 
(PUT 'CONTAINS-ODDPOWER 'NUMBER-OF-ARGS 1) 
(PUT 'CONTAINS-ODDPOWER 'DEFINED-ON-LINE '280) 
(PUT 'CONTAINS-ODDPOWER 'DEFINED-IN-FILE 'POLY/GINT.RED) 
(PUT 'CONTAINS-ODDPOWER 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE CONTAINS-ODDPOWER (U)
    (COND ((NULL U) NIL) ((EVENP (CDAR U)) (CONTAINS-ODDPOWER (CDR U))) (T T))) 
(PUT 'POWER-SORT 'NUMBER-OF-ARGS 1) 
(PUT 'POWER-SORT 'DEFINED-ON-LINE '285) 
(PUT 'POWER-SORT 'DEFINED-IN-FILE 'POLY/GINT.RED) 
(PUT 'POWER-SORT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE POWER-SORT (U)
    (PROG (X Y)
      (PROG ()
       WHILELABEL
        (COND ((NOT U) (RETURN NIL)))
        (PROGN
         (SETQ X (MAXDEG (CDR U) (CAR U)))
         (SETQ U (DELALLASC (CAR X) U))
         (SETQ Y (CONS X Y)))
        (GO WHILELABEL))
      (RETURN Y))) 
(PUT 'SQFRP 'NUMBER-OF-ARGS 1) 
(PUT 'SQFRP 'DEFINED-ON-LINE '294) 
(PUT 'SQFRP 'DEFINED-IN-FILE 'POLY/GINT.RED) 
(PUT 'SQFRP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SQFRP (U)
    (PROG (*EZGCD DMODE*)
      (COND ((NULL (GETD 'EZGCDF1)) (LOAD_PACKAGE (LIST 'EZGCD))))
      (SETQ *EZGCD T)
      (RETURN
       ((LAMBDA (U) (OR (ATOM U) (ATOM (CAR U))))
        (GCDF* U (DIFF U (CAAAR U))))))) 
(PUT 'REALP 'NUMBER-OF-ARGS 1) 
(PUT 'REALP 'DEFINED-ON-LINE '304) 
(PUT 'REALP 'DEFINED-IN-FILE 'POLY/GINT.RED) 
(PUT 'REALP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REALP (U)
    (COND
     ((OR (ATOM U) (ATOM (CAR U)))
      (OR (ATOM U) (NOT (GET (CAR U) 'CMPXFN))
          (EQUAL (CDDR U) (CDDR (APPLY1 (GET (CAR U) 'I2D) 1)))))
     (T (AND (REALP (CDAR U)) (REALP (CDR U)))))) 
(PUT 'FD2F 'NUMBER-OF-ARGS 1) 
(PUT 'FD2F 'DEFINED-ON-LINE '311) 
(PUT 'FD2F 'DEFINED-IN-FILE 'POLY/GINT.RED) 
(PUT 'FD2F 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FD2F (U)
    (COND ((ATOM U) U)
          ((EQ (CAR U) '|:GI:|)
           (ADDF (COND ((ZEROP (CADR U)) NIL) (T (CADR U)))
                 ((LAMBDA (G590 G591)
                    (COND (*PHYSOP-LOADED (PHYSOP-MULTF G590 G591))
                          (T (POLY-MULTF G590 G591))))
                  (LIST (CONS (CONS 'I 1) 1))
                  (COND ((ZEROP (CDDR U)) NIL) (T (CDDR U))))))
          (T
           (ADDF
            ((LAMBDA (G592 G593)
               (COND (*PHYSOP-LOADED (PHYSOP-MULTF G592 G593))
                     (T (POLY-MULTF G592 G593))))
             (LIST (CONS (CAAR U) 1)) (FD2F (CDAR U)))
            (FD2F (CDR U)))))) 
(PUT '|GIPREP:| 'NUMBER-OF-ARGS 1) 
(PUT '|GIPREP:| 'DEFINED-ON-LINE '331) 
(PUT '|GIPREP:| 'DEFINED-IN-FILE 'POLY/GINT.RED) 
(PUT '|GIPREP:| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |GIPREP:| (U)
    ((LAMBDA (RL IM)
       (PROGN
        (COND ((EQUAL IM 0) RL) ((EQUAL RL 0) (GIPRIM IM))
              ((LESSP IM 0) (LIST 'DIFFERENCE RL (GIPRIM (MINUS IM))))
              (T (LIST 'PLUS RL (GIPRIM IM))))))
     (CADR U) (CDDR U))) 
(PUT 'GIPRIM 'NUMBER-OF-ARGS 1) 
(PUT 'GIPRIM 'DEFINED-ON-LINE '337) 
(PUT 'GIPRIM 'DEFINED-IN-FILE 'POLY/GINT.RED) 
(PUT 'GIPRIM 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE GIPRIM (IM) (COND ((EQUAL IM 1) 'I) (T (LIST 'TIMES IM 'I)))) 
(PUT '|GIPRN:| 'NUMBER-OF-ARGS 1) 
(PUT '|GIPRN:| 'DEFINED-ON-LINE '339) 
(PUT '|GIPRN:| 'DEFINED-IN-FILE 'POLY/GINT.RED) 
(PUT '|GIPRN:| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |GIPRN:| (V)
    ((LAMBDA (U)
       (COND ((OR (ATOM U) (EQ (CAR U) 'TIMES)) (MAPRIN U))
             (T (PROGN (PRIN2* "(") (MAPRIN U) (PRIN2* ")")))))
     (|GIPREP:| V))) 
(PUT '|GIRATIONALIZE:| 'NUMBER-OF-ARGS 1) 
(PUT '|GIRATIONALIZE:| 'DEFINED-ON-LINE '355) 
(PUT '|GIRATIONALIZE:| 'DEFINED-IN-FILE 'POLY/GINT.RED) 
(PUT '|GIRATIONALIZE:| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |GIRATIONALIZE:| (U)
    (PROG (Y Z *GCD)
      (SETQ *GCD T)
      (COND ((EQUAL Y (SETQ Z (CONJGD (SETQ Y (CDR U))))) (RETURN U)))
      (SETQ Z
              (QUOTF-FAIL Z
                          ((LAMBDA (*EXP)
                             (QUOTF1
                              (GCDF (ADDF Y Z)
                                    ((LAMBDA (G594 G595)
                                       (COND
                                        (*PHYSOP-LOADED
                                         (PHYSOP-MULTF G594 G595))
                                        (T (POLY-MULTF G594 G595))))
                                     (ADDF Z (NEGF Y))
                                     (CONS '|:GI:| (CONS 0 1))))
                              2))
                           T)))
      (RETURN
       (GIGCDSQ
        (COND (*PHYSOP-LOADED (PHYSOP-MULTF (CAR U) Z))
              (T (POLY-MULTF (CAR U) Z)))
        (COND (*PHYSOP-LOADED (PHYSOP-MULTF Y Z)) (T (POLY-MULTF Y Z))))))) 
(PUT 'GIGCDSQ 'NUMBER-OF-ARGS 2) 
(PUT 'GIGCDSQ 'DEFINED-ON-LINE '368) 
(PUT 'GIGCDSQ 'DEFINED-IN-FILE 'POLY/GINT.RED) 
(PUT 'GIGCDSQ 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE GIGCDSQ (X Y)
    (PROGN
     (COND
      (X
       ((LAMBDA (D)
          (PROGN
           (COND
            ((AND (NEQ D 1) (NEQ (SETQ D (GIINTGCD X D)) 1))
             (PROGN
              (SETQ X ((LAMBDA (*EXP) (QUOTF1 X D)) T))
              (SETQ Y ((LAMBDA (*EXP) (QUOTF1 Y D)) T)))))))
        (GIINTGCD Y 0))))
     (CONS X Y))) 
(PUT 'GIINTGCD 'NUMBER-OF-ARGS 2) 
(PUT 'GIINTGCD 'DEFINED-ON-LINE '374) 
(PUT 'GIINTGCD 'DEFINED-IN-FILE 'POLY/GINT.RED) 
(PUT 'GIINTGCD 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE GIINTGCD (U D)
    (COND ((EQUAL D 1) 1) ((NULL U) D) ((ATOM U) (GCDN U D))
          ((EQCAR U '|:GI:|) (GCDN (CADR U) (GCDN (CDDR U) D)))
          (T (GIINTGCD (CDAR U) (GIINTGCD (CDR U) D))))) 
(PUT 'CONJGD 'NUMBER-OF-ARGS 1) 
(PUT 'CONJGD 'DEFINED-ON-LINE '379) 
(PUT 'CONJGD 'DEFINED-IN-FILE 'POLY/GINT.RED) 
(PUT 'CONJGD 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE CONJGD (U)
    (PROG (X)
      (RETURN
       (COND ((ATOM U) U)
             ((AND (OR (ATOM U) (ATOM (CAR U))) (SETQ X (GET (CAR U) 'CMPXFN)))
              (APPLY2 X (CADR U)
                      (COND ((NUMBERP (CDDR U)) (MINUS (CDDR U)))
                            ((AND (OR (ATOM (CDDR U)) (ATOM (CAR (CDDR U))))
                                  (NOT (NUMBERP (CADDR U))))
                             (|:MINUS| (CDDR U)))
                            (T
                             (CDR
                              (|:MINUS|
                               (CONS (GET (CAR U) 'REALTYPE) (CDDR U))))))))
             ((OR (ATOM U) (ATOM (CAR U))) U)
             (T
              (ADDF
               ((LAMBDA (G597)
                  ((LAMBDA (G544)
                     (COND (*PHYSOP-LOADED (PHYSOP-MULTF G544 G597))
                           (T (POLY-MULTF G544 G597))))
                   (LIST (CONS (CAAR U) 1))))
                (CONJGD (CDAR U)))
               (CONJGD (CDR U)))))))) 
(INITDMODE 'COMPLEX) 
(ENDMODULE) 