(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'CDE_ANSATZ)) 
(PUT 'CDE_GRADING 'NUMBER-OF-ARGS 3) 
(PUT 'CDE_GRADING 'DEFINED-ON-LINE '43) 
(PUT 'CDE_GRADING 'DEFINED-IN-FILE 'CDE/CDE_ANSATZ.RED) 
(PUT 'CDE_GRADING 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE CDE_GRADING (DINDEPVAR DDEPVAR DODDVAR)
    (PROG ()
      (SETQ DEG_INDEP_VAR* (CDR DINDEPVAR))
      (SETQ DEG_DEP_VAR* (CDR DDEPVAR))
      (SETQ DEG_ODD_VAR*
              (COND
               ((AND ODD_VAR* (GREATERP (LENGTH DODDVAR) 1)) (CDR DODDVAR))
               (T NIL)))
      (COND
       ((NEQ (LENGTH DEG_INDEP_VAR*) (LENGTH INDEP_VAR*))
        (REDERR "Error: mismatch in degree of independent variables")))
      (COND
       ((NEQ (LENGTH DEG_DEP_VAR*) (LENGTH DEP_VAR*))
        (REDERR "Error: mismatch in degree of dependent variables")))
      (COND
       ((AND ODD_VAR* DEG_ODD_VAR*)
        (COND
         ((NEQ (LENGTH DEG_ODD_VAR*) (LENGTH ODD_VAR*))
          (REDERR "Error: mismatch in degree of odd dependent variables"))))))) 
(FLAG '(CDE_GRADING) 'OPFN) 
(PUT 'MULTMON 'NUMBER-OF-ARGS 2) 
(PUT 'MULTMON 'DEFINED-ON-LINE '66) 
(PUT 'MULTMON 'DEFINED-IN-FILE 'CDE/CDE_ANSATZ.RED) 
(PUT 'MULTMON 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MULTMON (VAR LISTMON)
    (PROG (EL FORALL-RESULT FORALL-ENDPTR)
      (SETQ EL LISTMON)
      (COND ((NULL EL) (RETURN NIL)))
      (SETQ FORALL-RESULT
              (SETQ FORALL-ENDPTR
                      (CONS ((LAMBDA (EL) (LIST 'TIMES VAR EL)) (CAR EL))
                            NIL)))
     LOOPLABEL
      (SETQ EL (CDR EL))
      (COND ((NULL EL) (RETURN FORALL-RESULT)))
      (RPLACD FORALL-ENDPTR
              (CONS ((LAMBDA (EL) (LIST 'TIMES VAR EL)) (CAR EL)) NIL))
      (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
      (GO LOOPLABEL))) 
(PUT 'ALL_NEXT_MON 'NUMBER-OF-ARGS 2) 
(PUT 'ALL_NEXT_MON 'DEFINED-ON-LINE '71) 
(PUT 'ALL_NEXT_MON 'DEFINED-IN-FILE 'CDE/CDE_ANSATZ.RED) 
(PUT 'ALL_NEXT_MON 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE ALL_NEXT_MON (FGDO LISTMON)
    (PROG (MONTEMP)
      (PROG (EL)
        (SETQ EL FGDO)
       LAB
        (COND ((NULL EL) (RETURN NIL)))
        ((LAMBDA (EL) (SETQ MONTEMP (APPEND (MULTMON EL LISTMON) MONTEMP)))
         (CAR EL))
        (SETQ EL (CDR EL))
        (GO LAB))
      (RETURN (CDE_MKSET MONTEMP)))) 
(PUT 'MKALLMON0 'NUMBER-OF-ARGS 2) 
(PUT 'MKALLMON0 'DEFINED-ON-LINE '80) 
(PUT 'MKALLMON0 'DEFINED-IN-FILE 'CDE/CDE_ANSATZ.RED) 
(PUT 'MKALLMON0 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MKALLMON0 (ALG_GRAD VARS)
    (PROG (ALLMON_TEMP ALLMON)
      (SETQ ALLMON VARS)
      (SETQ ALLMON_TEMP VARS)
      (PROG (I)
        (SETQ I 1)
       LAB
        (COND ((MINUSP (DIFFERENCE (DIFFERENCE ALG_GRAD 1) I)) (RETURN NIL)))
        (PROGN
         (SETQ ALLMON_TEMP (ALL_NEXT_MON VARS ALLMON_TEMP))
         (SETQ ALLMON (APPEND ALLMON_TEMP ALLMON)))
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (RETURN (REVERSE ALLMON)))) 
(PUT 'MKALLMON 'NUMBER-OF-ARGS 2) 
(PUT 'MKALLMON 'DEFINED-ON-LINE '94) 
(PUT 'MKALLMON 'DEFINED-IN-FILE 'CDE/CDE_ANSATZ.RED) 
(PUT 'MKALLMON 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MKALLMON (ALG_GRAD VARS)
    (PROG (TEMPLIST)
      (SETQ TEMPLIST (MKALLMON0 ALG_GRAD (CDR VARS)))
      (SETQ TEMPLIST
              (PROG (EL FORALL-RESULT FORALL-ENDPTR)
                (SETQ EL TEMPLIST)
                (COND ((NULL EL) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS ((LAMBDA (EL) (REVAL1 EL NIL)) (CAR EL))
                                      NIL)))
               LOOPLABEL
                (SETQ EL (CDR EL))
                (COND ((NULL EL) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        (CONS ((LAMBDA (EL) (REVAL1 EL NIL)) (CAR EL)) NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (RETURN (CONS 'LIST (CDE_MKSET TEMPLIST))))) 
(FLAG '(MKALLMON) 'OPFN) 
(PUT 'DEG_DER 'NUMBER-OF-ARGS 2) 
(PUT 'DEG_DER 'DEFINED-ON-LINE '109) 
(PUT 'DEG_DER 'DEFINED-IN-FILE 'CDE/CDE_ANSATZ.RED) 
(PUT 'DEG_DER 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE DEG_DER (PAR DER)
    (PROG (DER_MIND MIND DEGVAR DVAR DEG DEP_VAR_POS)
      (SETQ DEG 0)
      (SETQ DEP_VAR_POS 0)
      (SETQ DEG 0)
      (SETQ DER_MIND (IDTOMIND PAR DER))
      (SETQ MIND (CADR DER_MIND))
      (COND
       ((EQUAL PAR 0) (PROGN (SETQ DEGVAR DEG_DEP_VAR*) (SETQ DVAR DEP_VAR*)))
       (T (PROGN (SETQ DEGVAR DEG_ODD_VAR*) (SETQ DVAR ODD_VAR*))))
      (PROG (I)
        (SETQ I 1)
       LAB
        (COND ((MINUSP (DIFFERENCE N_INDEP_VAR I)) (RETURN NIL)))
        (SETQ DEG (DIFFERENCE DEG (TIMES (NTH MIND I) (NTH DEG_INDEP_VAR* I))))
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (SETQ DEP_VAR_POS (CDE_POSITION (CAR DER_MIND) DVAR))
      (RETURN (PLUS DEG (NTH DEGVAR DEP_VAR_POS))))) 
(PUT 'DER2DEG 'NUMBER-OF-ARGS 2) 
(PUT 'DER2DEG 'DEFINED-ON-LINE '135) 
(PUT 'DER2DEG 'DEFINED-IN-FILE 'CDE/CDE_ANSATZ.RED) 
(PUT 'DER2DEG 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE DER2DEG (PAR VARS)
    (PROG (EL FORALL-RESULT FORALL-ENDPTR)
      (SETQ EL VARS)
      (COND ((NULL EL) (RETURN NIL)))
      (SETQ FORALL-RESULT
              (SETQ FORALL-ENDPTR
                      (CONS ((LAMBDA (EL) (LIST EL (DEG_DER PAR EL))) (CAR EL))
                            NIL)))
     LOOPLABEL
      (SETQ EL (CDR EL))
      (COND ((NULL EL) (RETURN FORALL-RESULT)))
      (RPLACD FORALL-ENDPTR
              (CONS ((LAMBDA (EL) (LIST EL (DEG_DER PAR EL))) (CAR EL)) NIL))
      (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
      (GO LOOPLABEL))) 
(PUT 'ORDER_VAL 'NUMBER-OF-ARGS 1) 
(PUT 'ORDER_VAL 'DEFINED-ON-LINE '141) 
(PUT 'ORDER_VAL 'DEFINED-IN-FILE 'CDE/CDE_ANSATZ.RED) 
(PUT 'ORDER_VAL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE ORDER_VAL (VARS2VALUE)
    (PROG (LOCLESS LOCEQUAL LOCGREATER LOCPIVOT)
      (COND ((NOT VARS2VALUE) (RETURN NIL))
            (T
             (RETURN
              (PROGN
               (SETQ LOCPIVOT (CAR VARS2VALUE))
               (PROG (EL)
                 (SETQ EL VARS2VALUE)
                LAB
                 (COND ((NULL EL) (RETURN NIL)))
                 ((LAMBDA (EL)
                    (COND
                     ((GREATERP (CADR EL) (CADR LOCPIVOT))
                      (SETQ LOCGREATER (CONS EL LOCGREATER)))
                     ((EQN (CADR EL) (CADR LOCPIVOT))
                      (SETQ LOCEQUAL (CONS EL LOCEQUAL)))
                     (T (SETQ LOCLESS (CONS EL LOCLESS)))))
                  (CAR EL))
                 (SETQ EL (CDR EL))
                 (GO LAB))
               (APPEND (ORDER_VAL LOCLESS)
                       (APPEND LOCEQUAL (ORDER_VAL LOCGREATER))))))))) 
(PUT 'SELECT_GRADMON 'NUMBER-OF-ARGS 2) 
(PUT 'SELECT_GRADMON 'DEFINED-ON-LINE '159) 
(PUT 'SELECT_GRADMON 'DEFINED-IN-FILE 'CDE/CDE_ANSATZ.RED) 
(PUT 'SELECT_GRADMON 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE SELECT_GRADMON (GRADMON SCALE_DEG)
    (PROG (SCALE_DEG_GRADMON)
      (PROG (EL)
        (SETQ EL GRADMON)
       LAB
        (COND ((NULL EL) (RETURN NIL)))
        ((LAMBDA (EL)
           (COND
            ((EQUAL (CADR EL) SCALE_DEG)
             (SETQ SCALE_DEG_GRADMON (CONS (CAR EL) SCALE_DEG_GRADMON)))))
         (CAR EL))
        (SETQ EL (CDR EL))
        (GO LAB))
      (RETURN (REVERSE SCALE_DEG_GRADMON)))) 
(PUT 'DER_DEG_ORDERING 'NUMBER-OF-ARGS 2) 
(PUT 'DER_DEG_ORDERING 'DEFINED-ON-LINE '169) 
(PUT 'DER_DEG_ORDERING 'DEFINED-IN-FILE 'CDE/CDE_ANSATZ.RED) 
(PUT 'DER_DEG_ORDERING 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE DER_DEG_ORDERING (PAR LIST_OF_DER)
    (PROG (LISTOFDER_SYMB LIST_OF_DER_DEG ALIST_OF_DER_DEG DER_I TEMPIND)
      (SETQ TEMPIND 0)
      (SETQ LISTOFDER_SYMB (CDR LIST_OF_DER))
      (SETQ ALIST_OF_DER_DEG (ORDER_VAL (DER2DEG PAR (CDR LISTOFDER_SYMB))))
      (COND
       ((LEQ (CADR (CAR ALIST_OF_DER_DEG)) 0)
        (REDERR "Error: parametric derivatives
	do not have strictly positive degree")))
      (SETQ TEMPIND (CADR (CAR (REVERSE ALIST_OF_DER_DEG))))
      (PROG (I)
        (SETQ I 1)
       LAB
        (COND ((MINUSP (DIFFERENCE TEMPIND I)) (RETURN NIL)))
        (PROGN
         (SETQ DER_I NIL)
         (PROG (EL)
           (SETQ EL LISTOFDER_SYMB)
          LAB
           (COND ((NULL EL) (RETURN NIL)))
           ((LAMBDA (EL)
              (COND ((EQN (DEG_DER PAR EL) I) (SETQ DER_I (CONS EL DER_I)))))
            (CAR EL))
           (SETQ EL (CDR EL))
           (GO LAB))
         (SETQ DER_I (CONS 'LIST (REVERSE DER_I)))
         (SETQ LIST_OF_DER_DEG (CONS DER_I LIST_OF_DER_DEG)))
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (RETURN (CONS 'LIST (REVERSE LIST_OF_DER_DEG))))) 
(FLAG '(DER_DEG_ORDERING) 'OPFN) 
(PUT 'GRADMULT 'NUMBER-OF-ARGS 2) 
(PUT 'GRADMULT 'DEFINED-ON-LINE '196) 
(PUT 'GRADMULT 'DEFINED-IN-FILE 'CDE/CDE_ANSATZ.RED) 
(PUT 'GRADMULT 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE GRADMULT (FIRSTMON SECONDMON)
    (LIST (REVAL1 (LIST 'TIMES (CAR FIRSTMON) (CAR SECONDMON)) NIL)
          (REVAL1 (LIST 'PLUS (CADR FIRSTMON) (CADR SECONDMON)) NIL))) 
(PUT 'MULTGRADMON 'NUMBER-OF-ARGS 2) 
(PUT 'MULTGRADMON 'DEFINED-ON-LINE '203) 
(PUT 'MULTGRADMON 'DEFINED-IN-FILE 'CDE/CDE_ANSATZ.RED) 
(PUT 'MULTGRADMON 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MULTGRADMON (GRADVAR ALISTMON)
    (PROG (EL FORALL-RESULT FORALL-ENDPTR)
      (SETQ EL ALISTMON)
      (COND ((NULL EL) (RETURN NIL)))
      (SETQ FORALL-RESULT
              (SETQ FORALL-ENDPTR
                      (CONS ((LAMBDA (EL) (GRADMULT GRADVAR EL)) (CAR EL))
                            NIL)))
     LOOPLABEL
      (SETQ EL (CDR EL))
      (COND ((NULL EL) (RETURN FORALL-RESULT)))
      (RPLACD FORALL-ENDPTR
              (CONS ((LAMBDA (EL) (GRADMULT GRADVAR EL)) (CAR EL)) NIL))
      (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
      (GO LOOPLABEL))) 
(PUT 'ALL_NEXT_GRADMON 'NUMBER-OF-ARGS 2) 
(PUT 'ALL_NEXT_GRADMON 'DEFINED-ON-LINE '211) 
(PUT 'ALL_NEXT_GRADMON 'DEFINED-IN-FILE 'CDE/CDE_ANSATZ.RED) 
(PUT 'ALL_NEXT_GRADMON 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE ALL_NEXT_GRADMON (ALISTVAR ALISTMON)
    (PROG (GRADMONTEMP)
      (PROG (EL)
        (SETQ EL ALISTVAR)
       LAB
        (COND ((NULL EL) (RETURN NIL)))
        ((LAMBDA (EL)
           (SETQ GRADMONTEMP (APPEND (MULTGRADMON EL ALISTMON) GRADMONTEMP)))
         (CAR EL))
        (SETQ EL (CDR EL))
        (GO LAB))
      (RETURN (CDE_MKSET GRADMONTEMP)))) 
(PUT 'FILTER_GRADMON 'NUMBER-OF-ARGS 2) 
(PUT 'FILTER_GRADMON 'DEFINED-ON-LINE '220) 
(PUT 'FILTER_GRADMON 'DEFINED-IN-FILE 'CDE/CDE_ANSATZ.RED) 
(PUT 'FILTER_GRADMON 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE FILTER_GRADMON (ALISTMON SCALE_DEG)
    (PROG (FILTERED_GRADMON GOOD_GRADMON)
      (SETQ FILTERED_GRADMON (REVERSE (ORDER_VAL ALISTMON)))
      (PROG ()
       WHILELABEL
        (COND
         ((NOT
           (AND (CAR FILTERED_GRADMON)
                (GREATERP (CAR (CAR FILTERED_GRADMON)) SCALE_DEG)))
          (RETURN NIL)))
        (SETQ FILTERED_GRADMON (CDR FILTERED_GRADMON))
        (GO WHILELABEL))
      (PROG ()
       WHILELABEL
        (COND
         ((NOT
           (AND (CAR FILTERED_GRADMON)
                (EQUAL (CAR (CAR FILTERED_GRADMON)) SCALE_DEG)))
          (RETURN NIL)))
        (PROGN
         (SETQ GOOD_GRADMON (CONS (CAR FILTERED_GRADMON) GOOD_GRADMON))
         (SETQ FILTERED_GRADMON (CDR FILTERED_GRADMON)))
        (GO WHILELABEL))
      (RETURN (LIST GOOD_GRADMON FILTERED_GRADMON)))) 
(PUT 'MKALLGRADMON 'NUMBER-OF-ARGS 4) 
(PUT 'MKALLGRADMON 'DEFINED-ON-LINE '238) 
(PUT 'MKALLGRADMON 'DEFINED-IN-FILE 'CDE/CDE_ANSATZ.RED) 
(PUT 'MKALLGRADMON 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE MKALLGRADMON (PAR VARS ALG_DEG SCALE_DEG)
    (PROG (ALISTVARS GRADMON TEMP_PAIR MAXITER GRADMON_TEMP)
      (SETQ ALISTVARS (DER2DEG PAR VARS))
      (SETQ TEMP_PAIR (FILTER_GRADMON ALISTVARS SCALE_DEG))
      (SETQ GRADMON (CAR TEMP_PAIR))
      (SETQ ALISTVARS (CADR TEMP_PAIR))
      (COND
       (ALISTVARS
        (PROGN
         (SETQ MAXITER
                 (MIN
                  (QUOTIENT (FLOAT SCALE_DEG) (FLOAT (CADR (CAR ALISTVARS))))
                  (DIFFERENCE ALG_DEG 1)))
         (SETQ GRADMON_TEMP ALISTVARS)
         (PROG (I)
           (SETQ I 1)
          LAB
           (COND ((MINUSP (DIFFERENCE MAXITER I)) (RETURN NIL)))
           (PROGN
            (SETQ GRADMON_TEMP (ALL_NEXT_GRADMON ALISTVARS GRADMON_TEMP))
            (SETQ TEMP_PAIR (FILTER_GRADMON GRADMON_TEMP SCALE_DEG))
            (SETQ GRADMON (APPEND GRADMON (CAR TEMP_PAIR)))
            (SETQ GRADMON_TEMP (CADR TEMP_PAIR)))
           (SETQ I (PLUS2 I 1))
           (GO LAB)))))
      (RETURN GRADMON))) 
(PUT 'MKLINODD 'NUMBER-OF-ARGS 3) 
(PUT 'MKLINODD 'DEFINED-ON-LINE '274) 
(PUT 'MKLINODD 'DEFINED-IN-FILE 'CDE/CDE_ANSATZ.RED) 
(PUT 'MKLINODD 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE MKLINODD (GRAADMON GRAADLIJST_ODD DEGREE)
    (PROG (LINODD LINODD_TEMP GRLIST_I GRMON_I)
      (PROG (I)
        (SETQ I 1)
       LAB
        (COND ((MINUSP (DIFFERENCE DEGREE I)) (RETURN NIL)))
        (PROGN
         (COND
          ((EQN (LENGTH (NTH GRAADLIJST_ODD (PLUS I 2))) 1)
           (SETQ GRLIST_I NIL))
          (T (SETQ GRLIST_I (CDR (NTH GRAADLIJST_ODD (PLUS I 2))))))
         (PROG (EL)
           (SETQ EL GRLIST_I)
          LAB
           (COND ((NULL EL) (RETURN NIL)))
           ((LAMBDA (EL)
              (PROGN
               (SETQ GRMON_I
                       (CDR (NTH GRAADMON (PLUS (DIFFERENCE DEGREE I) 2))))
               (SETQ LINODD_TEMP
                       (PROG (ELL FORALL-RESULT FORALL-ENDPTR)
                         (SETQ ELL GRMON_I)
                         (COND ((NULL ELL) (RETURN NIL)))
                         (SETQ FORALL-RESULT
                                 (SETQ FORALL-ENDPTR
                                         (CONS
                                          ((LAMBDA (ELL) (LIST 'TIMES EL ELL))
                                           (CAR ELL))
                                          NIL)))
                        LOOPLABEL
                         (SETQ ELL (CDR ELL))
                         (COND ((NULL ELL) (RETURN FORALL-RESULT)))
                         (RPLACD FORALL-ENDPTR
                                 (CONS
                                  ((LAMBDA (ELL) (LIST 'TIMES EL ELL))
                                   (CAR ELL))
                                  NIL))
                         (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                         (GO LOOPLABEL)))
               (SETQ LINODD (APPEND LINODD LINODD_TEMP))))
            (CAR EL))
           (SETQ EL (CDR EL))
           (GO LAB)))
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (RETURN LINODD))) 
(PUT 'MKALLLINODD 'NUMBER-OF-ARGS 4) 
(PUT 'MKALLLINODD 'DEFINED-ON-LINE '298) 
(PUT 'MKALLLINODD 'DEFINED-IN-FILE 'CDE/CDE_ANSATZ.RED) 
(PUT 'MKALLLINODD 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE MKALLLINODD (GRAADMON GRAADLIJST_ODD DEGMIN DEGMAX)
    (CONS 'LIST
          (PROG (I FORALL-RESULT FORALL-ENDPTR)
            (SETQ I DEGMIN)
           STARTOVER
            (COND ((MINUSP (DIFFERENCE DEGMAX I)) (RETURN NIL)))
            (SETQ FORALL-RESULT (MKLINODD GRAADMON GRAADLIJST_ODD I))
            (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
            (SETQ I (PLUS2 I 1))
            (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
           LOOPLABEL
            (COND ((MINUSP (DIFFERENCE DEGMAX I)) (RETURN FORALL-RESULT)))
            (RPLACD FORALL-ENDPTR (MKLINODD GRAADMON GRAADLIJST_ODD I))
            (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
            (SETQ I (PLUS2 I 1))
            (GO LOOPLABEL)))) 
(FLAG '(MKALLLINODD) 'OPFN) 
(PUT 'MKALLGRADMON_IND 'NUMBER-OF-ARGS 1) 
(PUT 'MKALLGRADMON_IND 'DEFINED-ON-LINE '308) 
(PUT 'MKALLGRADMON_IND 'DEFINED-IN-FILE 'CDE/CDE_ANSATZ.RED) 
(PUT 'MKALLGRADMON_IND 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MKALLGRADMON_IND (ALG_DEG)
    (PROG (ALLGRADMON_TEMP ALLGRADMON INDEP_GRADMON)
      (SETQ INDEP_GRADMON
              (PROG (I FORALL-RESULT FORALL-ENDPTR)
                (SETQ I 1)
                (COND ((MINUSP (DIFFERENCE N_INDEP_VAR I)) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS
                                 (LIST (NTH INDEP_VAR* I)
                                       (NTH DEG_INDEP_VAR* I))
                                 NIL)))
               LOOPLABEL
                (SETQ I (PLUS2 I 1))
                (COND
                 ((MINUSP (DIFFERENCE N_INDEP_VAR I)) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        (CONS (LIST (NTH INDEP_VAR* I) (NTH DEG_INDEP_VAR* I))
                              NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (SETQ ALLGRADMON (LIST (LIST 1 0)))
      (SETQ ALLGRADMON_TEMP ALLGRADMON)
      (PROG (I)
        (SETQ I 1)
       LAB
        (COND ((MINUSP (DIFFERENCE ALG_DEG I)) (RETURN NIL)))
        (PROGN
         (SETQ ALLGRADMON_TEMP
                 (ALL_NEXT_GRADMON INDEP_GRADMON ALLGRADMON_TEMP))
         (SETQ ALLGRADMON (APPEND ALLGRADMON ALLGRADMON_TEMP)))
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (RETURN ALLGRADMON))) 
(PUT 'MULT_GRAD 'NUMBER-OF-ARGS 2) 
(PUT 'MULT_GRAD 'DEFINED-ON-LINE '325) 
(PUT 'MULT_GRAD 'DEFINED-IN-FILE 'CDE/CDE_ANSATZ.RED) 
(PUT 'MULT_GRAD 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MULT_GRAD (GRADMON LMON)
    (PROG (EL FORALL-RESULT FORALL-ENDPTR)
      (SETQ EL LMON)
      (COND ((NULL EL) (RETURN NIL)))
      (SETQ FORALL-RESULT
              (SETQ FORALL-ENDPTR
                      (CONS
                       ((LAMBDA (EL)
                          (REVAL1 (LIST 'TIMES (CAR GRADMON) EL) NIL))
                        (CAR EL))
                       NIL)))
     LOOPLABEL
      (SETQ EL (CDR EL))
      (COND ((NULL EL) (RETURN FORALL-RESULT)))
      (RPLACD FORALL-ENDPTR
              (CONS
               ((LAMBDA (EL) (REVAL1 (LIST 'TIMES (CAR GRADMON) EL) NIL))
                (CAR EL))
               NIL))
      (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
      (GO LOOPLABEL))) 
(PUT 'MKALLGRADMON_EVENIND 'NUMBER-OF-ARGS 3) 
(PUT 'MKALLGRADMON_EVENIND 'DEFINED-ON-LINE '328) 
(PUT 'MKALLGRADMON_EVENIND 'DEFINED-IN-FILE 'CDE/CDE_ANSATZ.RED) 
(PUT 'MKALLGRADMON_EVENIND 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE MKALLGRADMON_EVENIND (ALG_DEG GRMON DEGREE)
    (PROG (TEMPVARS TEMPDEG GRMON_DEP GRMON_IND N_GRMON_DEP)
      (SETQ GRMON_DEP (CDR GRMON))
      (SETQ GRMON_DEP
              (PROG (EL FORALL-RESULT FORALL-ENDPTR)
                (SETQ EL GRMON_DEP)
                (COND ((NULL EL) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS ((LAMBDA (EL) (CDR EL)) (CAR EL)) NIL)))
               LOOPLABEL
                (SETQ EL (CDR EL))
                (COND ((NULL EL) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        (CONS ((LAMBDA (EL) (CDR EL)) (CAR EL)) NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (SETQ N_GRMON_DEP (LENGTH GRMON_DEP))
      (SETQ GRMON_IND (MKALLGRADMON_IND ALG_DEG))
      (PROG (EL)
        (SETQ EL GRMON_IND)
       LAB
        (COND ((NULL EL) (RETURN NIL)))
        ((LAMBDA (EL)
           (PROGN
            (SETQ TEMPDEG (DIFFERENCE DEGREE (CADR EL)))
            (COND
             ((LESSP TEMPDEG N_GRMON_DEP)
              (SETQ TEMPVARS
                      (APPEND (MULT_GRAD EL (NTH GRMON_DEP (PLUS TEMPDEG 1)))
                              TEMPVARS)))
             (T
              (PRINT "Warning: algebraic degree higher than scale degree.")))))
         (CAR EL))
        (SETQ EL (CDR EL))
        (GO LAB))
      (RETURN (CONS 'LIST TEMPVARS)))) 
(FLAG '(MKALLGRADMON_EVENIND) 'OPFN) 
(PUT 'SPLITEXT_LIST 'NUMBER-OF-ARGS 1) 
(FLAG '(SPLITEXT_LIST) 'OPFN) 
(PUT 'SPLITEXT_LIST 'DEFINED-ON-LINE '355) 
(PUT 'SPLITEXT_LIST 'DEFINED-IN-FILE 'CDE/CDE_ANSATZ.RED) 
(PUT 'SPLITEXT_LIST 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SPLITEXT_LIST (L_EQ)
    (PROG (LL L_EQ_SPLIT)
      (SETQ L_EQ_SPLIT (AEVAL (LIST 'LIST)))
      (PROG (EL)
        (SETQ EL (GETRLIST (AEVAL L_EQ)))
       LAB
        (COND ((NULL EL) (RETURN NIL)))
        ((LAMBDA (EL)
           (PROGN
            (SETQ LL
                    (AEVAL
                     (LIST 'OPERATOR_COEFF (LIST 'REPLACE_ODDEXT EL) 'EXT)))
            (SETQ L_EQ_SPLIT (AEVAL (LIST 'CONS (LIST 'FIRST LL) L_EQ_SPLIT)))
            (SETQ LL (AEVAL (LIST 'REST LL)))
            (PROG (ELL)
              (SETQ ELL (GETRLIST (AEVAL LL)))
             LAB
              (COND ((NULL ELL) (RETURN NIL)))
              ((LAMBDA (ELL)
                 (SETQ L_EQ_SPLIT
                         (AEVAL (LIST 'CONS (LIST 'SECOND ELL) L_EQ_SPLIT))))
               (CAR ELL))
              (SETQ ELL (CDR ELL))
              (GO LAB))))
         (CAR EL))
        (SETQ EL (CDR EL))
        (GO LAB))
      (RETURN (AEVAL L_EQ_SPLIT)))) 
(PUT 'SPLITEXT_OPEQU 'NUMBER-OF-ARGS 3) 
(FLAG '(SPLITEXT_OPEQU) 'OPFN) 
(PUT 'SPLITEXT_OPEQU 'DEFINED-ON-LINE '373) 
(PUT 'SPLITEXT_OPEQU 'DEFINED-IN-FILE 'CDE/CDE_ANSATZ.RED) 
(PUT 'SPLITEXT_OPEQU 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE SPLITEXT_OPEQU (OP_EQU INIT_EQU END_EQU)
    (PROG (LL CNT)
      (SETQ CNT (AEVAL END_EQU))
      (PROG (I)
        (SETQ I (AEVAL* INIT_EQU))
       LAB
        (COND
         ((|AMINUSP:| (LIST 'DIFFERENCE (AEVAL* END_EQU) I)) (RETURN NIL)))
        (PROGN
         (SETQ LL
                 (AEVAL*
                  (LIST 'OPERATOR_COEFF (LIST 'REPLACE_ODDEXT (LIST OP_EQU I))
                        'EXT)))
         (SETK (LIST OP_EQU (SETQ CNT (AEVAL* (LIST 'PLUS CNT 1))))
               (AEVAL* (LIST 'FIRST LL)))
         (SETQ LL (AEVAL* (LIST 'REST LL)))
         (PROG (EL)
           (SETQ EL (GETRLIST (AEVAL* LL)))
          LAB
           (COND ((NULL EL) (RETURN NIL)))
           ((LAMBDA (EL)
              (SETK (LIST OP_EQU (SETQ CNT (AEVAL* (LIST 'PLUS CNT 1))))
                    (AEVAL* (LIST 'SECOND EL))))
            (CAR EL))
           (SETQ EL (CDR EL))
           (GO LAB)))
        (SETQ I
                ((LAMBDA (FORALL-RESULT) (AEVAL* (LIST 'PLUS FORALL-RESULT 1)))
                 I))
        (GO LAB))
      (RETURN (AEVAL CNT)))) 
(PUT 'SPLITVARS_LIST 'NUMBER-OF-ARGS 2) 
(FLAG '(SPLITVARS_LIST) 'OPFN) 
(PUT 'SPLITVARS_LIST 'DEFINED-ON-LINE '389) 
(PUT 'SPLITVARS_LIST 'DEFINED-IN-FILE 'CDE/CDE_ANSATZ.RED) 
(PUT 'SPLITVARS_LIST 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE SPLITVARS_LIST (L_EQ L_VARS)
    (PROG (LL L_EQ_SPLIT)
      (SETQ L_EQ_SPLIT (AEVAL (LIST 'LIST)))
      (PROG (EL)
        (SETQ EL (GETRLIST (AEVAL L_EQ)))
       LAB
        (COND ((NULL EL) (RETURN NIL)))
        ((LAMBDA (EL)
           (PROGN
            (SETQ LL (AEVAL (LIST 'MULTI_COEFF EL L_VARS)))
            (SETQ L_EQ_SPLIT (AEVAL (LIST 'CONS (LIST 'FIRST LL) L_EQ_SPLIT)))
            (SETQ LL (AEVAL (LIST 'REST LL)))
            (PROG (ELL)
              (SETQ ELL (GETRLIST (AEVAL LL)))
             LAB
              (COND ((NULL ELL) (RETURN NIL)))
              ((LAMBDA (ELL)
                 (SETQ L_EQ_SPLIT
                         (AEVAL (LIST 'CONS (LIST 'SECOND ELL) L_EQ_SPLIT))))
               (CAR ELL))
              (SETQ ELL (CDR ELL))
              (GO LAB))))
         (CAR EL))
        (SETQ EL (CDR EL))
        (GO LAB))
      (RETURN (AEVAL L_EQ_SPLIT)))) 
(PUT 'SPLITVARS_OPEQU 'NUMBER-OF-ARGS 4) 
(FLAG '(SPLITVARS_OPEQU) 'OPFN) 
(PUT 'SPLITVARS_OPEQU 'DEFINED-ON-LINE '405) 
(PUT 'SPLITVARS_OPEQU 'DEFINED-IN-FILE 'CDE/CDE_ANSATZ.RED) 
(PUT 'SPLITVARS_OPEQU 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE SPLITVARS_OPEQU (OP_EQU INIT_EQU END_EQU L_VARS)
    (PROG (LL CNT)
      (SETQ CNT (AEVAL END_EQU))
      (PROG (I)
        (SETQ I (AEVAL* INIT_EQU))
       LAB
        (COND
         ((|AMINUSP:| (LIST 'DIFFERENCE (AEVAL* END_EQU) I)) (RETURN NIL)))
        (PROGN
         (SETQ LL (AEVAL* (LIST 'MULTI_COEFF (LIST 'EQU I) L_VARS)))
         (SETK (LIST OP_EQU (SETQ CNT (AEVAL* (LIST 'PLUS CNT 1))))
               (AEVAL* (LIST 'FIRST LL)))
         (SETQ LL (AEVAL* (LIST 'REST LL)))
         (PROG (EL)
           (SETQ EL (GETRLIST (AEVAL* LL)))
          LAB
           (COND ((NULL EL) (RETURN NIL)))
           ((LAMBDA (EL)
              (SETK (LIST OP_EQU (SETQ CNT (AEVAL* (LIST 'PLUS CNT 1))))
                    (AEVAL* (LIST 'SECOND EL))))
            (CAR EL))
           (SETQ EL (CDR EL))
           (GO LAB)))
        (SETQ I
                ((LAMBDA (FORALL-RESULT) (AEVAL* (LIST 'PLUS FORALL-RESULT 1)))
                 I))
        (GO LAB))
      (RETURN (AEVAL CNT)))) 
(PUT 'FILTER_EQLIST0 'NUMBER-OF-ARGS 1) 
(PUT 'FILTER_EQLIST0 'DEFINED-ON-LINE '421) 
(PUT 'FILTER_EQLIST0 'DEFINED-IN-FILE 'CDE/CDE_ANSATZ.RED) 
(PUT 'FILTER_EQLIST0 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FILTER_EQLIST0 (L_EQ)
    (PROG (EQ_FILTERED FIRST_L_EQ REST_L_EQ)
      (SETQ EQ_FILTERED (LIST))
      (COND ((NULL L_EQ) (RETURN L_EQ))
            ((EQN (SETQ FIRST_L_EQ (CAR L_EQ)) 0)
             (RETURN (FILTER_EQLIST0 (CDR L_EQ))))
            (T
             (PROGN
              (SETQ REST_L_EQ (CDR L_EQ))
              (SETQ EQ_FILTERED REST_L_EQ)
              (PROG (EL)
                (SETQ EL REST_L_EQ)
               LAB
                (COND ((NULL EL) (RETURN NIL)))
                ((LAMBDA (EL)
                   (COND
                    ((AND (NOT (EQN EL 0))
                          (NUMBERP
                           (MULTSQ (SIMP EL) (INVSQ (SIMP FIRST_L_EQ)))))
                     (SETQ EQ_FILTERED (CDE_DELETE EL EQ_FILTERED)))))
                 (CAR EL))
                (SETQ EL (CDR EL))
                (GO LAB)))))
      (RETURN (CONS FIRST_L_EQ (FILTER_EQLIST0 EQ_FILTERED))))) 
(PUT 'FILTER_EQLIST 'NUMBER-OF-ARGS 1) 
(PUT 'FILTER_EQLIST 'DEFINED-ON-LINE '437) 
(PUT 'FILTER_EQLIST 'DEFINED-IN-FILE 'CDE/CDE_ANSATZ.RED) 
(PUT 'FILTER_EQLIST 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FILTER_EQLIST (L_EQ) (CONS 'LIST (FILTER_EQLIST0 (CDR L_EQ)))) 
(FLAG '(FILTER_EQLIST) 'OPFN) 
(ENDMODULE) 