(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'TPSREV)) 
(FLUID '(PS)) 
(PUT 'PSREVERSE 'SIMPFN 'SIMPPSREV) 
(PUT 'SIMPPSREV 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPPSREV 'DEFINED-ON-LINE '65) 
(PUT 'SIMPPSREV 'DEFINED-IN-FILE 'TPS/TPSREV.RED) 
(PUT 'SIMPPSREV 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPPSREV (A)
    (COND ((EQUAL (LENGTH A) 1) (APPLY 'SIMPPSREV1 A))
          (T (RERROR 'TPS 33 "Wrong number of arguments to PSREVERSE")))) 
(PUT 'SIMPPSREV1 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPPSREV1 'DEFINED-ON-LINE '69) 
(PUT 'SIMPPSREV1 'DEFINED-IN-FILE 'TPS/TPSREV.RED) 
(PUT 'SIMPPSREV1 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPPSREV1 (SERIES)
    (PROG (REV PSORD DEPVAR ABOUT KNOWNPS |PS:LEVEL|)
      (SETQ |PS:LEVEL| 0)
      (SETQ SERIES (PREPSQXX (SIMP* SERIES)))
      (COND
       ((NOT (AND (PAIRP SERIES) (EQUAL (CAR SERIES) '|:PS:|)))
        (RERROR 'TPS 34 "Argument should be a <POWER SERIES>: simppsrev")))
      (|PS:FIND-ORDER| SERIES)
      (SETQ DEPVAR (|PS:DEPVAR| SERIES))
      (COND ((EQUAL (SETQ PSORD (|PS:ORDER| SERIES)) 1) (SETQ ABOUT 0))
            ((AND (EQUAL PSORD 0) (NEQ (|PS:EVALUATE| SERIES 1) (CONS NIL 1)))
             (SETQ ABOUT (PREPSQXX (|PS:GET-TERM| SERIES 0))))
            ((EQUAL PSORD (MINUS 1)) (SETQ ABOUT '|PS:INF|))
            (T (RERROR 'TPS 35 "Series cannot be inverted:  simppsrev")))
      (SETQ REV (|PS:COMPILE| (LIST 'PSREV SERIES) DEPVAR ABOUT))
      (COND
       ((EQUAL (|PS:EXPANSION-POINT| SERIES) '|PS:INF|)
        (PROGN
         (SETQ REV
                 (MAKE-PS (LIST 'QUOTIENT 1 REV) (|PS:VALUE| REV) DEPVAR
                  ABOUT))
         (|PS:FIND-ORDER| REV))))
      (RETURN (CONS REV 1)))) 
(PUT '|PS:GENERATING-SERIES| 'NUMBER-OF-ARGS 3) 
(PUT '|PS:GENERATING-SERIES| 'DEFINED-ON-LINE '92) 
(PUT '|PS:GENERATING-SERIES| 'DEFINED-IN-FILE 'TPS/TPSREV.RED) 
(PUT '|PS:GENERATING-SERIES| 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE |PS:GENERATING-SERIES| (A PSORD INVERTED)
    (PROG (PS)
      (SETQ PS
              (MAKE-PS (LIST 'PSGEN A INVERTED) (|PS:VALUE| A) (|PS:DEPVAR| A)
               (|PS:EXPANSION-POINT| A)))
      (|PS:PUTV| PS 0 PSORD)
      (|PS:SET-RTHPOW| PS PSORD)
      (RETURN PS))) 
(DE |PS:GET-RTHPOW| (GENSERIES R) (|PS:GET-TERM| GENSERIES R)) 
(PUT '|PS:GET-RTHPOW| 'NUMBER-OF-ARGS 2) 
(PUT '|PS:GET-RTHPOW| 'DEFINED-ON-LINE '101) 
(PUT '|PS:GET-RTHPOW| 'DEFINED-IN-FILE 'TPS/TPSREV.RED) 
(PUT '|PS:GET-RTHPOW| 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(PUTC '|PS:GET-RTHPOW| 'INLINE
      '(LAMBDA (GENSERIES R) (|PS:GET-TERM| GENSERIES R))) 
(PUT '|PS:SET-RTHPOW| 'NUMBER-OF-ARGS 2) 
(PUT '|PS:SET-RTHPOW| 'DEFINED-ON-LINE '104) 
(PUT '|PS:SET-RTHPOW| 'DEFINED-IN-FILE 'TPS/TPSREV.RED) 
(PUT '|PS:SET-RTHPOW| 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE |PS:SET-RTHPOW| (GENSERIES R)
    (PROG (RTHPOW SERIES POWER)
      (SETQ SERIES (|PS:EXPRESSION| GENSERIES))
      (SETQ POWER (COND ((CADDR SERIES) (MINUS R)) (T R)))
      (SETQ SERIES (CADR SERIES))
      (COND ((EQUAL POWER 0) (SETQ RTHPOW 1))
            ((EQUAL POWER 1) (SETQ RTHPOW SERIES))
            (T
             (PROGN
              (COND
               ((EQUAL POWER (MINUS 1))
                (SETQ RTHPOW (LIST 'QUOTIENT 1 SERIES)))
               ((EQUAL POWER 2) (SETQ RTHPOW (LIST 'TIMES SERIES SERIES)))
               (T (SETQ RTHPOW (LIST 'EXPT SERIES POWER 1))))
              (SETQ POWER
                      (COND
                       ((EQUAL (CAR RTHPOW) 'EXPT) (LIST 'EXPT SERIES POWER))
                       (T RTHPOW)))
              (SETQ RTHPOW
                      (MAKE-PS RTHPOW (|PS:ARG-VALUES| POWER)
                       (|PS:DEPVAR| SERIES) (|PS:EXPANSION-POINT| SERIES)))
              (|PS:FIND-ORDER| RTHPOW))))
      (|PS:SET-TERM| GENSERIES R RTHPOW)
      (RETURN RTHPOW))) 
(PUT '|PS:TERM-RTHPOW| 'NUMBER-OF-ARGS 3) 
(PUT '|PS:TERM-RTHPOW| 'DEFINED-ON-LINE '130) 
(PUT '|PS:TERM-RTHPOW| 'DEFINED-IN-FILE 'TPS/TPSREV.RED) 
(PUT '|PS:TERM-RTHPOW| 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE |PS:TERM-RTHPOW| (GENSERIES R N)
    (PROG (TERM SERIES)
      (SETQ SERIES (|PS:GET-TERM| GENSERIES R))
      (COND
       ((NULL SERIES)
        (PROG (I)
          (SETQ I (PLUS (|PS:LAST-TERM| GENSERIES) 1))
         LAB
          (COND ((MINUSP (DIFFERENCE R I)) (RETURN NIL)))
          (SETQ SERIES (|PS:SET-RTHPOW| GENSERIES I))
          (SETQ I (PLUS2 I 1))
          (GO LAB))))
      (SETQ TERM (|PS:EVALUATE| SERIES N))
      (RETURN TERM))) 
(PUT 'PSREV '|PS:CRULE| '|PS:REV-CRULE|) 
(PUT '|PS:REV-CRULE| 'NUMBER-OF-ARGS 3) 
(PUT '|PS:REV-CRULE| 'DEFINED-ON-LINE '142) 
(PUT '|PS:REV-CRULE| 'DEFINED-IN-FILE 'TPS/TPSREV.RED) 
(PUT '|PS:REV-CRULE| 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE |PS:REV-CRULE| (A D N)
    (PROG (SERIES)
      (SETQ SERIES (CADR A))
      (COND
       ((AND (NEQ N '|PS:INF|) (NEQ N 0))
        (SETQ SERIES (|PS:REMOVE-CONSTANT| SERIES))))
      (SETQ SERIES
              (MAKE-PS
               (LIST 'PSREV
                     (|PS:GENERATING-SERIES| SERIES 1
                      (COND ((EQUAL N '|PS:INF|) T) (T NIL))))
               (LIST 'PSREV (|PS:VALUE| (CADR A)) D N) D N))
      (|PS:FIND-ORDER| SERIES)
      (RETURN SERIES))) 
(PUT '|PS:REMOVE-CONSTANT| 'NUMBER-OF-ARGS 1) 
(PUT '|PS:REMOVE-CONSTANT| 'DEFINED-ON-LINE '156) 
(PUT '|PS:REMOVE-CONSTANT| 'DEFINED-IN-FILE 'TPS/TPSREV.RED) 
(PUT '|PS:REMOVE-CONSTANT| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |PS:REMOVE-CONSTANT| (PS)
    (|PS:COMPILE| (LIST 'DIFFERENCE PS (PREPSQXX (|PS:EVALUATE| PS 0)))
     (|PS:DEPVAR| PS) (|PS:EXPANSION-POINT| PS))) 
(PUT 'PSREV '|PS:ERULE| '|PS:REV-ERULE|) 
(PUT 'PSREV '|PS:ORDER-FN| '|PS:REV-ORDERFN|) 
(PUT '|PS:REV-ORDERFN| 'NUMBER-OF-ARGS 1) 
(PUT '|PS:REV-ORDERFN| 'DEFINED-ON-LINE '165) 
(PUT '|PS:REV-ORDERFN| 'DEFINED-IN-FILE 'TPS/TPSREV.RED) 
(PUT '|PS:REV-ORDERFN| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |PS:REV-ORDERFN| (PS)
    (PROG (U)
      (SETQ U
              (|PS:EXPANSION-POINT|
               (|PS:GET-TERM| (CADR (|PS:EXPRESSION| PS)) 1)))
      (RETURN (COND ((OR (EQUAL U 0) (EQUAL U '|PS:INF|)) 1) (T 0))))) 
(PUT '|PS:REV-ERULE| 'NUMBER-OF-ARGS 2) 
(PUT '|PS:REV-ERULE| 'DEFINED-ON-LINE '173) 
(PUT '|PS:REV-ERULE| 'DEFINED-IN-FILE 'TPS/TPSREV.RED) 
(PUT '|PS:REV-ERULE| 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE |PS:REV-ERULE| (A N)
    (PROG (GENSERIES X Z)
      (SETQ Z (CONS NIL 1))
      (SETQ GENSERIES (CADR A))
      (COND
       ((EQUAL N 0)
        (COND
         ((EQUAL (SETQ X (|PS:EXPANSION-POINT| (|PS:GET-TERM| GENSERIES 1)))
                 '|PS:INF|)
          (RETURN (CONS NIL 1)))
         (T (RETURN (SIMP* X))))))
      (COND ((EQUAL N 1) (RETURN (INVSQ (|PS:TERM-RTHPOW| GENSERIES 1 1)))))
      (PROG (I)
        (SETQ I 1)
       LAB
        (COND ((MINUSP (DIFFERENCE (DIFFERENCE N 1) I)) (RETURN NIL)))
        (SETQ Z
                (ADDSQ Z
                       (MULTSQ (|PS:EVALUATE| PS I)
                               (|PS:TERM-RTHPOW| GENSERIES I N))))
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (RETURN (MULTSQ (NEGSQ Z) (INVSQ (|PS:TERM-RTHPOW| GENSERIES N N)))))) 
(PUT 'PSCOMP '|PS:CRULE| '|PS:COMP-CRULE|) 
(PUT 'PSCOMP '|PS:ERULE| '|PS:COMP-ERULE|) 
(PUT 'PSCOMP '|PS:ORDER-FN| '|PS:COMP-ORDERFN|) 
(PUT '|PS:COMP-ORDERFN| 'NUMBER-OF-ARGS 1) 
(PUT '|PS:COMP-ORDERFN| 'DEFINED-ON-LINE '192) 
(PUT '|PS:COMP-ORDERFN| 'DEFINED-IN-FILE 'TPS/TPSREV.RED) 
(PUT '|PS:COMP-ORDERFN| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |PS:COMP-ORDERFN| (PS)
    (PROG (U)
      (SETQ U (|PS:FIND-ORDER| (CADR (|PS:EXPRESSION| PS))))
      (RETURN
       (COND ((EQUAL U 0) 0)
             (T
              (|PS:FIND-ORDER|
               (|PS:GET-TERM| (CADDR (|PS:EXPRESSION| PS)) U))))))) 
(PUT '|PS:COMP-CRULE| 'NUMBER-OF-ARGS 3) 
(PUT '|PS:COMP-CRULE| 'DEFINED-ON-LINE '202) 
(PUT '|PS:COMP-CRULE| 'DEFINED-IN-FILE 'TPS/TPSREV.RED) 
(PUT '|PS:COMP-CRULE| 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE |PS:COMP-CRULE| (A D N)
    (PROG (SERIES1 SERIES2 N1)
      (SETQ SERIES1 (CADR A))
      (SETQ SERIES2 (CADDR A))
      (SETQ N1 (|PS:EXPANSION-POINT| SERIES1))
      (COND
       ((AND (NEQ N1 0) (NEQ N1 '|PS:INF|))
        (SETQ SERIES2 (|PS:REMOVE-CONSTANT| SERIES2))))
      (SETQ A
              (MAKE-PS
               (LIST 'PSCOMP SERIES1
                     (|PS:GENERATING-SERIES| SERIES2 (|PS:ORDER| SERIES1)
                      (COND ((EQUAL N1 '|PS:INF|) T) (T NIL))))
               (APPEND (|PS:ARG-VALUES| A) (LIST D N)) D N))
      (|PS:FIND-ORDER| A)
      (RETURN A))) 
(PUT '|PS:COMP-ERULE| 'NUMBER-OF-ARGS 2) 
(PUT '|PS:COMP-ERULE| 'DEFINED-ON-LINE '218) 
(PUT '|PS:COMP-ERULE| 'DEFINED-IN-FILE 'TPS/TPSREV.RED) 
(PUT '|PS:COMP-ERULE| 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE |PS:COMP-ERULE| (A N)
    (PROG (AA GENSERIES Z PSORD1)
      (SETQ Z (CONS NIL 1))
      (SETQ AA (CADR A))
      (SETQ GENSERIES (CADDR A))
      (SETQ PSORD1 (|PS:ORDER| AA))
      (PROG (I)
        (SETQ I PSORD1)
       LAB
        (COND ((MINUSP (DIFFERENCE N I)) (RETURN NIL)))
        (SETQ Z
                (ADDSQ Z
                       (MULTSQ (|PS:EVALUATE| AA I)
                               (|PS:TERM-RTHPOW| GENSERIES I N))))
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (RETURN Z))) 
(PUT 'PSCOMPOSE 'SIMPFN 'SIMPPSCOMP) 
(PUT 'SIMPPSCOMP 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPPSCOMP 'DEFINED-ON-LINE '231) 
(PUT 'SIMPPSCOMP 'DEFINED-IN-FILE 'TPS/TPSREV.RED) 
(PUT 'SIMPPSCOMP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPPSCOMP (A)
    (COND ((EQUAL (LENGTH A) 2) (APPLY 'SIMPPSCOMP1 A))
          (T
           (RERROR 'TPS 36
                   "Args should be <POWER SERIES>,<POWER SERIES>:  simppscomp")))) 
(PUT 'SIMPPSCOMP1 'NUMBER-OF-ARGS 2) 
(PUT 'SIMPPSCOMP1 'DEFINED-ON-LINE '236) 
(PUT 'SIMPPSCOMP1 'DEFINED-IN-FILE 'TPS/TPSREV.RED) 
(PUT 'SIMPPSCOMP1 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE SIMPPSCOMP1 (PS1 PS2)
    (PROG (X D N1 N KNOWNPS |PS:LEVEL|)
      (SETQ |PS:LEVEL| 0)
      (SETQ PS1 (PREPSQXX (SIMP* PS1)))
      (COND
       ((OR (NUMBERP PS1)
            (AND (PAIRP PS1) (NEQ (CAR PS1) '|:PS:|) (GET (CAR PS1) 'DNAME)))
        (RETURN (CONS (COND ((ZEROP PS1) NIL) (T PS1)) 1))))
      (COND
       ((OR (NOT (AND (PAIRP PS1) (EQUAL (CAR PS1) '|:PS:|)))
            (NOT
             ((LAMBDA (U) (AND (PAIRP U) (EQUAL (CAR U) '|:PS:|)))
              (SETQ PS2 (PREPSQXX (SIMP* PS2))))))
        (RERROR 'TPS 37
                "Args should be <POWER SERIES>,<POWER SERIES>:  simppscomp")))
      (|PS:FIND-ORDER| PS1)
      (SETQ X (|PS:FIND-ORDER| PS2))
      (SETQ D (|PS:DEPVAR| PS2))
      (SETQ N1 (|PS:EXPANSION-POINT| PS1))
      (SETQ N (|PS:EXPANSION-POINT| PS2))
      (COND
       ((OR (AND (GREATERP X 0) (EQUAL N1 0))
            (AND (LESSP X 0) (EQUAL N1 '|PS:INF|))
            (AND (EQUAL X 0) (EQUAL N1 (PREPSQXX (|PS:EVALUATE| PS2 0)))))
        (RETURN (CONS (|PS:COMPILE| (LIST 'PSCOMP PS1 PS2) D N) 1)))
       (T (RERROR 'TPS 38 "Series cannot be composed:  simppscomp"))))) 
(AEVAL (OPERATOR (LIST 'PSREV 'PSCOMP))) 
(ENDMODULE) 