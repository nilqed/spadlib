(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'LIFTED)) 
(DE REVPR (U) (CONS (CDR U) (CAR U))) 
(PUT 'REVPR 'NUMBER-OF-ARGS 1) 
(PUT 'REVPR 'DEFINED-ON-LINE '40) 
(PUT 'REVPR 'DEFINED-IN-FILE 'ALG/LIFTED.RED) 
(PUT 'REVPR 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'REVPR 'INLINE '(LAMBDA (U) (CONS (CDR U) (CAR U)))) 
(PUT 'CARX 'NUMBER-OF-ARGS 2) 
(PUT 'CARX 'DEFINED-ON-LINE '43) 
(PUT 'CARX 'DEFINED-IN-FILE 'ALG/LIFTED.RED) 
(PUT 'CARX 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE CARX (U V)
    (COND ((AND (NOT (NULL U)) (NULL (CDR U))) (CAR U))
          (T (RERROR 'ALG 5 (LIST "Wrong number of arguments to" V))))) 
(PUT 'NLIST 'NUMBER-OF-ARGS 2) 
(PUT 'NLIST 'DEFINED-ON-LINE '47) 
(PUT 'NLIST 'DEFINED-IN-FILE 'ALG/LIFTED.RED) 
(PUT 'NLIST 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE NLIST (U N)
    (COND ((EQUAL N 0) NIL) (T (CONS U (NLIST U (DIFFERENCE N 1)))))) 
(PUT 'MAPCONS 'NUMBER-OF-ARGS 2) 
(PUT 'MAPCONS 'DEFINED-ON-LINE '50) 
(PUT 'MAPCONS 'DEFINED-IN-FILE 'ALG/LIFTED.RED) 
(PUT 'MAPCONS 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MAPCONS (U V)
    (PROG (J FORALL-RESULT FORALL-ENDPTR)
      (SETQ J U)
      (COND ((NULL J) (RETURN NIL)))
      (SETQ FORALL-RESULT
              (SETQ FORALL-ENDPTR
                      (CONS ((LAMBDA (J) (CONS V J)) (CAR J)) NIL)))
     LOOPLABEL
      (SETQ J (CDR J))
      (COND ((NULL J) (RETURN FORALL-RESULT)))
      (RPLACD FORALL-ENDPTR (CONS ((LAMBDA (J) (CONS V J)) (CAR J)) NIL))
      (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
      (GO LOOPLABEL))) 
(PUT 'MAPPEND 'NUMBER-OF-ARGS 2) 
(PUT 'MAPPEND 'DEFINED-ON-LINE '53) 
(PUT 'MAPPEND 'DEFINED-IN-FILE 'ALG/LIFTED.RED) 
(PUT 'MAPPEND 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MAPPEND (U V)
    (PROG (J FORALL-RESULT FORALL-ENDPTR)
      (SETQ J U)
      (COND ((NULL J) (RETURN NIL)))
      (SETQ FORALL-RESULT
              (SETQ FORALL-ENDPTR
                      (CONS ((LAMBDA (J) (APPEND V J)) (CAR J)) NIL)))
     LOOPLABEL
      (SETQ J (CDR J))
      (COND ((NULL J) (RETURN FORALL-RESULT)))
      (RPLACD FORALL-ENDPTR (CONS ((LAMBDA (J) (APPEND V J)) (CAR J)) NIL))
      (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
      (GO LOOPLABEL))) 
(PUT 'SMEMQLP 'NUMBER-OF-ARGS 2) 
(PUT 'SMEMQLP 'DEFINED-ON-LINE '56) 
(PUT 'SMEMQLP 'DEFINED-IN-FILE 'ALG/LIFTED.RED) 
(PUT 'SMEMQLP 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE SMEMQLP (U V)
    (COND ((OR (NULL V) (NUMBERP V)) NIL) ((ATOM V) (MEMQ V U))
          ((EQ (CAR V) 'QUOTE) NIL)
          (T (OR (SMEMQLP U (CAR V)) (SMEMQLP U (CDR V)))))) 
(DE *K2PF (U) (CONS (CONS U (CONS 1 1)) NIL)) 
(PUT '*K2PF 'NUMBER-OF-ARGS 1) 
(PUT '*K2PF 'DEFINED-ON-LINE '64) 
(PUT '*K2PF 'DEFINED-IN-FILE 'ALG/LIFTED.RED) 
(PUT '*K2PF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC '*K2PF 'INLINE '(LAMBDA (U) (CONS (CONS U (CONS 1 1)) NIL))) 
(DE NEGPF (U) (MULTPFSQ U (CONS (MINUS 1) 1))) 
(PUT 'NEGPF 'NUMBER-OF-ARGS 1) 
(PUT 'NEGPF 'DEFINED-ON-LINE '67) 
(PUT 'NEGPF 'DEFINED-IN-FILE 'ALG/LIFTED.RED) 
(PUT 'NEGPF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'NEGPF 'INLINE '(LAMBDA (U) (MULTPFSQ U (CONS (MINUS 1) 1)))) 
(DE LOWERIND (U) (LIST 'MINUS U)) 
(PUT 'LOWERIND 'NUMBER-OF-ARGS 1) 
(PUT 'LOWERIND 'DEFINED-ON-LINE '70) 
(PUT 'LOWERIND 'DEFINED-IN-FILE 'ALG/LIFTED.RED) 
(PUT 'LOWERIND 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'LOWERIND 'INLINE '(LAMBDA (U) (LIST 'MINUS U))) 
(DE GET*FDEG (U) ((LAMBDA (X) (COND (X (CAR X)) (T NIL))) (GET U 'FDEGREE))) 
(PUT 'GET*FDEG 'NUMBER-OF-ARGS 1) 
(PUT 'GET*FDEG 'DEFINED-ON-LINE '75) 
(PUT 'GET*FDEG 'DEFINED-IN-FILE 'ALG/LIFTED.RED) 
(PUT 'GET*FDEG 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'GET*FDEG 'INLINE
      '(LAMBDA (U) ((LAMBDA (X) (COND (X (CAR X)) (T NIL))) (GET U 'FDEGREE)))) 
(DE GET*IFDEG (U)
    ((LAMBDA (X) (COND (X (CDR X)) (T NIL)))
     (ASSOC (LENGTH (CDR U)) (GET (CAR U) 'IFDEGREE)))) 
(PUT 'GET*IFDEG 'NUMBER-OF-ARGS 1) 
(PUT 'GET*IFDEG 'DEFINED-ON-LINE '78) 
(PUT 'GET*IFDEG 'DEFINED-IN-FILE 'ALG/LIFTED.RED) 
(PUT 'GET*IFDEG 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'GET*IFDEG 'INLINE
      '(LAMBDA (U)
         ((LAMBDA (X) (COND (X (CDR X)) (T NIL)))
          (ASSOC (LENGTH (CDR U)) (GET (CAR U) 'IFDEGREE))))) 
(PUT 'FANCY-LEVEL 'DEFINED-ON-LINE '86) 
(PUT 'FANCY-LEVEL 'DEFINED-IN-FILE 'ALG/LIFTED.RED) 
(PUT 'FANCY-LEVEL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DM FANCY-LEVEL (U)
    (LIST 'PROG '(POS TPOS FL W) '(SETQ POS FANCY-POS*)
          '(SETQ TPOS FANCY-TEXPOS) '(SETQ FL FANCY-LINE*)
          (LIST 'SETQ 'W (CADR U))
          '(COND
            ((EQ W 'FAILED) (SETQ FANCY-LINE* FL) (SETQ FANCY-TEXPOS TPOS)
             (SETQ FANCY-POS* POS)))
          '(RETURN W))) 
(DE ADD+VECTOR+TO+LIST (VECTOR1 VECTORLIST) (APPEND VECTORLIST (LIST VECTOR1))) 
(PUT 'ADD+VECTOR+TO+LIST 'NUMBER-OF-ARGS 2) 
(PUT 'ADD+VECTOR+TO+LIST 'DEFINED-ON-LINE '99) 
(PUT 'ADD+VECTOR+TO+LIST 'DEFINED-IN-FILE 'ALG/LIFTED.RED) 
(PUT 'ADD+VECTOR+TO+LIST 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(PUTC 'ADD+VECTOR+TO+LIST 'INLINE
      '(LAMBDA (VECTOR1 VECTORLIST) (APPEND VECTORLIST (LIST VECTOR1)))) 
(PUT 'ADOMAINP 'NUMBER-OF-ARGS 1) 
(PUT 'ADOMAINP 'DEFINED-ON-LINE '104) 
(PUT 'ADOMAINP 'DEFINED-IN-FILE 'ALG/LIFTED.RED) 
(PUT 'ADOMAINP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE ADOMAINP (U)
    (OR (NUMBERP U) (AND (PAIRP U) (IDP (CAR U)) (GET (CAR U) 'DNAME))
        (AND (EQCAR U 'MINUS) (ADOMAINP (CADR U))))) 
(PUT 'ADOMAINPX 'NUMBER-OF-ARGS 2) 
(PUT 'ADOMAINPX 'DEFINED-ON-LINE '109) 
(PUT 'ADOMAINPX 'DEFINED-IN-FILE 'ALG/LIFTED.RED) 
(PUT 'ADOMAINPX 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE ADOMAINPX (U NUM)
    (OR (NULL NUM) (ADOMAINP U)
        (AND (EQUAL NUM 'INFINITY) (MEMBER U '(INFINITY (MINUS INFINITY)))))) 
(PUT 'REVALNUMINTERVAL 'NUMBER-OF-ARGS 2) 
(PUT 'REVALNUMINTERVAL 'DEFINED-ON-LINE '117) 
(PUT 'REVALNUMINTERVAL 'DEFINED-IN-FILE 'ALG/LIFTED.RED) 
(PUT 'REVALNUMINTERVAL 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE REVALNUMINTERVAL (U NUM)
    (PROG (L)
      (COND ((NOT (EQCAR U '*INTERVAL*)) (TYPERR U "interval")))
      (SETQ L (LIST (REVAL1 (CADR U) T) (REVAL1 (CADDR U) T)))
      (COND
       ((AND (ADOMAINPX (CAR L) NUM) (ADOMAINPX (CADR L) NUM)) (RETURN L)))
      (TYPERR U "numeric interval"))) 
(ENDMODULE) 