(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'EDS)) 
(LOAD_PACKAGE (LIST 'SOLVE 'EXCALC 'XIDEAL)) 
(CREATE-PACKAGE
 '(EDS EDSEVAL EDSCFRM SYSTEMS TABLEAUX CONTACT INVOL PROLONG PULLBACK RESTRICT
   TRANSFRM EDSPDE EDSEQUIV EDSUSER EDSNORML EDSSOLVE DISJOIN ELEMENT EDSAUX
   EDSEXPTL EDSPATCH)
 '(CONTRIB EDS)) 
(FLUID '(*EDSVERBOSE *EDSDEBUG *EDSSLOPPY *EDSDISJOINT *GENPOS *RANPOS)) 
(SWITCH (LIST 'EDSVERBOSE)) 
(SWITCH (LIST 'EDSDEBUG)) 
(SWITCH (LIST 'EDSDISJOINT)) 
(SWITCH (LIST 'EDSSLOPPY)) 
(SWITCH (LIST 'GENPOS)) 
(SWITCH (LIST 'RANPOS)) 
(PUT 'GENPOS 'SIMPFG '((T (SETQ *RANPOS NIL)))) 
(PUT 'RANPOS 'SIMPFG '((T (SETQ *GENPOS NIL)))) 
(FLUID '(CFRMCOB* CFRMCRD* CFRMDRV* CFRMRSX* PULLBACK_MAPS DEPENDENCIES)) 
(SETQ CFRMCOB* NIL) 
(SETQ CFRMCRD* NIL) 
(SETQ CFRMDRV* NIL) 
(SETQ CFRMRSX* NIL) 
(SETQ PULLBACK_MAPS (CONS 'LIST (LIST))) 
(SETQ DEPENDENCIES (CONS 'LIST (LIST))) 
(FLAG '(PULLBACK_MAPS DEPENDENCIES) 'SHARE) 
(REMPROP 'INDEXLIST 'VARTYPE) 
(PUT 'EDS_PROPS 'NUMBER-OF-ARGS 1) 
(PUTC 'EDS_PROPS 'INLINE '(LAMBDA (U) (CADDR (CDDR U)))) 
(DE EDS_PROPS (U) (CADDR (CDDR U))) 
(PUT 'EDS_PROPS 'SETQFN '(LAMBDA (U V) (SETCAR (CDDDR (CDR U)) V))) 
(PUT 'SET_EDS_PROPS 'NUMBER-OF-ARGS 2) 
(PUTC 'SET_EDS_PROPS 'INLINE '(LAMBDA (U V) (SETCAR (CDDDR (CDR U)) V))) 
(DE SET_EDS_PROPS (U V) (SETCAR (CDDDR (CDR U)) V)) 
(PUT 'EDS_CFRM 'NUMBER-OF-ARGS 1) 
(PUTC 'EDS_CFRM 'INLINE '(LAMBDA (U) (CADDR (CDR U)))) 
(DE EDS_CFRM (U) (CADDR (CDR U))) 
(PUT 'EDS_CFRM 'SETQFN '(LAMBDA (U V) (SETCAR (CDDDR U) V))) 
(PUT 'SET_EDS_CFRM 'NUMBER-OF-ARGS 2) 
(PUTC 'SET_EDS_CFRM 'INLINE '(LAMBDA (U V) (SETCAR (CDDDR U) V))) 
(DE SET_EDS_CFRM (U V) (SETCAR (CDDDR U) V)) 
(PUT 'EDS_IND 'NUMBER-OF-ARGS 1) 
(PUTC 'EDS_IND 'INLINE '(LAMBDA (U) (CADDR U))) 
(DE EDS_IND (U) (CADDR U)) 
(PUT 'EDS_IND 'SETQFN '(LAMBDA (U V) (SETCAR (CDDR U) V))) 
(PUT 'SET_EDS_IND 'NUMBER-OF-ARGS 2) 
(PUTC 'SET_EDS_IND 'INLINE '(LAMBDA (U V) (SETCAR (CDDR U) V))) 
(DE SET_EDS_IND (U V) (SETCAR (CDDR U) V)) 
(PUT 'EDS_SYS 'NUMBER-OF-ARGS 1) 
(PUTC 'EDS_SYS 'INLINE '(LAMBDA (U) (CADR U))) 
(DE EDS_SYS (U) (CADR U)) 
(PUT 'EDS_SYS 'SETQFN '(LAMBDA (U V) (SETCAR (CDR U) V))) 
(PUT 'SET_EDS_SYS 'NUMBER-OF-ARGS 2) 
(PUTC 'SET_EDS_SYS 'INLINE '(LAMBDA (U V) (SETCAR (CDR U) V))) 
(DE SET_EDS_SYS (U V) (SETCAR (CDR U) V)) 
NIL 
(PUT 'CFRM_RSX 'NUMBER-OF-ARGS 1) 
(PUTC 'CFRM_RSX 'INLINE '(LAMBDA (U) (CADDR (CDDR U)))) 
(DE CFRM_RSX (U) (CADDR (CDDR U))) 
(PUT 'CFRM_RSX 'SETQFN '(LAMBDA (U V) (SETCAR (CDDDR (CDR U)) V))) 
(PUT 'SET_CFRM_RSX 'NUMBER-OF-ARGS 2) 
(PUTC 'SET_CFRM_RSX 'INLINE '(LAMBDA (U V) (SETCAR (CDDDR (CDR U)) V))) 
(DE SET_CFRM_RSX (U V) (SETCAR (CDDDR (CDR U)) V)) 
(PUT 'CFRM_DRV 'NUMBER-OF-ARGS 1) 
(PUTC 'CFRM_DRV 'INLINE '(LAMBDA (U) (CADDR (CDR U)))) 
(DE CFRM_DRV (U) (CADDR (CDR U))) 
(PUT 'CFRM_DRV 'SETQFN '(LAMBDA (U V) (SETCAR (CDDDR U) V))) 
(PUT 'SET_CFRM_DRV 'NUMBER-OF-ARGS 2) 
(PUTC 'SET_CFRM_DRV 'INLINE '(LAMBDA (U V) (SETCAR (CDDDR U) V))) 
(DE SET_CFRM_DRV (U V) (SETCAR (CDDDR U) V)) 
(PUT 'CFRM_CRD 'NUMBER-OF-ARGS 1) 
(PUTC 'CFRM_CRD 'INLINE '(LAMBDA (U) (CADDR U))) 
(DE CFRM_CRD (U) (CADDR U)) 
(PUT 'CFRM_CRD 'SETQFN '(LAMBDA (U V) (SETCAR (CDDR U) V))) 
(PUT 'SET_CFRM_CRD 'NUMBER-OF-ARGS 2) 
(PUTC 'SET_CFRM_CRD 'INLINE '(LAMBDA (U V) (SETCAR (CDDR U) V))) 
(DE SET_CFRM_CRD (U V) (SETCAR (CDDR U) V)) 
(PUT 'CFRM_COB 'NUMBER-OF-ARGS 1) 
(PUTC 'CFRM_COB 'INLINE '(LAMBDA (U) (CADR U))) 
(DE CFRM_COB (U) (CADR U)) 
(PUT 'CFRM_COB 'SETQFN '(LAMBDA (U V) (SETCAR (CDR U) V))) 
(PUT 'SET_CFRM_COB 'NUMBER-OF-ARGS 2) 
(PUTC 'SET_CFRM_COB 'INLINE '(LAMBDA (U V) (SETCAR (CDR U) V))) 
(DE SET_CFRM_COB (U V) (SETCAR (CDR U) V)) 
NIL 
(PUT 'EDSCALL 'DEFINED-ON-LINE '158) 
(PUT 'EDSCALL 'DEFINED-IN-FILE 'EDS/EDS.RED) 
(PUT 'EDSCALL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DM EDSCALL (U)
    (CONS (FUNCTION EDSPROTECT)
          (PROG (X FORALL-RESULT FORALL-ENDPTR)
            (SETQ X (CDR U))
            (COND ((NULL X) (RETURN NIL)))
            (SETQ FORALL-RESULT
                    (SETQ FORALL-ENDPTR
                            (CONS
                             ((LAMBDA (X)
                                (CONS (FUNCTION LIST)
                                      (CONS (MKQUOTE (CAR X)) (CDR X))))
                              (CAR X))
                             NIL)))
           LOOPLABEL
            (SETQ X (CDR X))
            (COND ((NULL X) (RETURN FORALL-RESULT)))
            (RPLACD FORALL-ENDPTR
                    (CONS
                     ((LAMBDA (X)
                        (CONS (FUNCTION LIST)
                              (CONS (MKQUOTE (CAR X)) (CDR X))))
                      (CAR X))
                     NIL))
            (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
            (GO LOOPLABEL)))) 
(ENDMODULE) 