(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'CDE_INIT)) 
(PUT 'CDE_INIT_JETSPACE 'NUMBER-OF-ARGS 1) 
(PUT 'CDE_INIT_JETSPACE 'DEFINED-ON-LINE '39) 
(PUT 'CDE_INIT_JETSPACE 'DEFINED-IN-FILE 'CDE/CDE_INIT.RED) 
(PUT 'CDE_INIT_JETSPACE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE CDE_INIT_JETSPACE (JETSPACE)
    (PROG (JETSPACE_FIRST JETSPACE_SECOND JETSPACE_THIRD)
      (COND
       ((NOT
         (AND (AND (LISTP JETSPACE) (EQUAL (CAR JETSPACE) 'LIST))
              (EQN (LENGTH JETSPACE) 5)))
        (REDERR
         "Error: first argument must be an algebraic list of 4 elements")))
      (SETQ JETSPACE_FIRST
              (PROGN (SETQ JETSPACE (CDR JETSPACE)) (CAR JETSPACE)))
      (COND
       ((NOT
         (AND (AND (LISTP JETSPACE_FIRST) (EQUAL (CAR JETSPACE_FIRST) 'LIST))
              (GREATERP (LENGTH JETSPACE_FIRST) 1)))
        (REDERR "Error: missing list of independent variables")))
      (SETQ INDEP_VAR* (CLEAN_ALGEBRAIC_LIST JETSPACE_FIRST))
      (SETQ JETSPACE_SECOND
              (PROGN (SETQ JETSPACE (CDR JETSPACE)) (CAR JETSPACE)))
      (COND
       ((NOT
         (AND (AND (LISTP JETSPACE_SECOND) (EQUAL (CAR JETSPACE_SECOND) 'LIST))
              (GREATERP (LENGTH JETSPACE_SECOND) 1)))
        (REDERR "Error: missing list of dependent variables")))
      (SETQ DEP_VAR* (CLEAN_ALGEBRAIC_LIST JETSPACE_SECOND))
      (SETQ JETSPACE_THIRD
              (PROGN (SETQ JETSPACE (CDR JETSPACE)) (CAR JETSPACE)))
      (COND
       ((NOT (AND (LISTP JETSPACE_THIRD) (EQUAL (CAR JETSPACE_THIRD) 'LIST)))
        (REDERR "Error: first argument must be an algebraic list of 4 lists")))
      (SETQ ODD_VAR* (CLEAN_ALGEBRAIC_LIST JETSPACE_THIRD))
      (COND
       ((EQN (LENGTH ODD_VAR*) 0)
        (PROGN
         (PRIN2T "No odd variables - working with even variables only,
          as requested.")
         (SETQ ODD_VAR* (LIST (GENSYM)))
         (SETQ PRINCIPAL_ODD* ODD_VAR*)
         (SETQ DE_ODD (LIST 0)))))
      (SETQ TOTAL_ORDER (CADR JETSPACE))
      (COND
       ((NOT (FIXP TOTAL_ORDER))
        (REDERR "Error: missing maximal order of jetspace"))))) 
(PUT 'INIT_EMPTY_EQUATION 'NUMBER-OF-ARGS 0) 
(PUT 'INIT_EMPTY_EQUATION 'DEFINED-ON-LINE '73) 
(PUT 'INIT_EMPTY_EQUATION 'DEFINED-IN-FILE 'CDE/CDE_INIT.RED) 
(PUT 'INIT_EMPTY_EQUATION 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE INIT_EMPTY_EQUATION NIL
    (PROG ()
      (PRIN2T "Warning: even and odd equation missing;")
      (PRIN2T "Working on jetspace as requested ...")
      (SETQ PRINCIPAL_DER*
              (LIST
               (CDE_LIST2ID
                (LIST (CAR DEP_VAR*) '_ TOTAL_ORDER (CAR INDEP_VAR*)))))
      (SETQ DE* (LIST 'LETOP))
      (SETQ PRINCIPAL_ODD*
              (LIST
               (CDE_LIST2ID
                (LIST (CAR ODD_VAR*) '_ TOTAL_ORDER (CAR INDEP_VAR*)))))
      (SETQ DE_ODD* (LIST 'LETOP)))) 
(PUT 'CHECK_EMPTY 'NUMBER-OF-ARGS 1) 
(PUT 'CHECK_EMPTY 'DEFINED-ON-LINE '89) 
(PUT 'CHECK_EMPTY 'DEFINED-IN-FILE 'CDE/CDE_INIT.RED) 
(PUT 'CHECK_EMPTY 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE CHECK_EMPTY (SEQUATION)
    (PROG (TEMPBOOL)
      (SETQ TEMPBOOL 1)
      (PROG (EL)
        (SETQ EL SEQUATION)
       LAB
        (COND ((NULL EL) (RETURN NIL)))
        ((LAMBDA (EL)
           (COND
            ((AND (AND (LISTP EL) (EQUAL (CAR EL) 'LIST))
                  (NOT (NULL (CDR EL))))
             (SETQ TEMPBOOL 0))))
         (CAR EL))
        (SETQ EL (CDR EL))
        (GO LAB))
      (RETURN TEMPBOOL))) 
(PUT 'INIT_EMPTY_EVEN_EQUATION 'NUMBER-OF-ARGS 1) 
(PUT 'INIT_EMPTY_EVEN_EQUATION 'DEFINED-ON-LINE '100) 
(PUT 'INIT_EMPTY_EVEN_EQUATION 'DEFINED-IN-FILE 'CDE/CDE_INIT.RED) 
(PUT 'INIT_EMPTY_EVEN_EQUATION 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE INIT_EMPTY_EVEN_EQUATION (EQUATION_ODD)
    (PROG (EQUATION_ODD_FIRST EQUATION_ODD_SECOND)
      (PRIN2T "Warning: even equation missing.")
      (SETQ PRINCIPAL_DER*
              (LIST
               (CDE_LIST2ID
                (LIST (CAR DEP_VAR*) '_ TOTAL_ORDER (CAR INDEP_VAR*)))))
      (SETQ DE* (LIST 'LETOP))
      (SETQ EQUATION_ODD_FIRST (CAR EQUATION_ODD))
      (COND
       ((NOT
         (AND (LISTP EQUATION_ODD_FIRST)
              (EQUAL (CAR EQUATION_ODD_FIRST) 'LIST)))
        (REDERR
         "Error: principal odd derivatives must be in an algebraic list")))
      (SETQ PRINCIPAL_ODD* (CDR EQUATION_ODD_FIRST))
      (SETQ EQUATION_ODD_SECOND (CADR EQUATION_ODD))
      (COND
       ((NOT
         (AND (LISTP EQUATION_ODD_SECOND)
              (EQUAL (CAR EQUATION_ODD_SECOND) 'LIST)))
        (REDERR "Error: rhs of odd equations must be in an algebraic list")))
      (SETQ DE_ODD* (CDR EQUATION_ODD_SECOND))
      (COND
       ((NEQ (LENGTH DE_ODD*) (LENGTH PRINCIPAL_ODD*))
        (REDERR "Error: odd DE mismatch"))))) 
(PUT 'INIT_EMPTY_ODD_EQUATION 'NUMBER-OF-ARGS 1) 
(PUT 'INIT_EMPTY_ODD_EQUATION 'DEFINED-ON-LINE '123) 
(PUT 'INIT_EMPTY_ODD_EQUATION 'DEFINED-IN-FILE 'CDE/CDE_INIT.RED) 
(PUT 'INIT_EMPTY_ODD_EQUATION 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE INIT_EMPTY_ODD_EQUATION (EQUATION_EVEN)
    (PROG (EQUATION_EVEN_FIRST EQUATION_EVEN_SECOND)
      (SETQ EQUATION_EVEN_FIRST (CAR EQUATION_EVEN))
      (COND
       ((NOT
         (AND (LISTP EQUATION_EVEN_FIRST)
              (EQUAL (CAR EQUATION_EVEN_FIRST) 'LIST)))
        (REDERR
         "Error: even principal derivatives must be in an algebraic list")))
      (SETQ PRINCIPAL_DER* (CDR EQUATION_EVEN_FIRST))
      (SETQ EQUATION_EVEN_SECOND (CADR EQUATION_EVEN))
      (COND
       ((NOT
         (AND (LISTP EQUATION_EVEN_SECOND)
              (EQUAL (CAR EQUATION_EVEN_SECOND) 'LIST)))
        (REDERR "Error: rhs of even equations must be in an algebraic list")))
      (SETQ DE* (CDR EQUATION_EVEN_SECOND))
      (COND
       ((NEQ (LENGTH DE*) (LENGTH PRINCIPAL_DER*))
        (REDERR "Error: even DE mismatch")))
      (PRIN2T "Warning: odd equation missing.")
      (SETQ PRINCIPAL_ODD*
              (LIST
               (CDE_LIST2ID
                (LIST (CAR ODD_VAR*) '_ TOTAL_ORDER (CAR INDEP_VAR*)))))
      (SETQ DE_ODD* (LIST 'LETOP)))) 
(PUT 'INIT_EVEN_ODD_EQUATION 'NUMBER-OF-ARGS 2) 
(PUT 'INIT_EVEN_ODD_EQUATION 'DEFINED-ON-LINE '144) 
(PUT 'INIT_EVEN_ODD_EQUATION 'DEFINED-IN-FILE 'CDE/CDE_INIT.RED) 
(PUT 'INIT_EVEN_ODD_EQUATION 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE INIT_EVEN_ODD_EQUATION (EQUATION_EVEN EQUATION_ODD)
    (PROG (EQUATION_EVEN_FIRST EQUATION_EVEN_SECOND EQUATION_ODD_FIRST
           EQUATION_ODD_SECOND)
      (SETQ EQUATION_EVEN_FIRST (CAR EQUATION_EVEN))
      (COND
       ((NOT
         (AND (LISTP EQUATION_EVEN_FIRST)
              (EQUAL (CAR EQUATION_EVEN_FIRST) 'LIST)))
        (REDERR
         "Error: even principal derivatives must be in an algebraic list")))
      (SETQ PRINCIPAL_DER* (CDR EQUATION_EVEN_FIRST))
      (SETQ EQUATION_EVEN_SECOND (CADR EQUATION_EVEN))
      (COND
       ((NOT
         (AND (LISTP EQUATION_EVEN_SECOND)
              (EQUAL (CAR EQUATION_EVEN_SECOND) 'LIST)))
        (REDERR "Error: rhs of even equations must be in an algebraic list")))
      (SETQ DE* (CDR EQUATION_EVEN_SECOND))
      (COND
       ((NEQ (LENGTH DE*) (LENGTH PRINCIPAL_DER*))
        (REDERR "Error: even DE mismatch")))
      (SETQ EQUATION_ODD_FIRST (CAR EQUATION_ODD))
      (COND
       ((NOT
         (AND (LISTP EQUATION_ODD_FIRST)
              (EQUAL (CAR EQUATION_ODD_FIRST) 'LIST)))
        (REDERR
         "Error: principal odd derivatives must be in an algebraic list")))
      (SETQ PRINCIPAL_ODD* (CDR EQUATION_ODD_FIRST))
      (SETQ EQUATION_ODD_SECOND (CADR EQUATION_ODD))
      (COND
       ((NOT
         (AND (LISTP EQUATION_ODD_SECOND)
              (EQUAL (CAR EQUATION_ODD_SECOND) 'LIST)))
        (REDERR "Error: rhs of odd equations must be in an algebraic list")))
      (SETQ DE_ODD* (CDR EQUATION_ODD_SECOND))
      (COND
       ((NEQ (LENGTH DE_ODD*) (LENGTH PRINCIPAL_ODD*))
        (REDERR "Error: odd DE mismatch"))))) 
(PUT 'CDE_INIT_EQUATION 'NUMBER-OF-ARGS 1) 
(PUT 'CDE_INIT_EQUATION 'DEFINED-ON-LINE '172) 
(PUT 'CDE_INIT_EQUATION 'DEFINED-IN-FILE 'CDE/CDE_INIT.RED) 
(PUT 'CDE_INIT_EQUATION 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE CDE_INIT_EQUATION (EQUATION)
    (PROG (EQUATION_EVEN EQUATION_ODD)
      (COND
       ((NOT
         (AND (AND (LISTP EQUATION) (EQUAL (CAR EQUATION) 'LIST))
              (EQUAL (LENGTH EQUATION) 5)))
        (INIT_EMPTY_EQUATION))
       ((EQN (CHECK_EMPTY (CDR EQUATION)) 1) (INIT_EMPTY_EQUATION))
       (T
        (PROGN
         (SETQ EQUATION_EVEN (LIST (NTH EQUATION 2) (NTH EQUATION 3)))
         (SETQ EQUATION_ODD (LIST (NTH EQUATION 4) (NTH EQUATION 5)))
         (COND
          ((EQN (CHECK_EMPTY EQUATION_EVEN) 1)
           (INIT_EMPTY_EVEN_EQUATION EQUATION_ODD))
          ((EQN (CHECK_EMPTY EQUATION_ODD) 1)
           (INIT_EMPTY_ODD_EQUATION EQUATION_EVEN))
          (T (INIT_EVEN_ODD_EQUATION EQUATION_EVEN EQUATION_ODD))))))
      (SETQ ID_TOT_DER* 'DD))) 
(PUT 'CDE_EXEC_MODULES 'NUMBER-OF-ARGS 0) 
(PUT 'CDE_EXEC_MODULES 'DEFINED-ON-LINE '197) 
(PUT 'CDE_EXEC_MODULES 'DEFINED-IN-FILE 'CDE/CDE_INIT.RED) 
(PUT 'CDE_EXEC_MODULES 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE CDE_EXEC_MODULES NIL
    (PROG ()
      (PRIN2T "Loading cde tools ... ")
     NIL
      (PRIN2T "Building cde data structure in 4 steps:")
      (PRIN2T "1 - Building jetspace ...")
      (CDE_JETSPACE)
      (PRIN2T "2 - Building principal and parametric derivatives ...")
      (CDE_PRINCIPAL_PARAMETRIC_DERIVATIVES TOTAL_ORDER)
      (PRIN2T "3 - Building total derivatives ...")
      (CDE_TOTAL_DERIVATIVES)
      (PRIN2T "4 - Building differential consequences in 3 steps:")
      (CDE_DIFFERENTIAL_CONSEQUENCES)
      (PRIN2T "5 - Defining C-differential operators ...")
      (CDE_CDIFF)
      (PRIN2T "6 - Defining superfunctions ...")
      (CDE_SUPERFUN)
      (PRIN2T "7 - Defining supervectorfields ...")
      (CDE_VECTORFIELD)
      (PRIN2T "8 - Defining operations on C-differential operators ...")
      (CDE_CDCALC)
      (PRIN2T "9 - Defining calculus of variations ...")
      (CDE_VARCALC))) 
(PUT 'CDE 'NUMBER-OF-ARGS 2) 
(PUT 'CDE 'DEFINED-ON-LINE '222) 
(PUT 'CDE 'DEFINED-IN-FILE 'CDE/CDE_INIT.RED) 
(PUT 'CDE 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE CDE (JETSPACE EQUATION)
    (PROG ()
      (CDE_INIT_JETSPACE JETSPACE)
      (CDE_INIT_EQUATION EQUATION)
      (CDE_EXEC_MODULES))) 
(FLAG '(CDE) 'OPFN) 
(PUT 'SAVE_CDE_STATE 'NUMBER-OF-ARGS 1) 
(PUT 'SAVE_CDE_STATE 'DEFINED-ON-LINE '232) 
(PUT 'SAVE_CDE_STATE 'DEFINED-IN-FILE 'CDE/CDE_INIT.RED) 
(PUT 'SAVE_CDE_STATE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SAVE_CDE_STATE (STATEFILENAME)
    (PROG (N_ALL_PRINCIPAL_DER N_ALL_PARAMETRIC_DER N_ALL_PRINCIPAL_ODD
           N_ALL_PARAMETRIC_ODD)
      (COND
       ((NOT (STRINGP STATEFILENAME))
        (REDERR "Error: save_cde_state parameter must be a string!")))
      (OFF (LIST 'ECHO))
      (OFF (LIST 'NAT))
      (OUT (LIST (PROGN STATEFILENAME)))
      (PRIN2T "% CDE state file -- use for debugging purposes")
      (PRIN2T "% even equation:")
      (PRIN2 "principal_der!*:=")
      (PRIN2T PRINCIPAL_DER*)
      (PRIN2 "de!*:=")
      (PRIN2T DE*)
      (PRIN2T "% odd equation")
      (PRIN2 "principal_odd!*:=")
      (PRIN2T PRINCIPAL_ODD*)
      (PRIN2 "de_odd!*")
      (PRIN2T DE_ODD*)
      (PRIN2T "% Settings:")
      (PRIN2 "indep_var!*:=")
      (PRIN2T INDEP_VAR*)
      (PRIN2 "dep_var!*:=")
      (PRIN2T DEP_VAR*)
      (PRIN2 "odd_var!*:=")
      (PRIN2T ODD_VAR*)
      (PRIN2 "deg_indep_var!*:=")
      (PRIN2T DEG_INDEP_VAR*)
      (PRIN2 "deg_dep_var!*:=")
      (PRIN2T DEG_DEP_VAR*)
      (PRIN2 "deg_odd_var!*:=")
      (PRIN2T DEG_ODD_VAR*)
      (PRIN2 "total_order:=")
      (PRIN2T TOTAL_ORDER)
      (PRIN2 "id_tot_der!*:=")
      (PRIN2T ID_TOT_DER*)
      (PRIN2T "% Here starts the output of computations of the program.")
      (PRIN2T "% number of independent variables:")
      (PRIN2 "n_indep_var:=")
      (PRIN2T N_INDEP_VAR)
      (PRIN2T "% all multiindexes in table format:")
      (PRIN2 "all_mind_table!*:=")
      (PRIN2T ALL_MIND_TABLE*)
      (PRIN2T "% all even derivatives in multiindex notation:")
      (PRIN2 "all_der_mind!*:=")
      (PRIN2T ALL_DER_MIND*)
      (PRIN2T "% all odd derivatives in multiindex notation:")
      (PRIN2 "all_odd_mind!*:=")
      (PRIN2T ALL_ODD_MIND*)
      (PRIN2T "% all even derivatives in identifier notation:")
      (PRIN2 "all_der_id!*:=")
      (PRIN2T ALL_DER_ID*)
      (PRIN2T "% all odd derivatives in identifier notation:")
      (PRIN2 "all_odd_id!*:=")
      (PRIN2T ALL_ODD_ID*)
      (PRIN2T "% number of all ext symbols:")
      (PRIN2 "n_all_ext:=")
      (PRIN2T N_ALL_EXT)
      (PRIN2T "% alist of even derivative coordinates:")
      (PRIN2 "i2m_jetspace!*:=")
      (PRIN2T I2M_JETSPACE*)
      (PRIN2T "% alist of odd derivative coordinates:")
      (PRIN2 "i2m_jetspace_odd!*:=")
      (PRIN2T I2M_JETSPACE_ODD*)
      (PRIN2T "% alist of even derivative coordinates - order of derivative:")
      (PRIN2 "i2o_jetspace!*:=")
      (PRIN2T I2O_JETSPACE*)
      (PRIN2T "% alist of odd derivative coordinates - order of derivative:")
      (PRIN2 "i2o_jetspace_odd!*:=")
      (PRIN2T I2O_JETSPACE_ODD*)
      (PRIN2T "% list of even principal derivatives:")
      (PRIN2 "all_principal_der!*:=")
      (PRIN2T ALL_PRINCIPAL_DER*)
      (PRIN2T "% list of even parametric derivatives:")
      (PRIN2 "all_parametric_der!*:=")
      (PRIN2T ALL_PARAMETRIC_DER*)
      (PRIN2T "% list of odd principal derivatives:")
      (PRIN2 "all_principal_odd!*:=")
      (PRIN2T ALL_PRINCIPAL_ODD*)
      (PROG (EL)
        (SETQ EL ALL_PRINCIPAL_ODD*)
       LAB
        (COND ((NULL EL) (RETURN NIL)))
        ((LAMBDA (EL)
           (PROGN
            (PRIN2 EL)
            (PRIN2 " = ")
            (PRIN2T (*A2K (REPLACE_ODDEXT EL)))))
         (CAR EL))
        (SETQ EL (CDR EL))
        (GO LAB))
      (PRIN2T "% list of odd parametric derivatives:")
      (PRIN2 "all_parametric_odd!*:=")
      (PRIN2T ALL_PARAMETRIC_ODD*)
      (PROG (EL)
        (SETQ EL ALL_PARAMETRIC_ODD*)
       LAB
        (COND ((NULL EL) (RETURN NIL)))
        ((LAMBDA (EL)
           (PROGN
            (PRIN2 EL)
            (PRIN2 " = ")
            (PRIN2T (*A2K (REPLACE_ODDEXT EL)))))
         (CAR EL))
        (SETQ EL (CDR EL))
        (GO LAB))
      (PRIN2T "% number of ext principal derivatives:")
      (PRIN2 "n_all_principal_ext:=")
      (PRIN2T N_ALL_PRINCIPAL_EXT)
      (PRIN2T "% number of ext parametric derivatives:")
      (PRIN2 "n_all_parametric_ext:=")
      (PRIN2T N_ALL_PARAMETRIC_EXT)
      (PRIN2T "% set of identifiers for total derivatives:")
      (PRIN2 "tot_der!*:=")
      (PRIN2T TOT_DER*)
      (PRIN2T "% set up the auxiliary variable `letop'")
      (PRIN2 "for each el in indep_var do depend letop,el;")
      (PRIN2T "% Characterization of primary differential consequences:")
      (PRIN2 "primary_diffcon_der_tot!*:=")
      (PRIN2T PRIMARY_DIFFCON_DER_TOT*)
      (PRIN2 "primary_diffcon_odd_tot!*:=")
      (PRIN2T PRIMARY_DIFFCON_ODD_TOT*)
      (PRIN2 "primary_diffcon_der!*:=")
      (PRIN2T PRIMARY_DIFFCON_DER*)
      (PRIN2 "primary_diffcon_odd!*:=")
      (PRIN2T PRIMARY_DIFFCON_ODD*)
      (PRIN2T "% Alists of differential conseq. needed in total derivatives:")
      (PRIN2 "diffcon_der!*:=")
      (PRIN2T DIFFCON_DER*)
      (PRIN2 "diffcon_odd!*:=")
      (PRIN2T DIFFCON_ODD*)
      (PRIN2T "% Principal derivatives computed:")
      (PRIN2 "diffcon_comp_der!*:=")
      (PRIN2T DIFFCON_COMP_DER*)
      (PRIN2 "diffcon_comp_odd!*:=")
      (PRIN2T DIFFCON_COMP_ODD*)
      (PRIN2 "diffcon_comp_ext!*:=")
      (PRIN2T DIFFCON_COMP_EXT*)
      (PRIN2T
       "% Alists of principal derivatives in terms of parametric expr.:")
      (PRIN2 "diffcon_param_der!*:=")
      (PRIN2T DIFFCON_PARAM_DER*)
      (PRIN2 "diffcon_param_ext!*:=")
      (PRIN2T DIFFCON_PARAM_EXT*)
      (PRIN2T "% Coefficients of total derivatives:")
      (SETQ N_ALL_PARAMETRIC_DER (LENGTH ALL_PARAMETRIC_DER*))
      (SETQ N_ALL_PRINCIPAL_DER (LENGTH ALL_PRINCIPAL_DER*))
      (SETQ N_ALL_PARAMETRIC_ODD (LENGTH ALL_PARAMETRIC_ODD*))
      (SETQ N_ALL_PRINCIPAL_ODD (LENGTH ALL_PRINCIPAL_ODD*))
      (PROG (I)
        (SETQ I 1)
       LAB
        (COND ((MINUSP (DIFFERENCE N_INDEP_VAR I)) (RETURN NIL)))
        (PROGN
         (PROG (J)
           (SETQ J 1)
          LAB
           (COND ((MINUSP (DIFFERENCE N_INDEP_VAR J)) (RETURN NIL)))
           (PROGN
            (PRIN2 "% component of ")
            (PRIN2 (NTH TOT_DER* I))
            (PRIN2 " w.r.t. ")
            (PRIN2T (NTH INDEP_VAR* J))
            (PRIN2 (NTH TOT_DER* I))
            (PRIN2 "(")
            (PRIN2 0)
            (PRIN2 ",")
            (PRIN2 J)
            (PRIN2 "):=")
            (PRIN2T (REVAL1 (LIST (NTH TOT_DER* I) (NTH INDEP_VAR* J)) NIL))
            NIL)
           (SETQ J (PLUS2 J 1))
           (GO LAB))
         (PROG (J)
           (SETQ J 1)
          LAB
           (COND ((MINUSP (DIFFERENCE N_ALL_PARAMETRIC_DER J)) (RETURN NIL)))
           (PROGN
            (PRIN2 "% component of ")
            (PRIN2 (NTH TOT_DER* I))
            (PRIN2 " w.r.t. ")
            (PRIN2T (NTH ALL_PARAMETRIC_DER* J))
            (PRIN2 (NTH TOT_DER* I))
            (PRIN2 "(")
            (PRIN2 0)
            (PRIN2 ",")
            (PRIN2 (PLUS N_INDEP_VAR J))
            (PRIN2 "):=")
            (PRIN2T
             (REVAL1 (LIST (NTH TOT_DER* I) (NTH ALL_PARAMETRIC_DER* J)) NIL))
            NIL)
           (SETQ J (PLUS2 J 1))
           (GO LAB))
         (PROG (J)
           (SETQ J 1)
          LAB
           (COND ((MINUSP (DIFFERENCE N_ALL_PRINCIPAL_DER J)) (RETURN NIL)))
           (PROGN
            (PRIN2 "% component of ")
            (PRIN2 (NTH TOT_DER* I))
            (PRIN2 " w.r.t. ")
            (PRIN2T (NTH ALL_PRINCIPAL_DER* J))
            (PRIN2 (NTH TOT_DER* I))
            (PRIN2 "(")
            (PRIN2 0)
            (PRIN2 ",")
            (PRIN2 (PLUS N_INDEP_VAR N_ALL_PARAMETRIC_DER J))
            (PRIN2 "):=")
            (PRIN2T
             (REVAL1 (LIST (NTH TOT_DER* I) (NTH ALL_PRINCIPAL_DER* J)) NIL))
            NIL)
           (SETQ J (PLUS2 J 1))
           (GO LAB))
         (PROG (J)
           (SETQ J 1)
          LAB
           (COND ((MINUSP (DIFFERENCE N_ALL_PARAMETRIC_ODD J)) (RETURN NIL)))
           (PROGN
            (PRIN2 "% component of ")
            (PRIN2 (NTH TOT_DER* I))
            (PRIN2 " w.r.t. ")
            (PRIN2T (NTH ALL_PARAMETRIC_ODD* J))
            (PRIN2 (NTH TOT_DER* I))
            (PRIN2 "(")
            (PRIN2 1)
            (PRIN2 ",")
            (PRIN2 J)
            (PRIN2 "):=")
            (PRIN2T
             (REVAL1
              (LIST (NTH TOT_DER* I)
                    (REPLACE_ODDEXT (NTH ALL_PARAMETRIC_ODD* J)))
              NIL))
            NIL)
           (SETQ J (PLUS2 J 1))
           (GO LAB))
         (PROG (J)
           (SETQ J 1)
          LAB
           (COND ((MINUSP (DIFFERENCE N_ALL_PRINCIPAL_ODD J)) (RETURN NIL)))
           (PROGN
            (PRIN2 "% component of ")
            (PRIN2 (NTH TOT_DER* I))
            (PRIN2 " w.r.t. ")
            (PRIN2T (NTH ALL_PRINCIPAL_ODD* J))
            (PRIN2 (NTH TOT_DER* I))
            (PRIN2 "(")
            (PRIN2 1)
            (PRIN2 ",")
            (PRIN2 (PLUS N_ALL_PARAMETRIC_ODD J))
            (PRIN2 "):=")
            (PRIN2T
             (REVAL1
              (LIST (NTH TOT_DER* I)
                    (REPLACE_ODDEXT (NTH ALL_PRINCIPAL_ODD* J)))
              NIL))
            NIL)
           (SETQ J (PLUS2 J 1))
           (GO LAB))
         NIL)
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (PRIN2T ";end;")
      (SHUT (LIST (PROGN STATEFILENAME)))
      (ON (LIST 'ECHO))
      (ON (LIST 'NAT)))) 
(FLAG '(SAVE_CDE_STATE) 'OPFN) 
(ENDMODULE) 