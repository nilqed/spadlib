(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'POLYEXNS)) 
(SWITCH (LIST 'DISTRIBUTE)) 
(PUT 'FIX_OR_STR 'NUMBER-OF-ARGS 1) 
(PUT 'FIX_OR_STR 'DEFINED-ON-LINE '32) 
(PUT 'FIX_OR_STR 'DEFINED-IN-FILE 'ASSIST/POLYEXNS.RED) 
(PUT 'FIX_OR_STR 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FIX_OR_STR (U) (OR (FIXP U) (STRINGP U))) 
(PUT 'RGCDNL 'NUMBER-OF-ARGS 1) 
(PUT 'RGCDNL 'DEFINED-ON-LINE '35) 
(PUT 'RGCDNL 'DEFINED-IN-FILE 'ASSIST/POLYEXNS.RED) 
(PUT 'RGCDNL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RGCDNL (U)
    ((LAMBDA (X)
       (COND ((EQUAL (LENGTH X) 1) (ABS (CAR X))) (T (EVAL (EXPAND X 'GCDN)))))
     (CDR (REVLIS (CAR U))))) 
(PUT 'GCDNL 'PSOPFN 'RGCDNL) 
(PUT 'ALG_TO_SYMB 'NUMBER-OF-ARGS 1) 
(PUT 'ALG_TO_SYMB 'DEFINED-ON-LINE '42) 
(PUT 'ALG_TO_SYMB 'DEFINED-IN-FILE 'ASSIST/POLYEXNS.RED) 
(PUT 'ALG_TO_SYMB 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE ALG_TO_SYMB (U)
    (COND ((NULL U) NIL) ((ATOM U) U) ((NEQ (CAR U) 'LIST) (REVAL1 U T))
          ((EQ (CAR U) 'LIST)
           (PROG (I FORALL-RESULT FORALL-ENDPTR)
             (SETQ I (CDR U))
             (COND ((NULL I) (RETURN NIL)))
             (SETQ FORALL-RESULT
                     (SETQ FORALL-ENDPTR
                             (CONS ((LAMBDA (I) (ALG_TO_SYMB I)) (CAR I))
                                   NIL)))
            LOOPLABEL
             (SETQ I (CDR I))
             (COND ((NULL I) (RETURN FORALL-RESULT)))
             (RPLACD FORALL-ENDPTR
                     (CONS ((LAMBDA (I) (ALG_TO_SYMB I)) (CAR I)) NIL))
             (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
             (GO LOOPLABEL))))) 
(PUT 'SYMB_TO_ALG 'NUMBER-OF-ARGS 1) 
(PUT 'SYMB_TO_ALG 'DEFINED-ON-LINE '54) 
(PUT 'SYMB_TO_ALG 'DEFINED-IN-FILE 'ASSIST/POLYEXNS.RED) 
(PUT 'SYMB_TO_ALG 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SYMB_TO_ALG (U)
    (COND ((NULL U) (LIST 'LIST)) ((FIX_OR_STR U) U)
          ((ATOM U) (MK*SQ (SIMP* U)))
          ((AND (LISTP U) (OR (GETD (CAR U)) (GET (CAR U) 'SIMPFN)))
           (MK*SQ (SIMP* U)))
          ((ATOMLIS U)
           (CONS 'LIST
                 (PROG (I FORALL-RESULT FORALL-ENDPTR)
                   (SETQ I U)
                   (COND ((NULL I) (RETURN NIL)))
                   (SETQ FORALL-RESULT
                           (SETQ FORALL-ENDPTR
                                   (CONS
                                    ((LAMBDA (I)
                                       (COND ((NULL I) (LIST 'LIST))
                                             ((FIX_OR_STR I) I)
                                             (T (MK*SQ (SIMP* I)))))
                                     (CAR I))
                                    NIL)))
                  LOOPLABEL
                   (SETQ I (CDR I))
                   (COND ((NULL I) (RETURN FORALL-RESULT)))
                   (RPLACD FORALL-ENDPTR
                           (CONS
                            ((LAMBDA (I)
                               (COND ((NULL I) (LIST 'LIST)) ((FIX_OR_STR I) I)
                                     (T (MK*SQ (SIMP* I)))))
                             (CAR I))
                            NIL))
                   (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                   (GO LOOPLABEL))))
          (T
           (CONS 'LIST
                 (PROG (I FORALL-RESULT FORALL-ENDPTR)
                   (SETQ I U)
                   (COND ((NULL I) (RETURN NIL)))
                   (SETQ FORALL-RESULT
                           (SETQ FORALL-ENDPTR
                                   (CONS ((LAMBDA (I) (SYMB_TO_ALG I)) (CAR I))
                                         NIL)))
                  LOOPLABEL
                   (SETQ I (CDR I))
                   (COND ((NULL I) (RETURN FORALL-RESULT)))
                   (RPLACD FORALL-ENDPTR
                           (CONS ((LAMBDA (I) (SYMB_TO_ALG I)) (CAR I)) NIL))
                   (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                   (GO LOOPLABEL)))))) 
(PUT 'MKDEPTH_ONE 'NUMBER-OF-ARGS 1) 
(FLAG '(MKDEPTH_ONE) 'OPFN) 
(PUT 'MKDEPTH_ONE 'DEFINED-ON-LINE '69) 
(PUT 'MKDEPTH_ONE 'DEFINED-IN-FILE 'ASSIST/POLYEXNS.RED) 
(PUT 'MKDEPTH_ONE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MKDEPTH_ONE (X) (SYMB_TO_ALG (FLATTENS1 (ALG_TO_SYMB (AEVAL X))))) 
(PUT 'ADDFD 'NUMBER-OF-ARGS 2) 
(PUT 'ADDFD 'DEFINED-ON-LINE '77) 
(PUT 'ADDFD 'DEFINED-IN-FILE 'ASSIST/POLYEXNS.RED) 
(PUT 'ADDFD 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE ADDFD (U V)
    (COND ((NULL U) V) ((NULL V) U) ((OR (ATOM U) (ATOM (CAR U))) (ADDD U V))
          ((OR (ATOM V) (ATOM (CAR V))) (ADDD V U))
          ((ORDP (CAAR U) (CAAR V)) (CONS (CAR U) (ADDFD (CDR U) V)))
          (T (CONS (CAR V) (ADDFD U (CDR V)))))) 
(PUT 'DISTRIBUTE 'NUMBER-OF-ARGS 1) 
(PUT 'DISTRIBUTE 'DEFINED-ON-LINE '89) 
(PUT 'DISTRIBUTE 'DEFINED-IN-FILE 'ASSIST/POLYEXNS.RED) 
(PUT 'DISTRIBUTE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE DISTRIBUTE (U)
    (PROG (S *RATIONAL)
      (SETQ *RATIONAL (PROGN (SETQ ALGLIST* (CONS NIL NIL)) T))
      (SETQ S (SIMP* U))
      (RETURN (MK*SQ (CONS (DISTRI_POL (CAR S)) (CDR S)))))) 
(FLAG '(DISTRIBUTE) 'OPFN) 
(PUT 'DISTRI_POL 'NUMBER-OF-ARGS 1) 
(PUT 'DISTRI_POL 'DEFINED-ON-LINE '99) 
(PUT 'DISTRI_POL 'DEFINED-IN-FILE 'ASSIST/POLYEXNS.RED) 
(PUT 'DISTRI_POL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE DISTRI_POL (U)
    (COND ((NULL U) NIL) ((ATOM U) U)
          ((CDR U) (ADDFD (DISTRI_POL (LIST (CAR U))) (DISTRI_POL (CDR U))))
          (T
           (PROG (X Y)
             (SETQ X 1)
             (SETQ Y U)
             (PROG ()
              WHILELABEL
               (COND ((NOT (AND (NOT (ATOM Y)) (NULL (CDR Y)))) (RETURN NIL)))
               (PROGN
                (SETQ X
                        ((LAMBDA (G543)
                           (COND (*PHYSOP-LOADED (PHYSOP-MULTF X G543))
                                 (T (POLY-MULTF X G543))))
                         (LIST (CONS (CAAR Y) 1))))
                (SETQ Y (CDAR Y)))
               (GO WHILELABEL))
             (COND
              ((ATOM Y)
               (RETURN
                (COND (*PHYSOP-LOADED (PHYSOP-MULTF X Y))
                      (T (POLY-MULTF X Y)))))
              (T
               (RETURN
                (ADDFD
                 (DISTRI_POL
                  ((LAMBDA (G545)
                     (COND (*PHYSOP-LOADED (PHYSOP-MULTF X G545))
                           (T (POLY-MULTF X G545))))
                   (DISTRI_POL (LIST (CAR Y)))))
                 (DISTRI_POL
                  ((LAMBDA (G547)
                     (COND (*PHYSOP-LOADED (PHYSOP-MULTF X G547))
                           (T (POLY-MULTF X G547))))
                   (DISTRI_POL (CDR Y)))))))))))) 
(PUT 'LEADTERM 'NUMBER-OF-ARGS 1) 
(PUT 'LEADTERM 'DEFINED-ON-LINE '119) 
(PUT 'LEADTERM 'DEFINED-IN-FILE 'ASSIST/POLYEXNS.RED) 
(PUT 'LEADTERM 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE LEADTERM (U)
    (PROGN
     (SETQ U (SIMP* U))
     (COND (*DISTRIBUTE (SETQ U (CONS (DISTRI_POL (CAR U)) (CDR U)))) (T U))
     (COND ((OR (ATOM U) (ATOM (CAR U))) (MK*SQ U))
           (T (MK*SQ (CONS (LIST (CAR (CAR U))) (CDR U))))))) 
(FLAG '(LEADTERM REDEXPR) 'OPFN) 
(PUT 'REDEXPR 'NUMBER-OF-ARGS 1) 
(PUT 'REDEXPR 'DEFINED-ON-LINE '126) 
(PUT 'REDEXPR 'DEFINED-IN-FILE 'ASSIST/POLYEXNS.RED) 
(PUT 'REDEXPR 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REDEXPR (U)
    (PROGN
     (SETQ U (SIMP* U))
     (COND (*DISTRIBUTE (SETQ U (CONS (DISTRI_POL (CAR U)) (CDR U)))) (T U))
     (COND ((OR (ATOM U) (ATOM (CAR U))) (MK*SQ (CONS NIL 1)))
           (T (MK*SQ (CONS (CDR (CAR U)) (CDR U))))))) 
(PUT 'LIST_OF_MONOM 'NUMBER-OF-ARGS 1) 
(PUT 'LIST_OF_MONOM 'DEFINED-ON-LINE '133) 
(PUT 'LIST_OF_MONOM 'DEFINED-IN-FILE 'ASSIST/POLYEXNS.RED) 
(PUT 'LIST_OF_MONOM 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE LIST_OF_MONOM (U)
    (PROG (EXP LMON MON)
      (SETQ EXP U)
     L
      (COND ((NULL EXP) (RETURN LMON))
            ((OR (ATOM EXP) (ATOM (CAR EXP))) (RETURN (CONS EXP LMON))))
      (SETQ MON (COND ((ATOM EXP) EXP) (T (CAR EXP))))
      (SETQ LMON (CONS (LIST MON) LMON))
      (SETQ EXP (CDR EXP))
      (GO L))) 
(PUT 'MONOM 'NUMBER-OF-ARGS 1) 
(PUT 'MONOM 'DEFINED-ON-LINE '149) 
(PUT 'MONOM 'DEFINED-IN-FILE 'ASSIST/POLYEXNS.RED) 
(PUT 'MONOM 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MONOM (Y)
    (COND (*RATIONAL (REDERR "MONOM does only work on rings of integers"))
          (T
           (PROG (X)
             (SETQ X (CAR (SIMP* Y)))
             (SETQ X (DISTRI_POL X))
             (SETQ X (REVERSIP (LIST_OF_MONOM X)))
             (SETQ X
                     (PROG (M FORALL-RESULT FORALL-ENDPTR)
                       (SETQ M X)
                       (COND ((NULL M) (RETURN NIL)))
                       (SETQ FORALL-RESULT
                               (SETQ FORALL-ENDPTR
                                       (CONS
                                        ((LAMBDA (M) (MK*SQ (CONS M 1)))
                                         (CAR M))
                                        NIL)))
                      LOOPLABEL
                       (SETQ M (CDR M))
                       (COND ((NULL M) (RETURN FORALL-RESULT)))
                       (RPLACD FORALL-ENDPTR
                               (CONS ((LAMBDA (M) (MK*SQ (CONS M 1))) (CAR M))
                                     NIL))
                       (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                       (GO LOOPLABEL)))
             (RETURN (CONS 'LIST X)))))) 
(FLAG '(MONOM) 'OPFN) 
(PUT 'COEFF_MON 'NUMBER-OF-ARGS 1) 
(PUT 'COEFF_MON 'DEFINED-ON-LINE '161) 
(PUT 'COEFF_MON 'DEFINED-IN-FILE 'ASSIST/POLYEXNS.RED) 
(PUT 'COEFF_MON 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE COEFF_MON (U)
    (COND ((ATOM U) U)
          (T
           (COEFF_MON ((LAMBDA (X) (COND ((ATOM X) X) (T (CAR X)))) (CDR U)))))) 
(PUT 'LIST_COEFF_POL 'NUMBER-OF-ARGS 1) 
(FLAG '(LIST_COEFF_POL) 'OPFN) 
(PUT 'LIST_COEFF_POL 'DEFINED-ON-LINE '166) 
(PUT 'LIST_COEFF_POL 'DEFINED-IN-FILE 'ASSIST/POLYEXNS.RED) 
(PUT 'LIST_COEFF_POL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE LIST_COEFF_POL (U)
    (PROG (I FORALL-RESULT FORALL-ENDPTR)
      (SETQ I (GETRLIST (AEVAL (LIST 'MONOM U))))
      (COND ((NULL I) (RETURN (MAKELIST NIL))))
      (SETQ FORALL-RESULT
              (SETQ FORALL-ENDPTR
                      (CONS
                       ((LAMBDA (I)
                          (AEVAL
                           (COEFF_MON
                            (COND ((ATOM I) I) (T (CAR (CAR (SIMP* I))))))))
                        (CAR I))
                       NIL)))
     LOOPLABEL
      (SETQ I (CDR I))
      (COND ((NULL I) (RETURN (CONS 'LIST FORALL-RESULT))))
      (RPLACD FORALL-ENDPTR
              (CONS
               ((LAMBDA (I)
                  (AEVAL
                   (COEFF_MON (COND ((ATOM I) I) (T (CAR (CAR (SIMP* I))))))))
                (CAR I))
               NIL))
      (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
      (GO LOOPLABEL))) 
(PUT 'NORM_MON 'NUMBER-OF-ARGS 1) 
(FLAG '(NORM_MON) 'OPFN) 
(PUT 'NORM_MON 'DEFINED-ON-LINE '172) 
(PUT 'NORM_MON 'DEFINED-IN-FILE 'ASSIST/POLYEXNS.RED) 
(PUT 'NORM_MON 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE NORM_MON (U)
    (COND ((EVALEQUAL (AEVAL U) 0) 0)
          (T
           (AEVAL
            (LIST 'QUOTIENT U (COEFF_MON (CAR (CAR (SIMP* (AEVAL U)))))))))) 
(PUT 'NORM_POL 'NUMBER-OF-ARGS 1) 
(FLAG '(NORM_POL) 'OPFN) 
(PUT 'NORM_POL 'DEFINED-ON-LINE '176) 
(PUT 'NORM_POL 'DEFINED-IN-FILE 'ASSIST/POLYEXNS.RED) 
(PUT 'NORM_POL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE NORM_POL (U)
    (COND ((EVALEQUAL (AEVAL U) 0) 0)
          (T
           (PROG (UU SIGN)
             (SETQ UU (AEVAL (LIST 'LIST_COEFF_POL U)))
             (SETQ SIGN
                     (AEVAL
                      (LIST 'QUOTIENT (LIST 'FIRST UU)
                            (LIST 'ABS (LIST 'FIRST UU)))))
             (COND
              ((EVALEQUAL (AEVAL (LIST 'GCDNL UU))
                          (AEVAL (LIST 'ABS (LIST 'FIRST UU))))
               (RETURN (SETQ U (AEVAL (LIST 'QUOTIENT U (LIST 'FIRST UU))))))
              (T (RETURN (AEVAL (LIST 'TIMES SIGN U))))))))) 
(PUT 'POL_ORDP 'NUMBER-OF-ARGS 2) 
(PUT 'POL_ORDP 'DEFINED-ON-LINE '187) 
(PUT 'POL_ORDP 'DEFINED-IN-FILE 'ASSIST/POLYEXNS.RED) 
(PUT 'POL_ORDP 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE POL_ORDP (U V)
    ((LAMBDA (X Y) (OR (LESSP X Y) (AND (EQUAL X Y) (ORDP U V)))) (LENGTH U)
     (LENGTH V))) 
(FLAG '(POL_ORDP) 'OPFN) 
(PUT '&DPOL 'NUMBER-OF-ARGS 1) 
(PUT '&DPOL 'DEFINED-ON-LINE '194) 
(PUT '&DPOL 'DEFINED-IN-FILE 'ASSIST/POLYEXNS.RED) 
(PUT '&DPOL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE &DPOL (U)
    (COND ((NEQ (LENGTH U) 2) (REDERR "divpol must have two arguments"))
          (T
           (PROG (POLN POLD AA RATSAV)
             (COND (*FACTOR (OFF (LIST 'FACTOR))))
             (SETQ POLN (SIMP* (CAR U)))
             (SETQ POLD (SIMP* (CADR U)))
             (COND
              ((OR (NEQ (CDR POLN) 1) (NEQ (CDR POLD) 1))
               (REDERR " arguments must be polynomials")))
             (SETQ POLN (CAR POLN))
             (SETQ POLD (CAR POLD))
             (COND
              ((OR (NEQ (CDAR POLN) 1) (NEQ (CDAR POLN) (CDAR POLD)))
               (PROGN (SETQ RATSAV *RATIONAL) (ON (LIST 'RATIONAL)))))
             (SETQ AA (QREMF POLN POLD))
             (SETQ AA
                     (MKSQ
                      (LIST 'LIST (PREPSQ* (CONS (CAR AA) 1))
                            (PREPSQ* (CONS (CDR AA) 1)))
                      1))
             (COND ((NOT RATSAV) (OFF (LIST 'RATIONAL))))
             (RETURN AA))))) 
(PUT 'DIVPOL 'SIMPFN '&DPOL) 
(PUT 'LOWESTDEG 'NUMBER-OF-ARGS 2) 
(PUT 'LOWESTDEG 'DEFINED-ON-LINE '216) 
(PUT 'LOWESTDEG 'DEFINED-IN-FILE 'ASSIST/POLYEXNS.RED) 
(PUT 'LOWESTDEG 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE LOWESTDEG (U V)
    (PROG (X Y UU VV)
      (SETQ UU (SIMP* U))
      (COND ((OR (ATOM UU) (ATOM (CAR UU))) (RETURN 0)))
      (SETQ UU (*Q2F UU))
      (SETQ VV (ERASE_POL_CST UU))
      (COND ((NEQ VV UU) (RETURN 0)))
      (SETQ VV (*A2K V))
      (SETQ X (SETKORDER (LIST V)))
      (SETQ Y (REORDER UU))
      (SETKORDER X)
      (SETQ Y (REVERSE Y))
      (SETQ UU (CAAAR Y))
      (COND
       ((NOT (ATOM UU))
        (COND ((EQ (CAR UU) 'EXPT) (REDERR "exponents must be integers")))))
      (COND ((NEQ UU VV) (RETURN 0)) (T (RETURN (CDAAR Y)))))) 
(FLAG '(LOWESTDEG) 'OPFN) 
(PUT 'ERASE_POL_CST 'NUMBER-OF-ARGS 1) 
(PUT 'ERASE_POL_CST 'DEFINED-ON-LINE '237) 
(PUT 'ERASE_POL_CST 'DEFINED-IN-FILE 'ASSIST/POLYEXNS.RED) 
(PUT 'ERASE_POL_CST 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE ERASE_POL_CST (U)
    (COND ((OR (NULL U) (NUMBERP U)) NIL)
          (T (CONS (CAR U) (ERASE_POL_CST (CDR U)))))) 
(FLAG '(SPLITTERMS) 'OPFN) 
(PUT 'SPLITTERMS 'NUMBER-OF-ARGS 1) 
(PUT 'SPLITTERMS 'DEFINED-ON-LINE '249) 
(PUT 'SPLITTERMS 'DEFINED-IN-FILE 'ASSIST/POLYEXNS.RED) 
(PUT 'SPLITTERMS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SPLITTERMS (U)
    (PROG (A B)
      (COND
       ((AND (FIXP U) (EVALGREATERP 0 U))
        (RETURN
         (CONS 'LIST
               (CONS (CONS 'LIST (CONS 0 NIL))
                     (CONS (CONS 'LIST (CONS (LIST 'MINUS U) NIL)) NIL)))))
       ((OR (ATOM U) (NOT (MEMBER (CAR U) (LIST 'PLUS 'MINUS))))
        (RETURN
         (CONS 'LIST
               (CONS (CONS 'LIST (CONS U NIL))
                     (CONS (CONS 'LIST (CONS 0 NIL)) NIL)))))
       ((EQ (CAR U) 'MINUS)
        (RETURN
         (CONS 'LIST
               (CONS (CONS 'LIST (CONS 0 NIL))
                     (CONS (CONS 'LIST (CDR U)) NIL))))))
      (PROG ()
       WHILELABEL
        (COND ((NOT (SETQ U (CDR U))) (RETURN NIL)))
        (COND
         ((OR (ATOM (CAR U)) (NOT (EQ (CAAR U) 'MINUS)))
          (SETQ A (CONS (CAR U) A)))
         (T (SETQ B (CONS (CADAR U) B))))
        (GO WHILELABEL))
      (COND ((NULL A) (SETQ A (CONS 0 NIL))))
      (COND ((NULL B) (SETQ B (CONS 0 NIL))))
      (RETURN
       (CONS 'LIST
             (CONS (CONS 'LIST (REVERSIP A))
                   (CONS (CONS 'LIST (REVERSIP B)) NIL)))))) 
(PUT 'SPLITPLUSMINUS 'NUMBER-OF-ARGS 1) 
(FLAG '(SPLITPLUSMINUS) 'OPFN) 
(PUT 'SPLITPLUSMINUS 'DEFINED-ON-LINE '268) 
(PUT 'SPLITPLUSMINUS 'DEFINED-IN-FILE 'ASSIST/POLYEXNS.RED) 
(PUT 'SPLITPLUSMINUS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SPLITPLUSMINUS (U)
    (PROG (UU)
      (SETQ UU (AEVAL (LIST 'SPLITTERMS (LIST 'NUM U))))
      (RETURN
       (AEVAL
        (LIST 'LIST
              (LIST 'QUOTIENT
                    (PROG (J FORALL-RESULT)
                      (SETQ J (GETRLIST (AEVAL (LIST 'FIRST UU))))
                      (SETQ FORALL-RESULT 0)
                     LAB1
                      (COND ((NULL J) (RETURN FORALL-RESULT)))
                      (SETQ FORALL-RESULT
                              (AEVAL*
                               (LIST 'PLUS ((LAMBDA (J) (AEVAL J)) (CAR J))
                                     FORALL-RESULT)))
                      (SETQ J (CDR J))
                      (GO LAB1))
                    (LIST 'DEN U))
              (LIST 'MINUS
                    (LIST 'QUOTIENT
                          (PROG (J FORALL-RESULT)
                            (SETQ J (GETRLIST (AEVAL (LIST 'SECOND UU))))
                            (SETQ FORALL-RESULT 0)
                           LAB1
                            (COND ((NULL J) (RETURN FORALL-RESULT)))
                            (SETQ FORALL-RESULT
                                    (AEVAL*
                                     (LIST 'PLUS
                                           ((LAMBDA (J) (AEVAL J)) (CAR J))
                                           FORALL-RESULT)))
                            (SETQ J (CDR J))
                            (GO LAB1))
                          (LIST 'DEN U)))))))) 
(ENDMODULE) 