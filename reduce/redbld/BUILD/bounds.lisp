(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'BOUNDS)) 
(PUT 'BOUNDS 'PSOPFN 'BOUNDSEVAL) 
(PUT 'BOUNDS-RD 'PSOPFN 'BOUNDSEVALRD) 
(PUT 'BOUNDS 'NUMERICFN 'BOUNDS-RD) 
(FLUID
 '(BOUNDSDB* *MSG BOUNDSPOLYNOMIALDB* *BOUNDSFULLCHECK BOUNDSKNOWN*
   BOUNDSVARS*)) 
(PUT 'BOUNDSEVALRD 'NUMBER-OF-ARGS 1) 
(PUT 'BOUNDSEVALRD 'DEFINED-ON-LINE '40) 
(PUT 'BOUNDSEVALRD 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'BOUNDSEVALRD 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE BOUNDSEVALRD (U)
    (PROG (DMODE*) (SETDMODE 'ROUNDED T) (RETURN (BOUNDSEVAL U)))) 
(PUT 'BOUNDSEVAL 'NUMBER-OF-ARGS 1) 
(PUT 'BOUNDSEVAL 'DEFINED-ON-LINE '46) 
(PUT 'BOUNDSEVAL 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'BOUNDSEVAL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE BOUNDSEVAL (U)
    ((LAMBDA (*ROUNDBF *FACTOR)
       (PROG (DB Y L F BOUNDSVARS*)
         (SETQ U
                 (PROG (X FORALL-RESULT FORALL-ENDPTR)
                   (SETQ X U)
                   (COND ((NULL X) (RETURN NIL)))
                   (SETQ FORALL-RESULT
                           (SETQ FORALL-ENDPTR
                                   (CONS ((LAMBDA (X) (REVAL1 X T)) (CAR X))
                                         NIL)))
                  LOOPLABEL
                   (SETQ X (CDR X))
                   (COND ((NULL X) (RETURN FORALL-RESULT)))
                   (RPLACD FORALL-ENDPTR
                           (CONS ((LAMBDA (X) (REVAL1 X T)) (CAR X)) NIL))
                   (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                   (GO LOOPLABEL)))
         (SETQ F (CAR U))
         (SETQ U (CDR U))
         (COND
          ((AND U (EQCAR (CAR U) 'LIST))
           (SETQ U
                   (PROG (X FORALL-RESULT FORALL-ENDPTR)
                     (SETQ X (CDAR U))
                     (COND ((NULL X) (RETURN NIL)))
                     (SETQ FORALL-RESULT
                             (SETQ FORALL-ENDPTR
                                     (CONS ((LAMBDA (X) (REVAL1 X T)) (CAR X))
                                           NIL)))
                    LOOPLABEL
                     (SETQ X (CDR X))
                     (COND ((NULL X) (RETURN FORALL-RESULT)))
                     (RPLACD FORALL-ENDPTR
                             (CONS ((LAMBDA (X) (REVAL1 X T)) (CAR X)) NIL))
                     (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                     (GO LOOPLABEL)))))
         (PROG (X)
           (SETQ X U)
          LAB
           (COND ((NULL X) (RETURN NIL)))
           ((LAMBDA (X)
              (PROGN
               (COND ((NOT (EQCAR X 'EQUAL)) (TYPERR X "domain description")))
               (SETQ Y (REVALNUMINTERVAL (CADDR X) NIL))
               (SETQ L (LIST (SIMP (CAR Y)) (SIMP (CADR Y))))
               (SETQ BOUNDSVARS* (APPEND BOUNDSVARS* (LIST (CADR X))))
               (SETQ DB (CONS (CONS (CADR X) (CONS (MINSQ L) (MAXSQ L))) DB))))
            (CAR X))
           (SETQ X (CDR X))
           (GO LAB))
         (SETQ U (BOUNDSEVAL1 F DB))
         (RETURN (MKINTERVAL (PREPSQ (CAR U)) (PREPSQ (CDR U))))))
     *ROUNDBF NIL)) 
(PUT 'BOUNDSERR 'NUMBER-OF-ARGS 2) 
(PUT 'BOUNDSERR 'DEFINED-ON-LINE '62) 
(PUT 'BOUNDSERR 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'BOUNDSERR 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE BOUNDSERR (A B)
    (COND ((NOT *MSG) (ERROR 99 'BOUNDS)) (A (TYPERR A B)) (T (REDERR B)))) 
(PUT 'BOUNDSEVAL0 'NUMBER-OF-ARGS 3) 
(PUT 'BOUNDSEVAL0 'DEFINED-ON-LINE '66) 
(PUT 'BOUNDSEVAL0 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'BOUNDSEVAL0 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE BOUNDSEVAL0 (F DB *MSG)
    (PROGN
     (SETQ BOUNDSVARS*
             (PROG (X FORALL-RESULT FORALL-ENDPTR)
               (SETQ X DB)
               (COND ((NULL X) (RETURN NIL)))
               (SETQ FORALL-RESULT
                       (SETQ FORALL-ENDPTR
                               (CONS ((LAMBDA (X) (CAR X)) (CAR X)) NIL)))
              LOOPLABEL
               (SETQ X (CDR X))
               (COND ((NULL X) (RETURN FORALL-RESULT)))
               (RPLACD FORALL-ENDPTR (CONS ((LAMBDA (X) (CAR X)) (CAR X)) NIL))
               (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
               (GO LOOPLABEL)))
     (BOUNDSEVAL1 F DB))) 
(PUT 'BOUNDSEVAL1 'NUMBER-OF-ARGS 2) 
(PUT 'BOUNDSEVAL1 'DEFINED-ON-LINE '77) 
(PUT 'BOUNDSEVAL1 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'BOUNDSEVAL1 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE BOUNDSEVAL1 (U BOUNDSDB*)
    (PROGN
     (COND ((MEMBER U BOUNDSKNOWN*) (SETQ *BOUNDSFULLCHECK NIL))
           (T
            (PROGN
             (SETQ *BOUNDSFULLCHECK T)
             (COND
              ((EQUAL DMODE* '|:RD:|)
               (SETQ BOUNDSKNOWN* (CONS U BOUNDSKNOWN*))))
             NIL)))
     (BOUNDSEVAL2 U))) 
(PUT 'BOUNDSEVAL2 'NUMBER-OF-ARGS 1) 
(PUT 'BOUNDSEVAL2 'DEFINED-ON-LINE '84) 
(PUT 'BOUNDSEVAL2 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'BOUNDSEVAL2 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE BOUNDSEVAL2 (U)
    (COND ((ADOMAINP U) (PROGN (SETQ U (SIMP U)) (CONS U U)))
          (T
           (OR (BOUNDSPOLYNOMIAL U)
               (PROG (V W FCN)
                 (COND ((SETQ V (ASSOC U BOUNDSDB*)) (RETURN (CDR V))))
                 (COND
                  ((AND (IDP U) (SETQ FCN (GET U DMODE*)))
                   (PROGN
                    (SETQ V (APPLY FCN NIL))
                    (SETQ V (CONS (CONS V 1) (CONS V 1)))
                    (GO DONE))))
                 (COND ((ATOM U) (GO ERR)))
                 (COND
                  ((AND (EQUAL (CAR U) 'EXPT) (FIXP (CADDR U))
                        (GREATERP (CADDR U) 0))
                   (PROGN
                    (SETQ V (BOUNDSEXPT-INT (BOUNDSEVAL2 (CADR U)) (CADDR U)))
                    (GO DONE))))
                 (SETQ W
                         (PROG (Y FORALL-RESULT FORALL-ENDPTR)
                           (SETQ Y (CDR U))
                           (COND ((NULL Y) (RETURN NIL)))
                           (SETQ FORALL-RESULT
                                   (SETQ FORALL-ENDPTR
                                           (CONS
                                            ((LAMBDA (Y) (BOUNDSEVAL2 Y))
                                             (CAR Y))
                                            NIL)))
                          LOOPLABEL
                           (SETQ Y (CDR Y))
                           (COND ((NULL Y) (RETURN FORALL-RESULT)))
                           (RPLACD FORALL-ENDPTR
                                   (CONS ((LAMBDA (Y) (BOUNDSEVAL2 Y)) (CAR Y))
                                         NIL))
                           (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                           (GO LOOPLABEL)))
                 (SETQ V
                         (COND
                          ((AND (CDR W) (CDDR W)
                                (SETQ FCN (GET (CAR U) 'BOUNDSEVALN)))
                           (APPLY1 FCN W))
                          ((GREATERP (LENGTH W) 2) T)
                          ((SETQ FCN (GET (CAR U) 'BOUNDSEVAL1))
                           (APPLY2 FCN (CAR U) (CAR W)))
                          ((SETQ FCN (GET (CAR U) 'BOUNDSEVAL))
                           (COND ((NULL (CDR W)) (APPLY1 FCN (CAR W)))
                                 (T (APPLY2 FCN (CAR W) (CADR W)))))
                          ((CDR W) T) (T (BOUNDSOPERATOR (CAR U) (CAR W)))))
                 (COND ((EQUAL V T) (GO ERR2)))
                 (COND
                  ((OR (NULL V)
                       (NOT
                        ((LAMBDA (U) (OR (ATOM U) (ATOM (CAR U))))
                         (CAR (CAR V))))
                       (NOT
                        ((LAMBDA (U) (OR (ATOM U) (ATOM (CAR U))))
                         (CDR (CAR V))))
                       (NOT
                        ((LAMBDA (U) (OR (ATOM U) (ATOM (CAR U))))
                         (CAR (CDR V))))
                       (NOT
                        ((LAMBDA (U) (OR (ATOM U) (ATOM (CAR U))))
                         (CDR (CDR V)))))
                   (GO ERR)))
                DONE
                 (SETQ BOUNDSDB* (CONS (CONS U V) BOUNDSDB*))
                 (RETURN V)
                ERR
                 (BOUNDSERR NIL "unbounded in range")
                ERR2
                 (BOUNDSERR NIL "bounds confusion")))))) 
(PUT 'BOUNDSOPERATOR 'NUMBER-OF-ARGS 2) 
(PUT 'BOUNDSOPERATOR 'DEFINED-ON-LINE '119) 
(PUT 'BOUNDSOPERATOR 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'BOUNDSOPERATOR 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE BOUNDSOPERATOR (FCN U)
    (COND ((FLAGP FCN 'INCREASING) (BOUNDSINCREASINGFN FCN U))
          ((FLAGP FCN 'DECREASING) (BOUNDSDECREASINGFN FCN U))
          ((AND (GET FCN 'UPPERBOUND) (GET FCN 'LOWERBOUND))
           (CONS (SIMP (GET FCN 'LOWERBOUND)) (SIMP (GET FCN 'UPPERBOUND))))
          (T NIL))) 
(PUT 'BOUNDSPLUS 'NUMBER-OF-ARGS 1) 
(PUT 'BOUNDSPLUS 'DEFINED-ON-LINE '128) 
(PUT 'BOUNDSPLUS 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'BOUNDSPLUS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE BOUNDSPLUS (U)
    (COND ((NULL (CDR U)) (CAR U))
          (T (BOUNDSPLUS2 (CAR U) (BOUNDSPLUS (CDR U)))))) 
(PUT 'BOUNDSPLUS2 'NUMBER-OF-ARGS 2) 
(PUT 'BOUNDSPLUS2 'DEFINED-ON-LINE '132) 
(PUT 'BOUNDSPLUS2 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'BOUNDSPLUS2 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE BOUNDSPLUS2 (U V) (CONS (ADDSQ (CAR U) (CAR V)) (ADDSQ (CDR U) (CDR V)))) 
(PUT 'PLUS 'BOUNDSEVALN 'BOUNDSPLUS) 
(PUT 'PLUS 'BOUNDSEVAL 'BOUNDSPLUS2) 
(PUT 'BOUNDSDIFFERENCE 'NUMBER-OF-ARGS 2) 
(PUT 'BOUNDSDIFFERENCE 'DEFINED-ON-LINE '138) 
(PUT 'BOUNDSDIFFERENCE 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'BOUNDSDIFFERENCE 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE BOUNDSDIFFERENCE (X Y)
    (CONS (ADDSQ (CAR X) (NEGSQ (CDR Y))) (ADDSQ (CDR X) (NEGSQ (CAR Y))))) 
(PUT 'DIFFERENCE 'BOUNDSEVAL 'BOUNDSDIFFERENCE) 
(PUT 'BOUNDSMINUS 'NUMBER-OF-ARGS 1) 
(PUT 'BOUNDSMINUS 'DEFINED-ON-LINE '143) 
(PUT 'BOUNDSMINUS 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'BOUNDSMINUS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE BOUNDSMINUS (U) (CONS (NEGSQ (CDR U)) (NEGSQ (CAR U)))) 
(PUT 'MINUS 'BOUNDSEVAL 'BOUNDSMINUS) 
(PUT 'BOUNDSTIMES 'NUMBER-OF-ARGS 1) 
(PUT 'BOUNDSTIMES 'DEFINED-ON-LINE '148) 
(PUT 'BOUNDSTIMES 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'BOUNDSTIMES 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE BOUNDSTIMES (U)
    (COND ((NULL (CDR U)) (CAR U))
          (T (BOUNDSTIMES2 (CAR U) (BOUNDSTIMES (CDR U)))))) 
(PUT 'BOUNDSTIMES2 'NUMBER-OF-ARGS 2) 
(PUT 'BOUNDSTIMES2 'DEFINED-ON-LINE '152) 
(PUT 'BOUNDSTIMES2 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'BOUNDSTIMES2 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE BOUNDSTIMES2 (X Y)
    (PROG (Z)
      (COND
       ((AND (NOT (MINUSF (CAR (CAR X)))) (NOT (MINUSF (CAR (CAR Y)))))
        (RETURN (CONS (MULTSQ (CAR X) (CAR Y)) (MULTSQ (CDR X) (CDR Y))))))
      (COND
       ((AND (MINUSF (CAR (CDR X))) (MINUSF (CAR (CDR Y))))
        (RETURN (CONS (MULTSQ (CDR X) (CDR Y)) (MULTSQ (CAR X) (CAR Y))))))
      (SETQ Z
              (LIST (MULTSQ (CAR X) (CAR Y)) (MULTSQ (CAR X) (CDR Y))
                    (MULTSQ (CDR X) (CAR Y)) (MULTSQ (CDR X) (CDR Y))))
      (RETURN (CONS (MINSQ Z) (MAXSQ Z))))) 
(PUT 'MINSQ 'NUMBER-OF-ARGS 1) 
(PUT 'MINSQ 'DEFINED-ON-LINE '164) 
(PUT 'MINSQ 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'MINSQ 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MINSQ (L)
    (PROG (X)
      (SETQ X (CAR L))
      (PROG (Y)
        (SETQ Y (CDR L))
       LAB
        (COND ((NULL Y) (RETURN NIL)))
        ((LAMBDA (Y) (COND ((MINUSF (CAR (ADDSQ Y (NEGSQ X)))) (SETQ X Y))))
         (CAR Y))
        (SETQ Y (CDR Y))
        (GO LAB))
      (RETURN X))) 
(PUT 'MAXSQ 'NUMBER-OF-ARGS 1) 
(PUT 'MAXSQ 'DEFINED-ON-LINE '172) 
(PUT 'MAXSQ 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'MAXSQ 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MAXSQ (L)
    (PROG (X)
      (SETQ X (CAR L))
      (PROG (Y)
        (SETQ Y (CDR L))
       LAB
        (COND ((NULL Y) (RETURN NIL)))
        ((LAMBDA (Y) (COND ((MINUSF (CAR (ADDSQ X (NEGSQ Y)))) (SETQ X Y))))
         (CAR Y))
        (SETQ Y (CDR Y))
        (GO LAB))
      (RETURN X))) 
(PUT 'SQGREATERP 'NUMBER-OF-ARGS 2) 
(PUT 'SQGREATERP 'DEFINED-ON-LINE '180) 
(PUT 'SQGREATERP 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'SQGREATERP 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE SQGREATERP (X Y) (MINUSF (CAR (ADDSQ Y (NEGSQ X))))) 
(PUT 'TIMES 'BOUNDSEVALN 'BOUNDSTIMES) 
(PUT 'TIMES 'BOUNDSEVAL 'BOUNDSTIMES2) 
(PUT 'BOUNDSEXP 'NUMBER-OF-ARGS 1) 
(PUT 'BOUNDSEXP 'DEFINED-ON-LINE '186) 
(PUT 'BOUNDSEXP 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'BOUNDSEXP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE BOUNDSEXP (U) ((LAMBDA (B) (BOUNDSEXPT (CONS B B) U)) (SIMP 'E))) 
(PUT 'EXP 'BOUNDSEVAL 'BOUNDSEXP) 
(PUT 'BOUNDSEXPT-INT 'NUMBER-OF-ARGS 2) 
(PUT 'BOUNDSEXPT-INT 'DEFINED-ON-LINE '191) 
(PUT 'BOUNDSEXPT-INT 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'BOUNDSEXPT-INT 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE BOUNDSEXPT-INT (B EX)
    (PROG (HI LO BH BL)
      (SETQ BL (EXPTSQ (CAR B) EX))
      (SETQ BH (EXPTSQ (CDR B) EX))
      (COND ((NOT (EVENP EX)) (RETURN (CONS BL BH))))
      (SETQ LO (MINUSF (CAR (CDR B))))
      (SETQ HI (NOT (MINUSF (CAR (CAR B)))))
      (RETURN
       (COND (HI (CONS BL BH)) (LO (CONS BH BL))
             (T (CONS (CONS NIL 1) (MAXSQ (LIST BL BH)))))))) 
(PUT 'BOUNDSEXPT-CONST 'NUMBER-OF-ARGS 2) 
(PUT 'BOUNDSEXPT-CONST 'DEFINED-ON-LINE '204) 
(PUT 'BOUNDSEXPT-CONST 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'BOUNDSEXPT-CONST 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE BOUNDSEXPT-CONST (B EX)
    (PROG (L N M)
      (SETQ N '(NIL . 1))
      (COND
       ((SQGREATERP N EX)
        (RETURN (BOUNDSQUOTIENT '(1 . 1) (BOUNDSEXPT-CONST B (NEGSQ EX))))))
      (COND
       ((AND (EQUAL (CDR EX) 1)
             (OR (FIXP (SETQ M (CAR EX)))
                 (AND (EQCAR M '|:RD:|)
                      (NULL
                       (ADDF (CAR EX)
                             (NEGF (SETQ M (REVAL1 (LIST 'ROUND M) T))))))))
        (RETURN (BOUNDSEXPT-INT B M))))
      (COND
       ((SQGREATERP N (CAR B))
        (BOUNDSERR NIL "fractional exponent with negative base")))
      (SETQ L
              (LIST (BOUNDS-EVALFCN2 'EXPT (CAR B) EX)
                    (BOUNDS-EVALFCN2 'EXPT (CDR B) EX)))
      (RETURN (CONS (MINSQ L) (MAXSQ L))))) 
(PUT 'BOUNDSEXPT 'NUMBER-OF-ARGS 2) 
(PUT 'BOUNDSEXPT 'DEFINED-ON-LINE '222) 
(PUT 'BOUNDSEXPT 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'BOUNDSEXPT 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE BOUNDSEXPT (B E)
    (COND ((EQUAL (CAR E) (CDR E)) (BOUNDSEXPT-CONST B (CAR E)))
          (T
           (PROG (L N)
             (SETQ N '(NIL . 1))
             (COND ((SQGREATERP N (CAR B)) (RETURN NIL)))
             (SETQ L
                     (LIST (BOUNDS-EVALFCN2 'EXPT (CAR B) (CAR E))
                           (BOUNDS-EVALFCN2 'EXPT (CAR B) (CDR E))
                           (BOUNDS-EVALFCN2 'EXPT (CDR B) (CAR E))
                           (BOUNDS-EVALFCN2 'EXPT (CDR B) (CDR E))))
             (RETURN (CONS (MINSQ L) (MAXSQ L))))))) 
(PUT 'BOUNDSPREPSQ 'NUMBER-OF-ARGS 1) 
(PUT 'BOUNDSPREPSQ 'DEFINED-ON-LINE '236) 
(PUT 'BOUNDSPREPSQ 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'BOUNDSPREPSQ 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE BOUNDSPREPSQ (U) (CONS (PREPSQ (CAR U)) (PREPSQ (CDR U)))) 
(PUT 'EXPT 'BOUNDSEVAL 'BOUNDSEXPT) 
(PUT 'BOUNDSQUOTIENT 'NUMBER-OF-ARGS 2) 
(PUT 'BOUNDSQUOTIENT 'DEFINED-ON-LINE '240) 
(PUT 'BOUNDSQUOTIENT 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'BOUNDSQUOTIENT 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE BOUNDSQUOTIENT (N D)
    (PROG (L)
      (COND ((BOUNDSZERO D) (BOUNDSERR NIL "unbounded in range")))
      (SETQ L
              (LIST (MULTSQ (CAR N) (INVSQ (CAR D)))
                    (MULTSQ (CAR N) (INVSQ (CDR D)))
                    (MULTSQ (CDR N) (INVSQ (CAR D)))
                    (MULTSQ (CDR N) (INVSQ (CDR D)))))
      (RETURN (CONS (MINSQ L) (MAXSQ L))))) 
(PUT 'BOUNDSZERO 'NUMBER-OF-ARGS 1) 
(PUT 'BOUNDSZERO 'DEFINED-ON-LINE '248) 
(PUT 'BOUNDSZERO 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'BOUNDSZERO 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE BOUNDSZERO (U)
    (OR (NOT (EQUAL (MINUSF (CAR (CAR U))) (MINUSF (CAR (CDR U)))))
        (BOUNDSZERO1 (CAR (CAR U))) (BOUNDSZERO1 (CAR (CDR U))))) 
(PUT 'BOUNDSZERO1 'NUMBER-OF-ARGS 1) 
(PUT 'BOUNDSZERO1 'DEFINED-ON-LINE '253) 
(PUT 'BOUNDSZERO1 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'BOUNDSZERO1 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE BOUNDSZERO1 (F)
    (OR (NULL F) (ZEROP F)
        (AND (PAIRP F) (APPLY (GET (CAR F) 'ZEROP) (LIST F))))) 
(PUT 'QUOTIENT 'BOUNDSEVAL 'BOUNDSQUOTIENT) 
(PUT 'BOUNDSABS 'NUMBER-OF-ARGS 1) 
(PUT 'BOUNDSABS 'DEFINED-ON-LINE '259) 
(PUT 'BOUNDSABS 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'BOUNDSABS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE BOUNDSABS (U)
    (COND ((EVALGREATERP (PREPSQ (CAR U)) 0) U)
          ((EVALGREATERP 0 (PREPSQ (CDR U)))
           (CONS (NEGSQ (CDR U)) (NEGSQ (CAR U))))
          (T (CONS (CONS NIL 1) (MAXSQ (LIST (NEGSQ (CAR U)) (CDR U))))))) 
(PUT 'ABS 'BOUNDSEVAL 'BOUNDSABS) 
(PUT 'BOUNDSINCREASINGFN 'NUMBER-OF-ARGS 2) 
(PUT 'BOUNDSINCREASINGFN 'DEFINED-ON-LINE '266) 
(PUT 'BOUNDSINCREASINGFN 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'BOUNDSINCREASINGFN 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE BOUNDSINCREASINGFN (FN U)
    (CONS (BOUNDS-EVALFCN1 FN (CAR U)) (BOUNDS-EVALFCN1 FN (CDR U)))) 
(PUT 'LOG 'BOUNDSEVAL1 'BOUNDSINCREASINGFN) 
(PUT 'ASIN 'BOUNDSEVAL1 'BOUNDSINCREASINGFN) 
(PUT 'ATAN 'BOUNDSEVAL1 'BOUNDSINCREASINGFN) 
(PUT 'SQRT 'BOUNDSEVAL1 'BOUNDSINCREASINGFN) 
(PUT 'BOUNDSDECREASINGFN 'NUMBER-OF-ARGS 2) 
(PUT 'BOUNDSDECREASINGFN 'DEFINED-ON-LINE '278) 
(PUT 'BOUNDSDECREASINGFN 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'BOUNDSDECREASINGFN 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE BOUNDSDECREASINGFN (FN U) (BOUNDSINCREASINGFN FN (CONS (CDR U) (CAR U)))) 
(PUT 'ACOS 'BOUNDSEVAL1 'BOUNDSDECREASINGFN) 
(PUT 'ACOT 'BOUNDSEVAL1 'BOUNDSDECREASINGFN) 
(PUT 'BOUNDSSINCOS 'NUMBER-OF-ARGS 2) 
(PUT 'BOUNDSSINCOS 'DEFINED-ON-LINE '284) 
(PUT 'BOUNDSSINCOS 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'BOUNDSSINCOS 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE BOUNDSSINCOS (FCN N)
    (PROG (LO HI 1PI 2PI 3PI L M)
      (SETQ LO (CAR N))
      (SETQ HI (CDR N))
      ((LAMBDA (DMODE*)
         (PROGN
          (SETDMODE 'ROUNDED T)
          (SETQ 1PI (SIMP 'PI))
          (SETDMODE 'ROUNDED NIL)
          NIL))
       NIL)
      (COND ((NOT (OR (ATOM (CAR 1PI)) (ATOM (CAR (CAR 1PI))))) (GO TRIVIAL)))
      (SETQ 2PI (ADDSQ 1PI 1PI))
      (SETQ 3PI (ADDSQ 1PI 2PI))
      (COND
       ((EQUAL FCN 'SIN)
        (PROGN
         (SETQ M (MULTSQ 1PI (CONS (MINUS 1) 2)))
         (SETQ LO (ADDSQ LO M))
         (SETQ HI (ADDSQ HI M)))))
      (SETQ M (NEGSQ (MULTSQ 2PI (FIXSQ (MULTSQ LO (INVSQ 2PI))))))
      (SETQ LO (ADDSQ LO M))
      (SETQ HI (ADDSQ HI M))
      (COND
       ((MINUSF (CAR LO))
        (PROGN (SETQ LO (ADDSQ LO 2PI)) (SETQ HI (ADDSQ HI 2PI)))))
      (COND
       ((OR (NULL (CAR LO)) (SQGREATERP HI 2PI)) (SETQ L (CONS (CONS 1 1) L))))
      (COND
       ((OR (AND (SQGREATERP 1PI LO) (SQGREATERP HI 1PI))
            (AND (SQGREATERP 3PI LO) (SQGREATERP HI 3PI)))
        (SETQ L (CONS (CONS (MINUS 1) 1) L))))
      (COND ((AND L (CDR L)) (GO TRIVIAL)))
      (SETQ L
              (CONS (BOUNDS-EVALFCN1 'COS LO)
                    (CONS (BOUNDS-EVALFCN1 'COS HI) L)))
      (COND ((SMEMQ 'COS L) (GO TRIVIAL)))
      (RETURN (CONS (MINSQ L) (MAXSQ L)))
     TRIVIAL
      (RETURN (CONS (CONS (MINUS 1) 1) (CONS 1 1))))) 
(PUT 'FIXSQ 'NUMBER-OF-ARGS 1) 
(PUT 'FIXSQ 'DEFINED-ON-LINE '316) 
(PUT 'FIXSQ 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'FIXSQ 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FIXSQ (U) (BOUNDS-EVALFCN1 'FIX U)) 
(PUT 'BOUNDS-EVALFCN1 'NUMBER-OF-ARGS 2) 
(PUT 'BOUNDS-EVALFCN1 'DEFINED-ON-LINE '319) 
(PUT 'BOUNDS-EVALFCN1 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'BOUNDS-EVALFCN1 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE BOUNDS-EVALFCN1 (FCN U)
    ((LAMBDA (X)
       (COND
        ((AND (OR (ATOM (CAR U)) (ATOM (CAR (CAR U)))) (EQUAL (CDR U) 1)
              (SETQ X (VALUECHK FCN (LIST (CAR U)))))
         X)
        (T (SIMP (LIST FCN (PREPSQ U))))))
     NIL)) 
(PUT 'BOUNDS-EVALFCN2 'NUMBER-OF-ARGS 3) 
(PUT 'BOUNDS-EVALFCN2 'DEFINED-ON-LINE '324) 
(PUT 'BOUNDS-EVALFCN2 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'BOUNDS-EVALFCN2 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE BOUNDS-EVALFCN2 (FCN U V)
    ((LAMBDA (X)
       (COND
        ((AND (OR (ATOM (CAR U)) (ATOM (CAR (CAR U)))) (EQUAL (CDR U) 1)
              (OR (ATOM (CAR V)) (ATOM (CAR (CAR V)))) (EQUAL (CDR V) 1)
              (SETQ X (VALUECHK FCN (LIST (CAR U) (CAR V)))))
         X)
        (T (SIMP (LIST FCN (PREPSQ U) (PREPSQ V))))))
     NIL)) 
(PUT 'AGREATERP 'NUMBER-OF-ARGS 2) 
(PUT 'AGREATERP 'DEFINED-ON-LINE '330) 
(PUT 'AGREATERP 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'AGREATERP 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE AGREATERP (U V)
    ((LAMBDA (X)
       (COND
        ((OR (NOT (ATOM (CDR X)))
             (NOT (OR (ATOM (CAR X)) (ATOM (CAR (CAR X))))))
         (ERROR 99 "number"))
        (T (AND (CAR X) (|:MINUSP| (CAR X))))))
     (SIMP* (LIST 'DIFFERENCE V U)))) 
(PUT 'BOUNDSSIN 'NUMBER-OF-ARGS 1) 
(PUT 'BOUNDSSIN 'DEFINED-ON-LINE '337) 
(PUT 'BOUNDSSIN 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'BOUNDSSIN 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE BOUNDSSIN (U) (BOUNDSSINCOS 'SIN U)) 
(PUT 'BOUNDSCOS 'NUMBER-OF-ARGS 1) 
(PUT 'BOUNDSCOS 'DEFINED-ON-LINE '340) 
(PUT 'BOUNDSCOS 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'BOUNDSCOS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE BOUNDSCOS (U) (BOUNDSSINCOS 'COS U)) 
(PUT 'SIN 'BOUNDSEVAL 'BOUNDSSIN) 
(PUT 'COS 'BOUNDSEVAL 'BOUNDSCOS) 
(PUT 'BOUNDSTANCOT 'NUMBER-OF-ARGS 2) 
(PUT 'BOUNDSTANCOT 'DEFINED-ON-LINE '346) 
(PUT 'BOUNDSTANCOT 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'BOUNDSTANCOT 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE BOUNDSTANCOT (FCN N)
    (PROG (LO HI X PPI)
      (SETQ LO (CAR N))
      (SETQ HI (CDR N))
      (SETQ PPI (CONS (RDPI*) 1))
      (COND ((SQGREATERP (ADDSQ LO (NEGSQ HI)) PPI) (GO NO)))
      (SETQ LO (BOUNDS-EVALFCN1 FCN LO))
      (SETQ HI (BOUNDS-EVALFCN1 FCN HI))
      (COND ((EQUAL FCN 'COT) (PROGN (SETQ X LO) (SETQ LO HI) (SETQ HI X))))
      (COND ((NOT (SQGREATERP LO HI)) (RETURN (CONS LO HI))))
     NO
      (RETURN (BOUNDSERR NIL "unbounded in range")))) 
(PUT 'BOUNDSTAN 'NUMBER-OF-ARGS 1) 
(PUT 'BOUNDSTAN 'DEFINED-ON-LINE '359) 
(PUT 'BOUNDSTAN 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'BOUNDSTAN 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE BOUNDSTAN (U) (BOUNDSTANCOT 'TAN U)) 
(PUT 'BOUNDSCOT 'NUMBER-OF-ARGS 1) 
(PUT 'BOUNDSCOT 'DEFINED-ON-LINE '362) 
(PUT 'BOUNDSCOT 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'BOUNDSCOT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE BOUNDSCOT (U) (BOUNDSTANCOT 'COT U)) 
(PUT 'TAN 'BOUNDSEVAL 'BOUNDSTAN) 
(PUT 'COT 'BOUNDSEVAL 'BOUNDSCOT) 
(PUT 'BOUNDSMAXMIN 'NUMBER-OF-ARGS 1) 
(PUT 'BOUNDSMAXMIN 'DEFINED-ON-LINE '368) 
(PUT 'BOUNDSMAXMIN 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'BOUNDSMAXMIN 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE BOUNDSMAXMIN (U)
    (COND ((NULL (CDR U)) (CAR U))
          (T (BOUNDSMAXMIN2 (CAR U) (BOUNDSMAXMIN (CDR U)))))) 
(PUT 'BOUNDSMAXMIN2 'NUMBER-OF-ARGS 2) 
(PUT 'BOUNDSMAXMIN2 'DEFINED-ON-LINE '372) 
(PUT 'BOUNDSMAXMIN2 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'BOUNDSMAXMIN2 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE BOUNDSMAXMIN2 (X Y)
    (CONS (COND ((SQGREATERP (CAR X) (CAR Y)) (CAR Y)) (T (CAR X)))
          (COND ((SQGREATERP (CDR X) (CDR Y)) (CDR X)) (T (CDR Y))))) 
(PUT 'MAX 'BOUNDSEVALN 'BOUNDSMAXMIN) 
(PUT 'MIN 'BOUNDSEVALN 'BOUNDSMAXMIN) 
(PUT 'MAX 'BOUNDSEVAL 'BOUNDSMAXMIN2) 
(PUT 'MIN 'BOUNDSEVAL 'BOUNDSMAXMIN2) 
(PUT 'BOUNDSPOLYNOMIAL 'NUMBER-OF-ARGS 1) 
(PUT 'BOUNDSPOLYNOMIAL 'DEFINED-ON-LINE '385) 
(PUT 'BOUNDSPOLYNOMIAL 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'BOUNDSPOLYNOMIAL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE BOUNDSPOLYNOMIAL (E)
    (PROG (X U LO HI D V L)
      (COND ((NEQ DMODE* '|:RD:|) (RETURN NIL)))
      (COND ((SETQ U (ASSOC E BOUNDSPOLYNOMIALDB*)) (GO OLD)))
      (COND
       ((OR (NULL *BOUNDSFULLCHECK) (NULL (SETQ X (BOUNDSPOLYNOMIALTEST E))))
        (RETURN NIL)))
      (SETQ D (REALROOTS (LIST (REVAL1 (LIST 'DF E X) T))))
      (SETQ U
              (CONS X
                    (PROG (S FORALL-RESULT FORALL-ENDPTR)
                      (SETQ S (CDR D))
                      (COND ((NULL S) (RETURN NIL)))
                      (SETQ FORALL-RESULT
                              (SETQ FORALL-ENDPTR
                                      (CONS
                                       ((LAMBDA (S)
                                          (PROGN
                                           (SETQ D (CAR (SIMP (CADDR S))))
                                           (CONS D
                                                 (EVALUATE E (LIST X)
                                                  (LIST D)))))
                                        (CAR S))
                                       NIL)))
                     LOOPLABEL
                      (SETQ S (CDR S))
                      (COND ((NULL S) (RETURN FORALL-RESULT)))
                      (RPLACD FORALL-ENDPTR
                              (CONS
                               ((LAMBDA (S)
                                  (PROGN
                                   (SETQ D (CAR (SIMP (CADDR S))))
                                   (CONS D (EVALUATE E (LIST X) (LIST D)))))
                                (CAR S))
                               NIL))
                      (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                      (GO LOOPLABEL))))
      (SETQ U (CONS E U))
      (SETQ BOUNDSPOLYNOMIALDB* (CONS U BOUNDSPOLYNOMIALDB*))
     OLD
      (SETQ X (CADR U))
      (SETQ U (CDDR U))
      (SETQ V (ASSOC X BOUNDSDB*))
      (COND ((NULL V) (RETURN NIL)))
      (SETQ LO (CAR (CADR V)))
      (SETQ HI (CAR (CDDR V)))
      (SETQ L
              (LIST (CONS (EVALUATE E (LIST X) (LIST LO)) 1)
                    (CONS (EVALUATE E (LIST X) (LIST HI)) 1)))
      (PROG (P)
        (SETQ P U)
       LAB
        (COND ((NULL P) (RETURN NIL)))
        ((LAMBDA (P)
           (COND
            ((AND ((LAMBDA (A B) (|:MINUSP| (|:DIFFERENCE| A B))) LO (CAR P))
                  ((LAMBDA (A B) (|:MINUSP| (|:DIFFERENCE| A B))) (CAR P) HI))
             (SETQ L (CONS (CONS (CDR P) 1) L)))))
         (CAR P))
        (SETQ P (CDR P))
        (GO LAB))
      (RETURN (CONS (MINSQ L) (MAXSQ L))))) 
(PUT 'BOUNDSPOLYNOMIALTEST 'NUMBER-OF-ARGS 1) 
(PUT 'BOUNDSPOLYNOMIALTEST 'DEFINED-ON-LINE '408) 
(PUT 'BOUNDSPOLYNOMIALTEST 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'BOUNDSPOLYNOMIALTEST 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE BOUNDSPOLYNOMIALTEST (E)
    ((LAMBDA (R) (AND (PAIRP R) (CAR R))) (BOUNDSPOLYNOMIALTEST1 E NIL))) 
(PUT 'BOUNDSPOLYNOMIALTEST1 'NUMBER-OF-ARGS 2) 
(PUT 'BOUNDSPOLYNOMIALTEST1 'DEFINED-ON-LINE '411) 
(PUT 'BOUNDSPOLYNOMIALTEST1 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'BOUNDSPOLYNOMIALTEST1 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE BOUNDSPOLYNOMIALTEST1 (E X)
    (COND ((ADOMAINP E) (OR X T)) ((ATOM E) (BOUNDSPOLYNOMIALTESTVARIABLE E X))
          ((EQ (CAR E) 'EXPT)
           (AND (FIXP (CADDR E)) (BOUNDSPOLYNOMIALTESTVARIABLE (CADR E) X)))
          ((EQ (CAR E) 'MINUS) (BOUNDSPOLYNOMIALTEST1 (CADR E) X))
          ((OR (EQ (CAR E) 'PLUS) (EQ (CAR E) 'TIMES))
           (PROG (R)
             (SETQ E (CDR E))
             (SETQ R T)
             (PROG ()
              WHILELABEL
               (COND ((NOT (AND E R)) (RETURN NIL)))
               (PROGN
                (SETQ R (BOUNDSPOLYNOMIALTEST1 (CAR E) X))
                (COND ((NEQ R T) (SETQ X R)))
                (SETQ E (CDR E)))
               (GO WHILELABEL))
             (RETURN (OR X R))))
          (T (BOUNDSPOLYNOMIALTESTVARIABLE E X)))) 
(PUT 'BOUNDSPOLYNOMIALTESTVARIABLE 'NUMBER-OF-ARGS 2) 
(PUT 'BOUNDSPOLYNOMIALTESTVARIABLE 'DEFINED-ON-LINE '430) 
(PUT 'BOUNDSPOLYNOMIALTESTVARIABLE 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'BOUNDSPOLYNOMIALTESTVARIABLE 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE BOUNDSPOLYNOMIALTESTVARIABLE (E X)
    (COND ((AND X (EQUAL E (CAR X))) X) (X NIL)
          ((MEMBER E BOUNDSVARS*) (LIST E)))) 
(FLUID '(BOUNDSDB* BOUNDSCOMPV* BOUNDSCOMPCODE*)) 
(PUT 'BOUNDSCOMPILE 'NUMBER-OF-ARGS 2) 
(PUT 'BOUNDSCOMPILE 'DEFINED-ON-LINE '443) 
(PUT 'BOUNDSCOMPILE 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'BOUNDSCOMPILE 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE BOUNDSCOMPILE (E V)
    (PROG (BOUNDSDB* BOUNDSCOMPV* BOUNDSCOMPCODE* U)
      (SETQ BOUNDSDB*
              (PROG (X FORALL-RESULT FORALL-ENDPTR)
                (SETQ X V)
                (COND ((NULL X) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS ((LAMBDA (X) (CONS X X)) (CAR X)) NIL)))
               LOOPLABEL
                (SETQ X (CDR X))
                (COND ((NULL X) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        (CONS ((LAMBDA (X) (CONS X X)) (CAR X)) NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (SETQ U (BOUNDSCOMPILE1 E NIL))
      (RETURN
       (LIST 'LAMBDA V
             (CONS 'PROG
                   (CONS BOUNDSCOMPV*
                         (APPEND (REVERSIP BOUNDSCOMPCODE*)
                                 (LIST (LIST 'RETURN U))))))))) 
(PUT 'BOUNDSCOMPILE1 'NUMBER-OF-ARGS 2) 
(PUT 'BOUNDSCOMPILE1 'DEFINED-ON-LINE '455) 
(PUT 'BOUNDSCOMPILE1 'DEFINED-IN-FILE 'NUMERIC/BOUNDS.RED) 
(PUT 'BOUNDSCOMPILE1 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE BOUNDSCOMPILE1 (U FLAG)
    (COND ((ADOMAINP U) (PROGN (SETQ U (SIMP U)) (MKQUOTE (CONS U U))))
          (T
           (PROG (V W FCN VAR)
             (COND ((SETQ V (ASSOC U BOUNDSDB*)) (RETURN (CDR V))))
             (COND
              ((AND (IDP U) (SETQ FCN (GET U DMODE*)))
               (PROGN
                (SETQ V (APPLY FCN NIL))
                (SETQ V (MKQUOTE (CONS (CONS V 1) (CONS V 1))))
                (GO DONE))))
             (COND ((ATOM U) (GO ERR1)))
             (COND
              ((AND (EQUAL (CAR U) 'EXPT) (FIXP (CADDR U))
                    (GREATERP (CADDR U) 0))
               (PROGN
                (SETQ V
                        (LIST 'BOUNDSEXPT-INT (BOUNDSCOMPILE1 (CADR U) T)
                              (CADDR U)))
                (GO DONE))))
             (SETQ W
                     (PROG (Y FORALL-RESULT FORALL-ENDPTR)
                       (SETQ Y (CDR U))
                       (COND ((NULL Y) (RETURN NIL)))
                       (SETQ FORALL-RESULT
                               (SETQ FORALL-ENDPTR
                                       (CONS
                                        ((LAMBDA (Y) (BOUNDSCOMPILE1 Y T))
                                         (CAR Y))
                                        NIL)))
                      LOOPLABEL
                       (SETQ Y (CDR Y))
                       (COND ((NULL Y) (RETURN FORALL-RESULT)))
                       (RPLACD FORALL-ENDPTR
                               (CONS
                                ((LAMBDA (Y) (BOUNDSCOMPILE1 Y T)) (CAR Y))
                                NIL))
                       (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                       (GO LOOPLABEL)))
             (SETQ V
                     (COND
                      ((AND (GREATERP (LENGTH W) 2)
                            (SETQ FCN (GET (CAR U) 'BOUNDSEVALN)))
                       (LIST FCN (CONS 'LIST W)))
                      ((GREATERP (LENGTH W) 2) T)
                      ((SETQ FCN (GET (CAR U) 'BOUNDSEVAL1))
                       (LIST FCN (MKQUOTE (CAR U)) (CAR W)))
                      ((SETQ FCN (GET (CAR U) 'BOUNDSEVAL))
                       (COND ((NULL (CDR W)) (LIST FCN (CAR W)))
                             (T (LIST FCN (CAR W) (CADR W)))))
                      ((CDR W) T) (T (LIST 'BOUNDSOPERATOR (CAR U) (CAR W)))))
            DONE
             (COND ((EQUAL V T) (GO ERR2)))
             (COND ((NOT FLAG) (RETURN V)))
             (SETQ VAR (GENSYM))
             (SETQ BOUNDSCOMPV* (CONS VAR BOUNDSCOMPV*))
             (SETQ BOUNDSCOMPCODE* (CONS (LIST 'SETQ VAR V) BOUNDSCOMPCODE*))
             (SETQ BOUNDSDB* (CONS (CONS U VAR) BOUNDSDB*))
             (RETURN VAR)
            ERR1
             (TYPERR U "bounded value")
            ERR2
             (TYPERR U "expression to be compiled for bounds"))))) 
(ENDMODULE) 