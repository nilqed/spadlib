(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'OFSFEXFR)) 
(REVISION 'OFSFEXFR
          "$Id: ofsfexfr.red 5986 2021-08-28 13:35:27Z thomas-sturm $") 
(COPYRIGHT 'OFSFEXFR "(c) 2012-2015 M. Kosta, T. Sturm") 
(PUT 'GANU 'ASSERT_DYNTYPECHK 'GANUP) 
(FLAG '(GANU) 'ASSERT_DYNTYPE) 
(PUT 'ANUINTERVALLIST 'ASSERT_DYNTYPECHK 'ANUINTERVALLISTP) 
(FLAG '(ANUINTERVALLIST) 'ASSERT_DYNTYPE) 
(PUT 'ANUINTERVAL 'ASSERT_DYNTYPECHK 'ANUINTERVALP) 
(FLAG '(ANUINTERVAL) 'ASSERT_DYNTYPE) 
(PUT 'ANUSPAN 'ASSERT_DYNTYPECHK 'ANUSPANP) 
(FLAG '(ANUSPAN) 'ASSERT_DYNTYPE) 
(PUT 'ANUSPANBOUND 'ASSERT_DYNTYPECHK 'ANUSPANBOUNDP) 
(FLAG '(ANUSPANBOUND) 'ASSERT_DYNTYPE) 
(PUT 'ANUPOINT 'ASSERT_DYNTYPECHK 'ANUPOINTP) 
(FLAG '(ANUPOINT) 'ASSERT_DYNTYPE) 
(PUT 'GANUP 'NUMBER-OF-ARGS 1) 
(PUT 'GANUP 'DEFINED-ON-LINE '46) 
(PUT 'GANUP 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'GANUP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE GANUP (S) (OR (ANUP S) (EQ S 'MINF) (EQ S 'PINF))) 
(PUT 'ANUINTERVALLISTP 'NUMBER-OF-ARGS 1) 
(PUT 'ANUINTERVALLISTP 'DEFINED-ON-LINE '49) 
(PUT 'ANUINTERVALLISTP 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'ANUINTERVALLISTP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE ANUINTERVALLISTP (S)
    (OR (NOT S)
        (AND (PAIRP S) (ANUINTERVALP (CAR S)) (ANUINTERVALLISTP (CDR S))))) 
(PUT 'ANUINTERVALP 'NUMBER-OF-ARGS 1) 
(PUT 'ANUINTERVALP 'DEFINED-ON-LINE '52) 
(PUT 'ANUINTERVALP 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'ANUINTERVALP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE ANUINTERVALP (S) (OR (NOT S) (EQCAR S 'ANUIV_SPAN) (EQCAR S 'ANUIV_POINT))) 
(PUT 'ANUSPANP 'NUMBER-OF-ARGS 1) 
(PUT 'ANUSPANP 'DEFINED-ON-LINE '55) 
(PUT 'ANUSPANP 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'ANUSPANP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE ANUSPANP (S) (EQCAR S 'ANUIV_SPAN)) 
(PUT 'ANUSPANBOUNDP 'NUMBER-OF-ARGS 1) 
(PUT 'ANUSPANBOUNDP 'DEFINED-ON-LINE '58) 
(PUT 'ANUSPANBOUNDP 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'ANUSPANBOUNDP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE ANUSPANBOUNDP (S) (OR (EQCAR S 'ANUSP_OPEN) (EQCAR S 'ANUSP_CLOSED))) 
(PUT 'ANUPOINTP 'NUMBER-OF-ARGS 1) 
(PUT 'ANUPOINTP 'DEFINED-ON-LINE '61) 
(PUT 'ANUPOINTP 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'ANUPOINTP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE ANUPOINTP (S) (EQCAR S 'ANUIV_POINT)) 
(PUT 'ANUIV_PTP 'NUMBER-OF-ARGS 1) 
(DE ANUIV_PTP (IV) (EQCAR IV 'ANUIV_POINT)) 
(PUT 'ANUIV_SPP 'NUMBER-OF-ARGS 1) 
(DE ANUIV_SPP (IV) (EQCAR IV 'ANUIV_SPAN)) 
(PUT 'ANUPT_MK 'NUMBER-OF-ARGS 1) 
(DE ANUPT_MK (ANU) (LIST 'ANUIV_POINT ANU)) 
(PUT 'ANUPT_ANU 'NUMBER-OF-ARGS 1) 
(DE ANUPT_ANU (PT) (NTH PT 2)) 
(PUT 'ANUSP_MK 'NUMBER-OF-ARGS 4) 
(DE ANUSP_MK (LT LB UT UB)
    (LIST 'ANUIV_SPAN (LIST (COND ((EQ LB 'MINF) 'ANUSP_OPEN) (T LT)) LB)
          (LIST (COND ((EQ UB 'PINF) 'ANUSP_OPEN) (T UT)) UB))) 
(PUT 'ANUSP_LT 'NUMBER-OF-ARGS 1) 
(DE ANUSP_LT (IV) (CAR (NTH IV 2))) 
(PUT 'ANUSP_LB 'NUMBER-OF-ARGS 1) 
(DE ANUSP_LB (IV) (CADR (NTH IV 2))) 
(PUT 'ANUSP_UT 'NUMBER-OF-ARGS 1) 
(DE ANUSP_UT (IV) (CAR (NTH IV 3))) 
(PUT 'ANUSP_UB 'NUMBER-OF-ARGS 1) 
(DE ANUSP_UB (IV) (CADR (NTH IV 3))) 
(PUT 'EXFRDATA 'ASSERT_DYNTYPECHK 'EXFRDATAP) 
(FLAG '(EXFRDATA) 'ASSERT_DYNTYPE) 
(PUT 'EXFRDATAP 'NUMBER-OF-ARGS 1) 
(PUT 'EXFRDATAP 'DEFINED-ON-LINE '95) 
(PUT 'EXFRDATAP 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'EXFRDATAP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE EXFRDATAP (S) (AND (ATOM S) (EQ (GETV S 0) 'EXFRDATA))) 
(PUT 'EXFRDATA_MKBLANK 'NUMBER-OF-ARGS 0) 
(DE EXFRDATA_MKBLANK NIL
    (PROG (ED) (SETQ ED (MKVECT 12)) (PUTV (ED) 0 'EXFRDATA) (RETURN (ED)))) 
(PUT 'EXFRDATA_PHI 'NUMBER-OF-ARGS 1) 
(PUT 'EXFRDATA_PHI 'DEFINED-ON-LINE '105) 
(PUT 'EXFRDATA_PHI 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'EXFRDATA_PHI 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE EXFRDATA_PHI (ED) (GETV (ED) 1)) 
(PUT 'EXFRDATA_VARL 'NUMBER-OF-ARGS 1) 
(PUT 'EXFRDATA_VARL 'DEFINED-ON-LINE '106) 
(PUT 'EXFRDATA_VARL 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'EXFRDATA_VARL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE EXFRDATA_VARL (ED) (GETV (ED) 2)) 
(PUT 'EXFRDATA_N 'NUMBER-OF-ARGS 1) 
(PUT 'EXFRDATA_N 'DEFINED-ON-LINE '107) 
(PUT 'EXFRDATA_N 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'EXFRDATA_N 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE EXFRDATA_N (ED) (GETV (ED) 3)) 
(PUT 'EXFRDATA_OLDORDER 'NUMBER-OF-ARGS 1) 
(PUT 'EXFRDATA_OLDORDER 'DEFINED-ON-LINE '108) 
(PUT 'EXFRDATA_OLDORDER 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'EXFRDATA_OLDORDER 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE EXFRDATA_OLDORDER (ED) (GETV (ED) 4)) 
(PUT 'EXFRDATA_LVLAL 'NUMBER-OF-ARGS 1) 
(PUT 'EXFRDATA_LVLAL 'DEFINED-ON-LINE '109) 
(PUT 'EXFRDATA_LVLAL 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'EXFRDATA_LVLAL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE EXFRDATA_LVLAL (ED) (GETV (ED) 5)) 
(PUT 'EXFRDATA_CC 'NUMBER-OF-ARGS 1) 
(PUT 'EXFRDATA_CC 'DEFINED-ON-LINE '110) 
(PUT 'EXFRDATA_CC 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'EXFRDATA_CC 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE EXFRDATA_CC (ED) (GETV (ED) 6)) 
(PUT 'EXFRDATA_ASGV 'NUMBER-OF-ARGS 1) 
(PUT 'EXFRDATA_ASGV 'DEFINED-ON-LINE '111) 
(PUT 'EXFRDATA_ASGV 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'EXFRDATA_ASGV 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE EXFRDATA_ASGV (ED) (GETV (ED) 7)) 
(PUT 'EXFRDATA_TRLV 'NUMBER-OF-ARGS 1) 
(PUT 'EXFRDATA_TRLV 'DEFINED-ON-LINE '112) 
(PUT 'EXFRDATA_TRLV 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'EXFRDATA_TRLV 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE EXFRDATA_TRLV (ED) (GETV (ED) 8)) 
(PUT 'EXFRDATA_IVLV 'NUMBER-OF-ARGS 1) 
(PUT 'EXFRDATA_IVLV 'DEFINED-ON-LINE '113) 
(PUT 'EXFRDATA_IVLV 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'EXFRDATA_IVLV 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE EXFRDATA_IVLV (ED) (GETV (ED) 9)) 
(PUT 'EXFRDATA_LEVEL 'NUMBER-OF-ARGS 1) 
(PUT 'EXFRDATA_LEVEL 'DEFINED-ON-LINE '114) 
(PUT 'EXFRDATA_LEVEL 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'EXFRDATA_LEVEL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE EXFRDATA_LEVEL (ED) (GETV (ED) 10)) 
(PUT 'EXFRDATA_MODE 'NUMBER-OF-ARGS 1) 
(PUT 'EXFRDATA_MODE 'DEFINED-ON-LINE '115) 
(PUT 'EXFRDATA_MODE 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'EXFRDATA_MODE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE EXFRDATA_MODE (ED) (GETV (ED) 11)) 
(PUT 'EXFRDATA_TARGET 'NUMBER-OF-ARGS 1) 
(PUT 'EXFRDATA_TARGET 'DEFINED-ON-LINE '116) 
(PUT 'EXFRDATA_TARGET 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'EXFRDATA_TARGET 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE EXFRDATA_TARGET (ED) (GETV (ED) 12)) 
(PUT 'EXFRDATA_PUTPHI 'NUMBER-OF-ARGS 2) 
(PUT 'EXFRDATA_PUTPHI 'DEFINED-ON-LINE '118) 
(PUT 'EXFRDATA_PUTPHI 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'EXFRDATA_PUTPHI 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE EXFRDATA_PUTPHI (ED PHI) (PUTV (ED) 1 PHI)) 
(PUT 'EXFRDATA_PUTVARL 'NUMBER-OF-ARGS 2) 
(PUT 'EXFRDATA_PUTVARL 'DEFINED-ON-LINE '119) 
(PUT 'EXFRDATA_PUTVARL 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'EXFRDATA_PUTVARL 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE EXFRDATA_PUTVARL (ED VARL) (PUTV (ED) 2 VARL)) 
(PUT 'EXFRDATA_PUTN 'NUMBER-OF-ARGS 2) 
(PUT 'EXFRDATA_PUTN 'DEFINED-ON-LINE '120) 
(PUT 'EXFRDATA_PUTN 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'EXFRDATA_PUTN 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE EXFRDATA_PUTN (ED N) (PUTV (ED) 3 N)) 
(PUT 'EXFRDATA_PUTOLDORDER 'NUMBER-OF-ARGS 2) 
(PUT 'EXFRDATA_PUTOLDORDER 'DEFINED-ON-LINE '121) 
(PUT 'EXFRDATA_PUTOLDORDER 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'EXFRDATA_PUTOLDORDER 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE EXFRDATA_PUTOLDORDER (ED OO) (PUTV (ED) 4 OO)) 
(PUT 'EXFRDATA_PUTLVLAL 'NUMBER-OF-ARGS 2) 
(PUT 'EXFRDATA_PUTLVLAL 'DEFINED-ON-LINE '122) 
(PUT 'EXFRDATA_PUTLVLAL 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'EXFRDATA_PUTLVLAL 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE EXFRDATA_PUTLVLAL (ED LVLAL) (PUTV (ED) 5 LVLAL)) 
(PUT 'EXFRDATA_PUTCC 'NUMBER-OF-ARGS 2) 
(PUT 'EXFRDATA_PUTCC 'DEFINED-ON-LINE '123) 
(PUT 'EXFRDATA_PUTCC 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'EXFRDATA_PUTCC 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE EXFRDATA_PUTCC (ED CC) (PUTV (ED) 6 CC)) 
(PUT 'EXFRDATA_PUTASGV 'NUMBER-OF-ARGS 2) 
(PUT 'EXFRDATA_PUTASGV 'DEFINED-ON-LINE '124) 
(PUT 'EXFRDATA_PUTASGV 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'EXFRDATA_PUTASGV 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE EXFRDATA_PUTASGV (ED V) (PUTV (ED) 7 V)) 
(PUT 'EXFRDATA_PUTTRLV 'NUMBER-OF-ARGS 2) 
(PUT 'EXFRDATA_PUTTRLV 'DEFINED-ON-LINE '125) 
(PUT 'EXFRDATA_PUTTRLV 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'EXFRDATA_PUTTRLV 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE EXFRDATA_PUTTRLV (ED V) (PUTV (ED) 8 V)) 
(PUT 'EXFRDATA_PUTIVLV 'NUMBER-OF-ARGS 2) 
(PUT 'EXFRDATA_PUTIVLV 'DEFINED-ON-LINE '126) 
(PUT 'EXFRDATA_PUTIVLV 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'EXFRDATA_PUTIVLV 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE EXFRDATA_PUTIVLV (ED V) (PUTV (ED) 9 V)) 
(PUT 'EXFRDATA_PUTLEVEL 'NUMBER-OF-ARGS 2) 
(PUT 'EXFRDATA_PUTLEVEL 'DEFINED-ON-LINE '127) 
(PUT 'EXFRDATA_PUTLEVEL 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'EXFRDATA_PUTLEVEL 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE EXFRDATA_PUTLEVEL (ED L) (PUTV (ED) 10 L)) 
(PUT 'EXFRDATA_PUTMODE 'NUMBER-OF-ARGS 2) 
(PUT 'EXFRDATA_PUTMODE 'DEFINED-ON-LINE '128) 
(PUT 'EXFRDATA_PUTMODE 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'EXFRDATA_PUTMODE 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE EXFRDATA_PUTMODE (ED M) (PUTV (ED) 11 M)) 
(PUT 'EXFRDATA_PUTTARGET 'NUMBER-OF-ARGS 2) 
(PUT 'EXFRDATA_PUTTARGET 'DEFINED-ON-LINE '129) 
(PUT 'EXFRDATA_PUTTARGET 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'EXFRDATA_PUTTARGET 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE EXFRDATA_PUTTARGET (ED TGT) (PUTV (ED) 12 TGT)) 
(PUT 'EXFRDATA_INIT 'NUMBER-OF-ARGS 1) 
(DE EXFRDATA_INIT (PHI)
    (PROG (ED VARL OO LVLAL CC N I)
      (SETQ N 0)
      (SETQ I 0)
      (SETQ ED (EXFRDATA_MKBLANK))
      (SETQ VARL (CL_FVARL PHI))
      (SETQ OO (SETKORDER VARL))
      (SETQ N (LENGTH VARL))
      (SETQ LVLAL
              (PROG (V FORALL-RESULT FORALL-ENDPTR)
                (SETQ V (REVERSE VARL))
                (COND ((NULL V) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS
                                 ((LAMBDA (V) (CONS V (SETQ I (PLUS I 1))))
                                  (CAR V))
                                 NIL)))
               LOOPLABEL
                (SETQ V (CDR V))
                (COND ((NULL V) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        (CONS
                         ((LAMBDA (V) (CONS V (SETQ I (PLUS I 1)))) (CAR V))
                         NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (SETQ CC (MKVECT N))
      (EXFR_SPLITPHI PHI LVLAL CC)
      (EXFRDATA_PUTPHI (ED) PHI)
      (EXFRDATA_PUTVARL (ED) VARL)
      (EXFRDATA_PUTN (ED) N)
      (EXFRDATA_PUTOLDORDER (ED) OO)
      (EXFRDATA_PUTLVLAL (ED) LVLAL)
      (EXFRDATA_PUTCC (ED) CC)
      (EXFRDATA_PUTASGV (ED) (MKVECT N))
      (EXFRDATA_PUTTRLV (ED) (MKVECT N))
      (EXFRDATA_PUTIVLV (ED) (MKVECT N))
      (EXFRDATA_PUTLEVEL (ED) 1)
      (EXFRDATA_PUTMODE (ED) NIL)
      (EXFRDATA_PUTTARGET (ED) NIL)
      (RETURN (ED)))) 
(PUT 'EXFR_SPLITPHI 'NUMBER-OF-ARGS 3) 
(DE EXFR_SPLITPHI (PHI LVLAL CC)
    (PROG (W LVL)
      (SETQ LVL 0)
      (COND (NIL NIL))
      (PROG (C)
        (SETQ C (CDR PHI))
       LAB
        (COND ((NULL C) (RETURN NIL)))
        ((LAMBDA (C)
           (PROGN
            (COND (NIL NIL))
            (SETQ LVL (CDR (ATSOC (CAR (CL_FVARL C)) LVLAL)))
            (PROG (W1)
              (SETQ W1 (CDR C))
              (PUTV CC LVL (CONS W1 (GETV CC LVL)))
              (RETURN W1))))
         (CAR C))
        (SETQ C (CDR C))
        (GO LAB)))) 
(PUT 'STATE 'ASSERT_DYNTYPECHK 'STATEP) 
(FLAG '(STATE) 'ASSERT_DYNTYPE) 
(PUT 'TRAIL 'ASSERT_DYNTYPECHK 'LISTP) 
(FLAG '(TRAIL) 'ASSERT_DYNTYPE) 
(PUT 'CLAUSE 'ASSERT_DYNTYPECHK 'CLAUSEP) 
(FLAG '(CLAUSE) 'ASSERT_DYNTYPE) 
(PUT 'TRAILLIT 'ASSERT_DYNTYPECHK 'TRAILLITP) 
(FLAG '(TRAILLIT) 'ASSERT_DYNTYPE) 
(PUT 'STATEP 'NUMBER-OF-ARGS 1) 
(PUT 'STATEP 'DEFINED-ON-LINE '189) 
(PUT 'STATEP 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'STATEP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE STATEP (S) (EQCAR S 'RL_STATE)) 
(PUT 'CLAUSEP 'NUMBER-OF-ARGS 1) 
(PUT 'CLAUSEP 'DEFINED-ON-LINE '192) 
(PUT 'CLAUSEP 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'CLAUSEP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE CLAUSEP (S) (EQCAR S 'RL_CLAUSE)) 
(PUT 'TRAILLITP 'NUMBER-OF-ARGS 1) 
(PUT 'TRAILLITP 'DEFINED-ON-LINE '195) 
(PUT 'TRAILLITP 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'TRAILLITP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE TRAILLITP (S) (OR (EQCAR S 'RL_PROPLIT) (EQCAR S 'RL_DECLIT))) 
(PUT 'STATE_MK 'NUMBER-OF-ARGS 6) 
(DE STATE_MK (M TA TRL CL VL N) (LIST 'RL_STATE M TA TRL CL VL N)) 
(PUT 'STATE_MODE 'NUMBER-OF-ARGS 1) 
(DE STATE_MODE (S) (NTH S 2)) 
(PUT 'STATE_TARGET 'NUMBER-OF-ARGS 1) 
(DE STATE_TARGET (S) (NTH S 3)) 
(PUT 'STATE_TRAIL 'NUMBER-OF-ARGS 1) 
(DE STATE_TRAIL (S) (NTH S 4)) 
(PUT 'STATE_CL 'NUMBER-OF-ARGS 1) 
(DE STATE_CL (S) (NTH S 5)) 
(PUT 'STATE_VL 'NUMBER-OF-ARGS 1) 
(DE STATE_VL (S) (NTH S 6)) 
(PUT 'STATE_LEVEL 'NUMBER-OF-ARGS 1) 
(DE STATE_LEVEL (S) (NTH S 7)) 
(PUT 'CLAUSE_MK 'NUMBER-OF-ARGS 3) 
(DE CLAUSE_MK (TG N LL) (LIST 'RL_CLAUSE TG N LL)) 
(PUT 'CLAUSE_TG 'NUMBER-OF-ARGS 1) 
(DE CLAUSE_TG (C) (NTH C 2)) 
(PUT 'CLAUSE_LEVEL 'NUMBER-OF-ARGS 1) 
(DE CLAUSE_LEVEL (C) (NTH C 3)) 
(PUT 'CLAUSE_LL 'NUMBER-OF-ARGS 1) 
(DE CLAUSE_LL (C) (NTH C 4)) 
(PUT 'TRAIL_PUSH 'NUMBER-OF-ARGS 2) 
(DE TRAIL_PUSH (TRE TRL) (CONS TRE TRL)) 
(PUT 'TRAIL_POP 'NUMBER-OF-ARGS 1) 
(DE TRAIL_POP (TRL) TRL) 
(PUT 'TRAIL_EXTRACT 'NUMBER-OF-ARGS 1) 
(DE TRAIL_EXTRACT (TRL)
    (PROG (TRE ASSL LITL)
      (SETQ TRL (REVERSE TRL))
      (PROG ()
       WHILELABEL
        (COND ((NOT TRL) (RETURN NIL)))
        (PROGN
         (SETQ TRE (PROG1 (CAR TRL) (SETQ TRL (CDR TRL))))
         (COND
          ((TRE_VARASSP TRE)
           (PROGN (PROGN (SETQ ASSL (CONS TRE ASSL)) TRE) (SETQ LITL NIL)))
          (T (PROGN (SETQ LITL (CONS TRE LITL)) TRE))))
        (GO WHILELABEL))
      (RETURN (CONS (REVERSIP ASSL) (REVERSIP LITL))))) 
(PUT 'TLIT_MK 'NUMBER-OF-ARGS 3) 
(DE TLIT_MK (TAG E ATF) (LIST TAG E ATF)) 
(PUT 'TLIT_TAG 'NUMBER-OF-ARGS 1) 
(DE TLIT_TAG (TL) (NTH TL 1)) 
(PUT 'TLIT_E 'NUMBER-OF-ARGS 1) 
(DE TLIT_E (TL) (NTH TL 2)) 
(PUT 'TLIT_ATF 'NUMBER-OF-ARGS 1) 
(DE TLIT_ATF (TL) (NTH TL 3)) 
(DE TRE_VARASSP (TRE) (EQCAR TRE 'RL_VARASS)) 
(PUT 'TRE_VARASSP 'NUMBER-OF-ARGS 1) 
(PUT 'TRE_VARASSP 'DEFINED-ON-LINE '273) 
(PUT 'TRE_VARASSP 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'TRE_VARASSP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'TRE_VARASSP 'INLINE '(LAMBDA (TRE) (EQCAR TRE 'RL_VARASS))) 
(DE TRE_DECLITP (TRE) (EQCAR TRE 'RL_DECLIT)) 
(PUT 'TRE_DECLITP 'NUMBER-OF-ARGS 1) 
(PUT 'TRE_DECLITP 'DEFINED-ON-LINE '276) 
(PUT 'TRE_DECLITP 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'TRE_DECLITP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'TRE_DECLITP 'INLINE '(LAMBDA (TRE) (EQCAR TRE 'RL_DECLIT))) 
(DE TRE_PROPLITP (TRE) (EQCAR TRE 'RL_PROPLIT)) 
(PUT 'TRE_PROPLITP 'NUMBER-OF-ARGS 1) 
(PUT 'TRE_PROPLITP 'DEFINED-ON-LINE '279) 
(PUT 'TRE_PROPLITP 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'TRE_PROPLITP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'TRE_PROPLITP 'INLINE '(LAMBDA (TRE) (EQCAR TRE 'RL_PROPLIT))) 
(DE TRE_LITP (TRE) (OR (EQCAR TRE 'RL_PROPLIT) (EQCAR TRE 'RL_DECLIT))) 
(PUT 'TRE_LITP 'NUMBER-OF-ARGS 1) 
(PUT 'TRE_LITP 'DEFINED-ON-LINE '282) 
(PUT 'TRE_LITP 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'TRE_LITP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'TRE_LITP 'INLINE
      '(LAMBDA (TRE) (OR (EQCAR TRE 'RL_PROPLIT) (EQCAR TRE 'RL_DECLIT)))) 
(DE TRE_LIT (TRE) (CADR TRE)) 
(PUT 'TRE_LIT 'NUMBER-OF-ARGS 1) 
(PUT 'TRE_LIT 'DEFINED-ON-LINE '285) 
(PUT 'TRE_LIT 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'TRE_LIT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'TRE_LIT 'INLINE '(LAMBDA (TRE) (CADR TRE))) 
(DE VARASS_MK (X ANU) (LIST 'RL_VARASS X ANU)) 
(PUT 'VARASS_MK 'NUMBER-OF-ARGS 2) 
(PUT 'VARASS_MK 'DEFINED-ON-LINE '288) 
(PUT 'VARASS_MK 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'VARASS_MK 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(PUTC 'VARASS_MK 'INLINE '(LAMBDA (X ANU) (LIST 'RL_VARASS X ANU))) 
(DE VARASS_X (VA) (NTH VA 2)) 
(PUT 'VARASS_X 'NUMBER-OF-ARGS 1) 
(PUT 'VARASS_X 'DEFINED-ON-LINE '291) 
(PUT 'VARASS_X 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'VARASS_X 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'VARASS_X 'INLINE '(LAMBDA (VA) (NTH VA 2))) 
(DE VARASS_VALUE (VA) (NTH VA 3)) 
(PUT 'VARASS_VALUE 'NUMBER-OF-ARGS 1) 
(PUT 'VARASS_VALUE 'DEFINED-ON-LINE '294) 
(PUT 'VARASS_VALUE 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'VARASS_VALUE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'VARASS_VALUE 'INLINE '(LAMBDA (VA) (NTH VA 3))) 
(PUT 'OFSF_SELECTCLAUSE 'NUMBER-OF-ARGS 1) 
(DE OFSF_SELECTCLAUSE (S)
    (PROG (CL LV TRL W SC)
      (COND ((STATE_MODE S) (RETURN NIL)))
      (SETQ CL (STATE_CL S))
      (SETQ LV (STATE_LEVEL S))
      (SETQ TRL (STATE_TRAIL S))
      (PROG ()
       WHILELABEL
        (COND ((NOT CL) (RETURN NIL)))
        (PROGN
         (SETQ W (PROG1 (CAR CL) (SETQ CL (CDR CL))))
         (COND
          ((AND (EQN LV (CLAUSE_LEVEL W)) (OFSF_UNDEFP W TRL))
           (PROGN (SETQ CL NIL) (SETQ SC W)))))
        (GO WHILELABEL))
      (COND ((NULL SC) (RETURN NIL)))
      (RETURN (STATE_MK 'MODELS SC TRL (STATE_CL S) (STATE_VL S) LV)))) 
(PUT 'OFSF_CONFLICT 'NUMBER-OF-ARGS 1) 
(DE OFSF_CONFLICT (S)
    (PROG (CL LV TRL W CC)
      (COND ((STATE_MODE S) (RETURN NIL)))
      (SETQ CL (STATE_CL S))
      (SETQ LV (STATE_LEVEL S))
      (SETQ TRL (STATE_TRAIL S))
      (PROG ()
       WHILELABEL
        (COND ((NOT CL) (RETURN NIL)))
        (PROGN
         (SETQ W (PROG1 (CAR CL) (SETQ CL (CDR CL))))
         (COND
          ((AND (GEQ LV (CLAUSE_LEVEL W)) (EQ (OFSF_VALUE W TRL) 'FALSE))
           (PROGN (SETQ CL NIL) (SETQ CC W)))))
        (GO WHILELABEL))
      (COND ((NOT CC) (RETURN NIL)))
      (RETURN (STATE_MK 'VDASH CC TRL (STATE_CL S) (STATE_VL S) LV)))) 
(PUT 'OFSF_SAT 'NUMBER-OF-ARGS 1) 
(DE OFSF_SAT (S)
    (PROG (EQL)
      (COND ((OR (STATE_MODE S) (STATE_VL S)) (RETURN NIL)))
      (SETQ EQL (CAR (TRAIL_EXTRACT (STATE_TRAIL S))))
      (RETURN
       (STATE_MK 'SAT NIL EQL NIL (STATE_VL S) (PLUS (STATE_LEVEL S) 1))))) 
(PUT 'OFSF_LIFTLEVEL 'NUMBER-OF-ARGS 1) 
(DE OFSF_LIFTLEVEL (S)
    (PROG (VL XK IVL ALPHA)
      (COND ((STATE_MODE S) (RETURN NIL)))
      (SETQ VL (STATE_VL S))
      (SETQ XK (PROG1 (CAR VL) (SETQ VL (CDR VL))))
      (SETQ IVL (OFSF_FEASIBLE (STATE_TRAIL S)))
      (COND ((NULL IVL) (RETURN NIL)))
      (SETQ ALPHA (OFSF_CHOOSEFROMIV (CAR IVL) XK))
      (STATE_MK NIL NIL (TRAIL_PUSH (STATE_TRAIL S) (LIST 'RL_VARASS XK ALPHA))
       (STATE_CL S) VL (PLUS (STATE_LEVEL S) 1)))) 
(PUT 'OFSF_FEASIBLE 'NUMBER-OF-ARGS 1) 
(DE OFSF_FEASIBLE (TRL)
    (PROG (ASSL LITL ATF FL GL ASSAL)
      (PROG (G417)
        (SETQ G417 (TRAIL_EXTRACT TRL))
        (SETQ ASSL (CAR G417))
        (SETQ LITL (CDR G417))
        (RETURN G417))
      (SETQ ASSAL
              (PROG (A FORALL-RESULT FORALL-ENDPTR)
                (SETQ A ASSL)
                (COND ((NULL A) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS
                                 ((LAMBDA (A) (CONS (NTH A 2) (NTH A 3)))
                                  (CAR A))
                                 NIL)))
               LOOPLABEL
                (SETQ A (CDR A))
                (COND ((NULL A) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        (CONS ((LAMBDA (A) (CONS (NTH A 2) (NTH A 3))) (CAR A))
                              NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (PROG (LIT)
        (SETQ LIT LITL)
       LAB
        (COND ((NULL LIT) (RETURN NIL)))
        ((LAMBDA (LIT)
           (PROGN
            (SETQ ATF (TLIT_ATF LIT))
            (COND ((EQ (CAR ATF) 'EQUAL) (PROGN (SETQ FL (CONS ATF FL)) ATF))
                  (T (PROGN (SETQ GL (CONS ATF GL)) ATF)))))
         (CAR LIT))
        (SETQ LIT (CDR LIT))
        (GO LAB))
      (SETQ FL
              (PROG (F FORALL-RESULT FORALL-ENDPTR)
                (SETQ F FL)
                (COND ((NULL F) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS
                                 ((LAMBDA (F)
                                    (CONS (OFSF_ANUSUBF (CADR F) ASSAL)
                                          'EQUAL))
                                  (CAR F))
                                 NIL)))
               LOOPLABEL
                (SETQ F (CDR F))
                (COND ((NULL F) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        (CONS
                         ((LAMBDA (F)
                            (CONS (OFSF_ANUSUBF (CADR F) ASSAL) 'EQUAL))
                          (CAR F))
                         NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (SETQ GL
              (PROG (G FORALL-RESULT FORALL-ENDPTR)
                (SETQ G GL)
                (COND ((NULL G) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS
                                 ((LAMBDA (G)
                                    (CONS (OFSF_ANUSUBF (CADR G) ASSAL)
                                          (CAR G)))
                                  (CAR G))
                                 NIL)))
               LOOPLABEL
                (SETQ G (CDR G))
                (COND ((NULL G) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        (CONS
                         ((LAMBDA (G)
                            (CONS (OFSF_ANUSUBF (CADR G) ASSAL) (CAR G)))
                          (CAR G))
                         NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (RETURN (COND (FL (OFSF_FEASIBLE1 FL GL)) (T (OFSF_FEASIBLE2 GL)))))) 
(PUT 'OFSF_FEASIBLE1 'NUMBER-OF-ARGS 2) 
(DE OFSF_FEASIBLE1 (FL GL)
    (PROG (XK F)
      (SETQ F (CAR (PROG1 (CAR FL) (SETQ FL (CDR FL)))))
      (SETQ XK (AEX_MVAR F))
      (RETURN
       (PROG (ANU FORALL-RESULT FORALL-ENDPTR)
         (SETQ ANU (AEX_FINDROOTS F XK))
        STARTOVER
         (COND ((NULL ANU) (RETURN NIL)))
         (SETQ FORALL-RESULT
                 ((LAMBDA (ANU)
                    (COND
                     ((OFSF_FEASIBLE11 ANU XK FL GL) (LIST (ANUPT_MK ANU)))))
                  (CAR ANU)))
         (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
         (SETQ ANU (CDR ANU))
         (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
        LOOPLABEL
         (COND ((NULL ANU) (RETURN FORALL-RESULT)))
         (RPLACD FORALL-ENDPTR
                 ((LAMBDA (ANU)
                    (COND
                     ((OFSF_FEASIBLE11 ANU XK FL GL) (LIST (ANUPT_MK ANU)))))
                  (CAR ANU)))
         (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
         (SETQ ANU (CDR ANU))
         (GO LOOPLABEL))))) 
(PUT 'OFSF_FEASIBLE11 'NUMBER-OF-ARGS 4) 
(DE OFSF_FEASIBLE11 (ANU XK FL GL)
    (PROG (CNT F G OP)
      (SETQ CNT T)
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND CNT FL)) (RETURN NIL)))
        (PROGN
         (SETQ F (CAR (PROG1 (CAR FL) (SETQ FL (CDR FL)))))
         (COND ((NOT (AEX_NULLP (AEX_BIND F XK ANU))) (SETQ CNT NIL))))
        (GO WHILELABEL))
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND CNT GL)) (RETURN NIL)))
        (PROGN
         (PROG (G418)
           (SETQ G418 (PROG1 (CAR GL) (SETQ GL (CDR GL))))
           (SETQ G (CAR G418))
           (SETQ OP (CDR G418))
           (RETURN G418))
         (COND ((NOT (AEX_EVALOP (AEX_BIND G XK ANU) OP)) (SETQ CNT NIL))))
        (GO WHILELABEL))
      (RETURN CNT))) 
(PUT 'OFSF_FEASIBLE2 'NUMBER-OF-ARGS 1) 
(DE OFSF_FEASIBLE2 (GL)
    (PROG (IVL XK G GIVL REL)
      (SETQ IVL (LIST (ANUSP_MK 'ANUSP_OPEN 'MINF 'ANUSP_OPEN 'PINF)))
      (COND ((NULL GL) (RETURN IVL)))
      (SETQ XK (AEX_MVAR (CAAR GL)))
      (PROG ()
       WHILELABEL
        (COND ((NOT GL) (RETURN NIL)))
        (PROGN
         (PROG (G419)
           (SETQ G419 (PROG1 (CAR GL) (SETQ GL (CDR GL))))
           (SETQ G (CAR G419))
           (SETQ REL (CDR G419))
           (RETURN G419))
         (SETQ GIVL (OFSF_LIT2IVL REL G XK))
         (SETQ IVL (OFSF_UPDIVL IVL GIVL))
         (COND ((NOT IVL) (SETQ GL NIL))))
        (GO WHILELABEL))
      (RETURN IVL))) 
(PUT 'OFSF_LIT2IVL 'NUMBER-OF-ARGS 3) 
(DE OFSF_LIT2IVL (REL G XK)
    (PROG (SGVL ROOTL)
      (COND (NIL NIL))
      (SETQ ROOTL (AEX_FINDROOTS G XK))
      (SETQ SGVL (OFSF_LIT2IVL1 REL G XK ROOTL))
      (RETURN SGVL))) 
(PUT 'OFSF_LIT2IVL1 'NUMBER-OF-ARGS 4) 
(DE OFSF_LIT2IVL1 (REL G XK ROOTL)
    (PROG (TAG GP GIVL INSP LB UB SIGN)
      (COND ((EQ REL 'NEQ) (RETURN (OFSF_LIT2IVLNEQ ROOTL))))
      (SETQ TAG (COND ((MEMQ REL '(GEQ LEQ)) 'ANUSP_CLOSED) (T 'ANUSP_OPEN)))
      (SETQ GP (AEX_DIFF G XK))
      (COND
       ((OFSF_FEASIBLEEVAL REL (OFSF_FEASIBLEEVALSGN G XK 'MINF))
        (PROGN
         (SETQ GIVL
                 (LIST (ANUSP_MK 'ANUSP_OPEN 'MINF 'ANUSP_OPEN (CAR ROOTL))))
         (SETQ INSP T))))
      (SETQ ROOTL (NCONC ROOTL (LIST 'PINF)))
      (PROG (RROOTL)
        (SETQ RROOTL ROOTL)
       LAB
        (COND ((NULL RROOTL) (RETURN NIL)))
        (COND
         ((CDR RROOTL)
          (PROGN
           (SETQ LB (CAR RROOTL))
           (SETQ UB (CADR RROOTL))
           (SETQ SIGN (OFSF_FEASIBLEEVALSGN GP XK LB))
           (COND
            ((EQN SIGN 0)
             (COND (INSP (SETQ GIVL (CONS (ANUSP_MK TAG LB TAG UB) GIVL)))
                   (T
                    (COND
                     ((EQ TAG 'ANUSP_CLOSED)
                      (SETQ GIVL (CONS (ANUPT_MK LB) GIVL)))))))
            (T
             (PROGN
              (COND
               ((NOT INSP) (SETQ GIVL (CONS (ANUSP_MK TAG LB TAG UB) GIVL))))
              (SETQ INSP (NOT INSP))))))))
        (SETQ RROOTL (CDR RROOTL))
        (GO LAB))
      (SETQ GIVL (REVERSIP GIVL))
      (COND ((EQ TAG 'ANUSP_CLOSED) (SETQ GIVL (OFSF_LIT2IVLJOIN GIVL))))
      (RETURN GIVL))) 
(PUT 'OFSF_LIT2IVLNEQ 'NUMBER-OF-ARGS 1) 
(DE OFSF_LIT2IVLNEQ (ROOTL)
    (PROG (GIVL LB)
      (SETQ LB 'MINF)
      (PROG (R)
        (SETQ R ROOTL)
       LAB
        (COND ((NULL R) (RETURN NIL)))
        ((LAMBDA (R)
           (PROGN
            (SETQ GIVL (CONS (ANUSP_MK 'ANUSP_OPEN LB 'ANUSP_OPEN R) GIVL))
            (SETQ LB R)))
         (CAR R))
        (SETQ R (CDR R))
        (GO LAB))
      (SETQ GIVL (CONS (ANUSP_MK 'ANUSP_OPEN LB 'ANUSP_OPEN 'PINF) GIVL))
      (RETURN (REVERSIP GIVL)))) 
(PUT 'OFSF_LIT2IVLJOIN 'NUMBER-OF-ARGS 1) 
(DE OFSF_LIT2IVLJOIN (GIVL)
    (PROG (IV1 IV2 JGIVL)
      (COND ((OR (NOT GIVL) (NOT (CDR GIVL))) (RETURN GIVL)))
      (SETQ IV1 (PROG1 (CAR GIVL) (SETQ GIVL (CDR GIVL))))
      (SETQ JGIVL (OFSF_LIT2IVLJOIN GIVL))
      (COND ((ANUIV_PTP IV1) (RETURN (CONS IV1 JGIVL))))
      (SETQ IV2 (PROG1 (CAR JGIVL) (SETQ JGIVL (CDR JGIVL))))
      (COND ((ANUIV_PTP IV2) (RETURN (CONS IV1 (CONS IV2 JGIVL)))))
      (COND
       ((NEQ (ANUSP_UB IV1) (ANUSP_LB IV2))
        (RETURN (CONS IV1 (CONS IV2 JGIVL)))))
      (RETURN
       (CONS
        (ANUSP_MK (ANUSP_LT IV1) (ANUSP_LB IV1) (ANUSP_UT IV2) (ANUSP_UB IV2))
        JGIVL)))) 
(PUT 'OFSF_FEASIBLEEVAL 'NUMBER-OF-ARGS 2) 
(DE OFSF_FEASIBLEEVAL (OP N) (OFSF_EVALATP OP (COND ((EQN N 0) NIL) (T N)))) 
(PUT 'OFSF_UPDIVL 'NUMBER-OF-ARGS 2) 
(DE OFSF_UPDIVL (IVL GIVL)
    (PROG (IV RES1 RES2)
      (COND ((NOT IVL) (RETURN NIL)))
      (SETQ IV (PROG1 (CAR IVL) (SETQ IVL (CDR IVL))))
      (SETQ RES1 (OFSF_IVCUTL IV GIVL))
      (SETQ RES2 (OFSF_UPDIVL IVL GIVL))
      (RETURN (NCONC RES1 RES2)))) 
(PUT 'OFSF_IVCUTL 'NUMBER-OF-ARGS 2) 
(DE OFSF_IVCUTL (IV IVL)
    (PROG (IV2 RES W)
      (COND ((NOT IVL) (RETURN NIL)))
      (SETQ IV2 (PROG1 (CAR IVL) (SETQ IVL (CDR IVL))))
      (SETQ W (OFSF_IVCUTL IV IVL))
      (SETQ RES (OFSF_IVCUT IV IV2))
      (COND (RES (SETQ W (CONS RES W))))
      (RETURN W))) 
(PUT 'OFSF_IVCUT 'NUMBER-OF-ARGS 2) 
(DE OFSF_IVCUT (IV1 IV2)
    (PROG ()
      (COND
       ((AND (ANUIV_PTP IV1) (ANUIV_PTP IV2))
        (PROGN
         (COND
          ((EQN (GANU_COMPARE (ANUPT_ANU IV1) (ANUPT_ANU IV2)) 0)
           (RETURN IV1)))
         (RETURN NIL))))
      (COND ((ANUIV_PTP IV1) (RETURN (OFSF_IVCUT1 IV1 IV2))))
      (COND ((ANUIV_PTP IV2) (RETURN (OFSF_IVCUT1 IV2 IV1))))
      (RETURN (OFSF_IVCUT2 IV1 IV2)))) 
(PUT 'OFSF_IVCUT1 'NUMBER-OF-ARGS 2) 
(DE OFSF_IVCUT1 (P IV)
    (PROG (W)
      (SETQ W (GANU_COMPARE (ANUPT_ANU P) (ANUSP_LB IV)))
      (COND
       ((OR (LESSP W 0) (AND (EQN W 0) (EQ (ANUSP_LT IV) 'ANUSP_OPEN)))
        (RETURN NIL)))
      (SETQ W (GANU_COMPARE (ANUPT_ANU P) (ANUSP_UB IV)))
      (COND
       ((OR (GREATERP W 0) (AND (EQN W 0) (EQ (ANUSP_UT IV) 'ANUSP_OPEN)))
        (RETURN NIL)))
      (RETURN P))) 
(PUT 'OFSF_IVCUT2 'NUMBER-OF-ARGS 2) 
(DE OFSF_IVCUT2 (IV1 IV2)
    (PROG (LT LB UT UB W)
      (PROG (G420)
        (SETQ G420
                (OFSF_IVBMAX (ANUSP_LT IV1) (ANUSP_LB IV1) (ANUSP_LT IV2)
                 (ANUSP_LB IV2)))
        (SETQ LT (CAR G420))
        (SETQ LB (CDR G420))
        (RETURN G420))
      (PROG (G421)
        (SETQ G421
                (OFSF_IVBMIN (ANUSP_UT IV1) (ANUSP_UB IV1) (ANUSP_UT IV2)
                 (ANUSP_UB IV2)))
        (SETQ UT (CAR G421))
        (SETQ UB (CDR G421))
        (RETURN G421))
      (SETQ W (GANU_COMPARE LB UB))
      (COND ((GREATERP W 0) (RETURN NIL)))
      (COND ((LESSP W 0) (RETURN (ANUSP_MK LT LB UT UB))))
      (COND
       ((AND (EQ LT 'ANUSP_CLOSED) (UT (QE 'ANUSP_CLOSED)))
        (RETURN (ANUPT_MK LB))))
      (RETURN NIL))) 
(PUT 'OFSF_IVBMAX 'NUMBER-OF-ARGS 4) 
(DE OFSF_IVBMAX (T1 B1 T2 B2)
    (PROG (W)
      (SETQ W (GANU_COMPARE B1 B2))
      (COND ((LESSP W 0) (RETURN (CONS T2 B2))))
      (COND ((GREATERP W 0) (RETURN (CONS T1 B1))))
      (COND ((EQ T1 'ANUSP_OPEN) (RETURN (CONS T1 B1))))
      (RETURN (CONS T2 B2)))) 
(PUT 'OFSF_IVBMIN 'NUMBER-OF-ARGS 4) 
(DE OFSF_IVBMIN (T1 B1 T2 B2)
    (PROG (W)
      (SETQ W (GANU_COMPARE B1 B2))
      (COND ((GREATERP W 0) (RETURN (CONS T2 B2))))
      (COND ((LESSP W 0) (RETURN (CONS T1 B1))))
      (COND ((EQ T1 'ANUSP_OPEN) (RETURN (CONS T1 B1))))
      (RETURN (CONS T2 B2)))) 
(PUT 'GANU_COMPARE 'NUMBER-OF-ARGS 2) 
(DE GANU_COMPARE (GANU1 GANU2)
    (COND ((EQ GANU1 GANU2) 0) ((OR (EQ GANU1 'PINF) (EQ GANU2 'MINF)) 1)
          ((OR (EQ GANU1 'MINF) (EQ GANU2 'PINF)) (MINUS 1))
          (T (ANU_COMPARE GANU1 GANU2)))) 
(PUT 'OFSF_FEASIBLEEVALSGN 'NUMBER-OF-ARGS 3) 
(DE OFSF_FEASIBLEEVALSGN (G X ANU)
    (COND ((EQ ANU 'PINF) (AEX_SGNATINFTY G X))
          ((EQ ANU 'MINF) (AEX_SGNATMINFTY G X))
          (T (AEX_SGN (AEX_BIND G X ANU))))) 
(PUT 'OFSF_FORGET 'NUMBER-OF-ARGS 1) 
(DE OFSF_FORGET (S)
    (PROG (TCL TC CNT NTCL)
      (COND ((STATE_MODE S) (RETURN NIL)))
      (SETQ TCL (STATE_CL S))
      (SETQ CNT T)
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND CNT TCL)) (RETURN NIL)))
        (PROGN
         (SETQ TC (PROG1 (CAR TCL) (SETQ TCL (CDR TCL))))
         (COND ((NOT (CAR TC)) (SETQ NTCL (CONS TC NTCL)))
               (T
                (PROGN
                 (SETQ CNT NIL)
                 (SETQ NTCL (NCONC (REVERSIP NTCL) TCL))
                 NIL))))
        (GO WHILELABEL))
      (COND (CNT (RETURN NIL)))
      (RETURN
       (STATE_MK NIL NIL (STATE_TRAIL S) NTCL (STATE_VL S) (STATE_LEVEL S))))) 
(PUT 'OFSF_UNDEFP 'NUMBER-OF-ARGS 2) 
(DE OFSF_UNDEFP (C TRL)
    (PROG (AVL AT DEFP)
      (SETQ AVL
              (PROG (TRE FORALL-RESULT FORALL-ENDPTR)
                (SETQ TRE TRL)
               STARTOVER
                (COND ((NULL TRE) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        ((LAMBDA (TRE)
                           (COND ((EQCAR TRE 'RL_VARASS) (LIST (NTH TRE 2)))))
                         (CAR TRE)))
                (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
                (SETQ TRE (CDR TRE))
                (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
               LOOPLABEL
                (COND ((NULL TRE) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        ((LAMBDA (TRE)
                           (COND ((EQCAR TRE 'RL_VARASS) (LIST (NTH TRE 2)))))
                         (CAR TRE)))
                (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
                (SETQ TRE (CDR TRE))
                (GO LOOPLABEL)))
      (SETQ DEFP T)
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND DEFP C)) (RETURN NIL)))
        (PROGN
         (SETQ AT (PROG1 (CAR C) (SETQ C (CDR C))))
         (COND ((NOT (LTO_SUBSETQ (OFSF_VARLAT AT) AVL)) (SETQ DEFP NIL))))
        (GO WHILELABEL))
      (RETURN (NOT DEFP)))) 
(PUT 'OFSF_VALUE 'NUMBER-OF-ARGS 2) 
(DE OFSF_VALUE (C TRL)
    (PROG (EQAL CNT AT)
      (COND ((OFSF_UNDEFP C TRL) (RETURN 'UNDEF)))
      (SETQ EQAL
              (PROG (TRE FORALL-RESULT FORALL-ENDPTR)
                (SETQ TRE TRL)
               STARTOVER
                (COND ((NULL TRE) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        ((LAMBDA (TRE)
                           (COND
                            ((EQCAR TRE 'RL_VARASS)
                             (LIST (CONS (NTH TRE 2) (NTH TRE 3))))))
                         (CAR TRE)))
                (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
                (SETQ TRE (CDR TRE))
                (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
               LOOPLABEL
                (COND ((NULL TRE) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        ((LAMBDA (TRE)
                           (COND
                            ((EQCAR TRE 'RL_VARASS)
                             (LIST (CONS (NTH TRE 2) (NTH TRE 3))))))
                         (CAR TRE)))
                (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
                (SETQ TRE (CDR TRE))
                (GO LOOPLABEL)))
      (SETQ CNT T)
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND CNT C)) (RETURN NIL)))
        (PROGN
         (SETQ AT (PROG1 (CAR C) (SETQ C (CDR C))))
         (COND ((EQ (OFSF_VALUEAT AT EQAL) 'TRUE) (SETQ CNT NIL))))
        (GO WHILELABEL))
      (RETURN (COND (CNT 'FALSE) (T 'TRUE))))) 
(PUT 'OFSF_VALUEAT 'NUMBER-OF-ARGS 2) 
(DE OFSF_VALUEAT (AT EQAL)
    (COND ((OFSF_EVALATP (CAR AT) (OFSF_SUBALF (CADR AT) EQAL)) 'TRUE)
          (T 'FALSE))) 
(PUT 'OFSF_SUBALF 'NUMBER-OF-ARGS 2) 
(DE OFSF_SUBALF (F AL)
    (PROG (NRED NLC)
      (COND ((OR (ATOM F) (ATOM (CAR F))) (RETURN (CONS F 1))))
      (SETQ NRED (OFSF_SUBALF (CDR F) AL))
      (SETQ NLC (OFSF_SUBALF (CDAR F) AL))
      (RETURN
       (ADDSQ (MULTSQ NLC (EXPTSQ (CDR (ATSOC (CAAAR F) AL)) (CDAAR F)))
              NRED)))) 
(PUT 'OFSF_ANUSUBF 'NUMBER-OF-ARGS 2) 
(DE OFSF_ANUSUBF (F AL)
    (PROG (AEX)
      (SETQ AEX (AEX_FROMSF F))
      (PROG (PR)
        (SETQ PR AL)
       LAB
        (COND ((NULL PR) (RETURN NIL)))
        ((LAMBDA (PR) (SETQ AEX (AEX_BIND AEX (CAR PR) (CDR PR)))) (CAR PR))
        (SETQ PR (CDR PR))
        (GO LAB))
      (RETURN AEX))) 
(PUT 'OFSF_CHOOSEFROMIV 'NUMBER-OF-ARGS 2) 
(DE OFSF_CHOOSEFROMIV (IV X)
    (PROG (LT LB UT UB RL RU)
      (COND ((ANUIV_PTP IV) (RETURN (ANUPT_ANU IV))))
      (SETQ LT (ANUSP_LT IV))
      (SETQ LB (ANUSP_LB IV))
      (COND ((EQ LT 'ANUSP_CLOSED) (RETURN LB)))
      (SETQ UT (ANUSP_UT IV))
      (SETQ UB (ANUSP_UB IV))
      (COND ((EQ UT 'ANUSP_CLOSED) (RETURN UB)))
      (COND
       ((EQ LB 'MINF)
        (PROGN
         (COND ((EQ UB 'PINF) (RETURN (ANU_FROMRAT X (CONS NIL 1)))))
         (RETURN (ANU_FROMRAT X (IV_LB (ANU_IV UB)))))))
      (COND ((EQ UB 'PINF) (RETURN (ANU_FROMRAT X (IV_RB (ANU_IV LB))))))
      (SETQ RL (IV_RB (ANU_IV LB)))
      (SETQ RU (IV_LB (ANU_IV UB)))
      (COND (NIL NIL))
      (RETURN (ANU_FROMRAT X RL)))) 
(PUT 'OFSF_DECIDELITERAL 'NUMBER-OF-ARGS 1) 
(DE OFSF_DECIDELITERAL (S)
    (PROG (C TRL ATF)
      (COND ((NEQ (STATE_MODE S) 'MODELS) (RETURN NIL)))
      (SETQ C (STATE_TARGET S))
      (SETQ TRL (STATE_TRAIL S))
      (SETQ ATF (OFSF_PICKCOMPATATF C TRL))
      (SETQ TRL (TRAIL_PUSH (TLIT_MK 'RL_DECLIT C ATF) TRL))
      (RETURN
       (STATE_MK NIL NIL TRL (STATE_CL S) (STATE_VL S) (STATE_LEVEL S))))) 
(PUT 'OFSF_PICKCOMPATATF 'NUMBER-OF-ARGS 2) 
(DE OFSF_PICKCOMPATATF (C TRL)
    (PROG (D ATF)
      (PROG (G422)
        (SETQ G422 (OFSF_UNDEFATF C TRL))
        (SETQ C (CAR G422))
        (SETQ D (CDR G422))
        (RETURN G422))
      (COND ((NULL D) (RETURN NIL)))
      (SETQ ATF (CAR D))
      (PROG (G423)
        (SETQ G423 (OFSF_UNDEFATF (CDR D) TRL))
        (SETQ C (CAR G423))
        (SETQ D (CDR G423))
        (RETURN G423))
      (COND ((NULL D) (RETURN NIL)))
      (COND ((OFSF_COMPATIBLE ATF TRL) (RETURN ATF))))) 
(PUT 'OFSF_UNDEFATF 'NUMBER-OF-ARGS 2) 
(DE OFSF_UNDEFATF (C TRL)
    (PROG (CNT ATF V D)
      (SETQ CNT T)
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND CNT C)) (RETURN NIL)))
        (PROGN
         (SETQ ATF (PROG1 (CAR C) (SETQ C (CDR C))))
         (SETQ V (OFSF_VALUE (LIST ATF) TRL))
         (COND (NIL NIL))
         (COND
          ((EQ V 'UNDEF)
           (PROGN (SETQ CNT NIL) (PROGN (SETQ C (CONS ATF C)) ATF)))
          (T (PROGN (SETQ D (CONS ATF D)) ATF))))
        (GO WHILELABEL))
      (RETURN (CONS (REVERSIP D) C)))) 
(PUT 'OFSF_COMPATIBLE 'NUMBER-OF-ARGS 2) 
(DE OFSF_COMPATIBLE (ATF TRL) (OFSF_FEASIBLE (TRAIL_PUSH (DECLIT_MK ATF) TRL))) 
(PUT 'OFSF_BPROPAGATE 'NUMBER-OF-ARGS 1) 
(DE OFSF_BPROPAGATE (S)
    (PROG (C TRL ATF)
      (COND ((NEQ (STATE_MODE S) 'MODELS) (RETURN NIL)))
      (SETQ C (STATE_TARGET S))
      (SETQ TRL (STATE_TRAIL S))
      (SETQ ATF (OFSF_PICKBPROPAGATEDATF C TRL))
      (SETQ TRL (TRAIL_PUSH (TLIT_MK 'RL_PROPLIT C ATF) TRL))
      (RETURN
       (STATE_MK NIL NIL TRL (STATE_CL S) (STATE_VL S) (STATE_LEVEL S))))) 
(PUT 'OFSF_PICKBPROPAGATEDATF 'NUMBER-OF-ARGS 2) 
(DE OFSF_PICKBPROPAGATEDATF (C TRL)
    (PROG (D ATF)
      (PROG (G424)
        (SETQ G424 (OFSF_UNDEFATF C TRL))
        (SETQ C (CAR G424))
        (SETQ D (CDR G424))
        (RETURN G424))
      (SETQ ATF (CAR D))
      (PROG (G425)
        (SETQ G425 (OFSF_UNDEFATF (CDR D) TRL))
        (SETQ C (CAR G425))
        (SETQ D (CDR G425))
        (RETURN G425))
      (COND (D (RETURN NIL)))
      (RETURN ATF))) 
(PUT 'OFSF_RPROPAGATE 'NUMBER-OF-ARGS 1) 
(DE OFSF_RPROPAGATE (S)
    (PROG (C TRL ATF E)
      (COND ((NEQ (STATE_MODE S) 'MODELS) (RETURN NIL)))
      (SETQ C (STATE_TARGET S))
      (SETQ TRL (STATE_TRAIL S))
      (SETQ ATF (OFSF_INCOMPATIBLEATF C TRL))
      (COND ((NOT ATF) (RETURN NIL)))
      (SETQ E (OFSF_EXPLAIN ATF TRL))
      (SETQ TRL (TRAIL_PUSH (TLIT_MK 'RL_PROPLIT E ATF) TRL))
      (RETURN
       (STATE_MK NIL NIL TRL (STATE_CL S) (STATE_VL S) (STATE_LEVEL S))))) 
(PUT 'OFSF_INCOMPATIBLEATF 'NUMBER-OF-ARGS 2) 
(DE OFSF_INCOMPATIBLEATF (C TRL)
    (PROG (CNT D ATF)
      (SETQ CNT T)
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND CNT C)) (RETURN NIL)))
        (PROGN
         (PROG (G426)
           (SETQ G426 (OFSF_UNDEFATF C TRL))
           (SETQ C (CAR G426))
           (SETQ D (CDR G426))
           (RETURN G426))
         (SETQ ATF (CAR D))
         (COND ((NOT (OFSF_COMPATIBLE (OFSF_NEGATEAT ATF) TRL)) (SETQ CNT NIL))
               (T (SETQ C (CDR D)))))
        (GO WHILELABEL))
      (RETURN (COND (CNT NIL) (T ATF))))) 
(PUT 'OFSF_EXPLAIN 'NUMBER-OF-ARGS 2) 
(DE OFSF_EXPLAIN (ATF TRL) (PROG () (RETURN (LIST ATF TRL)))) 
(PUT 'GANU_EVALF 'NUMBER-OF-ARGS 1) 
(DE GANU_EVALF (GANU)
    (COND ((MEMQ GANU '(MINF PINF)) GANU) (T (ANU_EVALF GANU)))) 
(PUT 'OFSF_IVLAPPROX 'NUMBER-OF-ARGS 1) 
(PUT 'OFSF_IVLAPPROX 'DEFINED-ON-LINE '837) 
(PUT 'OFSF_IVLAPPROX 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'OFSF_IVLAPPROX 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE OFSF_IVLAPPROX (IVL)
    (PROG (IV FORALL-RESULT FORALL-ENDPTR)
      (SETQ IV IVL)
      (COND ((NULL IV) (RETURN NIL)))
      (SETQ FORALL-RESULT
              (SETQ FORALL-ENDPTR
                      (CONS ((LAMBDA (IV) (OFSF_IVAPPROX IV)) (CAR IV)) NIL)))
     LOOPLABEL
      (SETQ IV (CDR IV))
      (COND ((NULL IV) (RETURN FORALL-RESULT)))
      (RPLACD FORALL-ENDPTR
              (CONS ((LAMBDA (IV) (OFSF_IVAPPROX IV)) (CAR IV)) NIL))
      (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
      (GO LOOPLABEL))) 
(PUT 'OFSF_IVAPPROX 'NUMBER-OF-ARGS 1) 
(PUT 'OFSF_IVAPPROX 'DEFINED-ON-LINE '841) 
(PUT 'OFSF_IVAPPROX 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'OFSF_IVAPPROX 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE OFSF_IVAPPROX (IV)
    (COND ((ANUIV_PTP IV) (LIST 'ANUIV_FPOINT (ANU_EVALF (CADR IV))))
          (T
           (LIST 'ANUIV_FSPAN (LIST (ANUSP_LT IV) (GANU_EVALF (ANUSP_LB IV)))
                 (LIST (ANUSP_UT IV) (GANU_EVALF (ANUSP_UB IV))))))) 
(PUT 'OFSF_IVLPRINT 'NUMBER-OF-ARGS 1) 
(PUT 'OFSF_IVLPRINT 'DEFINED-ON-LINE '849) 
(PUT 'OFSF_IVLPRINT 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'OFSF_IVLPRINT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE OFSF_IVLPRINT (IVL)
    (COND ((NOT IVL) (IOTO_PRIN2T "{}"))
          (T
           (PROGN
            (IOTO_PRIN2 "{")
            (OFSF_IVPRIN (CAR IVL))
            (PROG (IV)
              (SETQ IV (CDR IVL))
             LAB
              (COND ((NULL IV) (RETURN NIL)))
              ((LAMBDA (IV) (PROGN (IOTO_PRIN2 ", ") (OFSF_IVPRIN IV)))
               (CAR IV))
              (SETQ IV (CDR IV))
              (GO LAB))
            (IOTO_PRIN2T "}"))))) 
(PUT 'OFSF_IVPRINT 'NUMBER-OF-ARGS 1) 
(PUT 'OFSF_IVPRINT 'DEFINED-ON-LINE '862) 
(PUT 'OFSF_IVPRINT 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'OFSF_IVPRINT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE OFSF_IVPRINT (IV) (PROGN (OFSF_IVPRIN IV) (TERPRI))) 
(PUT 'OFSF_IVPRIN 'NUMBER-OF-ARGS 1) 
(PUT 'OFSF_IVPRIN 'DEFINED-ON-LINE '868) 
(PUT 'OFSF_IVPRIN 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'OFSF_IVPRIN 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE OFSF_IVPRIN (IV)
    (PROG (OLDPRECISION W)
      (SETQ OLDPRECISION (GETPRINTPRECISION))
      (SETPRINTPRECISION (PLUS ANU_PRECISION* 1))
      (SETQ W (ERRORSET (LIST 'OFSF_IVPRIN1 (MKQUOTE IV)) NIL *BACKTRACE))
      (SETPRINTPRECISION OLDPRECISION)
      (COND ((ERRORP W) (REDERR EMSG*)))
      (RETURN (CAR W)))) 
(PUT 'OFSF_IVPRIN1 'NUMBER-OF-ARGS 1) 
(PUT 'OFSF_IVPRIN1 'DEFINED-ON-LINE '879) 
(PUT 'OFSF_IVPRIN1 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFEXFR.RED) 
(PUT 'OFSF_IVPRIN1 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE OFSF_IVPRIN1 (IV)
    (PROG (LB UB)
      (COND ((NOT IV) (RETURN NIL)))
      (COND ((EQCAR IV 'ANUIV_FPOINT) (IOTO_PRIN2 (CADR IV)))
            (T
             (PROGN
              (SETQ LB (CADR IV))
              (SETQ UB (CADR (CDR IV)))
              (IOTO_PRIN2
               (LIST (COND ((EQ (CAR LB) 'ANUSP_OPEN) "]") (T "["))
                     (COND ((NEQ (CADR LB) 'MINF) (CADR LB)) (T "minf")) ","
                     (COND ((NEQ (CADR UB) 'PINF) (CADR UB)) (T "pinf"))
                     (COND ((EQ (CAR UB) 'ANUSP_OPEN) "[") (T "]"))))))))) 
(ENDMODULE) 