(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'MKSP)) 
(FLUID '(*NOSUBS *SUB2 ASYMPLIS* POWLIS* SUBFG* WTL*)) 
(GLOBAL '(*RESUBS)) 
(PUT 'GETPOWER 'NUMBER-OF-ARGS 2) 
(PUT 'GETPOWER 'DEFINED-ON-LINE '45) 
(PUT 'GETPOWER 'DEFINED-IN-FILE 'POLY/MKSP.RED) 
(PUT 'GETPOWER 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE GETPOWER (U N)
    (PROGN
     (COND ((AND (EQCAR (CAR U) 'EXPT) (GREATERP N 1)) (SETQ *SUB2 T)))
     (CONS (CAR U) N))) 
(DE MKSP (U P) (GETPOWER (FKERN U) P)) 
(PUT 'MKSP 'NUMBER-OF-ARGS 2) 
(PUT 'MKSP 'DEFINED-ON-LINE '61) 
(PUT 'MKSP 'DEFINED-IN-FILE 'POLY/MKSP.RED) 
(PUT 'MKSP 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(PUTC 'MKSP 'INLINE '(LAMBDA (U P) (GETPOWER (FKERN U) P))) 
(DE TO (U P) (CONS U P)) 
(PUT 'TO 'NUMBER-OF-ARGS 2) 
(PUT 'TO 'DEFINED-ON-LINE '66) 
(PUT 'TO 'DEFINED-IN-FILE 'POLY/MKSP.RED) 
(PUT 'TO 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(PUTC 'TO 'INLINE '(LAMBDA (U P) (CONS U P))) 
(PUT 'MKSP* 'NUMBER-OF-ARGS 2) 
(PUT 'MKSP* 'DEFINED-ON-LINE '72) 
(PUT 'MKSP* 'DEFINED-IN-FILE 'POLY/MKSP.RED) 
(PUT 'MKSP* 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MKSP* (U N)
    (PROG (B)
      (COND ((OR (NULL U) (KERNLP U)) (RETURN (EXPTF U N)))
            ((MINUSF U) (PROGN (SETQ B T) (SETQ U (NEGF U)))))
      (SETQ U (LIST (CONS (GETPOWER (FKERN U) N) 1)))
      (RETURN (COND ((AND B (NOT (EVENP N))) (NEGF U)) (T U))))) 
(PUT 'MKSFPF 'NUMBER-OF-ARGS 2) 
(PUT 'MKSFPF 'DEFINED-ON-LINE '83) 
(PUT 'MKSFPF 'DEFINED-IN-FILE 'POLY/MKSP.RED) 
(PUT 'MKSFPF 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MKSFPF (U N)
    ((LAMBDA (X)
       (COND ((EQUAL N 1) X) ((OR (ATOM X) (ATOM (CAR X))) (|:EXPT| X N))
             ((AND (GEQ N 0) (ONEP (CDAR X)) (NULL (CDR X)))
              ((LAMBDA (M Y)
                 ((LAMBDA (Z)
                    (COND ((AND SUBFG* Z (LEQ (CDR Z) M)) NIL)
                          (T (LIST (CONS (GETPOWER (FKERN Y) M) 1)))))
                  (ASSOC Y ASYMPLIS*)))
               (TIMES (CDAAR X) N) (CAAAR X)))
             (T (EXPTF2 X N))))
     (MKPROD U))) 
(PUT 'MKSQ 'NUMBER-OF-ARGS 2) 
(PUT 'MKSQ 'DEFINED-ON-LINE '96) 
(PUT 'MKSQ 'DEFINED-IN-FILE 'POLY/MKSP.RED) 
(PUT 'MKSQ 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MKSQ (U NN)
    (PROG (X Y Z)
      (COND ((NULL SUBFG*) (GO A1))
            ((AND (SETQ Y (ASSOC U WTL*))
                  (NULL (CAR (SETQ Y (MKSQ 'K* (TIMES NN (CDR Y)))))))
             (RETURN Y))
            ((NOT (ATOM U)) (GO B))
            ((AND (NULL *NOSUBS) (SETQ Z (GET U 'AVALUE))) (GO C)))
      (COND ((IDP U) (FLAG (LIST U) 'USED*)))
     A
      (COND ((OR *NOSUBS (EQUAL NN 1)) (GO A1))
            ((AND (SETQ Z (ASSOC U ASYMPLIS*)) (LEQ (CDR Z) NN))
             (RETURN (CONS NIL 1)))
            ((AND
              (OR (SETQ Z (ASSOC U POWLIS*))
                  (AND (NOT (ATOM U)) (MEMQ (CAR U) '(EXPT SQRT))
                       (SETQ Z (ASSOC (CADR U) POWLIS*))))
              (NOT (LESSP (TIMES NN (CADR Z)) 0)))
             (SETQ *SUB2 T)))
     A1
      (COND ((NULL X) (SETQ X (FKERN U))))
      (SETQ X (CONS (LIST (CONS (GETPOWER X NN) 1)) 1))
      (RETURN (COND (Y (MULTSQ Y X)) (T X)))
     B
      (COND
       ((AND (NULL *NOSUBS) (ATOM (CAR U))
             (OR (AND (SETQ Z (GET (CAR U) 'MKSQSUBFN)) (SETQ Z (APPLY1 Z U)))
                 (SETQ Z (ASSOC U (GET (CAR U) 'KVALUE)))))
        (GO C))
       ((NOT (MEMQ 'USED* (CDDR (SETQ X (FKERN U))))) (ACONC X 'USED*)))
      (GO A)
     C
      (SETQ Z (CDR Z))
      (COND ((NULL *RESUBS) (SETQ *NOSUBS T)))
      (SETQ X (SIMP (CAR Z)))
      (SETQ *NOSUBS NIL)
      (RETURN (EXPTSQ X NN)))) 
(ENDMODULE) 