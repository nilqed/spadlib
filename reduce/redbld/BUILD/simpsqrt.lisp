(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'SIMPSQRT)) 
(FLUID
 '(*GALOIS *PVAR *TRA *TRINT BASIC-LISTOFALLSQRTS GAUSSIANI
   BASIC-LISTOFNEWSQRTS INTVAR KNOWNTOBEINDEP LISTOFALLSQRTS LISTOFNEWSQRTS
   SQRTFLAG SQRTLIST SQRT-PLACES-ALIST VARLIST ZLIST)) 
(EXPORTS
 (LIST 'PROPER-SIMPSQRT 'SIMPSQRTI 'SIMPSQRTSQ 'SIMPSQRT2 'SQRTSAVE 'NEWPLACE
       'ACTUALSIMPSQRT 'FORMSQRT)) 
(PUT 'PROPER-SIMPSQRT 'NUMBER-OF-ARGS 1) 
(PUT 'PROPER-SIMPSQRT 'DEFINED-ON-LINE '48) 
(PUT 'PROPER-SIMPSQRT 'DEFINED-IN-FILE 'INT/SIMPSQRT.RED) 
(PUT 'PROPER-SIMPSQRT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PROPER-SIMPSQRT (EXPRN) (SIMPSQRTI (CARX EXPRN 'PROPER-SIMPSQRT))) 
(PUT 'SIMPSQRTI 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPSQRTI 'DEFINED-ON-LINE '52) 
(PUT 'SIMPSQRTI 'DEFINED-IN-FILE 'INT/SIMPSQRT.RED) 
(PUT 'SIMPSQRTI 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPSQRTI (SQ)
    (PROG (U)
      (COND
       ((ATOM SQ)
        (COND ((NUMBERP SQ) (RETURN (CONS (SIMPSQRT2 SQ) 1)))
              ((SETQ U (GET SQ 'AVALUE)) (RETURN (SIMPSQRTI (CADR U))))
              (T
               (RETURN
                (CONS (SIMPSQRT2 (CONS (CONS (GETPOWER (FKERN SQ) 1) 1) NIL))
                      1))))))
      (COND
       ((EQ (CAR SQ) 'TIMES)
        (RETURN
         (MAPPLY (FUNCTION MULTSQ)
          (PROG (J FORALL-RESULT FORALL-ENDPTR)
            (SETQ J (CDR SQ))
            (COND ((NULL J) (RETURN NIL)))
            (SETQ FORALL-RESULT
                    (SETQ FORALL-ENDPTR
                            (CONS ((LAMBDA (J) (SIMPSQRTI J)) (CAR J)) NIL)))
           LOOPLABEL
            (SETQ J (CDR J))
            (COND ((NULL J) (RETURN FORALL-RESULT)))
            (RPLACD FORALL-ENDPTR
                    (CONS ((LAMBDA (J) (SIMPSQRTI J)) (CAR J)) NIL))
            (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
            (GO LOOPLABEL))))))
      (COND
       ((EQ (CAR SQ) 'QUOTIENT)
        (RETURN
         (MULTSQ (SIMPSQRTI (CADR SQ)) (INVSQ (SIMPSQRTI (CADDR SQ)))))))
      (COND
       ((AND (EQ (CAR SQ) 'EXPT) (NUMBERP (CADDR SQ)))
        (COND
         ((EVENP (CADDR SQ))
          (RETURN
           ((LAMBDA (U)
              (COND (*QSUM-SIMPEXPT (QSUM-SIMPEXPT U)) (T (BASIC-SIMPEXPT U))))
            (LIST (CADR SQ) (QUOTIENT (CADDR SQ) 2)))))
         (T
          (RETURN
           ((LAMBDA (U)
              (COND (*QSUM-SIMPEXPT (QSUM-SIMPEXPT U)) (T (BASIC-SIMPEXPT U))))
            (LIST (MK*SQ (SIMPSQRTI (CADR SQ))) (CADDR SQ))))))))
      (COND ((EQUAL (CAR SQ) '*SQ) (RETURN (SIMPSQRTSQ (CADR SQ)))))
      (RETURN (SIMPSQRTSQ (TIDYSQRT (SIMP* SQ)))))) 
(PUT 'SIMPSQRTSQ 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPSQRTSQ 'DEFINED-ON-LINE '80) 
(PUT 'SIMPSQRTSQ 'DEFINED-IN-FILE 'INT/SIMPSQRT.RED) 
(PUT 'SIMPSQRTSQ 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPSQRTSQ (SQ) (CONS (SIMPSQRT2 (CAR SQ)) (SIMPSQRT2 (CDR SQ)))) 
(PUT 'SIMPSQRT2 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPSQRT2 'DEFINED-ON-LINE '84) 
(PUT 'SIMPSQRT2 'DEFINED-IN-FILE 'INT/SIMPSQRT.RED) 
(PUT 'SIMPSQRT2 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPSQRT2 (SF)
    (COND
     ((MINUSF SF)
      (COND ((IEQUAL SF (MINUS 1)) GAUSSIANI)
            (T
             (PROG (U)
               (SETQ U (NEGF SF))
               (COND
                ((NUMBERP U)
                 (RETURN
                  ((LAMBDA (G568 G569)
                     (COND (*PHYSOP-LOADED (PHYSOP-MULTF G568 G569))
                           (T (POLY-MULTF G568 G569))))
                   GAUSSIANI (SIMPSQRT3 U)))))
               (RETURN (SIMPSQRT3 SF))))))
     (T (SIMPSQRT3 SF)))) 
(PUT 'SIMPSQRT3 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPSQRT3 'DEFINED-ON-LINE '103) 
(PUT 'SIMPSQRT3 'DEFINED-IN-FILE 'INT/SIMPSQRT.RED) 
(PUT 'SIMPSQRT3 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPSQRT3 (SF)
    (PROG (U)
      (SETQ U (ASSOC SF LISTOFALLSQRTS))
      (COND (U (RETURN (CDR U))))
      (SETQ U (ATSOC LISTOFNEWSQRTS KNOWNTOBEINDEP))
      (COND ((NULL U) (GO NO)))
      (SETQ U (ASSOC SF (CDR U)))
      (COND
       (U
        (PROGN
         (SETQ LISTOFALLSQRTS (CONS U LISTOFALLSQRTS))
         (RETURN (CDR U)))))
     NO
      (SETQ U (ACTUALSIMPSQRT SF))
      (SETQ LISTOFALLSQRTS (CONS (CONS SF U) LISTOFALLSQRTS))
      (RETURN U))) 
(PUT 'SQRTSAVE 'NUMBER-OF-ARGS 3) 
(PUT 'SQRTSAVE 'DEFINED-ON-LINE '125) 
(PUT 'SQRTSAVE 'DEFINED-IN-FILE 'INT/SIMPSQRT.RED) 
(PUT 'SQRTSAVE 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE SQRTSAVE (U V PLACE)
    (PROG (A)
      (SETQ A (ASSOC PLACE SQRT-PLACES-ALIST))
      (COND
       ((NULL A)
        (SETQ SQRT-PLACES-ALIST
                (CONS (CONS PLACE (CONS LISTOFNEWSQRTS LISTOFALLSQRTS))
                      SQRT-PLACES-ALIST)))
       (T (RPLACD A (CONS LISTOFNEWSQRTS LISTOFALLSQRTS))))
      (SETQ LISTOFNEWSQRTS V)
      (COND ((NOT *GALOIS) (SETQ LISTOFALLSQRTS U)))
      (COND ((EQ LISTOFALLSQRTS U) (RETURN NIL)))
      (SETQ V LISTOFALLSQRTS)
      (PROG ()
       WHILELABEL
        (COND ((NOT (NOT (EQ (CDR V) U))) (RETURN NIL)))
        (SETQ V (CDR V))
        (GO WHILELABEL))
      (RPLACD V NIL)
      (SETQ V (ATSOC LISTOFNEWSQRTS KNOWNTOBEINDEP))
      (COND
       ((NULL V)
        (SETQ KNOWNTOBEINDEP
                (CONS (CONS LISTOFNEWSQRTS LISTOFALLSQRTS) KNOWNTOBEINDEP)))
       (T (RPLACD V (UNION (CDR V) LISTOFALLSQRTS))))
      (SETQ LISTOFALLSQRTS U)
      (RETURN NIL))) 
(PUT 'NEWPLACE 'NUMBER-OF-ARGS 1) 
(PUT 'NEWPLACE 'DEFINED-ON-LINE '156) 
(PUT 'NEWPLACE 'DEFINED-IN-FILE 'INT/SIMPSQRT.RED) 
(PUT 'NEWPLACE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE NEWPLACE (U)
    (PROG (V)
      (SETQ V (ASSOC U SQRT-PLACES-ALIST))
      (COND
       ((NULL V)
        (PROGN
         (SETQ LISTOFALLSQRTS BASIC-LISTOFALLSQRTS)
         (SETQ LISTOFNEWSQRTS BASIC-LISTOFNEWSQRTS)))
       (T
        (PROGN
         (SETQ V (CDR V))
         (SETQ LISTOFNEWSQRTS (CAR V))
         (SETQ LISTOFALLSQRTS (CDR V)))))
      (RETURN (COND (V V) (T (CONS LISTOFNEWSQRTS LISTOFALLSQRTS)))))) 
(PUT 'MKNEWSQRT 'NUMBER-OF-ARGS 1) 
(PUT 'MKNEWSQRT 'DEFINED-ON-LINE '173) 
(PUT 'MKNEWSQRT 'DEFINED-IN-FILE 'INT/SIMPSQRT.RED) 
(PUT 'MKNEWSQRT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MKNEWSQRT (U)
    (PROG (V W)
      (COND ((NOT *GALOIS) (GO NEW)))
      (SETQ V
              (ADDF (LIST (CONS (GETPOWER (FKERN *PVAR) 2) 1))
                    (NEGF (*Q2F (TIDYSQRT (SIMP U))))))
      (SETQ W (ERRORSET* (LIST 'AFACTOR (MKQUOTE V) (MKQUOTE *PVAR)) T))
      (COND ((ATOM W) (GO NEW)) (T (SETQ W (CAR W))))
      (COND ((CDR W) (GO NOTNEW)))
     NEW
      (SETQ W (MKSQRT (REVAL1 U T)))
      (SETQ LISTOFNEWSQRTS (CONS W LISTOFNEWSQRTS))
      (RETURN (LIST (CONS (GETPOWER (FKERN W) 1) 1)))
     NOTNEW
      (SETQ W (CAR W))
      (SETQ V (STT W *PVAR))
      (COND ((NEQ (CAR V) 1) (ERRACH (LIST "Error in mknewsqrt: " V))))
      (SETQ W
              (ADDF W
                    ((LAMBDA (G571)
                       (COND (*PHYSOP-LOADED (PHYSOP-MULTF (CDR V) G571))
                             (T (POLY-MULTF (CDR V) G571))))
                     (CONS (CONS (GETPOWER (FKERN *PVAR) (CAR V)) (MINUS 1))
                           NIL))))
      (SETQ V (SQRT2TOP (CONS W (CDR V))))
      (SETQ W ((LAMBDA (*EXP) (QUOTF1 (CAR V) (CDR V))) T))
      (COND
       ((NULL W)
        (PROG (*INSIDE-INT*)
          (SETQ V (SIMP (PREPSQ V)))
          (COND ((EQUAL (CDR V) 1) (SETQ W (CAR V)))))))
      (COND ((NULL W) (ERRACH (LIST "Division failure in mknewsqrt" U))))
      (RETURN W))) 
(PUT 'ACTUALSIMPSQRT 'NUMBER-OF-ARGS 1) 
(PUT 'ACTUALSIMPSQRT 'DEFINED-ON-LINE '208) 
(PUT 'ACTUALSIMPSQRT 'DEFINED-IN-FILE 'INT/SIMPSQRT.RED) 
(PUT 'ACTUALSIMPSQRT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE ACTUALSIMPSQRT (SF)
    (COND ((IEQUAL SF (MINUS 1)) GAUSSIANI)
          (T (ACTUALSQRTINNER SF LISTOFNEWSQRTS)))) 
(PUT 'ACTUALSQRTINNER 'NUMBER-OF-ARGS 2) 
(PUT 'ACTUALSQRTINNER 'DEFINED-ON-LINE '214) 
(PUT 'ACTUALSQRTINNER 'DEFINED-IN-FILE 'INT/SIMPSQRT.RED) 
(PUT 'ACTUALSQRTINNER 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE ACTUALSQRTINNER (SF L)
    (COND ((EQUAL SF 1) 1)
          ((OR (NULL L) (OR (ATOM SF) (ATOM (CAR SF))) (EQUAL (CDAAR SF) 1))
           (ACTUALSIMPSQRT2 SF))
          (T
           (PROG (Z)
             (COND
              ((AND (NUMBERP SF) (MEMBER (SETQ Z (LIST 'SQRT SF)) L))
               (RETURN (LIST (CONS (GETPOWER (FKERN Z) 1) 1)))))
             (SETQ Z (CADR (CAR L)))
             (COND
              ((MEMBER Z L)
               (SETQ Z (LIST (CONS (GETPOWER (FKERN (CAR L)) 1) 1))))
              (T (SETQ Z (*Q2F (SIMP Z)))))
             (COND ((EQUAL Z (MINUS 1)) (RETURN (ACTUALSQRTINNER SF (CDR L)))))
             (SETQ Z ((LAMBDA (*EXP) (QUOTF1 SF Z)) T))
             (COND ((NULL Z) (RETURN (ACTUALSQRTINNER SF (CDR L))))
                   (T
                    (RETURN
                     (*MULTF (LIST (CONS (GETPOWER (FKERN (CAR L)) 1) 1))
                      (ACTUALSIMPSQRT Z))))))))) 
(PUT 'ACTUALSIMPSQRT2 'NUMBER-OF-ARGS 1) 
(PUT 'ACTUALSIMPSQRT2 'DEFINED-ON-LINE '232) 
(PUT 'ACTUALSIMPSQRT2 'DEFINED-IN-FILE 'INT/SIMPSQRT.RED) 
(PUT 'ACTUALSIMPSQRT2 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE ACTUALSIMPSQRT2 (SF)
    (COND
     ((ATOM SF)
      (COND ((NULL SF) NIL)
            ((NUMBERP SF)
             (COND
              ((LESSP SF 0)
               ((LAMBDA (G572 G573)
                  (COND (*PHYSOP-LOADED (PHYSOP-MULTF G572 G573))
                        (T (POLY-MULTF G572 G573))))
                GAUSSIANI (ACTUALSIMPSQRT2 (MINUS SF))))
              (T
               (PROG (N)
                 (SETQ N (INT-SQRT SF))
                 (COND ((NOT (FIXP N)) (RETURN (MKNEWSQRT SF)))
                       (T (RETURN N)))))))
            (T (MKNEWSQRT SF))))
     (T
      (PROG (FORM)
        (SETQ FORM (COMFAC SF))
        (COND
         ((CAR FORM)
          (RETURN
           ((LAMBDA (G574 G575)
              (COND (*PHYSOP-LOADED (PHYSOP-MULTF G574 G575))
                    (T (POLY-MULTF G574 G575))))
            (COND
             ((AND (NULL (CDR SF)) (EQUAL (CAR SF) FORM))
              (FORMSQRT (CONS FORM NIL)))
             (T (SIMPSQRT2 (CONS FORM NIL))))
            (SIMPSQRT2 ((LAMBDA (*EXP) (QUOTF1 SF (CONS FORM NIL))) T))))))
        (SETQ FORM (CDR FORM))
        (COND
         ((NEQ FORM 1)
          (RETURN
           ((LAMBDA (G576 G577)
              (COND (*PHYSOP-LOADED (PHYSOP-MULTF G576 G577))
                    (T (POLY-MULTF G576 G577))))
            (SIMPSQRT2 FORM)
            (SIMPSQRT2 ((LAMBDA (*EXP) (QUOTF1 SF FORM)) T))))))
        (RETURN (FORMSQRT SF)))))) 
(PUT 'INT-SQRT 'NUMBER-OF-ARGS 1) 
(PUT 'INT-SQRT 'DEFINED-ON-LINE '271) 
(PUT 'INT-SQRT 'DEFINED-IN-FILE 'INT/SIMPSQRT.RED) 
(PUT 'INT-SQRT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE INT-SQRT (N)
    (COND ((NOT (NUMBERP N)) 'NONNUMERIC) ((LESSP N 0) 'NEGATIVE)
          ((FLOATP N) (SQRT N)) ((LESSP N 2) N)
          (T (INT-NR N (QUOTIENT (PLUS N 1) 2))))) 
(PUT 'INT-NR 'NUMBER-OF-ARGS 2) 
(PUT 'INT-NR 'DEFINED-ON-LINE '281) 
(PUT 'INT-NR 'DEFINED-IN-FILE 'INT/SIMPSQRT.RED) 
(PUT 'INT-NR 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE INT-NR (N ROOT)
    (PROG (W)
      (SETQ W (TIMES ROOT ROOT))
      (COND ((EQUAL N W) (RETURN ROOT)))
      (SETQ W (QUOTIENT (PLUS ROOT (QUOTIENT N ROOT)) 2))
      (COND ((GEQ W ROOT) (RETURN (*Q2F (SIMPSQRT (LIST N))))))
      (RETURN (INT-NR N W)))) 
(PUT 'FORMSQRT 'NUMBER-OF-ARGS 1) 
(PUT 'FORMSQRT 'DEFINED-ON-LINE '293) 
(PUT 'FORMSQRT 'DEFINED-IN-FILE 'INT/SIMPSQRT.RED) 
(PUT 'FORMSQRT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FORMSQRT (SF)
    (COND
     ((NULL (CDR SF))
      (COND
       ((AND (IEQUAL (CDAR SF) 1) (IEQUAL (CDAAR SF) 1))
        (MKNEWSQRT (CAAAR SF)))
       (T
        ((LAMBDA (G578 G579)
           (COND (*PHYSOP-LOADED (PHYSOP-MULTF G578 G579))
                 (T (POLY-MULTF G578 G579))))
         (COND
          ((EVENP (CDAAR SF))
           (LIST
            (CONS (GETPOWER (FKERN (CAAAR SF)) (QUOTIENT (CDAAR SF) 2)) 1)))
          (T (EXPTF (MKNEWSQRT (CAAAR SF)) (CDAAR SF))))
         (SIMPSQRT2 (CDAR SF))))))
     (T
      (PROG (VARLIST ZLIST SQRTLIST SQRTFLAG V L N W)
        (SETQ V
                (JSQFREE SF
                 (COND ((AND INTVAR (INVOLVESF SF INTVAR)) INTVAR)
                       (T (FINDATOM (CAAAR SF))))))
        (COND
         ((AND (NULL (CDR V)) (NULL (CDAR V)))
          (RETURN (MKNEWSQRT (PREPF SF)))))
        (SETQ L NIL)
        (SETQ N 0)
        (PROG ()
         WHILELABEL
          (COND ((NOT V) (RETURN NIL)))
          (PROGN
           (SETQ N (PLUS N 1))
           (SETQ W (CAR V))
           (PROG ()
            WHILELABEL
             (COND ((NOT W) (RETURN NIL)))
             (PROGN
              (SETQ L (CONS (LIST 'EXPT (MK*SQ (CONS (CAR W) 1)) N) L))
              (SETQ W (CDR W)))
             (GO WHILELABEL))
           (SETQ V (CDR V)))
          (GO WHILELABEL))
        (COND ((NULL (CDR L)) (SETQ L (CAR L))) (T (SETQ L (CONS 'TIMES L))))
        (RETURN (*Q2F (SIMPSQRTI L))))))) 
(PUT 'FINDATOM 'NUMBER-OF-ARGS 1) 
(PUT 'FINDATOM 'DEFINED-ON-LINE '329) 
(PUT 'FINDATOM 'DEFINED-IN-FILE 'INT/SIMPSQRT.RED) 
(PUT 'FINDATOM 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FINDATOM (PF) (COND ((ATOM PF) PF) (T (FINDATOM (CADR PF))))) 
(ENDMODULE) 