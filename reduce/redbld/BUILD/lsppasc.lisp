(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'LSPPASC)) 
(NULL (SETQ *MODE 'SYMBOLIC)) 
(FLUID '(*GENDECS)) 
(SWITCH (LIST 'GENDECS)) 
(GLOBAL
 '(PASCLINELEN* MINPASCLINELEN* *PASCCURRIND* PASCCURRIND* TABLEN*
   PASCFUNCNAME*)) 
(SHARE
 (LIST 'PASCLINELEN* 'MINPASCLINELEN* 'PASCCURRIND* 'TABLEN* 'PASCFUNCNAME*)) 
(SETQ PASCCURRIND* (PROGN (SETQ ALGLIST* (CONS NIL NIL)) 0)) 
(SETQ MINPASCLINELEN* (PROGN (SETQ ALGLIST* (CONS NIL NIL)) 40)) 
(SETQ PASCLINELEN* (PROGN (SETQ ALGLIST* (CONS NIL NIL)) 70)) 
(SETQ *PASCCURRIND* 0) 
(GLOBAL '(*DO* *FOR*)) 
(GLOBAL '(*POSN* |$#|)) 
(PUT 'PASCAL 'FORMATTER 'FORMATPASC) 
(PUT 'PASCAL 'CODEGEN 'PASCCODE) 
(PUT 'PASCAL 'PROCTEM 'PROCPASCTEM) 
(PUT 'PASCAL 'GENDECS 'PASCDECS) 
(PUT 'PASCAL 'ASSIGNER 'MKFPASCASSIGN) 
(PUT 'PASCAL 'BOOLEAN-TYPE 'BOOLEAN) 
(PUT 'PASC-SYMTABPUT 'NUMBER-OF-ARGS 3) 
(PUT 'PASC-SYMTABPUT 'DEFINED-ON-LINE '65) 
(PUT 'PASC-SYMTABPUT 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'PASC-SYMTABPUT 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE PASC-SYMTABPUT (NAME TYPE VALUE)
    (PROG (BASETYPE ORIGTYPE WASTYPEDECL)
      (SETQ BASETYPE (CAR VALUE))
      (COND
       ((EQUAL BASETYPE 'TYPE)
        (PROGN
         (SETQ WASTYPEDECL T)
         (SETQ VALUE (CDR VALUE))
         (SETQ BASETYPE (CAR VALUE)))))
      (SETQ ORIGTYPE
              (OR (SYMTABGET NAME BASETYPE) (SYMTABGET '*MAIN* BASETYPE)))
      (COND ((PAIRP ORIGTYPE) (SETQ ORIGTYPE (CDR ORIGTYPE))))
      (COND
       ((AND (PAIRP ORIGTYPE) (EQUAL (CAR ORIGTYPE) 'TYPE))
        (SETQ VALUE
                (CONS (CADR ORIGTYPE) (APPEND (CDR VALUE) (CDDR ORIGTYPE))))))
      (COND (WASTYPEDECL (SYMTABPUT NAME TYPE (CONS 'TYPE VALUE)))
            (T (SYMTABPUT NAME TYPE VALUE))))) 
(PUT 'PASCCODE 'NUMBER-OF-ARGS 1) 
(PUT 'PASCCODE 'DEFINED-ON-LINE '87) 
(PUT 'PASCCODE 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'PASCCODE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PASCCODE (FORMS)
    (PROG (F FORALL-RESULT FORALL-ENDPTR)
      (SETQ F FORMS)
     STARTOVER
      (COND ((NULL F) (RETURN NIL)))
      (SETQ FORALL-RESULT
              ((LAMBDA (F)
                 (COND ((ATOM F) (PASCEXP F))
                       ((MEMQ (CAR F) '(|:RD:| |:CR:| |:CRN:| |:GI:|))
                        (PASCEXP F))
                       ((OR (LISPSTMTP F) (LISPSTMTGPP F))
                        (COND
                         (*GENDECS
                          (PROG (R)
                            (SETQ R
                                    (APPEND
                                     (PASCDECS (SYMTABGET '*MAIN* '*DECS*))
                                     (PASCSTMT F)))
                            (SYMTABREM '*MAIN* '*DECS*)
                            (RETURN R)))
                         (T (PASCSTMT F))))
                       ((LISPDEFP F) (PASCPROC F)) (T (PASCEXP F))))
               (CAR F)))
      (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
      (SETQ F (CDR F))
      (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
     LOOPLABEL
      (COND ((NULL F) (RETURN FORALL-RESULT)))
      (RPLACD FORALL-ENDPTR
              ((LAMBDA (F)
                 (COND ((ATOM F) (PASCEXP F))
                       ((MEMQ (CAR F) '(|:RD:| |:CR:| |:CRN:| |:GI:|))
                        (PASCEXP F))
                       ((OR (LISPSTMTP F) (LISPSTMTGPP F))
                        (COND
                         (*GENDECS
                          (PROG (R)
                            (SETQ R
                                    (APPEND
                                     (PASCDECS (SYMTABGET '*MAIN* '*DECS*))
                                     (PASCSTMT F)))
                            (SYMTABREM '*MAIN* '*DECS*)
                            (RETURN R)))
                         (T (PASCSTMT F))))
                       ((LISPDEFP F) (PASCPROC F)) (T (PASCEXP F))))
               (CAR F)))
      (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
      (SETQ F (CDR F))
      (GO LOOPLABEL))) 
(PUT 'PASCPROC 'NUMBER-OF-ARGS 1) 
(PUT 'PASCPROC 'DEFINED-ON-LINE '113) 
(PUT 'PASCPROC 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'PASCPROC 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PASCPROC (DEFF)
    (PROG (TYPE NAME PARAMS PARAMTYPES VARTYPES BODY R)
      (SETQ NAME (CADR DEFF))
      (COND
       ((AND (ONEP (LENGTH (SETQ BODY (CDDDR DEFF)))) (LISPSTMTGPP (CAR BODY)))
        (PROGN
         (SETQ BODY (CDAR BODY))
         (COND ((NULL (CAR BODY)) (SETQ BODY (CDR BODY)))))))
      (COND
       ((SETQ TYPE (SYMTABGET NAME NAME))
        (PROGN (SETQ TYPE (CADR TYPE)) (SYMTABREM NAME NAME))))
      (SETQ PARAMS (OR (SYMTABGET NAME '*PARAMS*) (CADDR DEFF)))
      (SYMTABREM NAME '*PARAMS*)
      (PROG (DEC)
        (SETQ DEC (SYMTABGET NAME '*DECS*))
       LAB
        (COND ((NULL DEC) (RETURN NIL)))
        ((LAMBDA (DEC)
           (COND
            ((MEMQ (CAR DEC) PARAMS)
             (SETQ PARAMTYPES (APPEND PARAMTYPES (LIST DEC))))
            ((NEQ (CADR DEC) 'TYPE)
             (SETQ VARTYPES (APPEND VARTYPES (LIST DEC))))))
         (CAR DEC))
        (SETQ DEC (CDR DEC))
        (GO LAB))
      (SETQ R (MKFPASCPROCDEC TYPE NAME PARAMS PARAMTYPES))
      (COND
       (*GENDECS
        (PROGN
         (SETQ R (APPEND R (LIST (MKPASCTAB) 'LABEL (MKPASCTERPRI))))
         (INDENTPASCLEVEL (PLUS 1))
         (SETQ R (APPEND R (LIST (MKPASCTAB) '99999 '|;| (MKPASCTERPRI))))
         (INDENTPASCLEVEL (MINUS 1))
         (SETQ R (APPEND R (PASCDECS VARTYPES))))))
      (SETQ R (APPEND R (MKFPASCBEGINGP)))
      (INDENTPASCLEVEL (PLUS 1))
      (SETQ R
              (APPEND R
                      (PROG (S FORALL-RESULT FORALL-ENDPTR)
                        (SETQ S BODY)
                       STARTOVER
                        (COND ((NULL S) (RETURN NIL)))
                        (SETQ FORALL-RESULT
                                ((LAMBDA (S) (PASCSTMT S)) (CAR S)))
                        (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
                        (SETQ S (CDR S))
                        (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
                       LOOPLABEL
                        (COND ((NULL S) (RETURN FORALL-RESULT)))
                        (RPLACD FORALL-ENDPTR
                                ((LAMBDA (S) (PASCSTMT S)) (CAR S)))
                        (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
                        (SETQ S (CDR S))
                        (GO LOOPLABEL))))
      (INDENTPASCLEVEL (MINUS 1))
      (SETQ R (APPEND R (LIST (MKPASCTAB) 99999 '|:| (MKPASCTERPRI))))
      (SETQ R (APPEND R (MKFPASCENDGP)))
      (COND (*GENDECS (PROGN (SYMTABREM NAME NIL) (SYMTABREM NAME '*DECS*))))
      (RETURN R))) 
(PUT 'PASCDECS 'NUMBER-OF-ARGS 1) 
(PUT 'PASCDECS 'DEFINED-ON-LINE '152) 
(PUT 'PASCDECS 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'PASCDECS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PASCDECS (DECS)
    (PROG (R)
      (SETQ DECS
              (PROG (R FORALL-RESULT FORALL-ENDPTR)
                (SETQ R DECS)
               STARTOVER
                (COND ((NULL R) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        ((LAMBDA (R)
                           (COND ((EQ (CADR R) 'TYPE) NIL) (T (LIST R))))
                         (CAR R)))
                (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
                (SETQ R (CDR R))
                (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
               LOOPLABEL
                (COND ((NULL R) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        ((LAMBDA (R)
                           (COND ((EQ (CADR R) 'TYPE) NIL) (T (LIST R))))
                         (CAR R)))
                (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
                (SETQ R (CDR R))
                (GO LOOPLABEL)))
      (COND
       (DECS
        (PROGN
         (INDENTPASCLEVEL (PLUS 1))
         (SETQ DECS
                 (PROG (TL FORALL-RESULT FORALL-ENDPTR)
                   (SETQ TL (FORMTYPELISTS DECS))
                  STARTOVER
                   (COND ((NULL TL) (RETURN NIL)))
                   (SETQ FORALL-RESULT
                           ((LAMBDA (TL) (MKFPASCDEC (CAR TL) (CDR TL)))
                            (CAR TL)))
                   (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
                   (SETQ TL (CDR TL))
                   (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
                  LOOPLABEL
                   (COND ((NULL TL) (RETURN FORALL-RESULT)))
                   (RPLACD FORALL-ENDPTR
                           ((LAMBDA (TL) (MKFPASCDEC (CAR TL) (CDR TL)))
                            (CAR TL)))
                   (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
                   (SETQ TL (CDR TL))
                   (GO LOOPLABEL)))
         (INDENTPASCLEVEL (MINUS 1))
         (SETQ R (APPEND (LIST (MKPASCTAB) 'VAR (MKPASCTERPRI)) DECS)))))
      (RETURN R))) 
(PUT 'PASCEXP 'NUMBER-OF-ARGS 1) 
(PUT 'PASCEXP 'DEFINED-ON-LINE '169) 
(PUT 'PASCEXP 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'PASCEXP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PASCEXP (EXP) (PASCEXP1 EXP 0)) 
(PUT 'PASCEXP1 'NUMBER-OF-ARGS 2) 
(PUT 'PASCEXP1 'DEFINED-ON-LINE '172) 
(PUT 'PASCEXP1 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'PASCEXP1 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE PASCEXP1 (EXP WTIN)
    (COND ((ATOM EXP) (LIST (PASCNAME EXP)))
          ((ONEP (LENGTH EXP)) (PASCNAME EXP))
          ((OPTYPE (CAR EXP))
           (PROG (WT OP RES)
             (SETQ WT (PASCPRECEDENCE (CAR EXP)))
             (SETQ OP (PASCOP (CAR EXP)))
             (SETQ EXP (CDR EXP))
             (COND
              ((ONEP (LENGTH EXP))
               (SETQ RES (CONS OP (PASCEXP1 (CAR EXP) WT))))
              (T
               (PROGN
                (SETQ RES (PASCEXP1 (CAR EXP) WT))
                (COND
                 ((EQ OP '+)
                  (PROG ()
                   WHILELABEL
                    (COND ((NOT (SETQ EXP (CDR EXP))) (RETURN NIL)))
                    (PROGN
                     (COND
                      ((OR (ATOM (CAR EXP)) (NEQ (CAAR EXP) 'MINUS))
                       (SETQ RES (APPEND RES (LIST OP)))))
                     (SETQ RES (APPEND RES (PASCEXP1 (CAR EXP) WT))))
                    (GO WHILELABEL)))
                 (T
                  (PROG ()
                   WHILELABEL
                    (COND ((NOT (SETQ EXP (CDR EXP))) (RETURN NIL)))
                    (SETQ RES
                            (APPEND (APPEND RES (LIST OP))
                                    (PASCEXP1 (CAR EXP) WT)))
                    (GO WHILELABEL)))))))
             (COND ((GEQ WTIN WT) (SETQ RES (INSERTPARENS RES))))
             (RETURN RES)))
          ((EQ (CAR EXP) 'LITERAL) (PASCLITERAL EXP))
          ((EQ (CAR EXP) 'RANGE)
           (APPEND (PASCEXP (CADR EXP)) (CONS '|..| (PASCEXP (CADDR EXP)))))
          ((EQ (CAR EXP) '|:RD:|)
           (PROG (MT DOTPOS |:LOWER-SCI:| |:UPPER-SCI:|)
             (SETQ DOTPOS 0)
             (SETQ |:LOWER-SCI:| 0)
             (SETQ |:UPPER-SCI:| 0)
             (SETQ MT (|RD:EXPLODE| EXP))
             (SETQ EXP (CAR MT))
             (SETQ MT (PLUS (CADR MT) (DIFFERENCE (CADDR MT) 1)))
             (SETQ EXP (APPEND (LIST 'LITERAL (CAR EXP) '|.|) (CDR EXP)))
             (COND ((NULL (EQUAL MT 0)) (SETQ EXP (APPEND EXP (LIST 'E MT)))))
             (RETURN (PASCLITERAL EXP))))
          ((MEMQ (CAR EXP) '(|:CR:| |:CRN:| |:GI:|))
           (GENTRANERR 'E EXP "Pascal doesn't support complex data" NIL))
          ((ARRAYELTP EXP)
           (COND
            ((AND (CDDR EXP) (EQUAL (CADDR EXP) '|..|))
             (CONS (PASCNAME (CAR EXP)) (PASCINSERTBRACKETS (CDR EXP))))
            (T
             (CONS (PASCNAME (CAR EXP))
                   (PASCINSERTBRACKETS
                    (CDR
                     (PROG (S FORALL-RESULT FORALL-ENDPTR)
                       (SETQ S (CDR EXP))
                      STARTOVER
                       (COND ((NULL S) (RETURN NIL)))
                       (SETQ FORALL-RESULT
                               ((LAMBDA (S) (CONS '|,| (PASCEXP1 S 0)))
                                (CAR S)))
                       (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
                       (SETQ S (CDR S))
                       (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
                      LOOPLABEL
                       (COND ((NULL S) (RETURN FORALL-RESULT)))
                       (RPLACD FORALL-ENDPTR
                               ((LAMBDA (S) (CONS '|,| (PASCEXP1 S 0)))
                                (CAR S)))
                       (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
                       (SETQ S (CDR S))
                       (GO LOOPLABEL))))))))
          (T
           (PROG (OP RES)
             (SETQ OP (PASCNAME (CAR EXP)))
             (SETQ EXP (CDR EXP))
             (SETQ RES (PASCEXP1 (CAR EXP) 0))
             (PROG ()
              WHILELABEL
               (COND ((NOT (SETQ EXP (CDR EXP))) (RETURN NIL)))
               (SETQ RES
                       (APPEND (APPEND RES (LIST '|,|))
                               (PASCEXP1 (CAR EXP) 0)))
               (GO WHILELABEL))
             (RETURN (CONS OP (INSERTPARENS RES))))))) 
(PUT 'PASCOP 'NUMBER-OF-ARGS 1) 
(PUT 'PASCOP 'DEFINED-ON-LINE '240) 
(PUT 'PASCOP 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'PASCOP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PASCOP (OP) (OR (GET OP '*PASCOP*) OP)) 
(PUT 'OR '*PASCOP* 'OR) 
(PUT 'AND '*PASCOP* 'AND) 
(PUT 'NOT '*PASCOP* 'NOT) 
(PUT 'EQUAL '*PASCOP* '=) 
(PUT 'NEQ '*PASCOP* '<>) 
(PUT 'GREATERP '*PASCOP* '>) 
(PUT 'GEQ '*PASCOP* '>=) 
(PUT 'LESSP '*PASCOP* '<) 
(PUT 'LEQ '*PASCOP* '<=) 
(PUT 'PLUS '*PASCOP* '+) 
(PUT 'TIMES '*PASCOP* '*) 
(PUT 'QUOTIENT '*PASCOP* '/) 
(PUT 'MINUS '*PASCOP* '-) 
(PUT 'EXPT '*PASCOP* '**) 
(PUT 'PASCNAME 'NUMBER-OF-ARGS 1) 
(PUT 'PASCNAME 'DEFINED-ON-LINE '258) 
(PUT 'PASCNAME 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'PASCNAME 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PASCNAME (A)
    (COND ((STRINGP A) (STRINGTOPASCATOM A)) (T (OR (GET A '*PASCNAME*) A)))) 
(PUT 'STRINGTOPASCATOM 'NUMBER-OF-ARGS 1) 
(PUT 'STRINGTOPASCATOM 'DEFINED-ON-LINE '264) 
(PUT 'STRINGTOPASCATOM 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'STRINGTOPASCATOM 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE STRINGTOPASCATOM (A)
    (INTERN
     (COMPRESS
      (PROG (C FORALL-RESULT FORALL-ENDPTR)
        (SETQ C (APPEND (CONS '|'| (EXPLODE2 A)) (LIST '|'|)))
       STARTOVER
        (COND ((NULL C) (RETURN NIL)))
        (SETQ FORALL-RESULT ((LAMBDA (C) (LIST '! C)) (CAR C)))
        (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
        (SETQ C (CDR C))
        (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
       LOOPLABEL
        (COND ((NULL C) (RETURN FORALL-RESULT)))
        (RPLACD FORALL-ENDPTR ((LAMBDA (C) (LIST '! C)) (CAR C)))
        (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
        (SETQ C (CDR C))
        (GO LOOPLABEL))))) 
(PUT 'TRUE '*PASCNAME* 'TRUE) 
(PUT 'FALSE '*PASCNAME* 'FALSE) 
(PUT 'PASCPRECEDENCE 'NUMBER-OF-ARGS 1) 
(PUT 'PASCPRECEDENCE 'DEFINED-ON-LINE '272) 
(PUT 'PASCPRECEDENCE 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'PASCPRECEDENCE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PASCPRECEDENCE (OP) (OR (GET OP '*PASCPRECEDENCE*) 9)) 
(PUT 'OR '*PASCPRECEDENCE* 1) 
(PUT 'AND '*PASCPRECEDENCE* 2) 
(PUT 'EQUAL '*PASCPRECEDENCE* 3) 
(PUT 'NEQ '*PASCPRECEDENCE* 3) 
(PUT 'GREATERP '*PASCPRECEDENCE* 4) 
(PUT 'GEQ '*PASCPRECEDENCE* 4) 
(PUT 'LESSP '*PASCPRECEDENCE* 4) 
(PUT 'LEQ '*PASCPRECEDENCE* 4) 
(PUT 'PLUS '*PASCPRECEDENCE* 5) 
(PUT 'TIMES '*PASCPRECEDENCE* 6) 
(PUT 'QUOTIENT '*PASCPRECEDENCE* 6) 
(PUT 'EXPT '*PASCPRECEDENCE* 7) 
(PUT 'NOT '*PASCPRECEDENCE* 8) 
(PUT 'MINUS '*PASCPRECEDENCE* 8) 
(PUT 'PASCSTMT 'NUMBER-OF-ARGS 1) 
(PUT 'PASCSTMT 'DEFINED-ON-LINE '294) 
(PUT 'PASCSTMT 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'PASCSTMT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PASCSTMT (STMT)
    (COND ((NULL STMT) NIL) ((LISPLABELP STMT) (PASCLABEL STMT))
          ((EQ (CAR STMT) 'LITERAL) (PASCLITERAL STMT))
          ((LISPASSIGNP STMT) (PASCASSIGN STMT))
          ((LISPCONDP STMT) (PASCIF STMT)) ((LISPGOP STMT) (PASCGOTO STMT))
          ((LISPRETURNP STMT) (PASCRETURN STMT))
          ((LISPSTOPP STMT) (PASCSTOP STMT))
          ((LISPREPEATP STMT) (PASCREPEAT STMT))
          ((LISPWHILEP STMT) (PASCWHILE STMT)) ((LISPFORP STMT) (PASCFOR STMT))
          ((LISPSTMTGPP STMT) (PASCSTMTGP STMT))
          ((LISPDEFP STMT) (PASCPROC STMT)) (T (PASCEXPSTMT STMT)))) 
(PUT 'PASCASSIGN 'NUMBER-OF-ARGS 1) 
(PUT 'PASCASSIGN 'DEFINED-ON-LINE '324) 
(PUT 'PASCASSIGN 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'PASCASSIGN 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PASCASSIGN (STMT) (MKFPASCASSIGN (CADR STMT) (CADDR STMT))) 
(PUT 'PASCSTOP 'NUMBER-OF-ARGS 1) 
(PUT 'PASCSTOP 'DEFINED-ON-LINE '327) 
(PUT 'PASCSTOP 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'PASCSTOP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PASCSTOP (STMT) (MKFPASCSTOP)) 
(PUT 'PASCEXPSTMT 'NUMBER-OF-ARGS 1) 
(PUT 'PASCEXPSTMT 'DEFINED-ON-LINE '330) 
(PUT 'PASCEXPSTMT 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'PASCEXPSTMT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PASCEXPSTMT (EXP)
    (APPEND (CONS (MKPASCTAB) (PASCEXP EXP)) (LIST '|;| (MKPASCTERPRI)))) 
(PUT 'PASCFOR 'NUMBER-OF-ARGS 1) 
(PUT 'PASCFOR 'DEFINED-ON-LINE '333) 
(PUT 'PASCFOR 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'PASCFOR 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PASCFOR (STMT)
    (PROG (R VARIABLE LOEXP STEPEXP HIEXP STMTLST)
      (SETQ VARIABLE (CADR STMT))
      (SETQ STMT (CDDR STMT))
      (SETQ LOEXP (CAAR STMT))
      (SETQ STEPEXP (CADAR STMT))
      (SETQ HIEXP (CADDAR STMT))
      (SETQ STMTLST (CDDR STMT))
      (SETQ R (MKFPASCFOR VARIABLE LOEXP HIEXP STEPEXP))
      (INDENTPASCLEVEL (PLUS 1))
      (SETQ R
              (APPEND R
                      (PROG (ST FORALL-RESULT FORALL-ENDPTR)
                        (SETQ ST STMTLST)
                       STARTOVER
                        (COND ((NULL ST) (RETURN NIL)))
                        (SETQ FORALL-RESULT
                                ((LAMBDA (ST) (PASCSTMT ST)) (CAR ST)))
                        (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
                        (SETQ ST (CDR ST))
                        (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
                       LOOPLABEL
                        (COND ((NULL ST) (RETURN FORALL-RESULT)))
                        (RPLACD FORALL-ENDPTR
                                ((LAMBDA (ST) (PASCSTMT ST)) (CAR ST)))
                        (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
                        (SETQ ST (CDR ST))
                        (GO LOOPLABEL))))
      (INDENTPASCLEVEL (MINUS 1))
      (RETURN R))) 
(PUT 'PASCGOTO 'NUMBER-OF-ARGS 1) 
(PUT 'PASCGOTO 'DEFINED-ON-LINE '350) 
(PUT 'PASCGOTO 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'PASCGOTO 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PASCGOTO (STMT)
    (PROG (STMTNUM)
      (COND
       ((NOT (SETQ STMTNUM (GET (CADR STMT) '*STMTNUM*)))
        (SETQ STMTNUM (PUT (CADR STMT) '*STMTNUM* (GENSTMTNUM)))))
      (RETURN (MKFPASCGO STMTNUM)))) 
(PUT 'PASCIF 'NUMBER-OF-ARGS 1) 
(PUT 'PASCIF 'DEFINED-ON-LINE '358) 
(PUT 'PASCIF 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'PASCIF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PASCIF (STMT)
    (PROG (R ST)
      (SETQ R (MKFPASCIF (CAADR STMT)))
      (INDENTPASCLEVEL (PLUS 1))
      (SETQ ST (SEQTOGP (CDADR STMT)))
      (COND
       ((AND (EQCAR ST 'COND) (EQUAL (LENGTH ST) 2))
        (SETQ ST (MKSTMTGP 0 (LIST ST)))))
      (SETQ R (APPEND R (PASCSTMT ST)))
      (INDENTPASCLEVEL (MINUS 1))
      (SETQ STMT (CDDR STMT))
      (COND
       (STMT
        (PROGN
         (SETQ R (APPEND R (MKFPASCELSE)))
         (INDENTPASCLEVEL (PLUS 1))
         (SETQ ST (SEQTOGP (CDAR STMT)))
         (COND
          ((AND (EQCAR ST 'COND) (EQUAL (LENGTH ST) 2))
           (SETQ ST (MKSTMTGP 0 (LIST ST)))))
         (SETQ R (APPEND R (PASCSTMT ST)))
         (INDENTPASCLEVEL (MINUS 1)))))
      (RETURN R))) 
(PUT 'PASCLABEL 'NUMBER-OF-ARGS 1) 
(PUT 'PASCLABEL 'DEFINED-ON-LINE '382) 
(PUT 'PASCLABEL 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'PASCLABEL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PASCLABEL (LABEL) (MKFPASCLABEL LABEL)) 
(PUT 'PASCLITERAL 'NUMBER-OF-ARGS 1) 
(PUT 'PASCLITERAL 'DEFINED-ON-LINE '385) 
(PUT 'PASCLITERAL 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'PASCLITERAL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PASCLITERAL (STMT) (MKFPASCLITERAL (CDR STMT))) 
(PUT 'PASCREPEAT 'NUMBER-OF-ARGS 1) 
(PUT 'PASCREPEAT 'DEFINED-ON-LINE '388) 
(PUT 'PASCREPEAT 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'PASCREPEAT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PASCREPEAT (STMT)
    (PROG (R STMTLST LOGEXP)
      (SETQ STMT (REVERSE (CDR STMT)))
      (SETQ LOGEXP (CAR STMT))
      (SETQ STMTLST (REVERSE (CDR STMT)))
      (SETQ R (MKFPASCREPEAT))
      (INDENTPASCLEVEL (PLUS 1))
      (SETQ R
              (APPEND R
                      (PROG (ST FORALL-RESULT FORALL-ENDPTR)
                        (SETQ ST STMTLST)
                       STARTOVER
                        (COND ((NULL ST) (RETURN NIL)))
                        (SETQ FORALL-RESULT
                                ((LAMBDA (ST) (PASCSTMT ST)) (CAR ST)))
                        (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
                        (SETQ ST (CDR ST))
                        (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
                       LOOPLABEL
                        (COND ((NULL ST) (RETURN FORALL-RESULT)))
                        (RPLACD FORALL-ENDPTR
                                ((LAMBDA (ST) (PASCSTMT ST)) (CAR ST)))
                        (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
                        (SETQ ST (CDR ST))
                        (GO LOOPLABEL))))
      (SETQ R (REMOVEFINALSEMICOLON R))
      (INDENTPASCLEVEL (MINUS 1))
      (RETURN (APPEND R (MKFPASCUNTIL LOGEXP))))) 
(PUT 'PASCRETURN 'NUMBER-OF-ARGS 1) 
(PUT 'PASCRETURN 'DEFINED-ON-LINE '402) 
(PUT 'PASCRETURN 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'PASCRETURN 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PASCRETURN (STMT)
    (COND
     ((CDR STMT)
      (PROG (R)
        (SETQ R (MKFPASCBEGINGP))
        (INDENTPASCLEVEL (PLUS 1))
        (SETQ R (APPEND R (MKFPASCASSIGN PASCFUNCNAME* (CADR STMT))))
        (SETQ R (APPEND R (MKFPASCRETURN)))
        (SETQ R (REMOVEFINALSEMICOLON R))
        (INDENTPASCLEVEL (MINUS 1))
        (RETURN (APPEND R (MKFPASCENDGP)))))
     (T (MKFPASCRETURN)))) 
(PUT 'PASCSTMTGP 'NUMBER-OF-ARGS 1) 
(PUT 'PASCSTMTGP 'DEFINED-ON-LINE '416) 
(PUT 'PASCSTMTGP 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'PASCSTMTGP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PASCSTMTGP (STMTGP)
    (PROG (R)
      (COND ((EQ (CAR STMTGP) 'PROGN) (SETQ STMTGP (CDR STMTGP)))
            (T (SETQ STMTGP (CDDR STMTGP))))
      (SETQ R (MKFPASCBEGINGP))
      (INDENTPASCLEVEL (PLUS 1))
      (SETQ R
              (APPEND R
                      (PROG (STMT FORALL-RESULT FORALL-ENDPTR)
                        (SETQ STMT STMTGP)
                       STARTOVER
                        (COND ((NULL STMT) (RETURN NIL)))
                        (SETQ FORALL-RESULT
                                ((LAMBDA (STMT) (PASCSTMT STMT)) (CAR STMT)))
                        (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
                        (SETQ STMT (CDR STMT))
                        (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
                       LOOPLABEL
                        (COND ((NULL STMT) (RETURN FORALL-RESULT)))
                        (RPLACD FORALL-ENDPTR
                                ((LAMBDA (STMT) (PASCSTMT STMT)) (CAR STMT)))
                        (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
                        (SETQ STMT (CDR STMT))
                        (GO LOOPLABEL))))
      (SETQ R (REMOVEFINALSEMICOLON R))
      (INDENTPASCLEVEL (MINUS 1))
      (RETURN (APPEND R (MKFPASCENDGP))))) 
(PUT 'PASCWHILE 'NUMBER-OF-ARGS 1) 
(PUT 'PASCWHILE 'DEFINED-ON-LINE '431) 
(PUT 'PASCWHILE 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'PASCWHILE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PASCWHILE (STMT)
    (PROG (R LOGEXP STMTLST)
      (SETQ LOGEXP (CADR STMT))
      (SETQ STMTLST (CDDR STMT))
      (SETQ R (MKFPASCWHILE LOGEXP))
      (INDENTPASCLEVEL (PLUS 1))
      (SETQ R
              (APPEND R
                      (PROG (ST FORALL-RESULT FORALL-ENDPTR)
                        (SETQ ST STMTLST)
                       STARTOVER
                        (COND ((NULL ST) (RETURN NIL)))
                        (SETQ FORALL-RESULT
                                ((LAMBDA (ST) (PASCSTMT ST)) (CAR ST)))
                        (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
                        (SETQ ST (CDR ST))
                        (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
                       LOOPLABEL
                        (COND ((NULL ST) (RETURN FORALL-RESULT)))
                        (RPLACD FORALL-ENDPTR
                                ((LAMBDA (ST) (PASCSTMT ST)) (CAR ST)))
                        (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
                        (SETQ ST (CDR ST))
                        (GO LOOPLABEL))))
      (INDENTPASCLEVEL (MINUS 1))
      (RETURN R))) 
(PUT 'REMOVEFINALSEMICOLON 'NUMBER-OF-ARGS 1) 
(PUT 'REMOVEFINALSEMICOLON 'DEFINED-ON-LINE '443) 
(PUT 'REMOVEFINALSEMICOLON 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'REMOVEFINALSEMICOLON 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REMOVEFINALSEMICOLON (R)
    (PROG (RR)
      (SETQ R (REVERSIP R))
      (COND ((EQ (CAR R) '|;|) (RETURN (REVERSIP (CDR R)))))
      (COND ((NOT (MEMQ '|;| R)) (RETURN (REVERSIP R))))
      (SETQ RR R)
      (PROG ()
       WHILELABEL
        (COND ((NOT (NOT (EQ (CADR RR) '|;|))) (RETURN NIL)))
        (PROGN (SETQ RR (CDR RR)))
        (GO WHILELABEL))
      (RPLACD RR (CDDR RR))
      (RETURN (REVERSIP R)))) 
(DE PASCEXP_NAME (U)
    (COND ((ATOM U) (LIST U))
          (T (RPLACA (PASCEXP (CONS 'DUMMYARRAYTOKEN (CDR U))) (CAR U))))) 
(PUT 'PASCEXP_NAME 'NUMBER-OF-ARGS 1) 
(PUT 'PASCEXP_NAME 'DEFINED-ON-LINE '464) 
(PUT 'PASCEXP_NAME 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'PASCEXP_NAME 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'PASCEXP_NAME 'INLINE
      '(LAMBDA (U)
         (COND ((ATOM U) (LIST U))
               (T (RPLACA (PASCEXP (CONS 'DUMMYARRAYTOKEN (CDR U))) (CAR U)))))) 
(PUT 'MKFPASCASSIGN 'NUMBER-OF-ARGS 2) 
(PUT 'MKFPASCASSIGN 'DEFINED-ON-LINE '470) 
(PUT 'MKFPASCASSIGN 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'MKFPASCASSIGN 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MKFPASCASSIGN (LHS RHS)
    (PROG (ST)
      (SETQ ST
              (APPEND
               (COND ((ATOM LHS) (LIST LHS))
                     (T
                      (RPLACA (PASCEXP (CONS 'DUMMYARRAYTOKEN (CDR LHS)))
                              (CAR LHS))))
               (CONS '|:=| (PASCEXP RHS))))
      (RETURN (APPEND (CONS (MKPASCTAB) ST) (LIST '|;| (MKPASCTERPRI)))))) 
(PUT 'MKFPASCBEGINGP 'NUMBER-OF-ARGS 0) 
(PUT 'MKFPASCBEGINGP 'DEFINED-ON-LINE '477) 
(PUT 'MKFPASCBEGINGP 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'MKFPASCBEGINGP 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE MKFPASCBEGINGP NIL (LIST (MKPASCTAB) 'BEGIN (MKPASCTERPRI))) 
(PUT 'MKFPASCDEC 'NUMBER-OF-ARGS 2) 
(PUT 'MKFPASCDEC 'DEFINED-ON-LINE '480) 
(PUT 'MKFPASCDEC 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'MKFPASCDEC 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MKFPASCDEC (TYPE VARLIST)
    (PROG (SIMPLET ARRAYT)
      (SETQ VARLIST
              (PROG (V)
                (SETQ V VARLIST)
               LAB
                (COND ((NULL V) (RETURN NIL)))
                ((LAMBDA (V)
                   (COND ((ATOM V) (SETQ SIMPLET (CONS V SIMPLET)))
                         (T
                          (SETQ ARRAYT
                                  (CONS
                                   (CONS (CAR V)
                                         (CDR
                                          (PROG (DIM FORALL-RESULT
                                                 FORALL-ENDPTR)
                                            (SETQ DIM (CDR V))
                                           STARTOVER
                                            (COND ((NULL DIM) (RETURN NIL)))
                                            (SETQ FORALL-RESULT
                                                    ((LAMBDA (DIM)
                                                       (COND
                                                        ((EQCAR DIM 'RANGE)
                                                         (LIST '|,| (CADR DIM)
                                                               '|..|
                                                               (CADDR DIM)))
                                                        (T
                                                         (LIST '|,| 0 '|..|
                                                               DIM))))
                                                     (CAR DIM)))
                                            (SETQ FORALL-ENDPTR
                                                    (LASTPAIR FORALL-RESULT))
                                            (SETQ DIM (CDR DIM))
                                            (COND
                                             ((ATOM FORALL-ENDPTR)
                                              (GO STARTOVER)))
                                           LOOPLABEL
                                            (COND
                                             ((NULL DIM)
                                              (RETURN FORALL-RESULT)))
                                            (RPLACD FORALL-ENDPTR
                                                    ((LAMBDA (DIM)
                                                       (COND
                                                        ((EQCAR DIM 'RANGE)
                                                         (LIST '|,| (CADR DIM)
                                                               '|..|
                                                               (CADDR DIM)))
                                                        (T
                                                         (LIST '|,| 0 '|..|
                                                               DIM))))
                                                     (CAR DIM)))
                                            (SETQ FORALL-ENDPTR
                                                    (LASTPAIR FORALL-ENDPTR))
                                            (SETQ DIM (CDR DIM))
                                            (GO LOOPLABEL))))
                                   ARRAYT)))))
                 (CAR V))
                (SETQ V (CDR V))
                (GO LAB)))
      (RETURN
       (APPEND
        (COND
         (SIMPLET
          (APPEND
           (CONS (MKPASCTAB)
                 (PROG (V FORALL-RESULT FORALL-ENDPTR)
                   (SETQ V (INSERTCOMMAS SIMPLET))
                  STARTOVER
                   (COND ((NULL V) (RETURN NIL)))
                   (SETQ FORALL-RESULT ((LAMBDA (V) (PASCEXP V)) (CAR V)))
                   (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
                   (SETQ V (CDR V))
                   (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
                  LOOPLABEL
                   (COND ((NULL V) (RETURN FORALL-RESULT)))
                   (RPLACD FORALL-ENDPTR ((LAMBDA (V) (PASCEXP V)) (CAR V)))
                   (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
                   (SETQ V (CDR V))
                   (GO LOOPLABEL)))
           (LIST '|: | TYPE '|;| (MKPASCTERPRI)))))
        (PROG (V FORALL-RESULT FORALL-ENDPTR)
          (SETQ V ARRAYT)
         STARTOVER
          (COND ((NULL V) (RETURN NIL)))
          (SETQ FORALL-RESULT
                  ((LAMBDA (V)
                     (APPEND
                      (CONS (MKPASCTAB)
                            (CONS (CAR (PASCEXP (CAR V)))
                                  (CONS '|: |
                                        (CONS 'ARRAY
                                              (INSERTBRACKETS (CDR V))))))
                      (LIST '| OF | TYPE '|;| (MKPASCTERPRI))))
                   (CAR V)))
          (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
          (SETQ V (CDR V))
          (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
         LOOPLABEL
          (COND ((NULL V) (RETURN FORALL-RESULT)))
          (RPLACD FORALL-ENDPTR
                  ((LAMBDA (V)
                     (APPEND
                      (CONS (MKPASCTAB)
                            (CONS (CAR (PASCEXP (CAR V)))
                                  (CONS '|: |
                                        (CONS 'ARRAY
                                              (INSERTBRACKETS (CDR V))))))
                      (LIST '| OF | TYPE '|;| (MKPASCTERPRI))))
                   (CAR V)))
          (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
          (SETQ V (CDR V))
          (GO LOOPLABEL)))))) 
(PUT 'MKFPASCDO 'NUMBER-OF-ARGS 0) 
(PUT 'MKFPASCDO 'DEFINED-ON-LINE '503) 
(PUT 'MKFPASCDO 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'MKFPASCDO 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE MKFPASCDO NIL (LIST (MKPASCTAB) *DO* (MKPASCTERPRI))) 
(PUT 'MKFPASCUNTIL 'NUMBER-OF-ARGS 1) 
(PUT 'MKFPASCUNTIL 'DEFINED-ON-LINE '506) 
(PUT 'MKFPASCUNTIL 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'MKFPASCUNTIL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MKFPASCUNTIL (EXP)
    (APPEND (APPEND (LIST (MKPASCTAB) 'UNTIL BLANK) (PASCEXP EXP))
            (LIST '|;| (MKPASCTERPRI)))) 
(PUT 'MKFPASCELSE 'NUMBER-OF-ARGS 0) 
(PUT 'MKFPASCELSE 'DEFINED-ON-LINE '511) 
(PUT 'MKFPASCELSE 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'MKFPASCELSE 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE MKFPASCELSE NIL (LIST (MKPASCTAB) 'ELSE (MKPASCTERPRI))) 
(PUT 'MKFPASCENDGP 'NUMBER-OF-ARGS 0) 
(PUT 'MKFPASCENDGP 'DEFINED-ON-LINE '514) 
(PUT 'MKFPASCENDGP 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'MKFPASCENDGP 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE MKFPASCENDGP NIL (LIST (MKPASCTAB) 'END '|;| (MKPASCTERPRI))) 
(PUT 'MKFPASCSTOP 'NUMBER-OF-ARGS 0) 
(PUT 'MKFPASCSTOP 'DEFINED-ON-LINE '517) 
(PUT 'MKFPASCSTOP 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'MKFPASCSTOP 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE MKFPASCSTOP NIL (LIST (MKPASCTAB) 'SVR '|(| '|0| '|)| '|;| (MKPASCTERPRI))) 
(PUT 'MKFPASCFOR 'NUMBER-OF-ARGS 4) 
(PUT 'MKFPASCFOR 'DEFINED-ON-LINE '520) 
(PUT 'MKFPASCFOR 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'MKFPASCFOR 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE MKFPASCFOR (VAR1 LO HI STEPEXP)
    (PROGN
     (SETQ STEPEXP
             (COND ((EQUAL STEPEXP 1) (LIST BLANK 'TO BLANK))
                   ((OR (EQUAL STEPEXP (MINUS 1)) (EQUAL STEPEXP '(MINUS 1)))
                    (LIST BLANK 'DOWNTO BLANK))
                   (T (LIST 'ERROR))))
     (SETQ HI (APPEND (PASCEXP HI) (LIST BLANK *DO* (MKPASCTERPRI))))
     (SETQ HI (APPEND (PASCEXP LO) (NCONC STEPEXP HI)))
     (APPEND (LIST (MKPASCTAB) *FOR* BLANK VAR1 '|:=|) HI))) 
(PUT 'MKFPASCGO 'NUMBER-OF-ARGS 1) 
(PUT 'MKFPASCGO 'DEFINED-ON-LINE '530) 
(PUT 'MKFPASCGO 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'MKFPASCGO 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MKFPASCGO (LABEL) (LIST (MKPASCTAB) 'GOTO BLANK LABEL '|;| (MKPASCTERPRI))) 
(PUT 'MKFPASCIF 'NUMBER-OF-ARGS 1) 
(PUT 'MKFPASCIF 'DEFINED-ON-LINE '533) 
(PUT 'MKFPASCIF 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'MKFPASCIF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MKFPASCIF (EXP)
    (APPEND (APPEND (LIST (MKPASCTAB) 'IF BLANK) (PASCEXP EXP))
            (LIST BLANK 'THEN (MKPASCTERPRI)))) 
(PUT 'MKFPASCLABEL 'NUMBER-OF-ARGS 1) 
(PUT 'MKFPASCLABEL 'DEFINED-ON-LINE '537) 
(PUT 'MKFPASCLABEL 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'MKFPASCLABEL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MKFPASCLABEL (LABEL) (LIST LABEL '|:| (MKPASCTERPRI))) 
(PUT 'MKFPASCLITERAL 'NUMBER-OF-ARGS 1) 
(PUT 'MKFPASCLITERAL 'DEFINED-ON-LINE '540) 
(PUT 'MKFPASCLITERAL 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'MKFPASCLITERAL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MKFPASCLITERAL (ARGS)
    (PROG (A FORALL-RESULT FORALL-ENDPTR)
      (SETQ A ARGS)
     STARTOVER
      (COND ((NULL A) (RETURN NIL)))
      (SETQ FORALL-RESULT
              ((LAMBDA (A)
                 (COND ((EQ A 'TAB*) (LIST (MKPASCTAB)))
                       ((EQ A 'CR*) (LIST (MKPASCTERPRI)))
                       ((PAIRP A) (PASCEXP A)) (T (LIST (STRIPQUOTES A)))))
               (CAR A)))
      (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
      (SETQ A (CDR A))
      (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
     LOOPLABEL
      (COND ((NULL A) (RETURN FORALL-RESULT)))
      (RPLACD FORALL-ENDPTR
              ((LAMBDA (A)
                 (COND ((EQ A 'TAB*) (LIST (MKPASCTAB)))
                       ((EQ A 'CR*) (LIST (MKPASCTERPRI)))
                       ((PAIRP A) (PASCEXP A)) (T (LIST (STRIPQUOTES A)))))
               (CAR A)))
      (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
      (SETQ A (CDR A))
      (GO LOOPLABEL))) 
(PUT 'MKFPASCPROCDEC 'NUMBER-OF-ARGS 4) 
(PUT 'MKFPASCPROCDEC 'DEFINED-ON-LINE '551) 
(PUT 'MKFPASCPROCDEC 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'MKFPASCPROCDEC 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE MKFPASCPROCDEC (TYPE NAME PARAMS PARAMTYPES)
    (PROGN
     (SETQ PASCFUNCNAME* (PROGN (SETQ ALGLIST* (CONS NIL NIL)) NAME))
     (SETQ PARAMS
             (APPEND
              (CONS '|(|
                    (CDR
                     (PROG (P FORALL-RESULT FORALL-ENDPTR)
                       (SETQ P PARAMS)
                      STARTOVER
                       (COND ((NULL P) (RETURN NIL)))
                       (SETQ FORALL-RESULT
                               ((LAMBDA (P) (CONS '|,| (PASCDUM P PARAMTYPES)))
                                (CAR P)))
                       (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
                       (SETQ P (CDR P))
                       (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
                      LOOPLABEL
                       (COND ((NULL P) (RETURN FORALL-RESULT)))
                       (RPLACD FORALL-ENDPTR
                               ((LAMBDA (P) (CONS '|,| (PASCDUM P PARAMTYPES)))
                                (CAR P)))
                       (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
                       (SETQ P (CDR P))
                       (GO LOOPLABEL))))
              (LIST '|)|)))
     (COND
      (TYPE
       (APPEND (CONS (MKPASCTAB) (CONS 'FUNCTION (CONS BLANK (PASCEXP NAME))))
               (APPEND PARAMS (LIST '|:| TYPE '|;| (MKPASCTERPRI)))))
      (T
       (APPEND (CONS (MKPASCTAB) (CONS 'PROCEDURE (CONS BLANK (PASCEXP NAME))))
               (APPEND PARAMS (LIST '|;| (MKPASCTERPRI)))))))) 
(PUT 'PASCDUM 'NUMBER-OF-ARGS 2) 
(PUT 'PASCDUM 'DEFINED-ON-LINE '565) 
(PUT 'PASCDUM 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'PASCDUM 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE PASCDUM (P TYPES)
    (PROG (TYPE)
      (SETQ TYPE (PASCGETTYPE P TYPES))
      (SETQ TYPE
              (COND ((ATOM TYPE) (LIST TYPE)) ((NULL (CDR TYPE)) TYPE)
                    (T
                     (APPEND
                      (CONS 'ARRAY
                            (INSERTBRACKETS
                             (CDR
                              (PROG (DIM FORALL-RESULT FORALL-ENDPTR)
                                (SETQ DIM (CDR TYPE))
                               STARTOVER
                                (COND ((NULL DIM) (RETURN NIL)))
                                (SETQ FORALL-RESULT
                                        ((LAMBDA (DIM)
                                           (COND
                                            ((EQCAR DIM 'RANGE)
                                             (LIST '|,| (CADR DIM) '|..|
                                                   (CADDR DIM)))
                                            (T (LIST '|,| 0 '|..| DIM))))
                                         (CAR DIM)))
                                (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
                                (SETQ DIM (CDR DIM))
                                (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
                               LOOPLABEL
                                (COND ((NULL DIM) (RETURN FORALL-RESULT)))
                                (RPLACD FORALL-ENDPTR
                                        ((LAMBDA (DIM)
                                           (COND
                                            ((EQCAR DIM 'RANGE)
                                             (LIST '|,| (CADR DIM) '|..|
                                                   (CADDR DIM)))
                                            (T (LIST '|,| 0 '|..| DIM))))
                                         (CAR DIM)))
                                (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
                                (SETQ DIM (CDR DIM))
                                (GO LOOPLABEL)))))
                      (LIST '| OF | (CAR TYPE))))))
      (RETURN (CONS P (CONS '|:| TYPE))))) 
(PUT 'PASCGETTYPE 'NUMBER-OF-ARGS 2) 
(PUT 'PASCGETTYPE 'DEFINED-ON-LINE '581) 
(PUT 'PASCGETTYPE 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'PASCGETTYPE 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE PASCGETTYPE (P TYPES)
    (COND ((NULL TYPES) 'DEFAULT) ((MEMQ P (CAR TYPES)) (CDR (CAR TYPES)))
          (T (PASCGETTYPE P (CDR TYPES))))) 
(PUT 'MKFPASCREPEAT 'NUMBER-OF-ARGS 0) 
(PUT 'MKFPASCREPEAT 'DEFINED-ON-LINE '587) 
(PUT 'MKFPASCREPEAT 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'MKFPASCREPEAT 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE MKFPASCREPEAT NIL (LIST (MKPASCTAB) 'REPEAT (MKPASCTERPRI))) 
(PUT 'MKFPASCRETURN 'NUMBER-OF-ARGS 0) 
(PUT 'MKFPASCRETURN 'DEFINED-ON-LINE '590) 
(PUT 'MKFPASCRETURN 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'MKFPASCRETURN 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE MKFPASCRETURN NIL
    (LIST (MKPASCTAB) 'GOTO BLANK 99999 '|;| '{RETURN} (MKPASCTERPRI))) 
(PUT 'MKFPASCWHILE 'NUMBER-OF-ARGS 1) 
(PUT 'MKFPASCWHILE 'DEFINED-ON-LINE '594) 
(PUT 'MKFPASCWHILE 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'MKFPASCWHILE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MKFPASCWHILE (EXP)
    (APPEND (APPEND (LIST (MKPASCTAB) 'WHILE BLANK '|(|) (PASCEXP EXP))
            (LIST '|)| (MKPASCTERPRI)))) 
(PUT 'MKPASCTAB 'NUMBER-OF-ARGS 0) 
(PUT 'MKPASCTAB 'DEFINED-ON-LINE '602) 
(PUT 'MKPASCTAB 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'MKPASCTAB 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE MKPASCTAB NIL (LIST 'PASCTAB PASCCURRIND*)) 
(PUT 'INDENTPASCLEVEL 'NUMBER-OF-ARGS 1) 
(PUT 'INDENTPASCLEVEL 'DEFINED-ON-LINE '606) 
(PUT 'INDENTPASCLEVEL 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'INDENTPASCLEVEL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE INDENTPASCLEVEL (N)
    (SETQ PASCCURRIND*
            (PROGN
             (SETQ ALGLIST* (CONS NIL NIL))
             (PLUS PASCCURRIND* (TIMES N TABLEN*))))) 
(PUT 'MKPASCTERPRI 'NUMBER-OF-ARGS 0) 
(PUT 'MKPASCTERPRI 'DEFINED-ON-LINE '610) 
(PUT 'MKPASCTERPRI 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'MKPASCTERPRI 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE MKPASCTERPRI NIL (LIST 'PASCTERPRI)) 
(PUT 'PASCINSERTBRACKETS 'NUMBER-OF-ARGS 1) 
(PUT 'PASCINSERTBRACKETS 'DEFINED-ON-LINE '619) 
(PUT 'PASCINSERTBRACKETS 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'PASCINSERTBRACKETS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PASCINSERTBRACKETS (EXP) (CONS '[ (APPEND EXP (LIST '])))) 
(PUT 'FORMATPASC 'NUMBER-OF-ARGS 1) 
(PUT 'FORMATPASC 'DEFINED-ON-LINE '628) 
(PUT 'FORMATPASC 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'FORMATPASC 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FORMATPASC (LST)
    (PROG (LINELEN)
      (SETQ LINELEN (LINELENGTH 300))
      (SETQ *POSN* 0)
      (PROG (ELT)
        (SETQ ELT LST)
       LAB
        (COND ((NULL ELT) (RETURN NIL)))
        ((LAMBDA (ELT)
           (COND ((PAIRP ELT) (LISPEVAL ELT))
                 (T
                  (PROGN
                   (COND
                    ((GREATERP (PLUS *POSN* (LENGTH (EXPLODE2 ELT)))
                               PASCLINELEN*)
                     (PASCCONTLINE)))
                   (PPRIN2 ELT)))))
         (CAR ELT))
        (SETQ ELT (CDR ELT))
        (GO LAB))
      (LINELENGTH LINELEN))) 
(PUT 'PASCCONTLINE 'NUMBER-OF-ARGS 0) 
(PUT 'PASCCONTLINE 'DEFINED-ON-LINE '644) 
(PUT 'PASCCONTLINE 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'PASCCONTLINE 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE PASCCONTLINE NIL (PROGN (PASCTERPRI) (PASCTAB *PASCCURRIND*) (PPRIN2 " "))) 
(PUT 'PASCTERPRI 'NUMBER-OF-ARGS 0) 
(PUT 'PASCTERPRI 'DEFINED-ON-LINE '651) 
(PUT 'PASCTERPRI 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'PASCTERPRI 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE PASCTERPRI NIL (PTERPRI)) 
(PUT 'PASCTAB 'NUMBER-OF-ARGS 1) 
(PUT 'PASCTAB 'DEFINED-ON-LINE '654) 
(PUT 'PASCTAB 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'PASCTAB 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PASCTAB (N)
    (PROGN
     (SETQ *PASCCURRIND* (MIN0 N (DIFFERENCE PASCLINELEN* MINPASCLINELEN*)))
     (COND
      ((GREATERP (SETQ N (DIFFERENCE *PASCCURRIND* *POSN*)) 0)
       (PPRIN2 (NSPACES N)))))) 
(GLOBAL '(PASCFUNCNAME*)) 
(SHARE (LIST 'PASCFUNCNAME*)) 
(PUT 'PROCPASCTEM 'NUMBER-OF-ARGS 0) 
(PUT 'PROCPASCTEM 'DEFINED-ON-LINE '668) 
(PUT 'PROCPASCTEM 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'PROCPASCTEM 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE PROCPASCTEM NIL
    (PROG (C)
      (SETQ C (FLUSHSPACES (READCH)))
      (PROG ()
       WHILELABEL
        (COND ((NOT (NOT (OR (EQ C $EOF$) (EQ C '|.|)))) (RETURN NIL)))
        (SETQ C (FLUSHSPACES (PROCPASCTEM1 C)))
        (GO WHILELABEL)))) 
(PUT 'PROCPASCTEM1 'NUMBER-OF-ARGS 1) 
(PUT 'PROCPASCTEM1 'DEFINED-ON-LINE '676) 
(PUT 'PROCPASCTEM1 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'PROCPASCTEM1 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PROCPASCTEM1 (C)
    (PROG (L W LINELEN)
      (SETQ LINELEN (LINELENGTH 150))
      (PPRIN2 C)
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND (NEQ C $EOF$) (NEQ W 'END))) (RETURN NIL)))
        (PROGN
         (COND ((EQ C $EOL$) (PROGN (PTERPRI) (SETQ C (READCH))))
               ((EQ C '{) (PROGN (SETQ C (PROCPASCCOMM)) (SETQ W NIL)))
               ((EQ C '|;|)
                (PROGN (SETQ C (PROCACTIVE)) (PPRIN2 C) (SETQ W NIL))))
         (COND
          ((NULL W)
           (PROGN
            (COND ((LITER C) (SETQ L (LIST C))))
            (SETQ C (READCH))
            (PROG ()
             WHILELABEL
              (COND ((NOT (OR (LITER C) (DIGIT C) (EQ C '_))) (RETURN NIL)))
              (PROGN (PPRIN2 C) (SETQ L (CONS C L)) (SETQ C (READCH)))
              (GO WHILELABEL))
            (SETQ W (INTERN (COMPRESS (REVERSE L))))
            (SETQ L NIL))))
         (COND ((EQ W 'VAR) (SETQ C (PROCPASCVAR C)))
               ((EQ W 'CONST) (SETQ C (PROCPASCCONST C)))
               ((EQ W 'TYPE) (SETQ C (PROCPASCTYPE C)))
               ((MEMQ W '(FUNCTION PROCEDURE OPERATOR))
                (SETQ C (PROCFUNCOPERHEADING W C)))
               ((EQ W 'BEGIN) (SETQ C (CONS NIL (PROCPASCTEM1 C))))
               ((NEQ W 'END)
                (PROGN
                 (PROG ()
                  WHILELABEL
                   (COND ((NOT (NEQ C '|;|)) (RETURN NIL)))
                   (PROGN
                    (COND ((EQ C '{) (SETQ C (PROCPASCCOMM)))
                          (T (PROGN (PPRIN2 C) (SETQ C (READCH))))))
                   (GO WHILELABEL))
                 (PPRIN2 C)
                 (SETQ C (CONS NIL (READCH))))))
         (COND
          ((EQ W 'END)
           (PROGN
            (SETQ C (FLUSHSPACES C))
            (COND
             ((NOT (MEMQ C '(|;| |.|)))
              (GENTRANERR 'E NIL "END not followed by ; or ." NIL)))
            (PPRIN2 C)
            (SETQ C (READCH))))
          (T (PROGN (SETQ W (CAR C)) (SETQ C (FLUSHSPACES (CDR C))) NIL))))
        (GO WHILELABEL))
      (LINELENGTH LINELEN)
      (RETURN C))) 
(PUT 'PROCPASCTYPE 'NUMBER-OF-ARGS 1) 
(PUT 'PROCPASCTYPE 'DEFINED-ON-LINE '720) 
(PUT 'PROCPASCTYPE 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'PROCPASCTYPE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PROCPASCTYPE (C)
    (PROG (W L)
     NEXT
      (PROG ()
       WHILELABEL
        (COND ((NOT (NOT (LITER C))) (RETURN NIL)))
        (PROGN
         (COND ((EQ C $EOL$) (PTERPRI)) (T (PPRIN2 C)))
         (SETQ C (READCH)))
        (GO WHILELABEL))
      (SETQ L NIL)
      (PROG ()
       WHILELABEL
        (COND ((NOT (OR (LITER C) (DIGIT C) (EQ C '_))) (RETURN NIL)))
        (PROGN (PPRIN2 C) (SETQ L (CONS C L)) (SETQ C (READCH)))
        (GO WHILELABEL))
      (SETQ W (INTERN (COMPRESS (REVERSE L))))
      (COND
       ((MEMQ W '(FUNCTION PROCEDURE OPERATOR CONST VAR)) (RETURN (CONS W C))))
      (SETQ C (FLUSHSPACES C))
      (COND ((NEQ C '=) (GENTRANERR 'E NIL "Malformed TYPE declaration" NIL)))
      (SETQ L (READPASCALTYPE C))
      (SETQ C (CAR L))
      (PASC-SYMTABPUT PASCFUNCNAME* W (CONS 'TYPE (CDR L)))
      (GO NEXT))) 
(PUT 'PROCPASCVAR 'NUMBER-OF-ARGS 1) 
(PUT 'PROCPASCVAR 'DEFINED-ON-LINE '743) 
(PUT 'PROCPASCVAR 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'PROCPASCVAR 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PROCPASCVAR (C)
    (PROG (NAME L NAMELIST)
     NEXT
      (PROG ()
       WHILELABEL
        (COND ((NOT (NOT (LITER C))) (RETURN NIL)))
        (PROGN
         (COND ((EQ C $EOL$) (PTERPRI)) (T (PPRIN2 C)))
         (SETQ C (READCH)))
        (GO WHILELABEL))
      (SETQ L NIL)
      (PROG ()
       WHILELABEL
        (COND ((NOT (OR (LITER C) (DIGIT C) (EQ C '_))) (RETURN NIL)))
        (PROGN (PPRIN2 C) (SETQ L (CONS C L)) (SETQ C (READCH)))
        (GO WHILELABEL))
      (SETQ NAME (INTERN (COMPRESS (REVERSE L))))
      (COND
       ((MEMQ NAME '(FUNCTION PROCEDURE OPERATOR CONST VAR BEGIN))
        (RETURN (CONS NAME C))))
      (SETQ C (FLUSHSPACES C))
      (SETQ NAMELIST (LIST NAME))
      (PROG ()
       WHILELABEL
        (COND ((NOT (EQUAL C '|,|)) (RETURN NIL)))
        (PROGN
         (PPRIN2 C)
         (SETQ C (FLUSHSPACES (READCH)))
         (SETQ L NIL)
         (PROG ()
          WHILELABEL
           (COND ((NOT (OR (LITER C) (DIGIT C) (EQ C '_))) (RETURN NIL)))
           (PROGN (PPRIN2 C) (SETQ L (CONS C L)) (SETQ C (READCH)))
           (GO WHILELABEL))
         (SETQ NAME (INTERN (COMPRESS (REVERSE L))))
         (SETQ NAMELIST (CONS NAME NAMELIST))
         (SETQ C (FLUSHSPACES C)))
        (GO WHILELABEL))
      (COND ((NEQ C '|:|) (GENTRANERR 'E NIL "Malformed VAR declaration" NIL)))
      (SETQ L (READPASCALTYPE C))
      (SETQ C (CAR L))
      (PROG (NAME)
        (SETQ NAME NAMELIST)
       LAB
        (COND ((NULL NAME) (RETURN NIL)))
        ((LAMBDA (NAME) (PASC-SYMTABPUT PASCFUNCNAME* NAME (CDR L)))
         (CAR NAME))
        (SETQ NAME (CDR NAME))
        (GO LAB))
      (GO NEXT))) 
(PUT 'PROCPASCCOMM 'NUMBER-OF-ARGS 0) 
(PUT 'PROCPASCCOMM 'DEFINED-ON-LINE '776) 
(PUT 'PROCPASCCOMM 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'PROCPASCCOMM 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE PROCPASCCOMM NIL
    (PROG (C)
      (PPRIN2 '{)
      (SETQ C (READCH))
      (PROG ()
       WHILELABEL
        (COND ((NOT (NEQ C '})) (RETURN NIL)))
        (PROGN
         (COND ((EQ C $EOL$) (PTERPRI)) (T (PPRIN2 C)))
         (SETQ C (READCH)))
        (GO WHILELABEL))
      (PPRIN2 C)
      (SETQ C (READCH))
      (RETURN C))) 
(PUT 'PROCFUNCOPERHEADING 'NUMBER-OF-ARGS 2) 
(PUT 'PROCFUNCOPERHEADING 'DEFINED-ON-LINE '794) 
(PUT 'PROCFUNCOPERHEADING 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'PROCFUNCOPERHEADING 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE PROCFUNCOPERHEADING (KEYWORD C)
    (PROG (LST NAME I TY ARGS MYARGS)
      (SETQ C (FLUSHSPACES C))
      (PROG ()
       WHILELABEL
        (COND
         ((NOT (NOT (OR (SEPRP C) (EQ C '|(|) (EQ C '|:|)))) (RETURN NIL)))
        (PROGN (SETQ NAME (ACONC NAME C)) (PPRIN2 C) (SETQ C (READCH)))
        (GO WHILELABEL))
      (SETQ NAME (INTERN (COMPRESS NAME)))
      (PUT '$0 '*PASCALNAME* NAME)
      (SYMTABPUT NAME '*TYPE* KEYWORD)
      (SETQ PASCFUNCNAME* (PROGN (SETQ ALGLIST* (CONS NIL NIL)) NAME))
      (SETQ C (FLUSHSPACES C))
      (COND
       ((EQ C '|(|)
        (PROGN
         (SETQ I 1)
         (PPRIN2 C)
         (SETQ C (READCH))
         (PROG ()
          WHILELABEL
           (COND ((NOT (NEQ C '|)|)) (RETURN NIL)))
           (PROGN
            (SETQ C (FLUSHSPACESCOMMAS C))
            (SETQ NAME (LIST C))
            (PPRIN2 C)
            (PROG ()
             WHILELABEL
              (COND
               ((NOT
                 (NOT
                  (OR (SEPRP (SETQ C (READCH)))
                      (MEMQ C (LIST '|,| '|)| '|:|)))))
                (RETURN NIL)))
              (PROGN (SETQ NAME (ACONC NAME C)) (PPRIN2 C))
              (GO WHILELABEL))
            (PUT (INTERN (COMPRESS (APPEND (EXPLODE2 '$) (EXPLODE2 I))))
                 '*PASCALNAME* (SETQ NAME (INTERN (COMPRESS NAME))))
            (SETQ MYARGS (CONS NAME MYARGS))
            (SETQ I (ADD1 I))
            (COND
             ((EQ C '|:|)
              (PROGN
               (SETQ TY (READPASCALTYPE C))
               (SETQ C (CAR TY))
               (SETQ TY (CDR TY))
               (PROG (N)
                 (SETQ N MYARGS)
                LAB
                 (COND ((NULL N) (RETURN NIL)))
                 ((LAMBDA (N) (PASC-SYMTABPUT PASCFUNCNAME* N TY)) (CAR N))
                 (SETQ N (CDR N))
                 (GO LAB))
               (SETQ ARGS (APPEND MYARGS ARGS))
               (SETQ MYARGS NIL)
               (COND ((EQ C '|;|) (PROGN (PPRIN2 C) (SETQ C (READCH))))))))
            (SETQ C (FLUSHSPACES C)))
           (GO WHILELABEL))
         (SETQ |$#| (PROGN (SETQ ALGLIST* (CONS NIL NIL)) (SUB1 I)))
         NIL))
       (T (SETQ |$#| (PROGN (SETQ ALGLIST* (CONS NIL NIL)) 0))))
      (COND
       ((NEQ C '|:|)
        (PROGN
         (PPRIN2 C)
         (PROG ()
          WHILELABEL
           (COND
            ((NOT (NOT (OR (EQ (SETQ C (READCH)) '|:|) (EQ C $EOL$))))
             (RETURN NIL)))
           (PPRIN2 C)
           (GO WHILELABEL)))))
      (COND
       ((EQ C '|:|)
        (PROGN
         (SETQ TY (READPASCALTYPE C))
         (PASC-SYMTABPUT NAME NAME (CDR TY))
         (SETQ C (CAR TY)))))
      (COND
       ((NUMBERP I)
        (PROG ()
         WHILELABEL
          (COND
           ((NOT
             (GET
              (SETQ NAME
                      (INTERN (COMPRESS (APPEND (EXPLODE2 '$) (EXPLODE2 I)))))
              '*PASCALNAME*))
            (RETURN NIL)))
          (PROGN (REMPROP NAME '*PASCALNAME*) (SETQ I (SUB1 I)))
          (GO WHILELABEL))))
      (SETQ LST NIL)
      (SETQ C (FLUSHSPACES C))
      (PROG ()
       WHILELABEL
        (COND ((NOT (OR (LITER C) (DIGIT C) (EQ C '_))) (RETURN NIL)))
        (PROGN (PPRIN2 C) (SETQ LST (CONS C LST)) (SETQ C (READCH)))
        (GO WHILELABEL))
      (COND (LST (SETQ LST (INTERN (COMPRESS (REVERSE LST))))))
      (RETURN (CONS LST C)))) 
(PUT 'READPASCALTYPE 'NUMBER-OF-ARGS 1) 
(PUT 'READPASCALTYPE 'DEFINED-ON-LINE '859) 
(PUT 'READPASCALTYPE 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'READPASCALTYPE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE READPASCALTYPE (C)
    (PROG (TY)
      (PPRIN2 C)
      (SETQ C (FLUSHSPACES (READCH)))
      (SETQ TY (LIST C))
      (PPRIN2 C)
      (PROG ()
       WHILELABEL
        (COND
         ((NOT
           (NOT (OR (SEPRP (SETQ C (READCH))) (MEMQ C (LIST '|;| '|)| '[)))))
          (RETURN NIL)))
        (PROGN (SETQ TY (ACONC TY C)) (PPRIN2 C))
        (GO WHILELABEL))
      (SETQ TY (INTERN (COMPRESS TY)))
      (COND ((EQ TY 'ARRAY) (RETURN (READPASCALARRAYDECLARATION C)))
            (T (RETURN (CONS C (LIST TY))))))) 
(PUT 'READPASCALARRAYDECLARATION 'NUMBER-OF-ARGS 1) 
(PUT 'READPASCALARRAYDECLARATION 'DEFINED-ON-LINE '873) 
(PUT 'READPASCALARRAYDECLARATION 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'READPASCALARRAYDECLARATION 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE READPASCALARRAYDECLARATION (C)
    (PROG (LO HI TY)
      (SETQ TY NIL)
      (SETQ C (FLUSHSPACES C))
      (COND
       ((NOT (EQ C '[))
        (GENTRANERR C NIL "invalid pascal array declaration" NIL)))
      (PPRIN2 C)
     L
      (SETQ C (FLUSHSPACES (READCH)))
      (SETQ LO (LIST C))
      (PPRIN2 C)
      (PROG ()
       WHILELABEL
        (COND
         ((NOT (NOT (OR (SEPRP (SETQ C (READCH))) (EQ C '|.|)))) (RETURN NIL)))
        (PROGN (SETQ LO (ACONC LO C)) (PPRIN2 C))
        (GO WHILELABEL))
      (SETQ LO (COMPRESS LO))
      (SETQ C (FLUSHSPACES C))
      (COND ((NOT (NUMBERP LO)) (SETQ LO (INTERN LO))))
      (PPRIN2 C)
      (SETQ C (READCH))
      (COND
       ((NOT (EQ C '|.|))
        (GENTRANERR C NIL ".. not found in array declaration" NIL)))
      (PPRIN2 C)
      (SETQ C (FLUSHSPACES (READCH)))
      (SETQ HI (LIST C))
      (PPRIN2 C)
      (PROG ()
       WHILELABEL
        (COND
         ((NOT (NOT (OR (SEPRP (SETQ C (READCH))) (MEMQ C (LIST '|,| '])))))
          (RETURN NIL)))
        (PROGN (SETQ HI (ACONC HI C)) (PPRIN2 C))
        (GO WHILELABEL))
      (SETQ HI (COMPRESS HI))
      (COND ((NOT (NUMBERP HI)) (SETQ HI (INTERN HI))))
      (SETQ TY (CONS HI TY))
      (PPRIN2 C)
      (SETQ C (FLUSHSPACES C))
      (COND
       ((EQ C '])
        (PROGN
         (SETQ TY (REVERSE TY))
         (SETQ C (FLUSHSPACES (READCH)))
         (COND ((NOT (MEMQ C '(O |o|))) (GENTRANERR C NIL "not 'of'" NIL)))
         (PPRIN2 C)
         (SETQ C (READCH))
         (COND ((NOT (MEMQ C '(F |f|))) (GENTRANERR C NIL "not 'of'" NIL)))
         (PPRIN2 C)
         (SETQ C (READPASCALTYPE (READCH)))
         (RETURN (CONS (CAR C) (APPEND (CDR C) TY))))))
      (GO L))) 
(PUT 'PROCPASCHEADER 'NUMBER-OF-ARGS 1) 
(PUT 'PROCPASCHEADER 'DEFINED-ON-LINE '917) 
(PUT 'PROCPASCHEADER 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'PROCPASCHEADER 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PROCPASCHEADER (C)
    (PROG (NAME I)
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND (SEPRP C) (NEQ C $EOL$))) (RETURN NIL)))
        (PROGN (PPRIN2 C) (SETQ C (READCH)))
        (GO WHILELABEL))
      (PROG ()
       WHILELABEL
        (COND
         ((NOT (NOT (OR (SEPRP C) (MEMQ C (LIST '{ '|;| '|(|)))))
          (RETURN NIL)))
        (PROGN (SETQ NAME (ACONC NAME C)) (PPRIN2 C) (SETQ C (READCH)))
        (GO WHILELABEL))
      (COND ((MEMQ C (LIST $EOL$ '{ '|;|)) (RETURN C)))
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND (SEPRP C) (NEQ C $EOL$))) (RETURN NIL)))
        (PROGN (PPRIN2 C) (SETQ C (READCH)))
        (GO WHILELABEL))
      (COND ((NEQ C '|(|) (RETURN C)))
      (SETQ NAME (INTERN (COMPRESS NAME)))
      (COND ((NOT *GENDECS) (PASC-SYMTABPUT NAME NIL NIL)))
      (PUT '$0 '*CNAME* NAME)
      (PPRIN2 C)
      (SETQ I 1)
      (SETQ C (READCH))
      (PROG ()
       WHILELABEL
        (COND ((NOT (NEQ C '|)|)) (RETURN NIL)))
        (PROGN
         (SETQ C (FLUSHSPACESCOMMAS C))
         (SETQ NAME (LIST C))
         (PPRIN2 C)
         (PROG ()
          WHILELABEL
           (COND
            ((NOT
              (NOT (OR (SEPRP (SETQ C (READCH))) (MEMQ C (LIST '|,| '|)|)))))
             (RETURN NIL)))
           (PROGN (SETQ NAME (ACONC NAME C)) (PPRIN2 C))
           (GO WHILELABEL))
         (PUT (INTERN (COMPRESS (APPEND (EXPLODE2 '$) (EXPLODE2 I)))) '*CNAME*
              (INTERN (COMPRESS NAME)))
         (SETQ I (ADD1 I))
         (SETQ C (FLUSHSPACES C))
         NIL)
        (GO WHILELABEL))
      (SETQ |$#| (PROGN (SETQ ALGLIST* (CONS NIL NIL)) (SUB1 I)))
      (PROG ()
       WHILELABEL
        (COND
         ((NOT
           (GET
            (SETQ NAME (INTERN (COMPRESS (APPEND (EXPLODE2 '$) (EXPLODE2 I)))))
            '*CNAME*))
          (RETURN NIL)))
        (REMPROP NAME '*CNAME*)
        (GO WHILELABEL))
      (RETURN (PROCPASCFUNCTION C)))) 
(PUT 'PROCPASCFUNCTION 'NUMBER-OF-ARGS 1) 
(PUT 'PROCPASCFUNCTION 'DEFINED-ON-LINE '954) 
(PUT 'PROCPASCFUNCTION 'DEFINED-IN-FILE 'GENTRAN/LSPPASC.RED) 
(PUT 'PROCPASCFUNCTION 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PROCPASCFUNCTION (C)
    (PROG (BLOCK-COUNT)
      (PROG ()
       WHILELABEL
        (COND ((NOT (NEQ C '{)) (RETURN NIL)))
        (COND ((EQ C '|;|) (SETQ C (PROCACTIVE)))
              ((EQ C $EOL$) (PROGN (PTERPRI) (SETQ C (READCH))))
              (T (PROGN (PPRIN2 C) (SETQ C (READCH)))))
        (GO WHILELABEL))
      (PPRIN2 C)
      (SETQ BLOCK-COUNT 1)
      (SETQ C (READCH))
      (PROG ()
       WHILELABEL
        (COND ((NOT (GREATERP BLOCK-COUNT 0)) (RETURN NIL)))
        (COND
         ((EQ C 'BEGIN)
          (PROGN
           (SETQ BLOCK-COUNT (ADD1 BLOCK-COUNT))
           (PPRIN2 C)
           (SETQ C (READCH))))
         ((EQ C 'END)
          (PROGN
           (SETQ BLOCK-COUNT (SUB1 BLOCK-COUNT))
           (PPRIN2 C)
           (SETQ C (READCH))))
         ((EQ C '{) (SETQ C (PROCPASCCOMM)))
         ((EQ C '|;|) (SETQ C (PROCACTIVE)))
         ((EQ C $EOL$) (PROGN (PTERPRI) (SETQ C (READCH))))
         (T (PROGN (PPRIN2 C) (SETQ C (READCH)))))
        (GO WHILELABEL))
      (RETURN C))) 
(ENDMODULE) 