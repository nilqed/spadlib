(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'BAGLIST)) 
(GLOBAL '(|:FLAGLIS| |:PROPLIS|)) 
(FLUID '(|*:AVOID|)) 
(PUT 'FLATTENS1 'NUMBER-OF-ARGS 1) 
(PUT 'FLATTENS1 'DEFINED-ON-LINE '34) 
(PUT 'FLATTENS1 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'FLATTENS1 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FLATTENS1 (X)
    (COND ((ATOM X) (LIST X))
          ((CDR X) (APPEND (FLATTENS1 (CAR X)) (FLATTENS1 (CDR X))))
          (T (FLATTENS1 (CAR X))))) 
(PUT 'FREQUENCY 'NUMBER-OF-ARGS 1) 
(FLAG '(FREQUENCY) 'OPFN) 
(PUT 'FREQUENCY 'DEFINED-ON-LINE '41) 
(PUT 'FREQUENCY 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'FREQUENCY 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FREQUENCY (LST)
    (PROGN
     (AEVAL (CLEAR (LIST 'COUNT??)))
     (AEVAL (OPERATOR (LIST 'COUNT??)))
     (AEVAL (LIST 'FREQUENCY1 LST)))) 
(PUT 'FREQUENCY1 'NUMBER-OF-ARGS 1) 
(FLAG '(FREQUENCY1) 'OPFN) 
(PUT 'FREQUENCY1 'DEFINED-ON-LINE '46) 
(PUT 'FREQUENCY1 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'FREQUENCY1 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FREQUENCY1 (LST)
    (COND ((EVALEQUAL (AEVAL LST) (AEVAL (LIST 'LIST))) (AEVAL (LIST 'LIST)))
          (T
           (PROG (R EL)
             (SETQ EL (AEVAL (LIST 'FIRST LST)))
             (COND
              ((EVALNUMBERP (AEVAL (LIST 'COUNT?? EL)))
               (PROGN
                (SETK (LIST 'COUNT?? EL)
                      (AEVAL (LIST 'PLUS (LIST 'COUNT?? EL) 1)))
                (SETQ R (AEVAL (LIST 'FREQUENCY1 (LIST 'REST LST))))))
              (T
               (SETQ R
                       (AEVAL
                        (LIST 'CONS (LIST 'LIST EL (LIST 'COUNT?? EL))
                              (PROGN
                               (SETK (LIST 'COUNT?? EL) (AEVAL 1))
                               (AEVAL
                                (LIST 'FREQUENCY1 (LIST 'REST LST)))))))))
             (RETURN (AEVAL R)))))) 
(PUT 'SEQUENCES 'NUMBER-OF-ARGS 1) 
(PUT 'SEQUENCES 'DEFINED-ON-LINE '57) 
(PUT 'SEQUENCES 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'SEQUENCES 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SEQUENCES (N)
    (COND ((EQ *MODE 'SYMBOLIC) (SEQUSYMB N)) (T (AEVAL (LIST 'SEQUALG N))))) 
(FLAG '(SEQUENCES) 'OPFN) 
(PUT 'SEQUSYMB 'NUMBER-OF-ARGS 1) 
(PUT 'SEQUSYMB 'DEFINED-ON-LINE '64) 
(PUT 'SEQUSYMB 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'SEQUSYMB 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SEQUSYMB (N)
    (COND ((EQUAL N 1) (LIST (LIST 0) (LIST 1)))
          (T
           (PROG (S FORALL-RESULT FORALL-ENDPTR)
             (SETQ S (SEQUSYMB (DIFFERENCE N 1)))
            STARTOVER
             (COND ((NULL S) (RETURN NIL)))
             (SETQ FORALL-RESULT
                     ((LAMBDA (S) (LIST (CONS 0 S) (CONS 1 S))) (CAR S)))
             (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
             (SETQ S (CDR S))
             (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
            LOOPLABEL
             (COND ((NULL S) (RETURN FORALL-RESULT)))
             (RPLACD FORALL-ENDPTR
                     ((LAMBDA (S) (LIST (CONS 0 S) (CONS 1 S))) (CAR S)))
             (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
             (SETQ S (CDR S))
             (GO LOOPLABEL))))) 
(PUT 'SEQUALG 'NUMBER-OF-ARGS 1) 
(FLAG '(SEQUALG) 'OPFN) 
(PUT 'SEQUALG 'DEFINED-ON-LINE '69) 
(PUT 'SEQUALG 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'SEQUALG 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SEQUALG (N)
    (COND
     ((EVALEQUAL (AEVAL N) 1)
      (AEVAL (LIST 'LIST (LIST 'LIST 0) (LIST 'LIST 1))))
     (T
      (PROG (S FORALL-RESULT FORALL-ENDPTR)
        (SETQ S (GETRLIST (AEVAL (LIST 'SEQUALG (LIST 'DIFFERENCE N 1)))))
       STARTOVER
        (COND ((NULL S) (RETURN (MAKELIST NIL))))
        (SETQ FORALL-RESULT
                ((LAMBDA (S)
                   (AEVAL (LIST 'LIST (LIST 'CONS 0 S) (LIST 'CONS 1 S))))
                 (CAR S)))
        (SETQ FORALL-ENDPTR (LASTPAIR (CONS 'LIST FORALL-RESULT)))
        (SETQ S (CDR S))
        (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
       LOOPLABEL
        (COND ((NULL S) (RETURN FORALL-RESULT)))
        (RPLACD FORALL-ENDPTR
                (GETRLIST
                 ((LAMBDA (S)
                    (AEVAL (LIST 'LIST (LIST 'CONS 0 S) (LIST 'CONS 1 S))))
                  (CAR S))))
        (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
        (SETQ S (CDR S))
        (GO LOOPLABEL))))) 
(PUT 'SPLIT 'NUMBER-OF-ARGS 2) 
(FLAG '(SPLIT) 'OPFN) 
(PUT 'SPLIT 'DEFINED-ON-LINE '75) 
(PUT 'SPLIT 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'SPLIT 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE SPLIT (U V)
    (COND
     ((AND (BOOLVALUE* (REVALX (BAGLISTP U)))
           (BOOLVALUE* (REVALX (BAGLISTP V))))
      (PROG (X)
        (RETURN
         (PROG (N FORALL-RESULT FORALL-ENDPTR)
           (SETQ N (GETRLIST (AEVAL V)))
           (COND ((NULL N) (RETURN (MAKELIST NIL))))
           (SETQ FORALL-RESULT
                   (SETQ FORALL-ENDPTR
                           (CONS
                            ((LAMBDA (N)
                               (PROG (I FORALL-RESULT FORALL-ENDPTR)
                                 (SETQ I 1)
                                 (COND
                                  ((|AMINUSP:| (LIST 'DIFFERENCE (AEVAL* N) I))
                                   (RETURN (MAKELIST NIL))))
                                 (SETQ FORALL-RESULT
                                         (SETQ FORALL-ENDPTR
                                                 (CONS
                                                  (PROGN
                                                   (SETQ X
                                                           (AEVAL*
                                                            (LIST 'CONS U 1)))
                                                   (SETQ U
                                                           (AEVAL*
                                                            (LIST 'REST U)))
                                                   (AEVAL* X))
                                                  NIL)))
                                LOOPLABEL
                                 (SETQ I
                                         ((LAMBDA (FORALL-RESULT)
                                            (AEVAL*
                                             (LIST 'PLUS FORALL-RESULT 1)))
                                          I))
                                 (COND
                                  ((|AMINUSP:| (LIST 'DIFFERENCE (AEVAL* N) I))
                                   (RETURN (CONS 'LIST FORALL-RESULT))))
                                 (RPLACD FORALL-ENDPTR
                                         (CONS
                                          (PROGN
                                           (SETQ X (AEVAL* (LIST 'CONS U 1)))
                                           (SETQ U (AEVAL* (LIST 'REST U)))
                                           (AEVAL* X))
                                          NIL))
                                 (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                                 (GO LOOPLABEL)))
                             (CAR N))
                            NIL)))
          LOOPLABEL
           (SETQ N (CDR N))
           (COND ((NULL N) (RETURN (CONS 'LIST FORALL-RESULT))))
           (RPLACD FORALL-ENDPTR
                   (CONS
                    ((LAMBDA (N)
                       (PROG (I FORALL-RESULT FORALL-ENDPTR)
                         (SETQ I 1)
                         (COND
                          ((|AMINUSP:| (LIST 'DIFFERENCE (AEVAL* N) I))
                           (RETURN (MAKELIST NIL))))
                         (SETQ FORALL-RESULT
                                 (SETQ FORALL-ENDPTR
                                         (CONS
                                          (PROGN
                                           (SETQ X (AEVAL* (LIST 'CONS U 1)))
                                           (SETQ U (AEVAL* (LIST 'REST U)))
                                           (AEVAL* X))
                                          NIL)))
                        LOOPLABEL
                         (SETQ I
                                 ((LAMBDA (FORALL-RESULT)
                                    (AEVAL* (LIST 'PLUS FORALL-RESULT 1)))
                                  I))
                         (COND
                          ((|AMINUSP:| (LIST 'DIFFERENCE (AEVAL* N) I))
                           (RETURN (CONS 'LIST FORALL-RESULT))))
                         (RPLACD FORALL-ENDPTR
                                 (CONS
                                  (PROGN
                                   (SETQ X (AEVAL* (LIST 'CONS U 1)))
                                   (SETQ U (AEVAL* (LIST 'REST U)))
                                   (AEVAL* X))
                                  NIL))
                         (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                         (GO LOOPLABEL)))
                     (CAR N))
                    NIL))
           (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
           (GO LOOPLABEL)))))
     (T (AEVAL (REDERR (LIST U V ": must be lists or bags")))))) 
(PUT 'EXTREMUM 'NUMBER-OF-ARGS 2) 
(PUT 'EXTREMUM 'DEFINED-ON-LINE '87) 
(PUT 'EXTREMUM 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'EXTREMUM 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE EXTREMUM (L FN)
    (COND ((ATOM L) L)
          (T
           ((LAMBDA (X) (COND ((NULL X) NIL) (T (MAXIMUM3 X (CADR L) FN))))
            (CDR L))))) 
(FLAG '(EXTREMUM) 'OPFN) 
(PUT 'MAXIMUM3 'NUMBER-OF-ARGS 3) 
(PUT 'MAXIMUM3 'DEFINED-ON-LINE '96) 
(PUT 'MAXIMUM3 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'MAXIMUM3 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE MAXIMUM3 (L M FN)
    (COND ((NULL L) M) ((APPLY2 FN (CAR L) M) (MAXIMUM3 (CDR L) (CAR L) FN))
          (T (MAXIMUM3 (CDR L) M FN)))) 
(PUT 'RMKLIS 'NUMBER-OF-ARGS 1) 
(PUT 'RMKLIS 'DEFINED-ON-LINE '101) 
(PUT 'RMKLIS 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'RMKLIS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RMKLIS (U)
    (PROG (S SS N)
      (SETQ N 0)
      (COND
       ((EQUAL (LENGTH U) 2)
        (PROGN
         (SETQ S (REVAL1 (CAR U) T))
         (SETQ N (REVAL1 (CADR U) T))
         (COND
          ((EQ (CAR S) 'LIST)
           (SETQ SS
                   (APPEND S
                           (CDR
                            (RMKLIS
                             (LIST (PLUS N (DIFFERENCE 1 (LENGTH S)))))))))
          (T NIL))))
       ((EQUAL (LENGTH U) 1)
        (PROGN
         (SETQ N (REVAL1 (CAR U) T))
         (PROG (J)
           (SETQ J 1)
          LAB
           (COND ((MINUSP (DIFFERENCE N J)) (RETURN NIL)))
           (SETQ S (CONS 0 S))
           (SETQ J (PLUS2 J 1))
           (GO LAB))
         (SETQ SS (CONS 'LIST S))))
       (T NIL))
      (RETURN SS))) 
(PUT 'MKLIST 'PSOPFN 'RMKLIS) 
(PUT 'ALGNLIST 'NUMBER-OF-ARGS 2) 
(PUT 'ALGNLIST 'DEFINED-ON-LINE '114) 
(PUT 'ALGNLIST 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'ALGNLIST 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE ALGNLIST (U N) (SYMB_TO_ALG (NLIST (ALG_TO_SYMB U) N))) 
(FLAG '(ALGNLIST) 'OPFN) 
(PUT 'INSERT_KEEP_ORDER 'NUMBER-OF-ARGS 3) 
(PUT 'INSERT_KEEP_ORDER 'DEFINED-ON-LINE '120) 
(PUT 'INSERT_KEEP_ORDER 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'INSERT_KEEP_ORDER 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE INSERT_KEEP_ORDER (U L FN)
    ((LAMBDA (X)
       (COND
        ((OR (AND X (EQUAL X 1)) (ATOM L))
         (TYPERR (LIST L FN) "list and binary function"))
        (T (CONS 'LIST (INSERT_KEEP_ORDER1 U (CDR L) FN)))))
     (GET FN 'NUMBER-OF-ARGS))) 
(FLAG '(INSERT_KEEP_ORDER) 'OPFN) 
(PUT 'INSERT_KEEP_ORDER1 'NUMBER-OF-ARGS 3) 
(PUT 'INSERT_KEEP_ORDER1 'DEFINED-ON-LINE '130) 
(PUT 'INSERT_KEEP_ORDER1 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'INSERT_KEEP_ORDER1 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE INSERT_KEEP_ORDER1 (U L FN)
    (COND ((NULL L) (LIST U)) ((APPLY FN (LIST U (CAR L))) (CONS U L))
          (T (CONS (CAR L) (INSERT_KEEP_ORDER1 U (CDR L) FN))))) 
(PUT 'MERGE_LIST 'NUMBER-OF-ARGS 3) 
(PUT 'MERGE_LIST 'DEFINED-ON-LINE '136) 
(PUT 'MERGE_LIST 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'MERGE_LIST 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE MERGE_LIST (L1 L2 FN) (CONS 'LIST (MERGE_LIST1 (CDR L1) (CDR L2) FN))) 
(FLAG '(MERGE_LIST) 'OPFN) 
(PUT 'MERGE_LIST1 'NUMBER-OF-ARGS 3) 
(PUT 'MERGE_LIST1 'DEFINED-ON-LINE '142) 
(PUT 'MERGE_LIST1 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'MERGE_LIST1 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE MERGE_LIST1 (L1 L2 FN)
    (COND ((NULL L1) L2) ((NULL L2) L1)
          ((APPLY2 FN (CAR L1) (CAR L2))
           (RPLACD L1 (MERGE_LIST1 (CDR L1) L2 FN)))
          (T (RPLACD L2 (MERGE_LIST1 L1 (CDR L2) FN))))) 
(PUT 'BAG 'SIMPFN 'SIMPIDEN) 
(FLAG '(BAG) 'BAG) 
(FLAG '(BAG) 'RESERVED) 
(SETQ |:FLAGLIS| (UNION (LIST (LIST 'BAG 'BAG)) |:FLAGLIS|)) 
(PUT '|:DELETE| 'NUMBER-OF-ARGS 3) 
(PUT '|:DELETE| 'DEFINED-ON-LINE '165) 
(PUT '|:DELETE| 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT '|:DELETE| 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE |:DELETE| (U PROP VAL)
    (COND
     (PROP
      (PROG (X)
        (SETQ X |:PROPLIS|)
       LAB
        (COND ((NULL X) (RETURN NIL)))
        ((LAMBDA (X)
           (COND
            ((EQUAL X (LIST U PROP VAL))
             (SETQ |:PROPLIS| (DELETE X |:PROPLIS|)))
            (T NIL)))
         (CAR X))
        (SETQ X (CDR X))
        (GO LAB)))
     (T
      (PROG (X)
        (SETQ X |:FLAGLIS|)
       LAB
        (COND ((NULL X) (RETURN NIL)))
        ((LAMBDA (X)
           (COND
            ((EQUAL X (LIST U VAL)) (SETQ |:FLAGLIS| (DELETE X |:FLAGLIS|)))))
         (CAR X))
        (SETQ X (CDR X))
        (GO LAB))))) 
(PUT '|:BAGNO| 'NUMBER-OF-ARGS 1) 
(PUT '|:BAGNO| 'DEFINED-ON-LINE '172) 
(PUT '|:BAGNO| 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT '|:BAGNO| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |:BAGNO| (U) (OR (EQ U 'LIST) (FLAGP U 'BOOLEAN))) 
(PUT '|:BAGYES| 'NUMBER-OF-ARGS 1) 
(PUT '|:BAGYES| 'DEFINED-ON-LINE '174) 
(PUT '|:BAGYES| 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT '|:BAGYES| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |:BAGYES| (U)
    (OR (GETD U) (MEMBER (GETTYPE U) (LIST 'TVECTOR 'VECTOR)) (FLAGP U 'OPFN)
        (GET U 'SIMPFN) (GET U 'PSOPFN) (GET U 'FDEGREE) (GET U 'IFDEGREE))) 
(PUT 'SIMPBAGPROP 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPBAGPROP 'DEFINED-ON-LINE '180) 
(PUT 'SIMPBAGPROP 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'SIMPBAGPROP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPBAGPROP (U)
    (PROG (ID BOOL)
      (SETQ ID (CAR U))
      (SETQ BOOL (COND ((EQ (CADR U) T) T)))
      (COND
       ((LISTP ID)
        (PROGN
         (PROG (X)
           (SETQ X ID)
          LAB
           (COND ((NULL X) (RETURN NIL)))
           ((LAMBDA (X) (SIMPBAGPROP (LIST X BOOL))) (CAR X))
           (SETQ X (CDR X))
           (GO LAB))
         (RETURN BOOL)))
       ((AND (IDP ID) (EQUAL BOOL T))
        (COND ((|:BAGNO| ID) (TYPERR ID "BAG"))
              ((|:BAGYES| ID) (PROGN (FLAG (LIST ID) 'BAG) (GO L1)))
              (T
               (PROGN
                (PUT ID 'SIMPFN 'SIMPIDEN)
                (FLAG (LIST ID) 'BAG)
                (GO L1)))))
       ((AND (IDP ID) (NOT BOOL)) (PROGN (REMFLAG (LIST ID) 'BAG) (GO L1)))
       (T (REDERR "BAD ARGUMENT for bagprop")))
     L1
      (COND (BOOL (SETQ |:FLAGLIS| (UNION (LIST (LIST ID 'BAG)) |:FLAGLIS|)))
            (T (|:DELETE| ID NIL 'BAG))))) 
(PUT 'PUTBAG 'NUMBER-OF-ARGS 1) 
(PUT 'PUTBAG 'DEFINED-ON-LINE '201) 
(PUT 'PUTBAG 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'PUTBAG 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PUTBAG (U) (SIMPBAGPROP (LIST U T))) 
(PUT 'CLEARBAG 'NUMBER-OF-ARGS 1) 
(PUT 'CLEARBAG 'DEFINED-ON-LINE '206) 
(PUT 'CLEARBAG 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'CLEARBAG 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE CLEARBAG (U) (SIMPBAGPROP (LIST U 0))) 
(RLISTAT '(PUTBAG CLEARBAG)) 
(PUT 'BAGP 'NUMBER-OF-ARGS 1) 
(PUT 'BAGP 'DEFINED-ON-LINE '212) 
(PUT 'BAGP 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'BAGP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE BAGP (U) (AND (NOT (ATOM U)) (FLAGP (CAR U) 'BAG))) 
(FLAG '(BAGP) 'BOOLEAN) 
(PUT 'NBGLP 'NUMBER-OF-ARGS 2) 
(PUT 'NBGLP 'DEFINED-ON-LINE '218) 
(PUT 'NBGLP 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'NBGLP 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE NBGLP (U N)
    (COND ((EQUAL N 0) (NOT (BAGLISTP U)))
          ((OR (ATOM U) (NOT (|BGLP::| (CAR U)))) NIL)
          (T
           (PROG (UU)
             (SETQ UU U)
            L1
             (SETQ UU (CDR UU))
             (COND ((NULL UU) (RETURN T)))
             (COND ((NBGLP (CAR UU) (DIFFERENCE N 1)) (GO L1))
                   (T (RETURN NIL))))))) 
(PUT '|BGLP::| 'NUMBER-OF-ARGS 1) 
(PUT '|BGLP::| 'DEFINED-ON-LINE '229) 
(PUT '|BGLP::| 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT '|BGLP::| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |BGLP::| (U)
    (COND ((NOT (ATOM U)) (|BGLP::| (CAR U)))
          ((OR (FLAGP U 'BAG) (EQ U 'LIST)) T) (T NIL))) 
(PUT 'BAGLISTP 'NUMBER-OF-ARGS 1) 
(PUT 'BAGLISTP 'DEFINED-ON-LINE '233) 
(PUT 'BAGLISTP 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'BAGLISTP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE BAGLISTP (U)
    (AND (NOT (ATOM U)) (OR (EQ (CAR U) 'LIST) (FLAGP (CAR U) 'BAG)))) 
(PUT '|NUL:| 'NUMBER-OF-ARGS 1) 
(PUT '|NUL:| 'DEFINED-ON-LINE '237) 
(PUT '|NUL:| 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT '|NUL:| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |NUL:| (U) (AND (BAGLISTP U) (NULL (CDR U)))) 
(FLAG '(BAGLISTP |NUL:|) 'BOOLEAN) 
(PUT 'ABAGLISTP 'NUMBER-OF-ARGS 1) 
(PUT 'ABAGLISTP 'DEFINED-ON-LINE '241) 
(PUT 'ABAGLISTP 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'ABAGLISTP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE ABAGLISTP (U)
    (COND ((OR (NULL (BAGLISTP U)) (NULL (BAGLISTP (CADR U)))) NIL)
          (T
           (PROG ()
            L1
             (SETQ U (CDR U))
             (COND ((NULL U) (RETURN T)))
             (COND ((LESSP (LENGTH (CAR U)) 3) (RETURN NIL)) (T (GO L1))))))) 
(FLAG '(ABAGLISTP) 'BOOLEAN) 
(PUT 'REXPLIS 'NUMBER-OF-ARGS 1) 
(PUT 'REXPLIS 'DEFINED-ON-LINE '254) 
(PUT 'REXPLIS 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'REXPLIS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REXPLIS (U)
    (COND ((ATOM (SETQ U (REVAL1 (CAR U) T))) NIL)
          ((KERNP (MKSQ U 1))
           (CONS 'LIST
                 (PROG (I FORALL-RESULT FORALL-ENDPTR)
                   (SETQ I (CDR U))
                   (COND ((NULL I) (RETURN NIL)))
                   (SETQ FORALL-RESULT
                           (SETQ FORALL-ENDPTR
                                   (CONS
                                    ((LAMBDA (I) (MK*SQ (SIMP* I))) (CAR I))
                                    NIL)))
                  LOOPLABEL
                   (SETQ I (CDR I))
                   (COND ((NULL I) (RETURN FORALL-RESULT)))
                   (RPLACD FORALL-ENDPTR
                           (CONS ((LAMBDA (I) (MK*SQ (SIMP* I))) (CAR I)) NIL))
                   (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                   (GO LOOPLABEL)))))) 
(PUT 'KERNLIST 'PSOPFN 'REXPLIS) 
(PUT 'RLISBAG 'NUMBER-OF-ARGS 1) 
(PUT 'RLISBAG 'DEFINED-ON-LINE '264) 
(PUT 'RLISBAG 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'RLISBAG 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RLISBAG (U)
    (PROG (X PRF)
      (SETQ X (REVAL1 (CAR U) T))
      (SETQ PRF (REVAL1 (CADR U) T))
      (COND ((ATOM X) (RETURN NIL))
            (T (PROGN (SIMPBAGPROP (LIST PRF T)) (SETQ X (CONS PRF (CDR X))))))
      (RETURN X))) 
(PUT 'LISTBAG 'PSOPFN 'RLISBAG) 
(PUT 'RFIRST 'NUMBER-OF-ARGS 1) 
(PUT 'RFIRST 'DEFINED-ON-LINE '273) 
(PUT 'RFIRST 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'RFIRST 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RFIRST (LI)
    (COND
     ((BAGP (SETQ LI (REVAL1 (CAR LI) T)))
      (COND ((NULL (CDR LI)) (CONS (CAR LI) NIL))
            (T (CONS (CAR LI) (CONS (CADR LI) NIL)))))
     ((NEQ (CAR LI) 'LIST) (TYPERR LI "list or bag"))
     ((NULL (CDR LI)) (PARTERR LI 1)) (T (CADR LI)))) 
(PUT 'FIRST 'PSOPFN 'RFIRST) 
(PUT 'RSECOND 'NUMBER-OF-ARGS 1) 
(PUT 'RSECOND 'DEFINED-ON-LINE '282) 
(PUT 'RSECOND 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'RSECOND 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RSECOND (LI)
    (COND
     ((BAGP (SETQ LI (REVAL1 (CAR LI) T)))
      (COND ((OR (NULL (CDR LI)) (NULL (CDDR LI))) (CONS (CAR LI) NIL))
            (T (CONS (CAR LI) (CONS (CADDR LI) NIL)))))
     ((NEQ (CAR LI) 'LIST) (TYPERR LI "list or bag"))
     ((OR (NULL (CDR LI)) (NULL (CDDR LI))) (PARTERR LI 2)) (T (CADDR LI)))) 
(PUT 'SECOND 'PSOPFN 'RSECOND) 
(PUT 'RTHIRD 'NUMBER-OF-ARGS 1) 
(PUT 'RTHIRD 'DEFINED-ON-LINE '292) 
(PUT 'RTHIRD 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'RTHIRD 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RTHIRD (LI)
    (COND
     ((BAGP (SETQ LI (REVAL1 (CAR LI) T)))
      (COND
       ((OR (NULL (CDR LI)) (NULL (CDDR LI)) (NULL (CDDDR LI)))
        (CONS (CAR LI) NIL))
       (T (CONS (CAR LI) (CONS (CADDDR LI) NIL)))))
     ((NEQ (CAR LI) 'LIST) (TYPERR LI "list or bag"))
     ((OR (NULL (CDR LI)) (NULL (CDDR LI)) (NULL (CDDDR LI))) (PARTERR LI 3))
     (T (CADDDR LI)))) 
(PUT 'RREST 'NUMBER-OF-ARGS 1) 
(PUT 'RREST 'DEFINED-ON-LINE '301) 
(PUT 'RREST 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'RREST 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RREST (LI)
    (COND
     ((BAGP (SETQ LI (REVAL1 (CAR LI) T)))
      (COND ((NULL (CDR LI)) (CONS LI NIL)) (T (CONS (CAR LI) (CDDR LI)))))
     ((NEQ (CAR LI) 'LIST) (TYPERR LI "list or bag"))
     (T (CONS 'LIST (COND ((NULL (SETQ LI (CDR LI))) LI) (T (CDR LI))))))) 
(PUT 'REST 'PSOPFN 'RREST) 
(PUT 'RREVERSE 'NUMBER-OF-ARGS 1) 
(PUT 'RREVERSE 'DEFINED-ON-LINE '309) 
(PUT 'RREVERSE 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'RREVERSE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RREVERSE (U)
    (PROGN
     (SETQ U (REVAL1 (CAR U) T))
     (COND ((BAGP U) (CONS (CAR U) (REVERSE (CDR U))))
           ((NEQ (CAR U) 'LIST) (TYPERR U "list or bag"))
           (T (CONS 'LIST (REVERSE (CDR U))))))) 
(PUT 'REVERSE 'PSOPFN 'RREVERSE) 
(PUT 'RLAST 'NUMBER-OF-ARGS 1) 
(PUT 'RLAST 'DEFINED-ON-LINE '317) 
(PUT 'RLAST 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'RLAST 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RLAST (U)
    (PROGN
     (SETQ U (REVAL1 (CAR U) T))
     (COND
      ((BAGP U)
       (COND ((NULL (CDR U)) U)
             (T (CONS (CAR U) (CONS (LASTCAR (CDR U)) NIL)))))
      ((NEQ (CAR U) 'LIST) (TYPERR U "list or bag")) ((NULL (CDR U)) NIL)
      (T (LASTCAR (CDR U)))))) 
(PUT 'LAST 'PSOPFN 'RLAST) 
(PUT 'RDC 'NUMBER-OF-ARGS 1) 
(PUT 'RDC 'DEFINED-ON-LINE '327) 
(PUT 'RDC 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'RDC 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RDC (U) (COND ((NULL (CDR U)) NIL) (T (CONS (CAR U) (RDC (CDR U)))))) 
(PUT 'RBELAST 'NUMBER-OF-ARGS 1) 
(PUT 'RBELAST 'DEFINED-ON-LINE '330) 
(PUT 'RBELAST 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'RBELAST 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RBELAST (U)
    (PROGN
     (SETQ U (REVAL1 (CAR U) T))
     (COND
      ((BAGLISTP U) (COND ((NULL (CDR U)) U) (T (CONS (CAR U) (RDC (CDR U))))))
      (T (TYPERR U "list or bag"))))) 
(PUT 'BELAST 'PSOPFN 'RBELAST) 
(PUT 'RAPPEND 'NUMBER-OF-ARGS 1) 
(PUT 'RAPPEND 'DEFINED-ON-LINE '339) 
(PUT 'RAPPEND 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'RAPPEND 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RAPPEND (U)
    (PROG (X Y)
      (COND ((NEQ (LENGTH U) 2) (REDERR "append has TWO arguments")))
      (SETQ X (REVAL1 (CAR U) T))
      (SETQ Y (REVAL1 (CADR U) T))
      (COND
       ((AND (BAGLISTP X) (BAGLISTP Y))
        (RETURN (CONS (CAR X) (APPEND (CDR X) (CDR Y)))))
       (T (TYPERR (LIST X Y) "list or bag"))))) 
(PUT 'APPEND 'PSOPFN 'RAPPEND) 
(PUT 'RAPPENDN 'NUMBER-OF-ARGS 1) 
(PUT 'RAPPENDN 'DEFINED-ON-LINE '351) 
(PUT 'RAPPENDN 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'RAPPENDN 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RAPPENDN (U)
    (PROG (X Y)
      (SETQ X (REVLIS U))
      (SETQ Y
              (PROG (I FORALL-RESULT FORALL-ENDPTR)
                (SETQ I X)
                (COND ((NULL I) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS
                                 ((LAMBDA (I)
                                    (MKQUOTE
                                     (COND
                                      ((ATOM I)
                                       (REDERR
                                        "arguments must be kernels or lists"))
                                      (T (CDR I)))))
                                  (CAR I))
                                 NIL)))
               LOOPLABEL
                (SETQ I (CDR I))
                (COND ((NULL I) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        (CONS
                         ((LAMBDA (I)
                            (MKQUOTE
                             (COND
                              ((ATOM I)
                               (REDERR "arguments must be kernels or lists"))
                              (T (CDR I)))))
                          (CAR I))
                         NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (SETQ X (EVAL (EXPAND Y 'APPEND)))
      (RETURN (CONS 'LIST X)))) 
(PUT 'APPENDN 'PSOPFN 'RAPPENDN) 
(PUT 'RCONS 'NUMBER-OF-ARGS 1) 
(PUT 'RCONS 'DEFINED-ON-LINE '395) 
(PUT 'RCONS 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'RCONS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RCONS (U)
    (PROG (X Y Z)
      (COND
       ((EQ (SETQ Y (GETRTYPEOR (SETQ X (REVLIS U)))) 'HVECTOR)
        (RETURN
         (COND
          ((AND (GET 'CONS 'OPMTCH) (SETQ Z (OPMTCH (CONS 'CONS X))))
           (REVAL1 Z T))
          (T (PREPSQ (SUBS2 (SIMPDOT X)))))))
       ((EQ (GETRTYPE (SETQ Y (CADR X))) 'LIST)
        (RETURN (CONS 'LIST (CONS (CAR X) (CDADR X)))))
       ((BAGP Y) (RETURN (SETQ Z (CONS (CAR Y) (CONS (CAR X) (CDR Y))))))
       ((FIXP Y)
        (PROGN
         (COND ((GET 'RCONS 'CLEANUPFN) (SETQ |*:AVOID| T)))
         (RETURN (REVALPART U))))
       (T (TYPERR X "list or bag"))))) 
(PUT 'CONS 'SETQFN '(LAMBDA (U V W) (SETPART* U V W))) 
(PUT 'CONS 'PSOPFN 'RCONS) 
(PUT 'LENGTHREVAL 'NUMBER-OF-ARGS 1) 
(PUT 'LENGTHREVAL 'DEFINED-ON-LINE '432) 
(PUT 'LENGTHREVAL 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'LENGTHREVAL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE LENGTHREVAL (U)
    (PROG (V W)
      (COND
       ((NEQ (LENGTH U) 1)
        (REDERR "LENGTH called with wrong number of arguments"))
       ((AND (IDP (CAR U)) (ARRAYP (CAR U)))
        (RETURN (CONS 'LIST (GET (CAR U) 'DIMENSION))))
       ((BAGP (SETQ U (REVAL1 (CAR U) T))) (RETURN (LENGTH (CDR U)))))
      (SETQ V (REVAL1 U NIL))
      (COND
       ((AND (SETQ W (GETRTYPE V)) (SETQ W (GET W 'LENGTHFN)))
        (RETURN (APPLY1 W V)))
       ((ATOM V) (RETURN 1))
       ((OR (NOT (IDP (CAR V))) (NOT (SETQ W (GET (CAR V) 'LENGTHFN))))
        (TYPERR U "length argument"))
       (T (RETURN (APPLY1 W (CDR V))))))) 
(PUT 'LENGTH 'PSOPFN 'LENGTHREVAL) 
(PUT 'SIZE 'PSOPFN 'LENGTHREVAL) 
(PUT 'RREMOVE 'NUMBER-OF-ARGS 1) 
(PUT 'RREMOVE 'DEFINED-ON-LINE '453) 
(PUT 'RREMOVE 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'RREMOVE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RREMOVE (U)
    (COND
     ((NEQ (LENGTH U) 2)
      (REDERR "remove called with wrong number of arguments"))
     (T
      (PROG (X N)
        (SETQ N 0)
        (SETQ X (REVAL1 (CAR U) T))
        (SETQ N (REVAL1 (CADR U) T))
        (COND ((BAGLISTP X) (RETURN (CONS (CAR X) (REMOVE (CDR X) N))))
              (T (TYPERR U "list or bag"))))))) 
(PUT 'REMOVE 'PSOPFN 'RREMOVE) 
(PUT 'RDELETE 'NUMBER-OF-ARGS 1) 
(PUT 'RDELETE 'DEFINED-ON-LINE '467) 
(PUT 'RDELETE 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'RDELETE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RDELETE (U)
    (PROG (X Y)
      (SETQ X (REVAL1 (CAR U) T))
      (SETQ Y (REVAL1 (CADR U) T))
      (COND ((BAGLISTP Y) (RETURN (DELETE X Y)))))) 
(PUT 'DELETE 'PSOPFN 'RDELETE) 
(PUT 'DELETE_ALL 'NUMBER-OF-ARGS 2) 
(PUT 'DELETE_ALL 'DEFINED-ON-LINE '476) 
(PUT 'DELETE_ALL 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'DELETE_ALL 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE DELETE_ALL (OB U) (CONS 'LIST (DEL_ALL_OBJ OB (CDR U)))) 
(FLAG '(DELETE_ALL) 'OPFN) 
(PUT 'DEL_ALL_OBJ 'NUMBER-OF-ARGS 2) 
(PUT 'DEL_ALL_OBJ 'DEFINED-ON-LINE '481) 
(PUT 'DEL_ALL_OBJ 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'DEL_ALL_OBJ 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE DEL_ALL_OBJ (OB U)
    (COND ((NULL U) NIL) ((EQUAL (CAR U) OB) (DEL_ALL_OBJ OB (CDR U)))
          (T (CONS (CAR U) (DEL_ALL_OBJ OB (CDR U)))))) 
(PUT 'RMEMBER 'NUMBER-OF-ARGS 1) 
(PUT 'RMEMBER 'DEFINED-ON-LINE '487) 
(PUT 'RMEMBER 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'RMEMBER 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RMEMBER (U)
    (PROG (X Y)
      (SETQ X (REVAL1 (CAR U) T))
      (SETQ Y (REVAL1 (CADR U) T))
      (COND
       ((BAGLISTP Y)
        (COND ((SETQ X (MEMBER X (CDR Y))) (RETURN (CONS (CAR Y) X)))
              (T (RETURN NIL))))
       (T (TYPERR Y "list or bag"))))) 
(PUT 'MEMBER 'PSOPFN 'RMEMBER) 
(PUT 'RELMULT 'NUMBER-OF-ARGS 1) 
(PUT 'RELMULT 'DEFINED-ON-LINE '501) 
(PUT 'RELMULT 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'RELMULT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RELMULT (U)
    (COND
     ((NEQ (LENGTH U) 2)
      (REDERR "elmult called with wrong number of arguments"))
     (T
      (PROG (X Y N)
        (SETQ N 0)
        (SETQ X (REVAL1 (CAR U) T))
        (SETQ Y (REVAL1 (CADR U) T))
        (COND ((EQUAL X Y) (RETURN 1))
              ((BAGLISTP Y)
               (PROGN
                (SETQ Y (CDR Y))
                (PROG ()
                 WHILELABEL
                  (COND
                   ((NOT (NOT (NULL (SETQ Y (MEMBER X Y))))) (RETURN NIL)))
                  (PROGN (SETQ Y (CDR Y)) (SETQ N (PLUS N 1)))
                  (GO WHILELABEL))))
              (T (TYPERR Y "list or bag")))
        (RETURN N))))) 
(PUT 'ELMULT 'PSOPFN 'RELMULT) 
(PUT 'RPAIR 'NUMBER-OF-ARGS 1) 
(PUT 'RPAIR 'DEFINED-ON-LINE '519) 
(PUT 'RPAIR 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'RPAIR 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RPAIR (U)
    (PROG (X Y PRF)
      (COND
       ((NEQ (LENGTH U) 2)
        (REDERR "pair called with wrong number of arguments")))
      (SETQ X (REVAL1 (CAR U) T))
      (SETQ Y (REVAL1 (CADR U) T))
      (COND
       ((NOT (AND (BAGLISTP X) (BAGLISTP Y)))
        (REDERR "arguments must be lists or bags"))
       (T (SETQ PRF (CAR X))))
      (SETQ X (CDR X))
      (SETQ Y (CDR Y))
      (SETQ Y
              (PAIR X
                    (PROG (J FORALL-RESULT FORALL-ENDPTR)
                      (SETQ J Y)
                      (COND ((NULL J) (RETURN NIL)))
                      (SETQ FORALL-RESULT
                              (SETQ FORALL-ENDPTR
                                      (CONS ((LAMBDA (J) (LIST J)) (CAR J))
                                            NIL)))
                     LOOPLABEL
                      (SETQ J (CDR J))
                      (COND ((NULL J) (RETURN FORALL-RESULT)))
                      (RPLACD FORALL-ENDPTR
                              (CONS ((LAMBDA (J) (LIST J)) (CAR J)) NIL))
                      (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                      (GO LOOPLABEL))))
      (RETURN
       (SETQ Y
               (CONS PRF
                     (PROG (J FORALL-RESULT FORALL-ENDPTR)
                       (SETQ J Y)
                       (COND ((NULL J) (RETURN NIL)))
                       (SETQ FORALL-RESULT
                               (SETQ FORALL-ENDPTR
                                       (CONS
                                        ((LAMBDA (J) (CONS PRF J)) (CAR J))
                                        NIL)))
                      LOOPLABEL
                       (SETQ J (CDR J))
                       (COND ((NULL J) (RETURN FORALL-RESULT)))
                       (RPLACD FORALL-ENDPTR
                               (CONS ((LAMBDA (J) (CONS PRF J)) (CAR J)) NIL))
                       (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                       (GO LOOPLABEL))))))) 
(PUT 'PAIR 'PSOPFN 'RPAIR) 
(PUT 'DELPAIR 'NUMBER-OF-ARGS 2) 
(PUT 'DELPAIR 'DEFINED-ON-LINE '532) 
(PUT 'DELPAIR 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'DELPAIR 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE DELPAIR (ELT U)
    (CONS 'LIST
          (PROG (J FORALL-RESULT FORALL-ENDPTR)
            (SETQ J
                    (DELASC ELT
                            (PROG (I FORALL-RESULT FORALL-ENDPTR)
                              (SETQ I (CDR U))
                              (COND ((NULL I) (RETURN NIL)))
                              (SETQ FORALL-RESULT
                                      (SETQ FORALL-ENDPTR
                                              (CONS
                                               ((LAMBDA (I) (CDR I)) (CAR I))
                                               NIL)))
                             LOOPLABEL
                              (SETQ I (CDR I))
                              (COND ((NULL I) (RETURN FORALL-RESULT)))
                              (RPLACD FORALL-ENDPTR
                                      (CONS ((LAMBDA (I) (CDR I)) (CAR I))
                                            NIL))
                              (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                              (GO LOOPLABEL))))
            (COND ((NULL J) (RETURN NIL)))
            (SETQ FORALL-RESULT
                    (SETQ FORALL-ENDPTR
                            (CONS ((LAMBDA (J) (CONS 'LIST J)) (CAR J)) NIL)))
           LOOPLABEL
            (SETQ J (CDR J))
            (COND ((NULL J) (RETURN FORALL-RESULT)))
            (RPLACD FORALL-ENDPTR
                    (CONS ((LAMBDA (J) (CONS 'LIST J)) (CAR J)) NIL))
            (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
            (GO LOOPLABEL)))) 
(FLAG '(DELPAIR) 'OPFN) 
(PUT '|DEPTH:| 'NUMBER-OF-ARGS 1) 
(PUT '|DEPTH:| 'DEFINED-ON-LINE '539) 
(PUT '|DEPTH:| 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT '|DEPTH:| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |DEPTH:| (U)
    (COND
     ((AND (NOT (ATOM U)) (OR (EQ (CAR U) 'LIST) (FLAGP (CAR U) 'BAG)))
      (PLUS 1 (COND ((CDR U) (|DEPTH:| (CADR U))) (T 0))))
     (T 0))) 
(PUT 'RDEPTH 'NUMBER-OF-ARGS 1) 
(PUT 'RDEPTH 'DEFINED-ON-LINE '544) 
(PUT 'RDEPTH 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'RDEPTH 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RDEPTH (U)
    (PROG (X N)
      (SETQ N 0)
      (SETQ X (REVAL1 (CAR U) T))
      (COND ((NBGLP X (SETQ N (|DEPTH:| X))) (RETURN N))
            (T (RETURN "bag or list of unequal depths"))))) 
(PUT 'DEPTH 'PSOPFN 'RDEPTH) 
(PUT 'RINSERT 'NUMBER-OF-ARGS 1) 
(PUT 'RINSERT 'DEFINED-ON-LINE '553) 
(PUT 'RINSERT 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'RINSERT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RINSERT (U)
    (PROG (X BG BBG PRF N)
      (SETQ N 0)
      (SETQ BG (REVAL1 (CADR U) T))
      (SETQ N (REVAL1 (CADDR U) T))
      (COND ((NOT (BAGLISTP BG)) (TYPERR BG "list or bag"))
            ((LEQ N 0) (REDERR "third argument must be positive an integer"))
            ((GREATERP (SETQ N (PLUS N 1)) (LENGTH BG))
             (RETURN (APPEND BG (SETQ X (LIST (REVAL1 (CAR U) T)))))))
      (SETQ PRF (CAR BG))
      (SETQ X (REVAL1 (CAR U) T))
      (PROG (I)
        (SETQ I 3)
       LAB
        (COND ((MINUSP (DIFFERENCE N I)) (RETURN NIL)))
        (PROGN (SETQ BG (CDR BG)) (SETQ BBG (CONS (CAR BG) BBG)))
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (SETQ BBG (REVERSE BBG))
      (RETURN (SETQ BBG (CONS PRF (APPEND BBG (CONS X (CDR BG)))))))) 
(PUT 'INSERT 'PSOPFN 'RINSERT) 
(PUT 'RPOSITION 'NUMBER-OF-ARGS 1) 
(PUT 'RPOSITION 'DEFINED-ON-LINE '570) 
(PUT 'RPOSITION 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'RPOSITION 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RPOSITION (U)
    (PROG (EL BG N)
      (SETQ N 0)
      (SETQ EL
              (COND ((NULL *EXP) (REVAL1 (RESIMP (SIMP* (CAR U))) T))
                    (T (REVAL1 (CAR U) T))))
      (COND
       ((NOT (BAGLISTP (SETQ BG (REVAL1 (CADR U) T))))
        (TYPERR BG " list or bag")))
      (SETQ N (LENGTH (SETQ BG (CDR BG))))
      (COND
       ((SETQ BG (MEMBER EL BG))
        (RETURN (SETQ N (PLUS N (DIFFERENCE 1 (LENGTH BG))))))
       (T (MSGPRI NIL EL "is not present in list or bag" NIL NIL))))) 
(PUT 'POSITION 'PSOPFN 'RPOSITION) 
(PUT '|:ASSOC| 'NUMBER-OF-ARGS 1) 
(PUT '|:ASSOC| 'DEFINED-ON-LINE '590) 
(PUT '|:ASSOC| 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT '|:ASSOC| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |:ASSOC| (U)
    (COND
     ((NEQ (LENGTH U) 2)
      (REDERR "asfirst called with wrong number of arguments"))
     (T
      (PROG (X Y PRF)
        (SETQ X (REVAL1 (CAR U) T))
        (SETQ Y (REVAL1 (CADR U) T))
        (COND ((NULL (BAGLISTP Y)) (TYPERR Y "list or bag")))
        (SETQ PRF (CAR Y))
        (SETQ Y (CDR Y))
        (COND ((NULL (ALISTP Y)) (TYPERR Y "association list"))
              (T
               (SETQ Y
                       (PROG (J FORALL-RESULT FORALL-ENDPTR)
                         (SETQ J Y)
                         (COND ((NULL J) (RETURN NIL)))
                         (SETQ FORALL-RESULT
                                 (SETQ FORALL-ENDPTR
                                         (CONS ((LAMBDA (J) (CDR J)) (CAR J))
                                               NIL)))
                        LOOPLABEL
                         (SETQ J (CDR J))
                         (COND ((NULL J) (RETURN FORALL-RESULT)))
                         (RPLACD FORALL-ENDPTR
                                 (CONS ((LAMBDA (J) (CDR J)) (CAR J)) NIL))
                         (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                         (GO LOOPLABEL)))))
        (RETURN (COND ((NULL (SETQ Y (ASSOC X Y))) NIL) (T (CONS PRF Y)))))))) 
(PUT 'ASFIRST 'PSOPFN '|:ASSOC|) 
(PUT '|:RASSOC| 'NUMBER-OF-ARGS 1) 
(PUT '|:RASSOC| 'DEFINED-ON-LINE '605) 
(PUT '|:RASSOC| 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT '|:RASSOC| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |:RASSOC| (U)
    (COND
     ((NEQ (LENGTH U) 2)
      (REDERR "assecond called with wrong number of arguments"))
     (T
      (PROG (X Y PRF)
        (SETQ X (REVAL1 (CAR U) T))
        (SETQ Y (REVAL1 (CADR U) T))
        (COND ((NULL (BAGLISTP Y)) (TYPERR Y "list or bag")))
        (SETQ PRF (CAR Y))
        (SETQ Y (CDR Y))
        (COND ((NULL (ALISTP Y)) (TYPERR Y "association list"))
              (T
               (SETQ Y
                       (PROG (J FORALL-RESULT FORALL-ENDPTR)
                         (SETQ J Y)
                         (COND ((NULL J) (RETURN NIL)))
                         (SETQ FORALL-RESULT
                                 (SETQ FORALL-ENDPTR
                                         (CONS ((LAMBDA (J) (CDR J)) (CAR J))
                                               NIL)))
                        LOOPLABEL
                         (SETQ J (CDR J))
                         (COND ((NULL J) (RETURN FORALL-RESULT)))
                         (RPLACD FORALL-ENDPTR
                                 (CONS ((LAMBDA (J) (CDR J)) (CAR J)) NIL))
                         (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                         (GO LOOPLABEL)))))
        (RETURN
         (COND ((NULL (SETQ Y (RASSOC (LIST X) Y))) NIL) (T (CONS PRF Y)))))))) 
(PUT 'ASSECOND 'PSOPFN '|:RASSOC|) 
(PUT '|:ASSOC2| 'NUMBER-OF-ARGS 1) 
(PUT '|:ASSOC2| 'DEFINED-ON-LINE '620) 
(PUT '|:ASSOC2| 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT '|:ASSOC2| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |:ASSOC2| (U)
    (COND
     ((NEQ (LENGTH U) 2)
      (REDERR "asrest called with wrong number of arguments"))
     (T
      (PROG (X Y PRF)
        (SETQ X (REVAL1 (CAR U) T))
        (SETQ Y (REVAL1 (CADR U) T))
        (COND
         ((OR (NULL (BAGLISTP X)) (NULL (BAGLISTP Y)))
          (TYPERR (LIST X Y) "list or bag")))
        (SETQ PRF (CAR Y))
        (SETQ Y (CDR Y))
        (SETQ X (CDR X))
        (COND ((NULL (ALISTP Y)) (TYPERR Y "association list"))
              (T
               (SETQ Y
                       (PROG (J FORALL-RESULT FORALL-ENDPTR)
                         (SETQ J Y)
                         (COND ((NULL J) (RETURN NIL)))
                         (SETQ FORALL-RESULT
                                 (SETQ FORALL-ENDPTR
                                         (CONS ((LAMBDA (J) (CDR J)) (CAR J))
                                               NIL)))
                        LOOPLABEL
                         (SETQ J (CDR J))
                         (COND ((NULL J) (RETURN FORALL-RESULT)))
                         (RPLACD FORALL-ENDPTR
                                 (CONS ((LAMBDA (J) (CDR J)) (CAR J)) NIL))
                         (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                         (GO LOOPLABEL)))))
        (RETURN (COND ((NULL (SETQ Y (ASSOC2 X Y))) NIL) (T (CONS PRF Y)))))))) 
(PUT 'ASREST 'PSOPFN '|:ASSOC2|) 
(PUT 'LASTASSOC* 'NUMBER-OF-ARGS 2) 
(PUT 'LASTASSOC* 'DEFINED-ON-LINE '636) 
(PUT 'LASTASSOC* 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'LASTASSOC* 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE LASTASSOC* (U V)
    (COND ((NULL V) NIL)
          (T
           (PROG (VV)
             (SETQ VV (CAR V))
             (PROG ()
              WHILELABEL
               (COND ((NOT (GREATERP (LENGTH VV) 1)) (RETURN NIL)))
               (SETQ VV (CDR VV))
               (GO WHILELABEL))
             (COND ((EQUAL U (CAR VV)) (RETURN (CAR V)))
                   (T (RETURN (LASTASSOC* U (CDR V))))))))) 
(PUT '|:LASSOC| 'NUMBER-OF-ARGS 1) 
(PUT '|:LASSOC| 'DEFINED-ON-LINE '647) 
(PUT '|:LASSOC| 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT '|:LASSOC| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |:LASSOC| (U)
    (COND
     ((NEQ (LENGTH U) 2)
      (REDERR "aslast called with wrong number of arguments"))
     (T
      (PROG (X Y PRF)
        (SETQ X (REVAL1 (CAR U) T))
        (SETQ Y (REVAL1 (CADR U) T))
        (COND ((NULL (BAGLISTP Y)) (TYPERR Y "list or bag")))
        (SETQ PRF (CAR Y))
        (SETQ Y (CDR Y))
        (COND ((NULL (ALISTP Y)) (TYPERR Y "association list"))
              (T
               (SETQ Y
                       (PROG (J FORALL-RESULT FORALL-ENDPTR)
                         (SETQ J Y)
                         (COND ((NULL J) (RETURN NIL)))
                         (SETQ FORALL-RESULT
                                 (SETQ FORALL-ENDPTR
                                         (CONS ((LAMBDA (J) (CDR J)) (CAR J))
                                               NIL)))
                        LOOPLABEL
                         (SETQ J (CDR J))
                         (COND ((NULL J) (RETURN FORALL-RESULT)))
                         (RPLACD FORALL-ENDPTR
                                 (CONS ((LAMBDA (J) (CDR J)) (CAR J)) NIL))
                         (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                         (GO LOOPLABEL)))))
        (RETURN
         (COND ((NULL (SETQ Y (LASTASSOC* X Y))) NIL) (T (CONS PRF Y)))))))) 
(PUT 'ASLAST 'PSOPFN '|:LASSOC|) 
(PUT 'RASFLIST 'NUMBER-OF-ARGS 1) 
(PUT 'RASFLIST 'DEFINED-ON-LINE '660) 
(PUT 'RASFLIST 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'RASFLIST 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RASFLIST (U)
    (COND
     ((NEQ (LENGTH U) 2)
      (REDERR "ASFLIST called with wrong number of arguments"))
     (T
      (PROG (X Y PRF RES AA)
        (SETQ X (REVAL1 (CAR U) T))
        (SETQ Y (REVAL1 (CADR U) T))
        (SETQ PRF (CAR Y))
        (COND ((NULL (CDR Y)) (RETURN Y)))
        (PROG (J)
          (SETQ J (CDR Y))
         LAB
          (COND ((NULL J) (RETURN NIL)))
          ((LAMBDA (J)
             (COND
              ((NEQ (CAR J) PRF)
               (REDERR (LIST "prefix INSIDE the list or bag neq to" PRF)))))
           (CAR J))
          (SETQ J (CDR J))
          (GO LAB))
       L1
        (SETQ AA (|:ASSOC| (LIST X Y)))
        (COND ((NOT AA) (RETURN (CONS PRF (REVERSE RES)))))
        (SETQ RES (CONS AA RES))
        (SETQ Y (DELETE AA Y))
        (GO L1))))) 
(PUT 'ASFLIST 'PSOPFN 'RASFLIST) 
(PUT 'RASSLIST 'NUMBER-OF-ARGS 1) 
(PUT 'RASSLIST 'DEFINED-ON-LINE '682) 
(PUT 'RASSLIST 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'RASSLIST 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RASSLIST (U)
    (COND
     ((NEQ (LENGTH U) 2)
      (REDERR "ASSLIST called with wrong number of arguments"))
     (T
      (PROG (X Y PRF RES AA)
        (SETQ X (REVAL1 (CAR U) T))
        (SETQ Y (REVAL1 (CADR U) T))
        (SETQ PRF (CAR Y))
        (COND ((NULL (CDR Y)) (RETURN Y)))
        (PROG (J)
          (SETQ J (CDR Y))
         LAB
          (COND ((NULL J) (RETURN NIL)))
          ((LAMBDA (J)
             (COND
              ((NEQ (CAR J) PRF)
               (REDERR (LIST "prefix INSIDE the list or bag neq to" PRF)))))
           (CAR J))
          (SETQ J (CDR J))
          (GO LAB))
       L1
        (SETQ AA (|:RASSOC| (LIST X Y)))
        (COND ((NOT AA) (RETURN (CONS PRF (REVERSE RES)))))
        (SETQ RES (CONS AA RES))
        (SETQ Y (DELETE AA Y))
        (GO L1))))) 
(PUT 'ASSLIST 'PSOPFN 'RASSLIST) 
(PUT '|:SUBLIS| 'NUMBER-OF-ARGS 1) 
(PUT '|:SUBLIS| 'DEFINED-ON-LINE '701) 
(PUT '|:SUBLIS| 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT '|:SUBLIS| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |:SUBLIS| (U)
    (COND
     ((NEQ (LENGTH U) 2)
      (REDERR "restaslist called with wrong number of arguments"))
     (T
      (PROG (X Y YY PRF)
        (SETQ X (REVAL1 (CAR U) T))
        (SETQ Y (REVAL1 (CADR U) T))
        (SETQ PRF (CAR Y))
        (COND ((NULL (BAGLISTP Y)) (TYPERR Y "list or bag"))
              ((NULL (ALISTP (SETQ Y (CDR Y))))
               (TYPERR Y " association list or bag"))
              (T
               (SETQ Y
                       (PROG (J FORALL-RESULT FORALL-ENDPTR)
                         (SETQ J Y)
                         (COND ((NULL J) (RETURN NIL)))
                         (SETQ FORALL-RESULT
                                 (SETQ FORALL-ENDPTR
                                         (CONS ((LAMBDA (J) (CDR J)) (CAR J))
                                               NIL)))
                        LOOPLABEL
                         (SETQ J (CDR J))
                         (COND ((NULL J) (RETURN FORALL-RESULT)))
                         (RPLACD FORALL-ENDPTR
                                 (CONS ((LAMBDA (J) (CDR J)) (CAR J)) NIL))
                         (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                         (GO LOOPLABEL)))))
        (COND
         ((BAGLISTP X)
          (PROGN
           (SETQ X (CDR X))
           (SETQ X
                   (PROG (J FORALL-RESULT FORALL-ENDPTR)
                     (SETQ J X)
                     (COND ((NULL J) (RETURN NIL)))
                     (SETQ FORALL-RESULT
                             (SETQ FORALL-ENDPTR
                                     (CONS
                                      ((LAMBDA (J) (COND ((ASSOC J Y) J)))
                                       (CAR J))
                                      NIL)))
                    LOOPLABEL
                     (SETQ J (CDR J))
                     (COND ((NULL J) (RETURN FORALL-RESULT)))
                     (RPLACD FORALL-ENDPTR
                             (CONS
                              ((LAMBDA (J) (COND ((ASSOC J Y) J))) (CAR J))
                              NIL))
                     (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                     (GO LOOPLABEL))))))
        (SETQ Y (SUBLIS Y X))
        (COND ((ATOM Y) (SETQ YY (LIST Y)))
              (T
               (PROG (J)
                 (SETQ J Y)
                LAB
                 (COND ((NULL J) (RETURN NIL)))
                 ((LAMBDA (J) (COND ((NOT (NULL J)) (SETQ YY (CONS J YY)))))
                  (CAR J))
                 (SETQ J (CDR J))
                 (GO LAB))))
        (SETQ YY (REVERSE YY))
        (RETURN
         (CONS PRF
               (PROG (J FORALL-RESULT FORALL-ENDPTR)
                 (SETQ J YY)
                 (COND ((NULL J) (RETURN NIL)))
                 (SETQ FORALL-RESULT
                         (SETQ FORALL-ENDPTR
                                 (CONS
                                  ((LAMBDA (J)
                                     (COND ((ATOM J) (CONS PRF (CONS J NIL)))
                                           (T (CONS PRF J))))
                                   (CAR J))
                                  NIL)))
                LOOPLABEL
                 (SETQ J (CDR J))
                 (COND ((NULL J) (RETURN FORALL-RESULT)))
                 (RPLACD FORALL-ENDPTR
                         (CONS
                          ((LAMBDA (J)
                             (COND ((ATOM J) (CONS PRF (CONS J NIL)))
                                   (T (CONS PRF J))))
                           (CAR J))
                          NIL))
                 (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                 (GO LOOPLABEL)))))))) 
(PUT 'RESTASLIST 'PSOPFN '|:SUBLIS|) 
(PUT '|:SUBST| 'NUMBER-OF-ARGS 1) 
(PUT '|:SUBST| 'DEFINED-ON-LINE '733) 
(PUT '|:SUBST| 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT '|:SUBST| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |:SUBST| (U)
    (REVAL1 (SUBST (REVAL1 (CAR U) T) (REVAL1 (CADR U) T) (REVAL1 (CADDR U) T))
            T)) 
(PUT 'SUBSTITUTE 'PSOPFN '|:SUBST|) 
(PUT '|:REPLA| 'NUMBER-OF-ARGS 1) 
(PUT '|:REPLA| 'DEFINED-ON-LINE '741) 
(PUT '|:REPLA| 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT '|:REPLA| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |:REPLA| (U)
    (COND
     ((NEQ (LENGTH U) 2)
      (REDERR "repfirst called with wrong number of arguments"))
     (T
      (PROG (X Y PRF)
        (SETQ Y (REVAL1 (CAR U) T))
        (SETQ X (REVAL1 (CADR U) T))
        (COND ((NULL (BAGLISTP X)) (TYPERR X "list or bag")))
        (SETQ PRF (CAR X))
        (SETQ X (CDR X))
        (RETURN (CONS PRF (RPLACA X Y))))))) 
(PUT 'REPFIRST 'PSOPFN '|:REPLA|) 
(PUT '|:REPLD| 'NUMBER-OF-ARGS 1) 
(PUT '|:REPLD| 'DEFINED-ON-LINE '754) 
(PUT '|:REPLD| 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT '|:REPLD| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |:REPLD| (U)
    (PROG (X Y PRF)
      (COND
       ((NEQ (LENGTH U) 2)
        (REDERR "replast called with wrong number of arguments")))
      (SETQ Y (REVAL1 (CAR U) T))
      (SETQ X (REVAL1 (CADR U) T))
      (COND ((NULL (BAGLISTP X)) (TYPERR U "list or bag")))
      (SETQ PRF (CAR X))
      (SETQ X (CDR X))
      (RETURN (CONS PRF (RPLACD X (LIST Y)))))) 
(PUT 'REPREST 'PSOPFN '|:REPLD|) 
(PUT '|:UNION| 'NUMBER-OF-ARGS 1) 
(PUT '|:UNION| 'DEFINED-ON-LINE '769) 
(PUT '|:UNION| 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT '|:UNION| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |:UNION| (U)
    (PROG (X Y PRF)
      (COND
       ((NEQ (LENGTH U) 2)
        (REDERR "union called with wrong number of arguments")))
      (SETQ X (REVAL1 (CAR U) T))
      (SETQ Y (REVAL1 (CADR U) T))
      (COND ((NOT (SETP Y)) (REDERR "second argument to UNION must be a set")))
      (COND
       ((AND (BAGLISTP X) (BAGLISTP Y))
        (PROGN (SETQ PRF (CAR Y)) (SETQ Y (CONS PRF (UNION (CDR X) (CDR Y))))))
       (T (RETURN NIL)))
      (RETURN Y))) 
(PUT 'UNION 'PSOPFN '|:UNION|) 
(PUT 'SETP 'NUMBER-OF-ARGS 1) 
(PUT 'SETP 'DEFINED-ON-LINE '781) 
(PUT 'SETP 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'SETP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SETP (U) (NULL (REPEATS U))) 
(FLAG '(SETP) 'BOOLEAN) 
(PUT 'RMKSET 'NUMBER-OF-ARGS 1) 
(PUT 'RMKSET 'DEFINED-ON-LINE '786) 
(PUT 'RMKSET 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT 'RMKSET 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RMKSET (U)
    (PROG (X PRF)
      (SETQ X (REVAL1 (CAR U) T))
      (SETQ PRF (CAR X))
      (COND ((BAGLISTP X) (RETURN (CONS PRF (LIST2SET (CDR X)))))))) 
(PUT 'MKSET 'PSOPFN 'RMKSET) 
(PUT '|:SETDIFF| 'NUMBER-OF-ARGS 1) 
(PUT '|:SETDIFF| 'DEFINED-ON-LINE '794) 
(PUT '|:SETDIFF| 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT '|:SETDIFF| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |:SETDIFF| (U)
    (PROG (X Y PRF)
      (COND
       ((NEQ (LENGTH U) 2)
        (REDERR "diffset called with wrong number of arguments")))
      (SETQ X (REVAL1 (CAR U) T))
      (SETQ Y (REVAL1 (CADR U) T))
      (COND
       ((AND (BAGLISTP X) (BAGLISTP Y))
        (PROGN
         (SETQ PRF (CAR Y))
         (SETQ Y (CONS PRF (SETDIFF (CDR X) (CDR Y))))))
       (T (RETURN NIL)))
      (RETURN Y))) 
(PUT 'DIFFSET 'PSOPFN '|:SETDIFF|) 
(PUT '|:SYMDIFF| 'NUMBER-OF-ARGS 1) 
(PUT '|:SYMDIFF| 'DEFINED-ON-LINE '805) 
(PUT '|:SYMDIFF| 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT '|:SYMDIFF| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |:SYMDIFF| (U)
    (PROG (X Y PRF)
      (COND
       ((NEQ (LENGTH U) 2)
        (REDERR "symdiff called with wrong number of arguments")))
      (SETQ X (REVAL1 (CAR U) T))
      (SETQ Y (REVAL1 (CADR U) T))
      (SETQ PRF (CAR X))
      (COND
       ((AND (SETP X) (SETP Y))
        (RETURN
         (CONS PRF
               (APPEND (SETDIFF (SETQ X (CDR X)) (SETQ Y (CDR Y)))
                       (SETDIFF Y X)))))))) 
(PUT 'SYMDIFF 'PSOPFN '|:SYMDIFF|) 
(PUT '|:XN| 'NUMBER-OF-ARGS 1) 
(PUT '|:XN| 'DEFINED-ON-LINE '816) 
(PUT '|:XN| 'DEFINED-IN-FILE 'ASSIST/BAGLIST.RED) 
(PUT '|:XN| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |:XN| (U)
    (PROG (X Y)
      (COND
       ((NEQ (LENGTH U) 2)
        (REDERR "intersect called with wrong number of arguments")))
      (SETQ X (REVAL1 (CAR U) T))
      (SETQ Y (REVAL1 (CADR U) T))
      (COND
       ((AND (SETP X) (SETP Y))
        (RETURN (CONS (CAR X) (INTERSECTION (CDR X) (CDR Y)))))))) 
(PUT 'INTERSECT 'PSOPFN '|:XN|) 
(ENDMODULE) 