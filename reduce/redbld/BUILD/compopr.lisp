(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'COMPOPR)) 
(FLUID '(*EXP *FACTOR KORD*)) 
(PUT 'REPART 'SIMPFN 'SIMPREPART) 
(PUT 'SIMPREPART 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPREPART 'DEFINED-ON-LINE '36) 
(PUT 'SIMPREPART 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'SIMPREPART 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPREPART (U) ((LAMBDA (*FACTOR) (REPARTSQ (SIMP* (CAR U)))) NIL)) 
(PUT 'REPARTSQ 'NUMBER-OF-ARGS 1) 
(PUT 'REPARTSQ 'DEFINED-ON-LINE '39) 
(PUT 'REPARTSQ 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'REPARTSQ 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REPARTSQ (U)
    ((LAMBDA (REIMNUM REIMDEN)
       ((LAMBDA (REPARTNUM IMPARTNUM REPARTDEN IMPARTDEN)
          (MULTSQ
           (ADDSQ (MULTSQ REPARTNUM REPARTDEN) (MULTSQ IMPARTNUM IMPARTDEN))
           (INVSQ
            (ADDSQ (MULTSQ REPARTDEN REPARTDEN)
                   (MULTSQ IMPARTDEN IMPARTDEN)))))
        (CAR REIMNUM) (CDR REIMNUM) (CAR REIMDEN) (CDR REIMDEN)))
     (SPLITCOMPLEX (CAR U)) (SPLITCOMPLEX (CDR U)))) 
(PUT 'IMPART 'SIMPFN 'SIMPIMPART) 
(PUT 'SIMPIMPART 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPIMPART 'DEFINED-ON-LINE '51) 
(PUT 'SIMPIMPART 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'SIMPIMPART 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPIMPART (U) ((LAMBDA (*FACTOR) (IMPARTSQ (SIMP* (CAR U)))) NIL)) 
(PUT 'IMPARTSQ 'NUMBER-OF-ARGS 1) 
(PUT 'IMPARTSQ 'DEFINED-ON-LINE '54) 
(PUT 'IMPARTSQ 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'IMPARTSQ 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE IMPARTSQ (U)
    ((LAMBDA (REIMNUM REIMDEN)
       ((LAMBDA (REPARTNUM IMPARTNUM REPARTDEN IMPARTDEN)
          (MULTSQ
           (ADDSQ (MULTSQ IMPARTNUM REPARTDEN)
                  (NEGSQ (MULTSQ REPARTNUM IMPARTDEN)))
           (INVSQ
            (ADDSQ (MULTSQ REPARTDEN REPARTDEN)
                   (MULTSQ IMPARTDEN IMPARTDEN)))))
        (CAR REIMNUM) (CDR REIMNUM) (CAR REIMDEN) (CDR REIMDEN)))
     (SPLITCOMPLEX (CAR U)) (SPLITCOMPLEX (CDR U)))) 
(PUT 'REIMPART 'SIMPFN 'SIMPREIMPART) 
(PUT 'SIMPREIMPART 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPREIMPART 'DEFINED-ON-LINE '69) 
(PUT 'SIMPREIMPART 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'SIMPREIMPART 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPREIMPART (U) ((LAMBDA (*FACTOR) (SIMPREIMPART1 (SIMP* (CAR U)))) NIL)) 
(PUT 'SIMPREIMPART1 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPREIMPART1 'DEFINED-ON-LINE '72) 
(PUT 'SIMPREIMPART1 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'SIMPREIMPART1 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPREIMPART1 (U)
    ((LAMBDA (REIMNUM REIMDEN)
       ((LAMBDA (REPARTNUM IMPARTNUM REPARTDEN IMPARTDEN)
          (CONS
           (LIST
            (CONS
             (CONS
              (LIST 'LIST
                    (MK*SQ
                     (MULTSQ
                      (ADDSQ (MULTSQ REPARTNUM REPARTDEN)
                             (MULTSQ IMPARTNUM IMPARTDEN))
                      (INVSQ
                       (ADDSQ (MULTSQ REPARTDEN REPARTDEN)
                              (MULTSQ IMPARTDEN IMPARTDEN)))))
                    (MK*SQ
                     (MULTSQ
                      (ADDSQ (MULTSQ IMPARTNUM REPARTDEN)
                             (NEGSQ (MULTSQ REPARTNUM IMPARTDEN)))
                      (INVSQ
                       (ADDSQ (MULTSQ REPARTDEN REPARTDEN)
                              (MULTSQ IMPARTDEN IMPARTDEN))))))
              1)
             1))
           1))
        (CAR REIMNUM) (CDR REIMNUM) (CAR REIMDEN) (CDR REIMDEN)))
     (SPLITCOMPLEX (CAR U)) (SPLITCOMPLEX (CDR U)))) 
(PUT 'CONJ 'SIMPFN 'SIMPCONJ) 
(PUT 'SIMPCONJ 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPCONJ 'DEFINED-ON-LINE '95) 
(PUT 'SIMPCONJ 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'SIMPCONJ 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPCONJ (U)
    ((LAMBDA (X) (MULTSQ (CMPX_CONJSF (CAR X)) (INVSQ (CMPX_CONJSF (CDR X)))))
     (SIMP (CAR U)))) 
(PUT 'CMPX_CONJSF 'NUMBER-OF-ARGS 1) 
(PUT 'CMPX_CONJSF 'DEFINED-ON-LINE '99) 
(PUT 'CMPX_CONJSF 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'CMPX_CONJSF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE CMPX_CONJSF (U)
    (COND
     ((OR (ATOM U) (ATOM (CAR U)))
      (COND ((OR (ATOM U) (NOT (GET (CAR U) 'CMPXFN))) (CONS U 1))
            (T (CONJSQ (CONS U 1)))))
     (T (ADDSQ (CMPX_CONJT (CAR U)) (CMPX_CONJSF (CDR U)))))) 
(PUT 'CMPX_CONJT 'NUMBER-OF-ARGS 1) 
(PUT 'CMPX_CONJT 'DEFINED-ON-LINE '105) 
(PUT 'CMPX_CONJT 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'CMPX_CONJT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE CMPX_CONJT (U)
    (PROG (X Y Z)
      (SETQ Y (CAAR U))
      (SETQ Z
              (COND
               ((AND (ATOM Y) (FLAGP Y 'REALVALUED))
                (CONS (LIST (CONS (CONS Y 1) 1)) 1))
               ((AND (NULL (ATOM Y)) (FLAGP Y 'ALWAYSREALVALUED))
                (CONS (LIST (CONS (CONS Y 1) 1)) 1))
               ((AND (NULL (ATOM Y))
                     (OR (FLAGP (CAR Y) 'SELFCONJUGATE)
                         (AND (EQCAR Y 'EXPT) (SELFCONJ-EXPT (CDR Y)))))
                (SIMP
                 (CONS (CAR Y)
                       (PROG (ARG FORALL-RESULT FORALL-ENDPTR)
                         (SETQ ARG (CDR Y))
                         (COND ((NULL ARG) (RETURN NIL)))
                         (SETQ FORALL-RESULT
                                 (SETQ FORALL-ENDPTR
                                         (CONS
                                          ((LAMBDA (ARG) (LIST 'CONJ ARG))
                                           (CAR ARG))
                                          NIL)))
                        LOOPLABEL
                         (SETQ ARG (CDR ARG))
                         (COND ((NULL ARG) (RETURN FORALL-RESULT)))
                         (RPLACD FORALL-ENDPTR
                                 (CONS
                                  ((LAMBDA (ARG) (LIST 'CONJ ARG)) (CAR ARG))
                                  NIL))
                         (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                         (GO LOOPLABEL)))))
               ((SETQ X (GET_CONJ Y)) (SIMP X))
               ((AND (NULL (ATOM Y)) (SETQ X (GET_CONJ (CAR Y))))
                (PROGN
                 (COND ((NULL (ATOM X)) (TYPERR X "operator"))
                       ((NOT (GET X 'SIMPFN)) (PUT X 'SIMPFN 'SIMPIDEN)))
                 (SIMP
                  (CONS X
                        (PROG (ARG FORALL-RESULT FORALL-ENDPTR)
                          (SETQ ARG (CDR Y))
                          (COND ((NULL ARG) (RETURN NIL)))
                          (SETQ FORALL-RESULT
                                  (SETQ FORALL-ENDPTR
                                          (CONS
                                           ((LAMBDA (ARG) (LIST 'CONJ ARG))
                                            (CAR ARG))
                                           NIL)))
                         LOOPLABEL
                          (SETQ ARG (CDR ARG))
                          (COND ((NULL ARG) (RETURN FORALL-RESULT)))
                          (RPLACD FORALL-ENDPTR
                                  (CONS
                                   ((LAMBDA (ARG) (LIST 'CONJ ARG)) (CAR ARG))
                                   NIL))
                          (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                          (GO LOOPLABEL))))))
               (T (CONJSQ (SIMP Y)))))
      (RETURN (MULTSQ (EXPTSQ Z (CDAR U)) (CMPX_CONJSF (CDR U)))))) 
(PUT 'SELFCONJ-EXPT 'NUMBER-OF-ARGS 1) 
(PUT 'SELFCONJ-EXPT 'DEFINED-ON-LINE '128) 
(PUT 'SELFCONJ-EXPT 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'SELFCONJ-EXPT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SELFCONJ-EXPT (Y)
    (OR (EQCAR Y 'E) (EQCAR Y 'PI) (AND (ATOM (CADR Y)) (NUMBERP (CADR Y)))
        ((LAMBDA (X)
           (AND (ATOM (CDR X)) (OR (ATOM (CAR X)) (ATOM (CAR (CAR X))))
                (NOT (|:MINUSP| (CAR X)))))
         (SIMP* (CAR Y))))) 
(PUT 'GET_CONJ 'NUMBER-OF-ARGS 1) 
(PUT 'GET_CONJ 'DEFINED-ON-LINE '135) 
(PUT 'GET_CONJ 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'GET_CONJ 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE GET_CONJ (Y)
    (PROG (CNJ)
      (SETQ CNJ (RASSOC (LIST Y) (GET 'CONJ 'KVALUE)))
      (COND (CNJ (RETURN (CADAR CNJ))))
      (SETQ CNJ (CAR (GETPOWER (FKERN (LIST 'CONJ Y)) 1)))
      (SETQ CNJ (ASSOC CNJ (GET 'CONJ 'KVALUE)))
      (COND (CNJ (RETURN (CADR CNJ))) (T (RETURN NIL))))) 
(PUT 'CONJSQ 'NUMBER-OF-ARGS 1) 
(PUT 'CONJSQ 'DEFINED-ON-LINE '145) 
(PUT 'CONJSQ 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'CONJSQ 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE CONJSQ (U)
    ((LAMBDA (W)
       (COND ((NULL (CAR W)) U)
             (T (ADDSQ (REPARTSQ U) (NEGSQ (MULTSQ (SIMP 'I) W))))))
     (IMPARTSQ U))) 
(DE IDOMAINP NIL (GET 'I 'IDVALFN)) 
(PUT 'IDOMAINP 'NUMBER-OF-ARGS 0) 
(PUT 'IDOMAINP 'DEFINED-ON-LINE '149) 
(PUT 'IDOMAINP 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'IDOMAINP 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(PUTC 'IDOMAINP 'INLINE '(LAMBDA () (GET 'I 'IDVALFN))) 
(PUT 'SPLITCOMPLEX 'NUMBER-OF-ARGS 1) 
(PUT 'SPLITCOMPLEX 'DEFINED-ON-LINE '152) 
(PUT 'SPLITCOMPLEX 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'SPLITCOMPLEX 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SPLITCOMPLEX (U)
    ((LAMBDA (KORD* *EXP)
       (PROG (V)
         (SETQ V
                 (COND ((GET 'I 'IDVALFN) (EXPAND-IMREPART U))
                       (T
                        (PROGN
                         (COND
                          ((SMEMQ 'I U)
                           (PROGN
                            (SETKORDER (CONS 'I KORD*))
                            (SETQ U (REORDER U)))))
                         (SUBS2 (EXPAND-IMREPART U))))))
         (RETURN (CONS (TAKE-REALPART V) (TAKE-IMPART V)))))
     KORD* T)) 
(PUT 'EXPAND-IMREPART 'NUMBER-OF-ARGS 1) 
(PUT 'EXPAND-IMREPART 'DEFINED-ON-LINE '161) 
(PUT 'EXPAND-IMREPART 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'EXPAND-IMREPART 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE EXPAND-IMREPART (U)
    (COND ((OR (ATOM U) (ATOM (CAR U))) (CONS U 1))
          (T
           (ADDSQ
            (MULTSQ (EXPAND-IMREPARTPOW (CAAR U)) (EXPAND-IMREPART (CDAR U)))
            (EXPAND-IMREPART (CDR U)))))) 
(PUT 'EXPAND-IMREPARTPOW 'NUMBER-OF-ARGS 1) 
(PUT 'EXPAND-IMREPARTPOW 'DEFINED-ON-LINE '167) 
(PUT 'EXPAND-IMREPARTPOW 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'EXPAND-IMREPARTPOW 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE EXPAND-IMREPARTPOW (U)
    (PROG (*EXP CMPXSPLITFN)
      (SETQ *EXP T)
      (SETQ CMPXSPLITFN
              (AND (PAIRP (CAR U)) (IDP (CAR (CAR U)))
                   (GET (CAR (CAR U)) 'CMPXSPLITFN)))
      (RETURN
       (EXPTSQ
        (COND
         ((NULL CMPXSPLITFN)
          (COND ((EQ (CAR U) 'I) (CONS (LIST (CONS (CONS 'I 1) 1)) 1))
                (T
                 (ADDSQ (MKREPART (CAR U))
                        (MULTSQ (SIMP 'I) (MKIMPART (CAR U)))))))
         (T (APPLY1 CMPXSPLITFN (CAR U))))
        (CDR U))))) 
(PUT 'GET_CONJ1 'NUMBER-OF-ARGS 1) 
(PUT 'GET_CONJ1 'DEFINED-ON-LINE '191) 
(PUT 'GET_CONJ1 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'GET_CONJ1 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE GET_CONJ1 (Y)
    (PROG (CNJ)
      (SETQ CNJ (RASSOC (LIST Y) (GET 'CONJ 'KVALUE)))
      (COND (CNJ (RETURN (CADAR CNJ))) (T (RETURN NIL))))) 
(PUT 'GET_CONJ2 'NUMBER-OF-ARGS 1) 
(PUT 'GET_CONJ2 'DEFINED-ON-LINE '198) 
(PUT 'GET_CONJ2 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'GET_CONJ2 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE GET_CONJ2 (Y)
    (PROG (CNJ)
      (SETQ CNJ (CAR (GETPOWER (FKERN (LIST 'CONJ Y)) 1)))
      (SETQ CNJ (ASSOC CNJ (GET 'CONJ 'KVALUE)))
      (COND (CNJ (RETURN (CADR CNJ))) (T (RETURN NIL))))) 
(PUT 'MKREPART 'NUMBER-OF-ARGS 1) 
(PUT 'MKREPART 'DEFINED-ON-LINE '206) 
(PUT 'MKREPART 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'MKREPART 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MKREPART (U)
    (COND
     ((SFP U)
      (COND ((REALVALUEDP-SF U) (CONS (LIST (CONS (CONS U 1) 1)) 1))
            (T (REPARTSQ (CONS U 1)))))
     ((REALVALUEDP U) (CONS (LIST (CONS (CONS U 1) 1)) 1))
     (T
      (PROG (C)
        (SETQ C (GET_CONJ2 U))
        (COND
         (C
          (COND ((EQUAL C U) (RETURN (CONS (LIST (CONS (CONS U 1) 1)) 1)))
                (T
                 (PROGN
                  (COND ((EQUAL C (LIST 'MINUS U)) (RETURN (CONS NIL 1))))))))
         (T
          (PROGN
           (SETQ C (GET_CONJ1 U))
           (COND (C (RETURN (MKSQ (LIST 'REPART C) 1)))))))
        (RETURN (MKSQ (LIST 'REPART U) 1)))))) 
(PUT 'MKIMPART 'NUMBER-OF-ARGS 1) 
(PUT 'MKIMPART 'DEFINED-ON-LINE '223) 
(PUT 'MKIMPART 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'MKIMPART 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MKIMPART (U)
    (COND
     ((SFP U)
      (COND ((REALVALUEDP-SF U) (CONS NIL 1)) (T (IMPARTSQ (CONS U 1)))))
     ((REALVALUEDP U) (CONS NIL 1))
     (T
      (PROG (C)
        (SETQ C (GET_CONJ2 U))
        (COND
         (C
          (COND ((EQUAL C U) (RETURN (CONS NIL 1)))
                (T
                 (PROGN
                  (COND
                   ((EQUAL C (LIST 'MINUS U))
                    (RETURN (MKSQ (LIST 'IMPART U) 1))))))))
         (T
          (PROGN
           (SETQ C (GET_CONJ1 U))
           (COND (C (RETURN (NEGSQ (MKSQ (LIST 'IMPART C) 1))))))))
        (RETURN (MKSQ (LIST 'IMPART U) 1)))))) 
(PUT 'TAKE-REALPART 'NUMBER-OF-ARGS 1) 
(PUT 'TAKE-REALPART 'DEFINED-ON-LINE '242) 
(PUT 'TAKE-REALPART 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'TAKE-REALPART 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE TAKE-REALPART (U) (MULTSQ (CONS (REPARTF (CAR U)) 1) (CONS 1 (CDR U)))) 
(PUT 'REPARTF 'NUMBER-OF-ARGS 1) 
(PUT 'REPARTF 'DEFINED-ON-LINE '248) 
(PUT 'REPARTF 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'REPARTF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REPARTF (U)
    ((LAMBDA (KORD*)
       ((LAMBDA (U)
          (COND ((OR (ATOM U) (ATOM (CAR U))) (|:REPART| U))
                ((EQ (CAAAR U) 'I) (REPARTF (CDR U)))
                (T
                 (ADDF
                  ((LAMBDA (G605)
                     ((LAMBDA (G544)
                        (COND (*PHYSOP-LOADED (PHYSOP-MULTF G544 G605))
                              (T (POLY-MULTF G544 G605))))
                      (LIST (CONS (CAAR U) 1))))
                   (REPARTF (CDAR U)))
                  (REPARTF (CDR U))))))
        (REORDER U)))
     (CONS 'I KORD*))) 
(PUT 'TAKE-IMPART 'NUMBER-OF-ARGS 1) 
(PUT 'TAKE-IMPART 'DEFINED-ON-LINE '257) 
(PUT 'TAKE-IMPART 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'TAKE-IMPART 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE TAKE-IMPART (U) (MULTSQ (CONS (IMPARTF (CAR U)) 1) (CONS 1 (CDR U)))) 
(PUT 'IMPARTF 'NUMBER-OF-ARGS 1) 
(PUT 'IMPARTF 'DEFINED-ON-LINE '263) 
(PUT 'IMPARTF 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'IMPARTF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE IMPARTF (U)
    ((LAMBDA (KORD*)
       ((LAMBDA (U)
          (COND ((OR (ATOM U) (ATOM (CAR U))) (|:IMPART| U))
                ((EQ (CAAAR U) 'I) (ADDF (CDAR U) (IMPARTF (CDR U))))
                (T
                 (ADDF
                  ((LAMBDA (G607)
                     ((LAMBDA (G544)
                        (COND (*PHYSOP-LOADED (PHYSOP-MULTF G544 G607))
                              (T (POLY-MULTF G544 G607))))
                      (LIST (CONS (CAAR U) 1))))
                   (IMPARTF (CDAR U)))
                  (IMPARTF (CDR U))))))
        (REORDER U)))
     (CONS 'I KORD*))) 
(RLISTAT '(REALVALUED NOTREALVALUED SELFCONJUGATE)) 
(PUT 'REALVALUED 'NUMBER-OF-ARGS 1) 
(PUT 'REALVALUED 'DEFINED-ON-LINE '295) 
(PUT 'REALVALUED 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'REALVALUED 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REALVALUED (U)
    (PROGN
     (RMSUBS)
     (PROG (V)
       (SETQ V U)
      LAB
       (COND ((NULL V) (RETURN NIL)))
       ((LAMBDA (V)
          (COND ((NOT (IDP V)) (TYPERR V "id"))
                (T (FLAG (LIST V) 'REALVALUED))))
        (CAR V))
       (SETQ V (CDR V))
       (GO LAB)))) 
(PUT 'NOTREALVALUED 'NUMBER-OF-ARGS 1) 
(PUT 'NOTREALVALUED 'DEFINED-ON-LINE '303) 
(PUT 'NOTREALVALUED 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'NOTREALVALUED 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE NOTREALVALUED (U)
    (PROG (V)
      (SETQ V U)
     LAB
      (COND ((NULL V) (RETURN NIL)))
      ((LAMBDA (V)
         (COND ((NOT (IDP V)) (TYPERR V "id"))
               (T (REMFLAG (LIST V) 'REALVALUED))))
       (CAR V))
      (SETQ V (CDR V))
      (GO LAB))) 
(FLAG '(REALVALUEDP) 'BOOLEAN) 
(PUT 'REALVALUEDP 'NUMBER-OF-ARGS 1) 
(PUT 'REALVALUEDP 'DEFINED-ON-LINE '313) 
(PUT 'REALVALUEDP 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'REALVALUEDP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REALVALUEDP (U)
    (COND ((ATOM U) (OR (NUMBERP U) (FLAGP U 'REALVALUED)))
          (T
           (PROG (CARU CND)
             (RETURN
              (OR (FLAGP (SETQ CARU (CAR U)) 'ALWAYSREALVALUED)
                  (AND (FLAGP CARU 'REALVALUED) (REALVALUEDLIST (CDR U)))
                  (AND (SETQ CND (GET CARU 'CONDREALVALUED))
                       (APPLY CND (CDR U))))))))) 
(PUT 'REALVALUEDLIST 'NUMBER-OF-ARGS 1) 
(PUT 'REALVALUEDLIST 'DEFINED-ON-LINE '330) 
(PUT 'REALVALUEDLIST 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'REALVALUEDLIST 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REALVALUEDLIST (U)
    (AND (REALVALUEDP (CAR U)) (OR (NULL (CDR U)) (REALVALUEDLIST (CDR U))))) 
(PUT 'REALVALUEDP-SF 'NUMBER-OF-ARGS 1) 
(PUT 'REALVALUEDP-SF 'DEFINED-ON-LINE '335) 
(PUT 'REALVALUEDP-SF 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'REALVALUEDP-SF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REALVALUEDP-SF (U)
    (COND ((ATOM U) T)
          ((OR (ATOM U) (ATOM (CAR U))) (FLAGP (CAR U) 'REALVALUED))
          (T
           (AND
            (AND (REALVALUEDP-SF (CDAR U))
                 (COND ((SFP (CAAAR U)) (REALVALUEDP-SF (CAAAR U)))
                       (T (REALVALUEDP (CAAAR U)))))
            (REALVALUEDP-SF (CDR U)))))) 
(FLAG '(REPART IMPART ABS CEILING FLOOR FIX ROUND MAX MIN SIGN)
      'ALWAYSREALVALUED) 
(FLAG '(PI E INFINITY) 'REALVALUED) 
(FLAG '(|:RN:| |:RD:| |:MOD:|) 'ALWAYSREALVALUED) 
(FLAG '(PLUS MINUS TIMES QUOTIENT) 'REALVALUED) 
(FLAG
 '(EXP CBRT HYPOT SIN COS TAN CSC SEC COT SIND COSD TAND CSCD SECD COTD SINH
       COSH TANH CSCH SECH COTH ATAN ATAND ATAN2 ATAN2D ACOT ACOTD ASINH ACSCH
       FACTORIAL)
 'REALVALUED) 
(PUT 'EXPT-REALVALUED 'NUMBER-OF-ARGS 2) 
(PUT 'EXPT-REALVALUED 'DEFINED-ON-LINE '384) 
(PUT 'EXPT-REALVALUED 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'EXPT-REALVALUED 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE EXPT-REALVALUED (BASE EXPO) (AND (FIXP EXPO) (REALVALUEDP BASE))) 
(PUT 'EXPT 'CONDREALVALUED 'EXPT-REALVALUED) 
(PUT 'LOG-REALVALUED 'NUMBER-OF-ARGS 1) 
(PUT 'LOG-REALVALUED 'DEFINED-ON-LINE '401) 
(PUT 'LOG-REALVALUED 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'LOG-REALVALUED 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE LOG-REALVALUED (ARG) (EQUAL (SIGN-OF ARG) 1)) 
(PUT 'LOG 'CONDREALVALUED 'LOG-REALVALUED) 
(PUT 'LOG10 'CONDREALVALUED 'LOG-REALVALUED) 
(PUT 'SQRT-REALVALUED 'NUMBER-OF-ARGS 1) 
(PUT 'SQRT-REALVALUED 'DEFINED-ON-LINE '410) 
(PUT 'SQRT-REALVALUED 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'SQRT-REALVALUED 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SQRT-REALVALUED (X) ((LAMBDA (S) (AND S (GEQ S 0))) (SIGN-OF X))) 
(PUT 'SQRT 'CONDREALVALUED 'SQRT-REALVALUED) 
(PUT 'ASIN-REALVALUED 'NUMBER-OF-ARGS 1) 
(PUT 'ASIN-REALVALUED 'DEFINED-ON-LINE '416) 
(PUT 'ASIN-REALVALUED 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'ASIN-REALVALUED 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE ASIN-REALVALUED (X)
    ((LAMBDA (S1)
       ((LAMBDA (S2) (AND S1 (GEQ S1 0) S2 (LEQ S2 0)))
        (SIGN-OF (REVAL1 (LIST 'PLUS X (MINUS 1)) T))))
     (SIGN-OF (REVAL1 (LIST 'PLUS X 1) T)))) 
(PUT 'ASIN 'CONDREALVALUED 'ASIN-REALVALUED) 
(PUT 'ACOS 'CONDREALVALUED 'ASIN-REALVALUED) 
(PUT 'ASEC-REALVALUED 'NUMBER-OF-ARGS 1) 
(PUT 'ASEC-REALVALUED 'DEFINED-ON-LINE '424) 
(PUT 'ASEC-REALVALUED 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'ASEC-REALVALUED 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE ASEC-REALVALUED (X)
    ((LAMBDA (S1)
       ((LAMBDA (S2) (OR (AND S1 (LEQ S1 0)) (AND S2 (GEQ S2 0))))
        (SIGN-OF (REVAL1 (LIST 'PLUS X (MINUS 1)) T))))
     (SIGN-OF (REVAL1 (LIST 'PLUS X 1) T)))) 
(PUT 'ASEC 'CONDREALVALUED 'ASEC-REALVALUED) 
(PUT 'ACSC 'CONDREALVALUED 'ASEC-REALVALUED) 
(PUT 'ATANH-REALVALUED 'NUMBER-OF-ARGS 1) 
(PUT 'ATANH-REALVALUED 'DEFINED-ON-LINE '432) 
(PUT 'ATANH-REALVALUED 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'ATANH-REALVALUED 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE ATANH-REALVALUED (X)
    ((LAMBDA (S1)
       ((LAMBDA (S2) (AND S1 (EQUAL S1 1) S2 (EQUAL S2 (MINUS 1))))
        (SIGN-OF (REVAL1 (LIST 'PLUS X (MINUS 1)) T))))
     (SIGN-OF (REVAL1 (LIST 'PLUS X 1) T)))) 
(PUT 'ATANH 'CONDREALVALUED 'ATANH-REALVALUED) 
(PUT 'ACOTH-REALVALUED 'NUMBER-OF-ARGS 1) 
(PUT 'ACOTH-REALVALUED 'DEFINED-ON-LINE '439) 
(PUT 'ACOTH-REALVALUED 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'ACOTH-REALVALUED 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE ACOTH-REALVALUED (X)
    ((LAMBDA (S1)
       ((LAMBDA (S2) (OR (AND S1 (EQUAL S1 1)) (AND S2 (EQUAL S2 (MINUS 1)))))
        (SIGN-OF (REVAL1 (LIST 'PLUS X 1) T))))
     (SIGN-OF (REVAL1 (LIST 'PLUS X (MINUS 1)) T)))) 
(PUT 'ACOTH 'CONDREALVALUED 'ACOTH-REALVALUED) 
(PUT 'ACOSH-REALVALUED 'NUMBER-OF-ARGS 1) 
(PUT 'ACOSH-REALVALUED 'DEFINED-ON-LINE '447) 
(PUT 'ACOSH-REALVALUED 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'ACOSH-REALVALUED 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE ACOSH-REALVALUED (X)
    ((LAMBDA (S1) (AND S1 (GEQ S1 0)))
     (SIGN-OF (REVAL1 (LIST 'PLUS X (MINUS 1)) T)))) 
(PUT 'ACOSH 'CONDREALVALUED 'ACOSH-REALVALUED) 
(PUT 'ASECH-REALVALUED 'NUMBER-OF-ARGS 1) 
(PUT 'ASECH-REALVALUED 'DEFINED-ON-LINE '453) 
(PUT 'ASECH-REALVALUED 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'ASECH-REALVALUED 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE ASECH-REALVALUED (X)
    ((LAMBDA (S1)
       ((LAMBDA (S2) (AND S1 (EQUAL S1 1) S2 (LEQ S2 0)))
        (SIGN-OF (REVAL1 (LIST 'PLUS X (MINUS 1)) T))))
     (SIGN-OF X))) 
(PUT 'ASECH 'CONDREALVALUED 'ASECH-REALVALUED) 
(PUT 'CONJUGATE 'NUMBER-OF-ARGS 1) 
(PUT 'CONJUGATE 'DEFINED-ON-LINE '462) 
(PUT 'CONJUGATE 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'CONJUGATE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE CONJUGATE (U)
    (PROGN
     (RMSUBS)
     (PROG (V)
       (SETQ V U)
      LAB
       (COND ((NULL V) (RETURN NIL)))
       ((LAMBDA (V)
          (COND ((NOT (IDP V)) (TYPERR V "id"))
                (T (FLAG (LIST V) 'CONJUGATE))))
        (CAR V))
       (SETQ V (CDR V))
       (GO LAB)))) 
(FLAG
 '(EXP SIN COS TAN CSC SEC COT SIND COSD TAND CSCD SECD COTD SINH COSH TANH
       CSCH SECH COTH ATAN ATAND ACOT ACOTD ASINH ACSCH DF)
 'SELFCONJUGATE) 
(PUT 'SELFCONJUGATE 'NUMBER-OF-ARGS 1) 
(PUT 'SELFCONJUGATE 'DEFINED-ON-LINE '481) 
(PUT 'SELFCONJUGATE 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'SELFCONJUGATE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SELFCONJUGATE (U)
    (PROGN
     (RMSUBS)
     (PROG (V)
       (SETQ V U)
      LAB
       (COND ((NULL V) (RETURN NIL)))
       ((LAMBDA (V)
          (COND ((NOT (IDP V)) (TYPERR V "id"))
                ((NOT (GET V 'SIMPFN)) (TYPERR V "operator"))
                (T (FLAG (LIST V) 'SELFCONJUGATE))))
        (CAR V))
       (SETQ V (CDR V))
       (GO LAB)))) 
(PUT 'SIN 'CMPXSPLITFN 'REIMSIN) 
(PUT 'REIMSIN 'NUMBER-OF-ARGS 1) 
(PUT 'REIMSIN 'DEFINED-ON-LINE '498) 
(PUT 'REIMSIN 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'REIMSIN 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REIMSIN (U)
    ((LAMBDA (REARG IMARG)
       (ADDSQ (MULTSQ (SIMP (LIST 'SIN REARG)) (SIMP (LIST 'COSH IMARG)))
              (MULTSQ (SIMP 'I)
                      (MULTSQ (SIMP (LIST 'COS REARG))
                              (SIMP (LIST 'SINH IMARG))))))
     (PREPSQ (SIMPREPART (CDR U))) (PREPSQ (SIMPIMPART (CDR U))))) 
(PUT 'SINH 'CMPXSPLITFN 'REIMSINH) 
(PUT 'REIMSINH 'NUMBER-OF-ARGS 1) 
(PUT 'REIMSINH 'DEFINED-ON-LINE '509) 
(PUT 'REIMSINH 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'REIMSINH 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REIMSINH (U)
    ((LAMBDA (REARG IMARG)
       (ADDSQ (MULTSQ (SIMP (LIST 'SINH REARG)) (SIMP (LIST 'COS IMARG)))
              (MULTSQ (SIMP 'I)
                      (MULTSQ (SIMP (LIST 'COSH REARG))
                              (SIMP (LIST 'SIN IMARG))))))
     (PREPSQ (SIMPREPART (CDR U))) (PREPSQ (SIMPIMPART (CDR U))))) 
(PUT 'COS 'CMPXSPLITFN 'REIMCOS) 
(PUT 'REIMCOS 'NUMBER-OF-ARGS 1) 
(PUT 'REIMCOS 'DEFINED-ON-LINE '520) 
(PUT 'REIMCOS 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'REIMCOS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REIMCOS (U)
    ((LAMBDA (REARG IMARG)
       (ADDSQ (MULTSQ (SIMP (LIST 'COS REARG)) (SIMP (LIST 'COSH IMARG)))
              (MULTSQ (SIMP 'I)
                      (NEGSQ
                       (MULTSQ (SIMP (LIST 'SIN REARG))
                               (SIMP (LIST 'SINH IMARG)))))))
     (PREPSQ (SIMPREPART (CDR U))) (PREPSQ (SIMPIMPART (CDR U))))) 
(PUT 'COSH 'CMPXSPLITFN 'REIMCOSH) 
(PUT 'REIMCOSH 'NUMBER-OF-ARGS 1) 
(PUT 'REIMCOSH 'DEFINED-ON-LINE '531) 
(PUT 'REIMCOSH 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'REIMCOSH 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REIMCOSH (U)
    ((LAMBDA (REARG IMARG)
       (ADDSQ (MULTSQ (SIMP (LIST 'COSH REARG)) (SIMP (LIST 'COS IMARG)))
              (MULTSQ (SIMP 'I)
                      (MULTSQ (SIMP (LIST 'SINH REARG))
                              (SIMP (LIST 'SIN IMARG))))))
     (PREPSQ (SIMPREPART (CDR U))) (PREPSQ (SIMPIMPART (CDR U))))) 
(PUT 'EXPT 'CMPXSPLITFN 'REIMEXPT) 
(PUT 'REIMEXPT 'NUMBER-OF-ARGS 1) 
(PUT 'REIMEXPT 'DEFINED-ON-LINE '572) 
(PUT 'REIMEXPT 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'REIMEXPT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REIMEXPT (U)
    (PROG (X Y V W Z1 Z2)
      (SETQ X (REIMLOG (LIST 'LOG (CADR U))))
      (SETQ Y (PREPSQ (TAKE-IMPART X)))
      (SETQ X (PREPSQ (TAKE-REALPART X)))
      (SETQ V (PREPSQ (SIMPREPART (CDDR U))))
      (SETQ W (PREPSQ (SIMPIMPART (CDDR U))))
      (SETQ Z1
              (SIMP
               (LIST 'EXP
                     (LIST 'DIFFERENCE (LIST 'TIMES X V) (LIST 'TIMES Y W)))))
      (SETQ Z2 (LIST 'PLUS (LIST 'TIMES X W) (LIST 'TIMES Y V)))
      (RETURN
       (MULTSQ Z1
               (ADDSQ (SIMP (LIST 'COS Z2))
                      (MULTSQ (SIMP 'I) (SIMP (LIST 'SIN Z2)))))))) 
(PUT 'SQRT 'CMPXSPLITFN 'REIMSQRT) 
(PUT 'REIMSQRT 'NUMBER-OF-ARGS 1) 
(PUT 'REIMSQRT 'DEFINED-ON-LINE '588) 
(PUT 'REIMSQRT 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'REIMSQRT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REIMSQRT (U) (REIMEXPT (LIST 'EXPT (CADR U) (LIST 'QUOTIENT 1 2)))) 
(PUT 'TAN 'CMPXSPLITFN 'REIMTAN) 
(PUT 'REIMTAN 'NUMBER-OF-ARGS 1) 
(PUT 'REIMTAN 'DEFINED-ON-LINE '601) 
(PUT 'REIMTAN 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'REIMTAN 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REIMTAN (U)
    (PROG (REARG IMARG SINX SINHY COSX COSHY)
      (SETQ REARG (PREPSQ (SIMPREPART (CDR U))))
      (SETQ IMARG (PREPSQ (SIMPIMPART (CDR U))))
      (SETQ SINX (SIMP (LIST 'SIN REARG)))
      (SETQ SINHY (SIMP (LIST 'SINH IMARG)))
      (SETQ COSX (SIMP (LIST 'COS REARG)))
      (SETQ COSHY (SIMP (LIST 'COSH IMARG)))
      (RETURN
       (MULTSQ
        (ADDSQ (MULTSQ SINX COSX) (MULTSQ (SIMP 'I) (MULTSQ SINHY COSHY)))
        (INVSQ (ADDSQ (MULTSQ COSX COSX) (MULTSQ SINHY SINHY))))))) 
(PUT 'TANH 'CMPXSPLITFN 'REIMTANH) 
(PUT 'REIMTANH 'NUMBER-OF-ARGS 1) 
(PUT 'REIMTANH 'DEFINED-ON-LINE '618) 
(PUT 'REIMTANH 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'REIMTANH 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REIMTANH (U)
    (PROG (REARG IMARG SINHX SINY COSHX COSY)
      (SETQ REARG (PREPSQ (SIMPREPART (CDR U))))
      (SETQ IMARG (PREPSQ (SIMPIMPART (CDR U))))
      (SETQ SINHX (SIMP (LIST 'SINH REARG)))
      (SETQ SINY (SIMP (LIST 'SIN IMARG)))
      (SETQ COSHX (SIMP (LIST 'COSH REARG)))
      (SETQ COSY (SIMP (LIST 'COS IMARG)))
      (RETURN
       (MULTSQ
        (ADDSQ (MULTSQ SINHX COSHX) (MULTSQ (SIMP 'I) (MULTSQ SINY COSY)))
        (INVSQ (ADDSQ (MULTSQ COSY COSY) (MULTSQ SINHX SINHX))))))) 
(PUT 'COT 'CMPXSPLITFN 'REIMCOT) 
(PUT 'REIMCOT 'NUMBER-OF-ARGS 1) 
(PUT 'REIMCOT 'DEFINED-ON-LINE '635) 
(PUT 'REIMCOT 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'REIMCOT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REIMCOT (U)
    (PROG (REARG IMARG SINX SINHY COSX COSHY)
      (SETQ REARG (PREPSQ (SIMPREPART (CDR U))))
      (SETQ IMARG (PREPSQ (SIMPIMPART (CDR U))))
      (SETQ SINX (SIMP (LIST 'SIN REARG)))
      (SETQ SINHY (SIMP (LIST 'SINH IMARG)))
      (SETQ COSX (SIMP (LIST 'COS REARG)))
      (SETQ COSHY (SIMP (LIST 'COSH IMARG)))
      (RETURN
       (MULTSQ
        (ADDSQ (MULTSQ SINX COSX)
               (MULTSQ (SIMP 'I) (NEGSQ (MULTSQ SINHY COSHY))))
        (INVSQ (ADDSQ (MULTSQ SINHY SINHY) (MULTSQ SINX SINX))))))) 
(PUT 'COTH 'CMPXSPLITFN 'REIMCOTH) 
(PUT 'REIMCOTH 'NUMBER-OF-ARGS 1) 
(PUT 'REIMCOTH 'DEFINED-ON-LINE '652) 
(PUT 'REIMCOTH 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'REIMCOTH 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REIMCOTH (U)
    (PROG (REARG IMARG SINHX SINY COSHX COSY)
      (SETQ REARG (PREPSQ (SIMPREPART (CDR U))))
      (SETQ IMARG (PREPSQ (SIMPIMPART (CDR U))))
      (SETQ SINHX (SIMP (LIST 'SINH REARG)))
      (SETQ SINY (SIMP (LIST 'SIN IMARG)))
      (SETQ COSHX (SIMP (LIST 'COSH REARG)))
      (SETQ COSY (SIMP (LIST 'COS IMARG)))
      (RETURN
       (MULTSQ
        (ADDSQ (MULTSQ SINHX COSHX)
               (MULTSQ (SIMP 'I) (NEGSQ (MULTSQ SINY COSY))))
        (INVSQ (ADDSQ (MULTSQ SINHX SINHX) (MULTSQ SINY SINY))))))) 
(PUT 'SEC 'CMPXSPLITFN 'REIMSEC) 
(PUT 'REIMSEC 'NUMBER-OF-ARGS 1) 
(PUT 'REIMSEC 'DEFINED-ON-LINE '669) 
(PUT 'REIMSEC 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'REIMSEC 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REIMSEC (U)
    (PROG (REARG IMARG SINX SINHY COSX COSHY)
      (SETQ REARG (PREPSQ (SIMPREPART (CDR U))))
      (SETQ IMARG (PREPSQ (SIMPIMPART (CDR U))))
      (SETQ SINX (SIMP (LIST 'SIN REARG)))
      (SETQ SINHY (SIMP (LIST 'SINH IMARG)))
      (SETQ COSX (SIMP (LIST 'COS REARG)))
      (SETQ COSHY (SIMP (LIST 'COSH IMARG)))
      (RETURN
       (MULTSQ
        (ADDSQ (MULTSQ COSX COSHY) (MULTSQ (SIMP 'I) (MULTSQ SINX SINHY)))
        (INVSQ (ADDSQ (MULTSQ COSX COSX) (MULTSQ SINHY SINHY))))))) 
(PUT 'SECH 'CMPXSPLITFN 'REIMSECH) 
(PUT 'REIMSECH 'NUMBER-OF-ARGS 1) 
(PUT 'REIMSECH 'DEFINED-ON-LINE '686) 
(PUT 'REIMSECH 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'REIMSECH 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REIMSECH (U)
    (PROG (REARG IMARG SINHX SINY COSHX COSY)
      (SETQ REARG (PREPSQ (SIMPREPART (CDR U))))
      (SETQ IMARG (PREPSQ (SIMPIMPART (CDR U))))
      (SETQ SINHX (SIMP (LIST 'SINH REARG)))
      (SETQ SINY (SIMP (LIST 'SIN IMARG)))
      (SETQ COSHX (SIMP (LIST 'COSH REARG)))
      (SETQ COSY (SIMP (LIST 'COS IMARG)))
      (RETURN
       (MULTSQ
        (ADDSQ (MULTSQ COSHX COSY)
               (MULTSQ (SIMP 'I) (NEGSQ (MULTSQ SINHX SINY))))
        (INVSQ (ADDSQ (MULTSQ COSY COSY) (MULTSQ SINHX SINHX))))))) 
(PUT 'CSC 'CMPXSPLITFN 'REIMCSC) 
(PUT 'REIMCSC 'NUMBER-OF-ARGS 1) 
(PUT 'REIMCSC 'DEFINED-ON-LINE '703) 
(PUT 'REIMCSC 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'REIMCSC 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REIMCSC (U)
    (PROG (REARG IMARG SINX SINHY COSX COSHY)
      (SETQ REARG (PREPSQ (SIMPREPART (CDR U))))
      (SETQ IMARG (PREPSQ (SIMPIMPART (CDR U))))
      (SETQ SINX (SIMP (LIST 'SIN REARG)))
      (SETQ SINHY (SIMP (LIST 'SINH IMARG)))
      (SETQ COSX (SIMP (LIST 'COS REARG)))
      (SETQ COSHY (SIMP (LIST 'COSH IMARG)))
      (RETURN
       (MULTSQ
        (ADDSQ (MULTSQ SINX COSHY)
               (MULTSQ (SIMP 'I) (NEGSQ (MULTSQ COSX SINHY))))
        (INVSQ (ADDSQ (MULTSQ SINHY SINHY) (MULTSQ SINX SINX))))))) 
(PUT 'CSCH 'CMPXSPLITFN 'REIMCSCH) 
(PUT 'REIMCSCH 'NUMBER-OF-ARGS 1) 
(PUT 'REIMCSCH 'DEFINED-ON-LINE '720) 
(PUT 'REIMCSCH 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'REIMCSCH 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REIMCSCH (U)
    (PROG (REARG IMARG SINHX SINY COSHX COSY)
      (SETQ REARG (PREPSQ (SIMPREPART (CDR U))))
      (SETQ IMARG (PREPSQ (SIMPIMPART (CDR U))))
      (SETQ SINHX (SIMP (LIST 'SINH REARG)))
      (SETQ SINY (SIMP (LIST 'SIN IMARG)))
      (SETQ COSHX (SIMP (LIST 'COSH REARG)))
      (SETQ COSY (SIMP (LIST 'COS IMARG)))
      (RETURN
       (MULTSQ
        (ADDSQ (MULTSQ SINHX COSY)
               (MULTSQ (SIMP 'I) (NEGSQ (MULTSQ COSHX SINY))))
        (INVSQ (ADDSQ (MULTSQ SINHX SINHX) (MULTSQ SINY SINY))))))) 
(PUT 'LOG 'CMPXSPLITFN 'REIMLOG) 
(PUT 'LOG10 'CMPXSPLITFN 'REIMLOG) 
(PUT 'REIMLOG 'NUMBER-OF-ARGS 1) 
(PUT 'REIMLOG 'DEFINED-ON-LINE '747) 
(PUT 'REIMLOG 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'REIMLOG 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REIMLOG (U)
    ((LAMBDA (OP REARG IMARG)
       (ADDSQ
        (COND ((EQUAL IMARG 0) (SIMP (LIST OP (LIST 'ABS REARG))))
              ((EQUAL REARG 0) (SIMP (LIST OP (LIST 'ABS IMARG))))
              (T
               (SIMP
                (LIST 'QUOTIENT
                      (LIST OP
                            (LIST 'PLUS (LIST 'EXPT REARG 2)
                                  (LIST 'EXPT IMARG 2)))
                      2))))
        (MULTSQ (SIMP (COND ((EQUAL OP 'LOG10) '(QUOTIENT I (LOG 10))) (T 'I)))
                (SIMP (LIST 'ATAN2 IMARG REARG)))))
     (CAR U) (PREPSQ (SIMPREPART (CDR U))) (PREPSQ (SIMPIMPART (CDR U))))) 
(PUT 'INVFN-ARGS 'NUMBER-OF-ARGS 2) 
(PUT 'INVFN-ARGS 'DEFINED-ON-LINE '762) 
(PUT 'INVFN-ARGS 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'INVFN-ARGS 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE INVFN-ARGS (X Y)
    (COND
     ((EQUAL X 0) (CONS 1 (LIST 'PLUS 1 (LIST 'TIMES 2 (LIST 'EXPT Y 2)))))
     (T
      (PROG (SSQ SROOT)
        (SETQ SSQ (SIMP (LIST 'PLUS (LIST 'EXPT X 2) (LIST 'EXPT Y 2))))
        (COND
         ((EQUAL Y 0)
          (SETQ SROOT (SIMP (LIST 'ABS (LIST 'PLUS (PREPSQ SSQ) (MINUS 1))))))
         (T
          (SETQ SROOT
                  (SIMP
                   (LIST 'SQRT
                         (LIST 'PLUS
                               (LIST 'EXPT (LIST 'PLUS (PREPSQ SSQ) (MINUS 1))
                                     2)
                               (LIST 'TIMES 4 (LIST 'EXPT Y 2))))))))
        (RETURN
         (CONS (PREPSQXX (ADDSQ SROOT (NEGSQ SSQ)))
               (PREPSQX (ADDSQ SSQ SROOT)))))))) 
(PUT 'ASIN 'CMPXSPLITFN 'REIMASIN) 
(PUT 'ACOS 'CMPXSPLITFN 'REIMASIN) 
(PUT 'REIMASIN 'NUMBER-OF-ARGS 1) 
(PUT 'REIMASIN 'DEFINED-ON-LINE '790) 
(PUT 'REIMASIN 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'REIMASIN 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REIMASIN (U)
    (PROG (REARG IMARG X Y SR SI OP RES)
      (SETQ REARG (PREPSQ (SIMPREPART (CDR U))))
      (SETQ IMARG (PREPSQ (SIMPIMPART (CDR U))))
      (SETQ OP (CAR U))
      (COND
       ((EQUAL REARG 0)
        (PROGN
         (SETQ RES (SIMP (LIST 'TIMES 'I (LIST 'ASINH IMARG))))
         (COND ((EQUAL OP 'ASIN) (RETURN RES))
               (T
                (RETURN (ADDSQ (SIMP (LIST 'QUOTIENT 'PI 2)) (NEGSQ RES))))))))
      (SETQ Y (INVFN-ARGS REARG IMARG))
      (COND ((EQUAL (CDR Y) 1) (RETURN (SIMP (LIST OP REARG))))
            ((EQUAL (CAR Y) (MINUS 1))
             (PROGN
              (SETQ X (SIMP (LIST 'QUOTIENT 'PI 2)))
              (SETQ Y (SIMP (LIST 'ACOSH (LIST 'ABS REARG))))))
            (T
             (PROGN
              (SETQ X (SIMP (LIST 'QUOTIENT (LIST 'ACOS (CAR Y)) 2)))
              (SETQ Y (SIMP (LIST 'QUOTIENT (LIST 'ACOSH (CDR Y)) 2))))))
      (SETQ SR (SIMP-SIGN1 REARG))
      (SETQ SI (SIMP-SIGN1 IMARG))
      (SETQ X
              (MULTSQ X
                      (ADDSQ (CONS 1 1)
                             (MULTSQ SR (ADDSQ (CONS 1 1) (NEGSQ SR))))))
      (SETQ Y
              (MULTSQ Y
                      (ADDSQ SI
                             (MULTSQ SR
                                     (ADDSQ (MULTSQ SI SI)
                                            (CONS (MINUS 1) 1))))))
      (SETQ RES (ADDSQ X (MULTSQ (SIMP 'I) Y)))
      (COND ((EQUAL OP 'ASIN) (RETURN RES))
            (T (RETURN (ADDSQ (SIMP (LIST 'QUOTIENT 'PI 2)) (NEGSQ RES))))))) 
(PUT 'ASINH 'CMPXSPLITFN 'REIMASINH) 
(PUT 'REIMASINH 'NUMBER-OF-ARGS 1) 
(PUT 'REIMASINH 'DEFINED-ON-LINE '829) 
(PUT 'REIMASINH 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'REIMASINH 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REIMASINH (U)
    (PROG (REARG IMARG X Y SR SI)
      (SETQ REARG (PREPSQ (SIMPREPART (CDR U))))
      (SETQ IMARG (PREPSQ (SIMPIMPART (CDR U))))
      (COND ((EQUAL IMARG 0) (RETURN (SIMP (LIST 'ASINH REARG)))))
      (SETQ X (INVFN-ARGS IMARG REARG))
      (COND
       ((EQUAL (CDR X) 1) (RETURN (SIMP (LIST 'TIMES 'I (LIST 'ASIN IMARG)))))
       ((EQUAL (CAR X) (MINUS 1))
        (PROGN
         (SETQ X (SIMP (LIST 'ACOSH (LIST 'ABS IMARG))))
         (SETQ Y (SIMP (LIST 'QUOTIENT 'PI 2)))))
       (T
        (PROGN
         (SETQ Y (SIMP (LIST 'QUOTIENT (LIST 'ACOS (CAR X)) 2)))
         (SETQ X (SIMP (LIST 'QUOTIENT (LIST 'ACOSH (CDR X)) 2))))))
      (SETQ SR (SIMP-SIGN1 REARG))
      (SETQ SI (SIMP-SIGN1 IMARG))
      (SETQ Y
              (MULTSQ Y
                      (ADDSQ (CONS 1 1)
                             (MULTSQ SI (ADDSQ (SIMP 1) (NEGSQ SI))))))
      (SETQ X
              (MULTSQ X
                      (ADDSQ SR
                             (MULTSQ SI
                                     (ADDSQ (NEGSQ (MULTSQ SR SR))
                                            (CONS 1 1))))))
      (RETURN (ADDSQ X (MULTSQ (SIMP 'I) Y))))) 
(PUT 'ACOSH 'CMPXSPLITFN 'REIMACOSH) 
(PUT 'REIMACOSH 'NUMBER-OF-ARGS 1) 
(PUT 'REIMACOSH 'DEFINED-ON-LINE '860) 
(PUT 'REIMACOSH 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'REIMACOSH 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REIMACOSH (U)
    (PROG (REARG IMARG X Y SR SI)
      (SETQ REARG (PREPSQ (SIMPREPART (CDR U))))
      (SETQ IMARG (PREPSQ (SIMPIMPART (CDR U))))
      (SETQ X (INVFN-ARGS REARG IMARG))
      (COND
       ((EQUAL REARG 0)
        (PROGN
         (SETQ X (SIMP (LIST 'ASINH (LIST 'ABS IMARG))))
         (SETQ Y (SIMP (LIST 'QUOTIENT 'PI 2)))))
       ((EQUAL (CAR X) (MINUS 1))
        (PROGN
         (SETQ Y (CONS NIL 1))
         (SETQ X (SIMP (LIST 'ACOSH (LIST 'ABS REARG))))))
       ((EQUAL (CDR X) 1)
        (PROGN
         (SETQ Y (SIMP (LIST 'ACOS (LIST 'ABS REARG))))
         (SETQ X (CONS NIL 1))))
       (T
        (PROGN
         (SETQ Y (SIMP (LIST 'QUOTIENT (LIST 'ACOS (LIST 'MINUS (CAR X))) 2)))
         (SETQ X (SIMP (LIST 'QUOTIENT (LIST 'ACOSH (CDR X)) 2))))))
      (SETQ SR (SIMP-SIGN1 REARG))
      (SETQ SI (SIMP-SIGN1 IMARG))
      (SETQ Y
              (ADDSQ Y
                     (MULTSQ (MULTSQ SR (ADDSQ SR (CONS (MINUS 1) 1)))
                             (ADDSQ (SIMP (LIST 'QUOTIENT 'PI 2)) (NEGSQ Y)))))
      (SETQ Y
              (MULTSQ Y
                      (ADDSQ (CONS 1 1)
                             (MULTSQ SI (ADDSQ (CONS 1 1) (NEGSQ SI))))))
      (RETURN (ADDSQ X (MULTSQ (SIMP 'I) Y))))) 
(PUT 'ATANH 'CMPXSPLITFN 'REIMATANH) 
(PUT 'REIMATANH 'NUMBER-OF-ARGS 1) 
(PUT 'REIMATANH 'DEFINED-ON-LINE '895) 
(PUT 'REIMATANH 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'REIMATANH 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REIMATANH (U)
    (PROG (REARG IMARG X Y SR SI S1)
      (SETQ REARG (PREPSQ (SIMPREPART (CDR U))))
      (SETQ IMARG (PREPSQ (SIMPIMPART (CDR U))))
      (COND
       ((EQUAL REARG 0) (RETURN (SIMP (LIST 'TIMES 'I (LIST 'ATAN IMARG))))))
      (SETQ SR (SIMP-SIGN1 REARG))
      (SETQ S1 (SIMP (LIST 'SIGN (LIST 'DIFFERENCE (LIST 'EXPT REARG 2) 1))))
      (SETQ S1 (ADDSQ (CONS 1 1) S1))
      (COND
       ((EQUAL IMARG 0)
        (PROGN
         (SETQ X
                 (LIST 'QUOTIENT (LIST 'PLUS 1 REARG)
                       (LIST 'DIFFERENCE 1 REARG)))
         (SETQ X (SIMP (LIST 'QUOTIENT (LIST 'LOG (LIST 'ABS X)) 2)))
         (SETQ Y
                 (MULTSQ (MULTSQ SR (SIMP (LIST 'QUOTIENT 'PI (MINUS 4))))
                         S1))))
       (T
        (PROGN
         (SETQ SI (PREPSQ (SIMP-SIGN1 IMARG)))
         (SETQ SI (SIMP (LIST 'DIFFERENCE (LIST 'EXPT SI 2) 1)))
         (SETQ X
                 (LIST 'PLUS (LIST 'EXPT (LIST 'PLUS REARG 1) 2)
                       (LIST 'EXPT IMARG 2)))
         (SETQ Y
                 (LIST 'PLUS (LIST 'EXPT (LIST 'DIFFERENCE 1 REARG) 2)
                       (LIST 'EXPT IMARG 2)))
         (SETQ X (SIMP (LIST 'QUOTIENT (LIST 'LOG (LIST 'QUOTIENT X Y)) 4)))
         (SETQ Y
                 (LIST 'DIFFERENCE 1
                       (LIST 'PLUS (LIST 'EXPT REARG 2) (LIST 'EXPT IMARG 2))))
         (SETQ Y
                 (SIMP
                  (LIST 'QUOTIENT (LIST 'ATAN2 (LIST 'TIMES 2 IMARG) Y) 2)))
         (SETQ Y
                 (ADDSQ
                  (MULTSQ (MULTSQ SI (MULTSQ S1 (ADDSQ (CONS 1 1) SR)))
                          (SIMP (LIST 'QUOTIENT 'PI 4)))
                  Y)))))
      (RETURN (ADDSQ X (MULTSQ (SIMP 'I) Y))))) 
(PUT 'ATAN 'CMPXSPLITFN 'REIMATAN) 
(PUT 'ACOT 'CMPXSPLITFN 'REIMATAN) 
(PUT 'REIMATAN 'NUMBER-OF-ARGS 1) 
(PUT 'REIMATAN 'DEFINED-ON-LINE '956) 
(PUT 'REIMATAN 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'REIMATAN 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REIMATAN (U)
    ((LAMBDA (OP REARG IMARG)
       (COND ((EQUAL IMARG 0) (SIMP (LIST OP REARG)))
             (T
              ((LAMBDA (RES)
                 (COND ((EQUAL OP 'ATAN) (NEGSQ RES))
                       ((EQUAL OP 'ACOT)
                        (ADDSQ (SIMP (LIST 'QUOTIENT 'PI 2)) RES))))
               (MULTSQ (SIMP 'I)
                       (REIMATANH
                        (LIST (CAR U) (LIST 'TIMES 'I (CADR U)))))))))
     (CAR U) (PREPSQ (SIMPREPART (CDR U))) (PREPSQ (SIMPIMPART (CDR U))))) 
(PUT 'ASEC 'CMPXSPLITFN 'REIMASEC) 
(PUT 'REIMASEC 'NUMBER-OF-ARGS 1) 
(PUT 'REIMASEC 'DEFINED-ON-LINE '967) 
(PUT 'REIMASEC 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'REIMASEC 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REIMASEC (U) (REIMASIN (LIST 'ACOS (LIST 'QUOTIENT 1 (CADR U))))) 
(PUT 'ACSC 'CMPXSPLITFN 'REIMACSC) 
(PUT 'REIMACSC 'NUMBER-OF-ARGS 1) 
(PUT 'REIMACSC 'DEFINED-ON-LINE '972) 
(PUT 'REIMACSC 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'REIMACSC 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REIMACSC (U) (REIMASIN (LIST 'ASIN (LIST 'QUOTIENT 1 (CADR U))))) 
(PUT 'ASECH 'CMPXSPLITFN 'REIMASECH) 
(PUT 'REIMASECH 'NUMBER-OF-ARGS 1) 
(PUT 'REIMASECH 'DEFINED-ON-LINE '977) 
(PUT 'REIMASECH 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'REIMASECH 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REIMASECH (U) (REIMACOSH (LIST 'ACOSH (LIST 'QUOTIENT 1 (CADR U))))) 
(PUT 'ACSCH 'CMPXSPLITFN 'REIMACSCH) 
(PUT 'REIMACSCH 'NUMBER-OF-ARGS 1) 
(PUT 'REIMACSCH 'DEFINED-ON-LINE '982) 
(PUT 'REIMACSCH 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'REIMACSCH 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REIMACSCH (U) (REIMASINH (LIST 'ASINH (LIST 'QUOTIENT 1 (CADR U))))) 
(PUT 'ACOTH 'CMPXSPLITFN 'REIMACOTH) 
(PUT 'REIMACOTH 'NUMBER-OF-ARGS 1) 
(PUT 'REIMACOTH 'DEFINED-ON-LINE '987) 
(PUT 'REIMACOTH 'DEFINED-IN-FILE 'POLY/COMPOPR.RED) 
(PUT 'REIMACOTH 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REIMACOTH (U)
    (PROG (REARG IMARG X Y SR SI S1)
      (SETQ REARG (PREPSQ (SIMPREPART (CDR U))))
      (SETQ IMARG (PREPSQ (SIMPIMPART (CDR U))))
      (COND
       ((EQUAL REARG 0)
        (PROGN
         (SETQ Y (SIMP (LIST 'TIMES 'I (LIST 'ACOT (LIST 'ABS IMARG)))))
         (SETQ SI (SIMP-SIGN1 IMARG))
         (SETQ X (ADDSQ (SIMP 1) (NEGSQ (MULTSQ SI (ADDSQ (CONS 1 1) SI)))))
         (RETURN (MULTSQ X Y)))))
      (SETQ S1 (SIMP (LIST 'SIGN (LIST 'DIFFERENCE 1 (LIST 'EXPT REARG 2)))))
      (SETQ S1 (ADDSQ (CONS 1 1) S1))
      (SETQ SR (SIMP-SIGN1 REARG))
      (SETQ SR (ADDSQ (CONS 1 1) (NEGSQ (MULTSQ SR (ADDSQ (CONS 1 1) SR)))))
      (COND
       ((EQUAL IMARG 0)
        (PROGN
         (SETQ X
                 (LIST 'QUOTIENT (LIST 'PLUS 1 REARG)
                       (LIST 'DIFFERENCE REARG 1)))
         (SETQ X (SIMP (LIST 'QUOTIENT (LIST 'LOG (LIST 'ABS X)) 2)))
         (SETQ Y
                 (SIMP
                  (LIST 'QUOTIENT
                        (LIST 'ATAN2 0
                              (LIST 'DIFFERENCE (LIST 'EXPT REARG 2) 1))
                        4)))
         (SETQ Y (MULTSQ (MULTSQ SR S1) Y))))
       (T
        (PROGN
         (SETQ SI (PREPSQ (SIMP-SIGN1 IMARG)))
         (SETQ SI (SIMP (LIST 'DIFFERENCE 1 (LIST 'EXPT SI 2))))
         (SETQ X
                 (LIST 'PLUS (LIST 'EXPT (LIST 'PLUS REARG 1) 2)
                       (LIST 'EXPT IMARG 2)))
         (SETQ Y
                 (LIST 'PLUS (LIST 'EXPT (LIST 'DIFFERENCE 1 REARG) 2)
                       (LIST 'EXPT IMARG 2)))
         (SETQ X (SIMP (LIST 'QUOTIENT (LIST 'LOG (LIST 'QUOTIENT X Y)) 4)))
         (SETQ Y
                 (LIST 'DIFFERENCE
                       (LIST 'PLUS (LIST 'EXPT REARG 2) (LIST 'EXPT IMARG 2))
                       1))
         (SETQ Y
                 (SIMP
                  (LIST 'QUOTIENT (LIST 'ATAN2 (LIST 'TIMES (MINUS 2) IMARG) Y)
                        2)))
         (SETQ Y
                 (ADDSQ
                  (MULTSQ (MULTSQ SI (MULTSQ S1 (ADDSQ (CONS (MINUS 1) 1) SR)))
                          (SIMP (LIST 'QUOTIENT 'PI 4)))
                  Y)))))
      (RETURN (ADDSQ X (MULTSQ (SIMP 'I) Y))))) 
(PUT 'ARBINT 'CMPXSPLITFN 'SIMP) 
(ENDMODULE) 