(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'TRI)) 
(CREATE-PACKAGE '(TRI) '(CONTRIB MISC)) 
(FLUID
 '(*TEX *TEXBREAK *TEXINDENT TEXSTACK* HSIZE* HSS* HWW* TOLERANCE* *LOWER
   METRICU*)) 
(GLOBAL '(INDXL*)) 
(SWITCH (LIST 'TEX 'TEXBREAK 'TEXINDENT)) 
(PUT 'TEXINDENT 'SIMPFG '((T (PROGN (SETQ *TEX T) (SETQ *TEXBREAK T))))) 
(PUT 'TEXBREAK 'SIMPFG '((T (SETQ *TEX T)))) 
(PUT 'TEX 'SIMPFG '((NIL (PROGN (SETQ *TEXBREAK NIL) (SETQ *TEXINDENT NIL))))) 
(PUT 'TRI-ERROR 'NUMBER-OF-ARGS 2) 
(PUT 'TRI-ERROR 'DEFINED-ON-LINE '135) 
(PUT 'TRI-ERROR 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'TRI-ERROR 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE TRI-ERROR (STRLST ERRCLASS)
    (PROGN
     (PROG (X)
       (SETQ X STRLST)
      LAB
       (COND ((NULL X) (RETURN NIL)))
       ((LAMBDA (X) (PRIN2 X)) (CAR X))
       (SETQ X (CDR X))
       (GO LAB))
     (TERPRI)
     (COND ((EQUAL ERRCLASS 'FATAL) (REDERR "Aborting."))))) 
(PUT 'TEXPRI 'NUMBER-OF-ARGS 3) 
(PUT 'TEXPRI 'DEFINED-ON-LINE '143) 
(PUT 'TEXPRI 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'TEXPRI 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE TEXPRI (U V W)
    ((LAMBDA (X)
       (COND ((AND X (GET X 'TEXPRIFN)) (APPLY3 (GET X 'TEXPRIFN) U V W))
             (T (TEXVARPRI U V W))))
     (GETRTYPE U))) 
(PUT 'TEXVARPRI 'NUMBER-OF-ARGS 3) 
(PUT 'TEXVARPRI 'DEFINED-ON-LINE '147) 
(PUT 'TEXVARPRI 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'TEXVARPRI 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE TEXVARPRI (U V W)
    (PROG (*LOWER)
      (COND ((MEMQ W '(FIRST ONLY)) (SETQ TEXSTACK* NIL)))
      (COND
       (V
        (PROG (X)
          (SETQ X (REVERSE V))
         LAB
          (COND ((NULL X) (RETURN NIL)))
          ((LAMBDA (X) (SETQ U (LIST 'SETQ X U))) (CAR X))
          (SETQ X (CDR X))
          (GO LAB))))
      (SETQ TEXSTACK* (NCONC TEXSTACK* (MKTAG U 0 NIL)))
      (COND
       ((OR (EQUAL W T) (EQUAL W 'ONLY) (EQUAL W 'LAST))
        (PROGN
         (COND
          (*TEXBREAK
           (PROGN
            (SETQ TEXSTACK* (INSERTGLUE TEXSTACK*))
            (SETQ TEXSTACK* (TRYBREAK TEXSTACK* (BREAKLIST TEXSTACK*))))))
         (TEXOUT TEXSTACK* *TEXBREAK)
         (SETQ TEXSTACK* NIL)))))) 
(PUT 'FORM-WITH-FREE-INDICES 'TEXPRIFN 'TEXINDXPRI) 
(PUT 'TEXINDXPRI 'NUMBER-OF-ARGS 3) 
(PUT 'TEXINDXPRI 'DEFINED-ON-LINE '169) 
(PUT 'TEXINDXPRI 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'TEXINDXPRI 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE TEXINDXPRI (U V W)
    (PROG (METRICU IL DNLIST UPLIST R X Y Z)
      (COND (V (GO A)))
      (SETQ METRICU METRICU*)
      (SETQ METRICU* NIL)
      (SETQ IL (ALLIND (LIST (CAR (CAR (SIMP0 U))))))
      (PROG (J)
        (SETQ J IL)
       LAB
        (COND ((NULL J) (RETURN NIL)))
        ((LAMBDA (J)
           (COND ((ATOM (REVALIND J)) (SETQ UPLIST (CONS J UPLIST)))
                 (T (SETQ DNLIST (CONS (CADR J) DNLIST)))))
         (CAR J))
        (SETQ J (CDR J))
        (GO LAB))
      (PROG (J)
        (SETQ J (INTERSECTION UPLIST DNLIST))
       LAB
        (COND ((NULL J) (RETURN NIL)))
        ((LAMBDA (J)
           (SETQ IL (DELETE J (DELETE (REVALIND (LIST 'MINUS J)) IL))))
         (CAR J))
        (SETQ J (CDR J))
        (GO LAB))
      (SETQ METRICU* METRICU)
      (SETQ Y (FLATINDXL IL))
      (SETQ R (SIMP* U))
      (PROG (J)
        (SETQ J (MKAINDXC Y NIL))
       LAB
        (COND ((NULL J) (RETURN NIL)))
        ((LAMBDA (J)
           (PROGN
            (SETQ X (PAIR Y J))
            (SETQ Z
                    (EXC-MK*SQ2
                     (MULTSQ (SUBFINDICES (CAR R) X) (CONS 1 (CDR R)))))
            (COND
             ((NULL (AND *NERO (EQUAL Z 0)))
              (TEXVARPRI Z (LIST (SUBLA X (CONS 'NS IL))) 'ONLY)))))
         (CAR J))
        (SETQ J (CDR J))
        (GO LAB))
      (RETURN U)
     A
      (SETQ V (CAR V))
      (SETQ Y (FLATINDXL (ALLINDK V)))
      (PROG (J)
        (SETQ J
                (COND
                 ((AND (FLAGP (CAR V) 'ANTISYMMETRIC) (COPOSP (CDR V)))
                  (COMB INDXL* (LENGTH Y)))
                 (T (MKAINDXC Y NIL))))
       LAB
        (COND ((NULL J) (RETURN NIL)))
        ((LAMBDA (J)
           (PROGN
            (SETQ X (PAIR Y J))
            (SETQ Z (REVAL1 (SUBLA X V) NIL))
            (COND
             ((NULL (AND *NERO (EQUAL Z 0)))
              (TEXVARPRI Z (LIST (SUBLA X V)) 'ONLY)))))
         (CAR J))
        (SETQ J (CDR J))
        (GO LAB))
      (RETURN U))) 
(PUT 'MAKEOP 'NUMBER-OF-ARGS 4) 
(PUT 'MAKEOP 'DEFINED-ON-LINE '238) 
(PUT 'MAKEOP 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'MAKEOP 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE MAKEOP (OP PREC PATT UBY)
    (PROGN
     (PUT OP 'TEXPREC PREC)
     (PUT OP 'TEXPATT PATT)
     (PUT OP 'TEXUBY
          (COND (UBY (CONS (CAR UBY) (CADR UBY))) (T (CONS NIL NIL)))))) 
(PUT 'MAKEOPS 'NUMBER-OF-ARGS 1) 
(PUT 'MAKEOPS 'DEFINED-ON-LINE '243) 
(PUT 'MAKEOPS 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'MAKEOPS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MAKEOPS (L)
    (PROG (W)
      (SETQ W L)
     LAB
      (COND ((NULL W) (RETURN NIL)))
      ((LAMBDA (W) (MAKEOP (CAR W) (CADR W) (CADDR W) (CADDDR W))) (CAR W))
      (SETQ W (CDR W))
      (GO LAB))) 
(MAKEOPS
 '((SETQ 1 ((X) (F) |\\[| (X) |\\]|)
         NIL)
   (OR 30 ((X) (F) (R)) NIL) (AND 40 ((X) (F) (R)) NIL)
   (EQUAL 50 ((X) (F) |\\[| (X) |\\]|) NIL)
   (REPLACEBY 50 ((X) (F) |\\[| (X) |\\]|) NIL)
   (GREATERP 50 ((X) (F) |\\[| (X) |\\]|) NIL)
   (LESSP 50 ((X) (F) |\\[| (X) |\\]|) NIL)
   (GEQ 50 ((X) (F) |\\[| (X) |\\]|) NIL)
   (LEQ 50 ((X) (F) |\\[| (X) |\\]|) NIL)
   (NEQ 50 ((X) (F) |\\[| (X) |\\]|) NIL) (MEMBER 50 ((X) (F) (X)) NIL)
   (WHEN 50 ((X) (F) (X)) NIL) (PLUS 100 ((X) (F) (R)) (MINUS DIFFERENCE))
   (MINUS 100 ((F) (Y)) NIL) (DIFFERENCE 100 ((X) (F) (Y)) NIL)
   (UNION 100 ((X) (F) (R)) NIL) (SETDIFF 100 ((X) (F) (Y)) NIL)
   (TAYLOR* 100 ((APPLY MAKETAYLOR)) NIL) (|:PS:| 100 ((APPLY |MAKE:PS:|)) NIL)
   (TIMES 200 ((X) (F) (R)) (RECIP QUOTIENT)) (WEDGE 200 ((X) (F) (R)) NIL)
   (QUOTIENT 200 ((F) (Z) }{ (Z) }) NIL) (INTERSECTION 200 ((X) (F) (R)) NIL)
   (*SQ 200 ((APPLY MAKE*SQ)) NIL) (RECIP 700 ((F) |1| }{ (Z) }) NIL)
   (EXPT 850 ((X) ^{ (Z) }) NIL) (SQRT 800 ((F) | | | | | | (Z) }) NIL)
   (|:RD:| 999 ((APPLY |MAKE:RD:|)) NIL) (|:CR:| 999 ((APPLY MAKEDOMAIN)) NIL)
   (|:GI:| 999 ((APPLY MAKEDOMAIN)) NIL) (|:RN:| 999 ((APPLY MAKEDOMAIN)) NIL)
   (|:CRN:| 999 ((APPLY MAKEDOMAIN)) NIL)
   (|:MOD:| 999 ((APPLY MAKEDOMAIN)) NIL) (|:DN:| 999 ((APPLY MAKEDOMAIN)) NIL)
   (|:INT:| 999 ((APPLY MAKEDOMAIN)) NIL) (NOT 999 ((F) (Y)) NIL)
   (MAT 999 ((F) (M |\\CR | &) }) NIL) (LIST 999 (|\\{| (L |\\CO |) |\\}|) NIL)
   (DF 999 ((APPLY MAKEDF)) NIL) (INT 999 ((APPLY MAKEINT)) NIL)
   (LIMIT 999 ((APPLY MAKELIMIT)) NIL) (LIMIT+ 999 ((APPLY MAKELIMIT)) NIL)
   (LIMIT- 999 ((APPLY MAKELIMIT)) NIL) (SUM 999 ((APPLY MAKELIMIT)) NIL)
   (PROD 999 ((APPLY MAKELIMIT)) NIL) (~ 999 ((F) (Y)) NIL)
   (*INTERVAL* 999 ((X) |.| |.| (X)) NIL)
   (INNERPROD 999 ({ |\\RM | I } _{ (Z) } (X)) NIL)
   (LIEDF 999 (|\\HBOX | { |\\IT | |\\$| } _{ (Z) } (X)) NIL)
   (HODGE 999 ((F) (Y)) NIL) (PARTDF 999 ((F) (APPLY MAKEPARTDF)) NIL)
   (D 999 (|\\D | (X)) NIL))) 
(PUT 'MKTAG 'NUMBER-OF-ARGS 3) 
(PUT 'MKTAG 'DEFINED-ON-LINE '313) 
(PUT 'MKTAG 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'MKTAG 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE MKTAG (TAG PREC ASSF)
    (COND ((NULL TAG) NIL) ((ATOM TAG) (TEXEXPLODE TAG))
          (T
           (PROG (TAGPREC TERM)
             (SETQ TAGPREC (OR (GET (CAR TAG) 'TEXPREC) 999))
             (SETQ TERM (MAKEFUNC (CAR TAG) (CDR TAG) TAGPREC))
             (COND
              ((OR (AND ASSF (EQUAL PREC TAGPREC)) (LESSP TAGPREC PREC))
               (SETQ TERM (NCONC (CONS '|\\(| TERM) (CONS '|\\)| NIL)))))
             (RETURN TERM))))) 
(PUT 'MAKEARG 'NUMBER-OF-ARGS 2) 
(PUT 'MAKEARG 'DEFINED-ON-LINE '330) 
(PUT 'MAKEARG 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'MAKEARG 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MAKEARG (L S)
    (COND ((NULL L) NIL) ((NULL (CDR L)) (MKTAG (CAR L) 0 NIL))
          (T (NCONC (MKTAG (CAR L) 0 NIL) (CONS S (MAKEARG (CDR L) S)))))) 
(PUT 'MAKEMAT 'NUMBER-OF-ARGS 3) 
(PUT 'MAKEMAT 'DEFINED-ON-LINE '336) 
(PUT 'MAKEMAT 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'MAKEMAT 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE MAKEMAT (M V H)
    (COND ((NULL M) NIL)
          (T (NCONC (MAKEARG (CAR M) H) (CONS V (MAKEMAT (CDR M) V H)))))) 
(DE TRI_ISTAG (V W) (EQUAL (CAR V) W)) 
(PUT 'TRI_ISTAG 'NUMBER-OF-ARGS 2) 
(PUT 'TRI_ISTAG 'DEFINED-ON-LINE '341) 
(PUT 'TRI_ISTAG 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'TRI_ISTAG 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(PUTC 'TRI_ISTAG 'INLINE '(LAMBDA (V W) (EQUAL (CAR V) W))) 
(DE TRI_UNARY (UBY) (CAR UBY)) 
(PUT 'TRI_UNARY 'NUMBER-OF-ARGS 1) 
(PUT 'TRI_UNARY 'DEFINED-ON-LINE '342) 
(PUT 'TRI_UNARY 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'TRI_UNARY 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'TRI_UNARY 'INLINE '(LAMBDA (UBY) (CAR UBY))) 
(DE TRI_BINARY (UBY) (CDR UBY)) 
(PUT 'TRI_BINARY 'NUMBER-OF-ARGS 1) 
(PUT 'TRI_BINARY 'DEFINED-ON-LINE '343) 
(PUT 'TRI_BINARY 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'TRI_BINARY 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'TRI_BINARY 'INLINE '(LAMBDA (UBY) (CDR UBY))) 
(DE TRI_LCOPY (A)
    (PROG (X FORALL-RESULT FORALL-ENDPTR)
      (SETQ X A)
      (COND ((NULL X) (RETURN NIL)))
      (SETQ FORALL-RESULT
              (SETQ FORALL-ENDPTR (CONS ((LAMBDA (X) X) (CAR X)) NIL)))
     LOOPLABEL
      (SETQ X (CDR X))
      (COND ((NULL X) (RETURN FORALL-RESULT)))
      (RPLACD FORALL-ENDPTR (CONS ((LAMBDA (X) X) (CAR X)) NIL))
      (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
      (GO LOOPLABEL))) 
(PUT 'TRI_LCOPY 'NUMBER-OF-ARGS 1) 
(PUT 'TRI_LCOPY 'DEFINED-ON-LINE '344) 
(PUT 'TRI_LCOPY 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'TRI_LCOPY 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'TRI_LCOPY 'INLINE
      '(LAMBDA (A)
         (PROG (X FORALL-RESULT FORALL-ENDPTR)
           (SETQ X A)
           (COND ((NULL X) (RETURN NIL)))
           (SETQ FORALL-RESULT
                   (SETQ FORALL-ENDPTR (CONS ((LAMBDA (X) X) (CAR X)) NIL)))
          LOOPLABEL
           (SETQ X (CDR X))
           (COND ((NULL X) (RETURN FORALL-RESULT)))
           (RPLACD FORALL-ENDPTR (CONS ((LAMBDA (X) X) (CAR X)) NIL))
           (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
           (GO LOOPLABEL)))) 
(PUT 'MAKEFUNC 'NUMBER-OF-ARGS 3) 
(PUT 'MAKEFUNC 'DEFINED-ON-LINE '346) 
(PUT 'MAKEFUNC 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'MAKEFUNC 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE MAKEFUNC (OP ARG PREC)
    (PROG (TERM TAG A PATTERN UBY)
      (SETQ TERM NIL)
      (SETQ PATTERN
              (OR (GET OP 'TEXPATT)
                  (COND ((FLAGP OP 'INDEXVAR) '((APPLY MAKEEXCINX)))
                        (T '((F) |\\(| (L |,|) |\\)|)))))
      (SETQ UBY (GET OP 'TEXUBY))
      (PROG ()
       WHILELABEL
        (COND ((NOT PATTERN) (RETURN NIL)))
        (PROGN
         (SETQ TAG (CAR PATTERN))
         (SETQ PATTERN (CDR PATTERN))
         (COND ((ATOM TAG) (SETQ A (CONS TAG NIL)))
               ((NOT (ATOM (CAR TAG))) (SETQ A NIL))
               ((EQUAL (CAR TAG) 'F)
                (COND
                 ((AND ARG (NOT (ATOM (CAR ARG))) UBY
                       (EQUAL (CAAR ARG) (CAR UBY)))
                  (PROGN
                   (SETQ A (TEXEXPLODE (CDR UBY)))
                   (SETQ ARG (CONS (CADAR ARG) (CDR ARG)))))
                 (T (SETQ A (TEXEXPLODE OP)))))
               ((EQUAL (CAR TAG) 'APPLY)
                (PROGN
                 (SETQ A (APPLY3 (CADR TAG) OP ARG PREC))
                 (SETQ ARG NIL)))
               ((NULL ARG) (SETQ A NIL))
               ((EQUAL (CAR TAG) 'X)
                (PROGN
                 (SETQ A (MKTAG (CAR ARG) PREC NIL))
                 (SETQ ARG (CDR ARG))))
               ((EQUAL (CAR TAG) 'Y)
                (PROGN (SETQ A (MKTAG (CAR ARG) PREC T)) (SETQ ARG (CDR ARG))))
               ((EQUAL (CAR TAG) 'Z)
                (PROGN (SETQ A (MKTAG (CAR ARG) 0 NIL)) (SETQ ARG (CDR ARG))))
               ((EQUAL (CAR TAG) 'R)
                (COND
                 ((CDR ARG)
                  (PROGN (SETQ PATTERN (GET OP 'TEXPATT)) (SETQ A NIL)))
                 (T
                  (PROGN
                   (SETQ A (MKTAG (CAR ARG) PREC NIL))
                   (SETQ ARG (CDR ARG))))))
               ((EQUAL (CAR TAG) 'L)
                (PROGN (SETQ A (MAKEARG ARG (CADR TAG))) (SETQ ARG NIL)))
               ((EQUAL (CAR TAG) 'M)
                (PROGN
                 (SETQ A (MAKEMAT ARG (CADR TAG) (CADDR TAG)))
                 (SETQ ARG NIL)))
               (T (SETQ A NIL)))
         (COND (A (SETQ TERM (NCONC TERM A)))))
        (GO WHILELABEL))
      (RETURN TERM))) 
(PUT 'MAKE*SQ 'NUMBER-OF-ARGS 3) 
(PUT 'MAKE*SQ 'DEFINED-ON-LINE '386) 
(PUT 'MAKE*SQ 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'MAKE*SQ 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE MAKE*SQ (OP ARG PREC)
    (MKTAG (PREPREFORM (PREPSQ* (SQHORNER* (CAR ARG)))) 0 NIL)) 
(PUT 'MAKEDF 'NUMBER-OF-ARGS 3) 
(PUT 'MAKEDF 'DEFINED-ON-LINE '390) 
(PUT 'MAKEDF 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'MAKEDF 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE MAKEDF (OP ARG PREC)
    (PROG (DFX F VVV DEGREE)
      (SETQ DEGREE 0)
      (SETQ DFX
              (PROG (X FORALL-RESULT FORALL-ENDPTR)
                (SETQ X (SETQ F (TEXEXPLODE OP)))
                (COND ((NULL X) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS ((LAMBDA (X) X) (CAR X)) NIL)))
               LOOPLABEL
                (SETQ X (CDR X))
                (COND ((NULL X) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR (CONS ((LAMBDA (X) X) (CAR X)) NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (SETQ DEGREE 0)
      (NCONC DFX (MKTAG (CAR ARG) PREC NIL))
      (SETQ DFX (NCONC DFX (LIST '}{)))
      (PROG (ITEM)
        (SETQ ITEM (CDR ARG))
       LAB
        (COND ((NULL ITEM) (RETURN NIL)))
        ((LAMBDA (ITEM)
           (COND
            ((NUMBERP ITEM)
             (PROGN
              (SETQ DFX (NCONC DFX (CONS '^{ (TEXEXPLODE ITEM))))
              (SETQ DFX (NCONC DFX (LIST '})))
              (SETQ DEGREE (PLUS DEGREE (DIFFERENCE ITEM 1)))
              NIL))
            (T
             (PROGN
              (SETQ DFX (NCONC DFX (APPEND F (MKTAG ITEM PREC NIL))))
              (SETQ DEGREE (PLUS DEGREE 1))))))
         (CAR ITEM))
        (SETQ ITEM (CDR ITEM))
        (GO LAB))
      (COND
       ((GREATERP DEGREE 1)
        (PROGN
         (SETQ VVV (NCONC (TEXEXPLODE DEGREE) (CONS '} (CDR DFX))))
         (RPLACD DFX (CONS '^{ VVV)))))
      (RETURN (CONS '|\\FRAC{| (NCONC DFX (LIST '})))))) 
(PUT 'MAKEPARTDF 'NUMBER-OF-ARGS 3) 
(PUT 'MAKEPARTDF 'DEFINED-ON-LINE '411) 
(PUT 'MAKEPARTDF 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'MAKEPARTDF 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE MAKEPARTDF (OP ARG PREC)
    (COND
     ((CDR ARG)
      (CONS '_{
            (NCONC (MAKEARG (CDR ARG) '|,|)
                   (CONS '} (MKTAG (CAR ARG) PREC NIL)))))
     (T (CONS '_{ (NCONC (MKTAG (CAR ARG) PREC NIL) (LIST '})))))) 
(PUT 'INXEXTEND 'NUMBER-OF-ARGS 3) 
(PUT 'INXEXTEND 'DEFINED-ON-LINE '417) 
(PUT 'INXEXTEND 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'INXEXTEND 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(PUTC 'INXEXTEND 'SMACRO
      '(LAMBDA (ITEM LD RD)
         (NCONC RESULT (CONS LD (NCONC (TEXEXPLODE ITEM) (LIST RD)))))) 
(PUT 'MAKEEXCINX 'NUMBER-OF-ARGS 3) 
(PUT 'MAKEEXCINX 'DEFINED-ON-LINE '420) 
(PUT 'MAKEEXCINX 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'MAKEEXCINX 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE MAKEEXCINX (OP ARG PREC)
    (PROG (RESULT)
      (SETQ RESULT (NCONC (CONS '{ NIL) (TEXEXPLODE OP)))
      (PROG (ITEM)
        (SETQ ITEM ARG)
       LAB
        (COND ((NULL ITEM) (RETURN NIL)))
        ((LAMBDA (ITEM)
           (COND
            ((NUMBERP ITEM)
             (COND
              ((MINUSP ITEM)
               (NCONC RESULT
                      (CONS '{}_{
                            (NCONC (TEXEXPLODE (MINUS ITEM)) (LIST '})))))
              (T
               (NCONC RESULT
                      (CONS '{}^{ (NCONC (TEXEXPLODE ITEM) (LIST '})))))))
            ((ATOM ITEM)
             (NCONC RESULT (CONS '{}^{ (NCONC (TEXEXPLODE ITEM) (LIST '})))))
            ((EQUAL (CAR ITEM) 'MINUS)
             (NCONC RESULT
                    (CONS '{}_{ (NCONC (TEXEXPLODE (CADR ITEM)) (LIST '})))))
            (T
             (NCONC RESULT
                    (CONS '{}_{ (NCONC (TEXEXPLODE BLANK) (LIST '})))))))
         (CAR ITEM))
        (SETQ ITEM (CDR ITEM))
        (GO LAB))
      (RETURN (NCONC RESULT (CONS '} NIL))))) 
(PUT '|MAKE:RD:| 'NUMBER-OF-ARGS 3) 
(PUT '|MAKE:RD:| 'DEFINED-ON-LINE '433) 
(PUT '|MAKE:RD:| 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT '|MAKE:RD:| 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE |MAKE:RD:| (OP ARG PREC)
    (PROG (DIGITS STR DOTPOS XP)
      (SETQ DOTPOS 0)
      (SETQ XP 0)
      (SETQ OP (|RD:EXPLODE| (CONS OP ARG)))
      (SETQ DIGITS (CAR OP))
      (SETQ XP (CADR OP))
      (SETQ DOTPOS (CADDR OP))
      (PROG (I)
        (SETQ I 1)
       LAB
        (COND ((MINUSP (DIFFERENCE DOTPOS I)) (RETURN NIL)))
        (PROGN
         (SETQ STR (CONS (CAR DIGITS) STR))
         (SETQ DIGITS (CDR DIGITS))
         (COND ((NULL DIGITS) (SETQ DIGITS '(|0|)))))
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (SETQ STR (CONS '|.| STR))
      (PROG (C)
        (SETQ C DIGITS)
       LAB
        (COND ((NULL C) (RETURN NIL)))
        ((LAMBDA (C) (SETQ STR (CONS C STR))) (CAR C))
        (SETQ C (CDR C))
        (GO LAB))
      (COND
       ((NOT (EQUAL XP 0))
        (PROGN
         (PROG (C)
           (SETQ C '(|\\,| |1| |0| ^{))
          LAB
           (COND ((NULL C) (RETURN NIL)))
           ((LAMBDA (C) (SETQ STR (CONS C STR))) (CAR C))
           (SETQ C (CDR C))
           (GO LAB))
         (PROG (C)
           (SETQ C (EXPLODE2 XP))
          LAB
           (COND ((NULL C) (RETURN NIL)))
           ((LAMBDA (C) (SETQ STR (CONS C STR))) (CAR C))
           (SETQ C (CDR C))
           (GO LAB))
         (SETQ STR (CONS '} STR)))))
      (RETURN (REVERSE STR)))) 
(PUT 'MAKEDOMAIN 'NUMBER-OF-ARGS 3) 
(PUT 'MAKEDOMAIN 'DEFINED-ON-LINE '449) 
(PUT 'MAKEDOMAIN 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'MAKEDOMAIN 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE MAKEDOMAIN (OP ARG PREC)
    (COND
     ((GET OP 'PREPFN)
      (MKTAG (APPLY1 (GET OP 'PREPFN) (CONS OP ARG)) PREC NIL))
     ((GET OP 'PREPFN2)
      (MKTAG (APPLY1 (GET OP 'PREPFN2) (CONS OP ARG)) PREC NIL))
     ((GET OP 'SIMPFN)
      (MKTAG (APPLY1 (GET OP 'SIMPFN) (CONS OP ARG)) PREC NIL))
     (T
      (RERROR 'TRI 0
              (LIST "Don't know how to print domain"
                    (OR (GET OP 'DNAME) OP)))))) 
(PUT 'MAKELIMIT 'NUMBER-OF-ARGS 3) 
(PUT 'MAKELIMIT 'DEFINED-ON-LINE '459) 
(PUT 'MAKELIMIT 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'MAKELIMIT 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE MAKELIMIT (OP ARG PREC)
    (PROG (A TERM LIMITS)
      (COND (ARG (SETQ LIMITS (CDR ARG))))
      (SETQ TERM (TEXEXPLODE OP))
      (COND
       (LIMITS
        (PROGN
         (SETQ A (CONS '_{ (MKTAG (CAR LIMITS) 0 NIL)))
         (SETQ LIMITS (CDR LIMITS))
         (SETQ TERM (NCONC TERM A)))))
      (COND
       (LIMITS
        (PROGN
         (SETQ A
                 (COND ((EQUAL OP 'LIMIT) '|\\TO |)
                       ((EQUAL OP 'LIMIT+) '|\\UPARROW |)
                       ((EQUAL OP 'LIMIT-) '|\\DOWNARROW |) (T '=)))
         (SETQ A (CONS A (MKTAG (CAR LIMITS) 0 NIL)))
         (SETQ LIMITS (CDR LIMITS))
         (SETQ TERM (NCONC TERM A)))))
      (COND
       (LIMITS
        (PROGN
         (SETQ A (CONS '} (CONS '^{ (MKTAG (CAR LIMITS) 0 NIL))))
         (SETQ TERM (NCONC TERM A)))))
      (SETQ A (CONS '{ (COND (ARG (MKTAG (CAR ARG) PREC NIL)) (T NIL))))
      (COND ((AND ARG (CDR ARG)) (SETQ A (CONS '} A))))
      (SETQ TERM (NCONC TERM A))
      (SETQ TERM (NCONC TERM (CONS '} NIL)))
      (RETURN TERM))) 
(PUT 'TEXGROUP 'NUMBER-OF-ARGS 1) 
(PUT 'TEXGROUP 'DEFINED-ON-LINE '487) 
(PUT 'TEXGROUP 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'TEXGROUP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE TEXGROUP (U)
    (NCONC (CONS '{ (COND ((OR (NULL U) (LISTP U)) U) (T (LIST U))))
           (CONS '} NIL))) 
(PUT 'MAKEINT 'NUMBER-OF-ARGS 3) 
(PUT 'MAKEINT 'DEFINED-ON-LINE '492) 
(PUT 'MAKEINT 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'MAKEINT 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE MAKEINT (OP ARG PREC)
    (PROG (A TERM LIMITS)
      (COND ((AND ARG (CDR ARG)) (SETQ LIMITS (CDDR ARG))))
      (SETQ TERM (TEXEXPLODE OP))
      (COND
       (LIMITS
        (PROGN
         (SETQ A (CONS '_{ (CDR (TEXGROUP (MKTAG (CAR LIMITS) 0 NIL)))))
         (SETQ LIMITS (CDR LIMITS))
         (SETQ TERM (NCONC TERM A)))))
      (COND
       (LIMITS
        (PROGN
         (SETQ A (CONS '^{ (CDR (TEXGROUP (MKTAG (CAR LIMITS) 0 NIL)))))
         (SETQ LIMITS (CDR LIMITS))
         (SETQ TERM (NCONC TERM A)))))
      (SETQ A (COND (ARG (MKTAG (CAR ARG) 0 NIL))))
      (SETQ A
              (NCONC A
                     (COND
                      ((AND ARG (CDR ARG))
                       (CONS '|\\,| (CONS 'D (MKTAG (CADR ARG) 0 NIL)))))))
      (SETQ TERM (NCONC TERM (TEXGROUP A)))
      (RETURN TERM))) 
(PUT 'MAKETAYLOR 'NUMBER-OF-ARGS 3) 
(PUT 'MAKETAYLOR 'DEFINED-ON-LINE '511) 
(PUT 'MAKETAYLOR 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'MAKETAYLOR 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE MAKETAYLOR (OP ARG PREC)
    (MKTAG (APPLY1 (GET OP 'FANCY-REFORM) (CONS OP ARG)) PREC NIL)) 
(PUT '|MAKE:PS:| 'NUMBER-OF-ARGS 3) 
(PUT '|MAKE:PS:| 'DEFINED-ON-LINE '517) 
(PUT '|MAKE:PS:| 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT '|MAKE:PS:| 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE |MAKE:PS:| (OP ARG PREC)
    (MKTAG (APPLY1 (GET OP 'FANCY-REFORM) (CONS OP ARG)) PREC NIL)) 
(DE TRI_TRIASSERT (NAME ITEM) (PUT NAME 'TEXNAME ITEM)) 
(PUT 'TRI_TRIASSERT 'NUMBER-OF-ARGS 2) 
(PUT 'TRI_TRIASSERT 'DEFINED-ON-LINE '656) 
(PUT 'TRI_TRIASSERT 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'TRI_TRIASSERT 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(PUTC 'TRI_TRIASSERT 'INLINE '(LAMBDA (NAME ITEM) (PUT NAME 'TEXNAME ITEM))) 
(DE TRI_ASSERTL (L)
    (PROG (V)
      (SETQ V L)
     LAB
      (COND ((NULL V) (RETURN NIL)))
      ((LAMBDA (V) (PUT (CAR V) 'TEXNAME (CADR V))) (CAR V))
      (SETQ V (CDR V))
      (GO LAB))) 
(PUT 'TRI_ASSERTL 'NUMBER-OF-ARGS 1) 
(PUT 'TRI_ASSERTL 'DEFINED-ON-LINE '657) 
(PUT 'TRI_ASSERTL 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'TRI_ASSERTL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'TRI_ASSERTL 'INLINE
      '(LAMBDA (L)
         (PROG (V)
           (SETQ V L)
          LAB
           (COND ((NULL V) (RETURN NIL)))
           ((LAMBDA (V) (PUT (CAR V) 'TEXNAME (CADR V))) (CAR V))
           (SETQ V (CDR V))
           (GO LAB)))) 
(DE TRI_RETRACT (NAME) (PUT NAME 'TEXNAME NIL)) 
(PUT 'TRI_RETRACT 'NUMBER-OF-ARGS 1) 
(PUT 'TRI_RETRACT 'DEFINED-ON-LINE '658) 
(PUT 'TRI_RETRACT 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'TRI_RETRACT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'TRI_RETRACT 'INLINE '(LAMBDA (NAME) (PUT NAME 'TEXNAME NIL))) 
(DE TRI_RETRACTL (L)
    (PROG (V)
      (SETQ V L)
     LAB
      (COND ((NULL V) (RETURN NIL)))
      ((LAMBDA (V) (PUT (CAR V) 'TEXNAME NIL)) (CAR V))
      (SETQ V (CDR V))
      (GO LAB))) 
(PUT 'TRI_RETRACTL 'NUMBER-OF-ARGS 1) 
(PUT 'TRI_RETRACTL 'DEFINED-ON-LINE '659) 
(PUT 'TRI_RETRACTL 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'TRI_RETRACTL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'TRI_RETRACTL 'INLINE
      '(LAMBDA (L)
         (PROG (V)
           (SETQ V L)
          LAB
           (COND ((NULL V) (RETURN NIL)))
           ((LAMBDA (V) (PUT (CAR V) 'TEXNAME NIL)) (CAR V))
           (SETQ V (CDR V))
           (GO LAB)))) 
(DE TRI_GETTEXITEM (A) (OR (GET A 'TEXNAME) (AND (GET A 'CLASS) A))) 
(PUT 'TRI_GETTEXITEM 'NUMBER-OF-ARGS 1) 
(PUT 'TRI_GETTEXITEM 'DEFINED-ON-LINE '660) 
(PUT 'TRI_GETTEXITEM 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'TRI_GETTEXITEM 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'TRI_GETTEXITEM 'INLINE
      '(LAMBDA (A) (OR (GET A 'TEXNAME) (AND (GET A 'CLASS) A)))) 
(PUT 'TEXITEM 'STAT 'RLIS) 
(PUT 'TEXITEM 'NUMBER-OF-ARGS 1) 
(PUT 'TEXITEM 'DEFINED-ON-LINE '664) 
(PUT 'TEXITEM 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'TEXITEM 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE TEXITEM (ARGLIST)
    (PROG (X OK ITEM CLASS TAG)
      (COND
       ((NEQ (LENGTH ARGLIST) 3)
        (REDERR "Usage: TeXitem(item,class,width-list);")))
      (SETQ ITEM (CAR ARGLIST))
      (SETQ CLASS (CADR ARGLIST))
      (SETQ TAG (CADDR ARGLIST))
      (SETQ OK (MEMQ CLASS '(ORD BIN REL PCT OPN CLO LOP)))
      (COND ((NOT OK) (PROGN (PRIN2 "% illegal item class ") (PRINT CLASS))))
      (COND ((ATOM TAG) (SETQ OK NIL))
            (T
             (PROGN
              (COND ((EQUAL (CAR TAG) 'LIST) (SETQ TAG (CDR TAG))))
              (PROG (X)
                (SETQ X TAG)
               LAB
                (COND ((NULL X) (RETURN NIL)))
                ((LAMBDA (X) (COND ((NOT (NUMBERP X)) (SETQ OK NIL)))) (CAR X))
                (SETQ X (CDR X))
                (GO LAB)))))
      (COND ((NOT OK) (PROGN (PRIN2 "% illegal width tag ") (PRINT TAG))))
      (COND
       (OK
        (PROGN
         (SETQ ITEM (INTERN ITEM))
         (PUT ITEM 'CLASS CLASS)
         (PUT ITEM 'TEXTAG TAG))))
      (PRIN2 "% Item ")
      (PRIN2 ITEM)
      (COND ((NOT OK) (PRIN2 "not ")))
      (PRIN2 " added")
      (TERPRI)
      (RETURN NIL))) 
(PUT 'MAKEITEMS 'NUMBER-OF-ARGS 1) 
(PUT 'MAKEITEMS 'DEFINED-ON-LINE '684) 
(PUT 'MAKEITEMS 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'MAKEITEMS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MAKEITEMS (L)
    (PROG (W)
      (SETQ W L)
     LAB
      (COND ((NULL W) (RETURN NIL)))
      ((LAMBDA (W)
         (PROG (IW)
           (SETQ IW (INTERN (CAR W)))
           (PUT IW 'CLASS (CADR W))
           (PUT IW 'TEXTAG (CADDR W))
           (PROG (V)
             (SETQ V (CDDDR W))
            LAB
             (COND ((NULL V) (RETURN NIL)))
             ((LAMBDA (V) (PUT V 'TEXNAME IW)) (CAR V))
             (SETQ V (CDR V))
             (GO LAB))))
       (CAR W))
      (SETQ W (CDR W))
      (GO LAB))) 
(FLUID '(TEXUNKNOWNCOUNTER*)) 
(SETQ TEXUNKNOWNCOUNTER* 0) 
(PUT 'UNKNOWNITEM 'NUMBER-OF-ARGS 1) 
(PUT 'UNKNOWNITEM 'DEFINED-ON-LINE '695) 
(PUT 'UNKNOWNITEM 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'UNKNOWNITEM 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE UNKNOWNITEM (A)
    (PROGN
     (SETQ TEXUNKNOWNCOUNTER* (PLUS TEXUNKNOWNCOUNTER* 1))
     (PRIN2 "% non-fatal error: unknown atom ")
     (PRIN2 A)
     (PRIN2 " replaced by ?_{")
     (PRIN2 TEXUNKNOWNCOUNTER*)
     (PRIN2 "}")
     (TERPRI)
     (CONS '? (CONS '_{ (NCONC (EXPLODE TEXUNKNOWNCOUNTER*) (LIST '})))))) 
(PUT 'TEXEXPLODE 'NUMBER-OF-ARGS 1) 
(PUT 'TEXEXPLODE 'DEFINED-ON-LINE '703) 
(PUT 'TEXEXPLODE 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'TEXEXPLODE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE TEXEXPLODE (A)
    (PROG (B)
      (SETQ B
              (COND
               ((AND A (ATOM A))
                (OR (OR (GET A 'TEXNAME) (AND (GET A 'CLASS) A))
                    (COND ((NUMBERP A) (TEXCOLLECT (EXPLODE A)))
                          ((STRINGP A) (STRCOLLECT (EXPLODE2 A)))
                          (T (TEXEXPLIST (TEXCOLLECT (EXPLODE2 A)))))))))
      (SETQ B (COND ((NULL B) (LIST BLANK)) ((NOT (ATOM B)) B) (T (LIST B))))
      (RETURN B))) 
(PUT 'TEXCOLLECT 'NUMBER-OF-ARGS 1) 
(PUT 'TEXCOLLECT 'DEFINED-ON-LINE '714) 
(PUT 'TEXCOLLECT 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'TEXCOLLECT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE TEXCOLLECT (L)
    (PROG (EL FORALL-RESULT FORALL-ENDPTR)
      (SETQ EL L)
     STARTOVER
      (COND ((NULL EL) (RETURN NIL)))
      (SETQ FORALL-RESULT
              ((LAMBDA (EL)
                 (COND
                  ((NULL (OR (GET EL 'TEXNAME) (AND (GET EL 'CLASS) EL)))
                   (UNKNOWNITEM EL))
                  (T
                   (CONS (OR (GET EL 'TEXNAME) (AND (GET EL 'CLASS) EL))
                         NIL))))
               (CAR EL)))
      (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
      (SETQ EL (CDR EL))
      (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
     LOOPLABEL
      (COND ((NULL EL) (RETURN FORALL-RESULT)))
      (RPLACD FORALL-ENDPTR
              ((LAMBDA (EL)
                 (COND
                  ((NULL (OR (GET EL 'TEXNAME) (AND (GET EL 'CLASS) EL)))
                   (UNKNOWNITEM EL))
                  (T
                   (CONS (OR (GET EL 'TEXNAME) (AND (GET EL 'CLASS) EL))
                         NIL))))
               (CAR EL)))
      (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
      (SETQ EL (CDR EL))
      (GO LOOPLABEL))) 
(DE STRTEXITEM (E)
    (COND ((EQUAL E BLANK) (LIST '|\\ |)) ((EQUAL E '|	|) (LIST '|\\ |))
          ((LITER E) (LIST E))
          ((OR (GET E 'TEXNAME) (AND (GET E 'CLASS) E))
           (LIST (OR (GET E 'TEXNAME) (AND (GET E 'CLASS) E))))
          (T (UNKNOWNITEM E)))) 
(PUT 'STRTEXITEM 'NUMBER-OF-ARGS 1) 
(PUT 'STRTEXITEM 'DEFINED-ON-LINE '719) 
(PUT 'STRTEXITEM 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'STRTEXITEM 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'STRTEXITEM 'INLINE
      '(LAMBDA (E)
         (COND ((EQUAL E BLANK) (LIST '|\\ |)) ((EQUAL E '|	|) (LIST '|\\ |))
               ((LITER E) (LIST E))
               ((OR (GET E 'TEXNAME) (AND (GET E 'CLASS) E))
                (LIST (OR (GET E 'TEXNAME) (AND (GET E 'CLASS) E))))
               (T (UNKNOWNITEM E))))) 
(PUT 'STRCOLLECT 'NUMBER-OF-ARGS 1) 
(PUT 'STRCOLLECT 'DEFINED-ON-LINE '726) 
(PUT 'STRCOLLECT 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'STRCOLLECT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE STRCOLLECT (L)
    (PROG (EL FORALL-RESULT FORALL-ENDPTR)
      (SETQ EL L)
     STARTOVER
      (COND ((NULL EL) (RETURN NIL)))
      (SETQ FORALL-RESULT
              ((LAMBDA (EL)
                 (COND ((EQUAL EL BLANK) (LIST '|\\ |))
                       ((EQUAL EL '|	|) (LIST '|\\ |)) ((LITER EL) (LIST EL))
                       ((OR (GET EL 'TEXNAME) (AND (GET EL 'CLASS) EL))
                        (LIST (OR (GET EL 'TEXNAME) (AND (GET EL 'CLASS) EL))))
                       (T (UNKNOWNITEM EL))))
               (CAR EL)))
      (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
      (SETQ EL (CDR EL))
      (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
     LOOPLABEL
      (COND ((NULL EL) (RETURN FORALL-RESULT)))
      (RPLACD FORALL-ENDPTR
              ((LAMBDA (EL)
                 (COND ((EQUAL EL BLANK) (LIST '|\\ |))
                       ((EQUAL EL '|	|) (LIST '|\\ |)) ((LITER EL) (LIST EL))
                       ((OR (GET EL 'TEXNAME) (AND (GET EL 'CLASS) EL))
                        (LIST (OR (GET EL 'TEXNAME) (AND (GET EL 'CLASS) EL))))
                       (T (UNKNOWNITEM EL))))
               (CAR EL)))
      (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
      (SETQ EL (CDR EL))
      (GO LOOPLABEL))) 
(PUT 'TEXEXPLIST 'NUMBER-OF-ARGS 1) 
(PUT 'TEXEXPLIST 'DEFINED-ON-LINE '729) 
(PUT 'TEXEXPLIST 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'TEXEXPLIST 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE TEXEXPLIST (R)
    (PROG (V)
      (SETQ V NIL)
      (PROG (RL)
        (SETQ RL R)
       LAB
        (COND ((NULL RL) (RETURN NIL)))
        (COND ((AND (DIGIT (CAR RL)) (NOT V)) (SETQ V RL))
              ((AND V (NOT (DIGIT (CAR RL)))) (SETQ V NIL)))
        (SETQ RL (CDR RL))
        (GO LAB))
      (COND
       (V
        (PROGN
         (RPLACD V (CONS (CAR V) (CDR V)))
         (RPLACA V '_{)
         (NCONC R (CONS '} NIL)))))
      (RETURN R))) 
(MAKEITEMS
 '((| | INN DMY) ({ INN BEG) (^{ INN SUP) (_{ INN SUB) ({}^{ INN SUP)
   ({}_{ INN SUB) (}{ INN SEP) (}^{ INN ESP) (}_{ INN ESB) (} INN END)
   (|\\FRAC{| INN FRC RECIP QUOTIENT) (|\\SQRT{| INN FRC SQRT)
   (|\\PMATRIX{| INN MAT MAT) (& INN TAB) (|\\CR | INN CR) (|\\NL | INN CR)
   (|\\(| OPN (327680 276707 241208)) (|\\)| CLO (327680 276707 241208))
   (|\\{| OPN (327680 276707 241208)) (|\\}| CLO (327680 276707 241208))
   (|\\[| OPN (0)) (|\\]| CLO (0)) (|\\<| OPN (254863 212082 195700))
   (|\\>| CLO (254863 212082 195700)) (|\\,| ORD (80960))
   (|\\QUAD | REL (655360)) (| | ORD (0)) (|\\RM | ORD (0)) (|\\IT | ORD (0))
   (|\\BF | ORD (0)) (|\\HBOX | ORD (0)) (! ORD (182045 148367 131984))
   (? ORD (309476 247127 211630)) (|\\LBRACE | ORD (327681 268516 241211) {)
   (|\\RBRACE | ORD (327681 268516 241211) })
   (|\\LBRACK | ORD (182045 148367 131984) [)
   (|\\RBRACK | ORD (182045 148367 131984) ])
   (|\\BACKSLASH | ORD (327681 268516 241211) |\\|)
   (|\\%| ORD (546135 430537 359544) %) (|\\#| ORD (546135 430537 359544) |#|)
   (|\\&| ORD (509726 402320 336788) &) (@ ORD (509726 402320 336788))
   (|\\_| ORD (235930) _) (|\\$| ORD (327681 261235 223008) $)
   (|;| ORD (182045 148367 131984)) (|:| ORD (182045 148367 131984))
   (|.| ORD (182045 148367 131984)) (|,| ORD (182045 148367 131984))
   (|\|| ORD (182045 148367 131984)) (|'| ORD (183865 177267))
   (|`| ORD (182045 148367 131984)) (|\\ | ORD (218453))
   (|\\gAMMA | ORD (394126 317121 266467))
   (|\\dELTA | ORD (546133 451470 377742))
   (|\\tHETA | ORD (481689 395400 331866))
   (|\\lAMBDA | ORD (418702 346612 293546))
   (|\\xI | ORD (447374 366819 309020)) (|\\pI | ORD (553870 446190 368185))
   (|\\sIGMA | ORD (511090 417791 348842))
   (|\\uPSILON | ORD (382293 320398 275342))
   (|\\pHI | ORD (436906 364088 309475)) (|\\pSI | ORD (419430 354622 304150))
   (|\\oMEGA| ORD (461596 382217 322806))
   (|\\ALPHA | ORD (419233 350253 299280))
   (|\\BETA | ORD (370688 303376 259231))
   (|\\GAMMA | ORD (353318 296277 256227))
   (|\\DELTA | ORD (273066 229467 203070))
   (|\\EPSILON | ORD (266012 222822 197791))
   (|\\ZETA | ORD (223686 195060 178221)) (|\\ETA | ORD (352407 300373 261688))
   (|\\THETA | ORD (298553 247580 216177))
   (|\\IOTA | ORD (231955 198883 180224))
   (|\\KAPPA | ORD (377590 315392 271246))
   (|\\LAMBDA | ORD (382293 320398 275342))
   (|\\MU | ORD (394885 326314 278528)) (|\\NU | ORD (341940 283534 244849))
   (|\\XI | ORD (327680 276707 241208)) (|\\PI | ORD (370293 312456 270222))
   (|\\RHO | ORD (329728 269699 232379))
   (|\\SIGMA | ORD (361737 300646 258776))
   (|\\TAU | ORD (250083 220910 200430))
   (|\\UPSILON | ORD (354076 299008 259413))
   (|\\PHI | ORD (390485 322764 275888)) (|\\CHI | ORD (410055 334506 283534))
   (|\\PSI | ORD (426894 357262 304924))
   (|\\OMEGA | ORD (407931 339968 290360))
   (|\\VAREPSILON | ORD (312433 358776 225097))
   (|\\VARTHETA | ORD (388513 326997 281713))
   (|\\VARPI | ORD (504945 424800 359719))
   (|\\VARRHO | ORD (329728 369699 232379))
   (|\\VARSIGMA | ORD (312433 258776 225097))
   (|\\VARPHI | ORD (465123 383749 323675)) (|0| ORD (327680 276707 241208))
   (|1| ORD (327680 276707 241208)) (|2| ORD (327680 276707 241208))
   (|3| ORD (327680 276707 241208)) (|4| ORD (327680 276707 241208))
   (|5| ORD (327680 276707 241208)) (|6| ORD (327680 276707 241208))
   (|7| ORD (327680 276707 241208)) (|8| ORD (327680 276707 241208))
   (|9| ORD (327680 276707 241208)) (|.| PCT (182044 160198 150186) CONS)
   (|,| REL (182044 160198 150186)) (|\\CO | REL (182044 160198 150186))
   (/ BIN (327680 262143 204800))
   (|\\PARTIAL | ORD (384341 314982 268105) PARTDF DF)
   (|a| ORD (491520 404866 339057)) (|b| ORD (497095 406550 339569))
   (|c| ORD (542583 439273 363451)) (|d| ORD (542583 439273 363451))
   (|e| ORD (468400 387026 326360)) (|f| ORD (412330 331684 277845))
   (|g| ORD (515276 418884 348660)) (|h| ORD (544768 439409 363520))
   (|i| ORD (288085 236475 204913)) (|j| ORD (371825 302512 257706))
   (|k| ORD (556373 450104 371598)) (|l| ORD (446008 369914 312888))
   (|m| ORD (635790 512227 420408)) (|n| ORD (526563 424846 352142))
   (|o| ORD (499893 409964 343244)) (|p| ORD (420750 341242 286606))
   (|q| ORD (518098 424527 354622)) (|r| ORD (482417 399041 335644))
   (|s| ORD (392760 323128 274887)) (|t| ORD (382976 318122 272270))
   (|u| ORD (447465 366409 309179)) (|v| ORD (375011 304014 260266))
   (|w| ORD (577991 469310 389973)) (|x| ORD (533845 433811 359651))
   (|y| ORD (388210 317485 270506)) (|z| ORD (429170 352256 397642))
   (A ORD (346415 291999 253770)) (B ORD (281258 235383 207621))
   (C ORD (283610 240571 212810)) (D ORD (341105 277890 242392))
   (E ORD (283610 240571 212810)) (F ORD (320853 260778 224369))
   (G ORD (300980 247580 215995)) (H ORD (377590 315392 271246))
   (I ORD (231500 191601 174762)) (J ORD (238933 198883 177493))
   (K ORD (341181 296265 248490)) (L ORD (195546 169756 157468))
   (M ORD (575411 479687 402318)) (N ORD (393367 334051 288540))
   (O ORD (317667 264510 230377)) (P ORD (329728 277435 242392))
   (Q ORD (292560 245577 215995)) (R ORD (277466 235292 208668))
   (S ORD (307200 253041 219818)) (T ORD (234837 204799 186595))
   (U ORD (375163 319487 277162)) (V ORD (317667 269881 236657))
   (W ORD (463303 386389 327680)) (X ORD (361813 296732 253951))
   (Y ORD (321308 273066 239388)) (Z ORD (304772 257137 225735))
   (+ BIN (509724 422343 354986) PLUS)
   (- BIN (509724 422343 354986) DIFFERENCE MINUS)
   (* ORD (509724 422343 354986) HODGE) (|"| ORD (509724 422343 354986))
   (|\\CDOT | BIN (182044 160198 150186) TIMES)
   (= REL (509724 422343 354986) EQ EQUAL)
   (|:=| REL (691771 550687 468772) SETQ)
   (|\\SUM | LOP (1000000 700000 500000) SUM)
   (|\\PROD | LOP (1000000 700000 500000) PROD)
   (|\\INT | LOP (1000000 700000 500000) INT)
   (|\\LIM | ORD (910221 771866 678114) LIMIT LIMIT+ LIMIT-)
   (|\\SIN | ORD (804635 687398 612123) SIN)
   (|\\COS | ORD (877454 745653 657634) COS)
   (|\\TAN | ORD (946630 800994 700869) TAN)
   (|\\LN | ORD (700000 600000 500000) LOG)
   (|\\EXP | ORD (1001243 844685 735003) EXP)
   (|\\ARCTAN | ORD (1824539 1543734 1356227) ATAN)
   (|\\WEDGE | ORD (436908 353167 309480) WEDGE ^)
   (|\\BACKSLASH | ORD (327681 268516 241211) |\\| SETDIFF)
   (|\\D | ORD (364090)) (|\\LAND | BIN (436908 353167 309480) AND)
   (|\\LOR | BIN (436908 353167 309480) OR)
   (|\\LNOT | ORD (436908 353167 309480) NOT)
   (|\\CAP | BIN (436908 353167 309480) INTERSECTION)
   (|\\CUP | BIN (436908 353167 309480) UNION)
   (|\\IN | REL (436908 353167 309480) MEMBER)
   (|\\TO | REL (655361 522469 446015))
   (|\\UPARROW | REL (327681 268516 241211))
   (|\\DOWNARROW | REL (327681 268516 241211))
   (< REL (509726 409601 354991) LESSP) (> REL (509726 409601 354991) GREATERP)
   (|\\LEQ | REL (509726 409601 354991) LEQ)
   (|\\GEQ | REL (509726 409601 354991) GEQ)
   (|\\NEQ | REL (509726 402230 336788) NEQ)
   (|\\MID | REL (182045 155648 150188) WHEN)
   (|\\FORALL | ORD (364090 296733 263968) ~)
   (|\\rIGHTARROW | REL (655361 522469 446015) REPLACEBY)
   (|(| ORD (254863 204801 177495)) (|)| ORD (254863 204801 177495))
   (|\\INFTY | ORD (655361 522469 446015) INFINITY)
   (|\\CDOT | ORD (109224 89505 80403) TIMES)
   (|\\ASIN | ORD (1132319 906677 780527) ASIN)
   (|\\ACOS | ORD (1205136 963111 826038) ACOS)
   (|\\ATAN | ORD (1274315 1016723 869275) ATAN)
   (|\\aLPHA | ORD (491521 386847 321314))
   (|\\bETA | ORD (464215 366366 306295))
   (|\\ePSILON | ORD (446010 352257 294916))
   (|\\zETA | ORD (400498 317669 268520)) (|\\eTA | ORD (491521 386847 321314))
   (|\\iOTA | ORD (236658 189328 162021))
   (|\\kAPPA | ORD (509726 400956 332691)) (|\\mU | ORD (600748 471498 389581))
   (|\\nU | ORD (491521 386847 321314)) (|\\rHO | ORD (446010 352257 294916))
   (|\\tAU | ORD (473316 374103 314031)) (|\\cHI | ORD (491521 386847 321314))
   (|\\oMEGA | ORD (473316 374103 314031)))) 
(DEFLIST '((TEXASSERTSET RLIS) (TEXRETRACTSET RLIS)) 'STAT) 
(PUT 'TEXASSERTSET 'NUMBER-OF-ARGS 1) 
(PUT 'TEXASSERTSET 'DEFINED-ON-LINE '982) 
(PUT 'TEXASSERTSET 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'TEXASSERTSET 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE TEXASSERTSET (ARGLIST)
    (COND ((NEQ (LENGTH ARGLIST) 1) (REDERR "Usage: TeXassertset(setname);"))
          (T
           (PROG (SYM)
             (SETQ SYM (CAR ARGLIST))
             (COND
              ((GET 'TEXSYM SYM)
               (PROGN
                (PROG (V)
                  (SETQ V (GET 'TEXSYM SYM))
                 LAB
                  (COND ((NULL V) (RETURN NIL)))
                  ((LAMBDA (V) (PUT (CAR V) 'TEXNAME (CADR V))) (CAR V))
                  (SETQ V (CDR V))
                  (GO LAB))
                (PRIN2 "% set ")
                (PRIN2 SYM)
                (PRIN2 " asserted")
                (TERPRI)))
              (T (PROGN (PRIN2 "% no such set") (TERPRI)))))))) 
(PUT 'TEXRETRACTSET 'NUMBER-OF-ARGS 1) 
(PUT 'TEXRETRACTSET 'DEFINED-ON-LINE '991) 
(PUT 'TEXRETRACTSET 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'TEXRETRACTSET 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE TEXRETRACTSET (ARGLIST)
    (COND ((NEQ (LENGTH ARGLIST) 1) (REDERR "Usage: TeXretractset(setname);"))
          (T
           (PROG (SYM)
             (SETQ SYM (CAR ARGLIST))
             (COND
              ((GET 'TEXSYM SYM)
               (PROGN
                (PROG (V)
                  (SETQ V (GET 'TEXSYM SYM))
                 LAB
                  (COND ((NULL V) (RETURN NIL)))
                  ((LAMBDA (V) (PUT (CAR V) 'TEXNAME NIL)) (CAR V))
                  (SETQ V (CDR V))
                  (GO LAB))
                (PRIN2 "% set ")
                (PRIN2 SYM)
                (PRIN2 " retracted")
                (TERPRI)))
              (T (PROGN (PRIN2 "% no such set") (TERPRI)))))))) 
(PUT 'TRIMAKESET 'NUMBER-OF-ARGS 2) 
(PUT 'TRIMAKESET 'DEFINED-ON-LINE '1000) 
(PUT 'TRIMAKESET 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'TRIMAKESET 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE TRIMAKESET (SYM A_SET) (PROGN (PUT 'TEXSYM SYM A_SET) NIL)) 
(TRIMAKESET 'GREEK
 '((ALPHA |\\ALPHA |) (BETA |\\BETA |) (GAMMA |\\GAMMA |) (DELTA |\\DELTA |)
   (EPSILON |\\EPSILON |) (ZETA |\\ZETA |) (ETA |\\ETA |) (THETA |\\THETA |)
   (IOTA |\\IOTA |) (KAPPA |\\KAPPA |) (LAMBDA |\\LAMBDA |) (MU |\\MU |)
   (NU |\\NU |) (XI |\\XI |) (PI |\\PI |) (RHO |\\RHO |) (SIGMA |\\SIGMA |)
   (TAU |\\TAU |) (UPSILON |\\UPSILON |) (PHI |\\PHI |) (CHI |\\CHI |)
   (PSI |\\PSI |) (OMEGA |\\OMEGA |))) 
(TRIMAKESET 'LOWERCASE
 '((A A) (B B) (C C) (D D) (E E) (F F) (G G) (H H) (I I) (J J) (K K) (L L)
   (M M) (N N) (O O) (P P) (Q Q) (R R) (S S) (T T) (U U) (V V) (W W) (X X)
   (Y Y) (Z Z))) 
(TRIMAKESET '|gREEK|
 '((|aLPHA| |\\aLPHA |) (|bETA| |\\bETA |) (|gAMMA| |\\gAMMA |)
   (|dELTA| |\\dELTA |) (|ePSILON| |\\ePSILON |) (|zETA| |\\zETA |)
   (|eTA| |\\eTA |) (|tHETA| |\\tHETA |) (|iOTA| |\\iOTA |)
   (|kAPPA| |\\kAPPA |) (|lAMBDA| |\\lAMBDA |) (|mU| |\\mU |) (|nU| |\\nU |)
   (|xI| |\\xI |) (|pI| |\\pI |) (|rHO| |\\rHO |) (|sIGMA| |\\sIGMA |)
   (|tAU| |\\tAU |) (|uPSILON| |\\uPSILON |) (|pHI| |\\pHI |) (|cHI| |\\cHI |)
   (|pSI| |\\pSI |) (|oMEGA| |\\oMEGA |))) 
(TRIMAKESET '|uPPERCASE|
 '((|a| |a|) (|b| |b|) (|c| |c|) (|d| |d|) (|e| |e|) (|f| |f|) (|g| |g|)
   (|h| |h|) (|i| |i|) (|j| |j|) (|k| |k|) (|l| |l|) (|m| |m|) (|n| |n|)
   (|o| |o|) (|p| |p|) (|q| |q|) (|r| |r|) (|s| |s|) (|t| |t|) (|u| |u|)
   (|v| |v|) (|w| |w|) (|x| |x|) (|y| |y|) (|z| |z|))) 
(PUT 'MAKEGLUE 'NUMBER-OF-ARGS 1) 
(PUT 'MAKEGLUE 'DEFINED-ON-LINE '1087) 
(PUT 'MAKEGLUE 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'MAKEGLUE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MAKEGLUE (MX)
    (COND ((NULL MX) NIL)
          (T
           (PROG (ID1 ID2 ROW COL)
             (SETQ ROW (CDR MX))
             (SETQ ID1 (CAR MX))
             (PROG ()
              WHILELABEL
               (COND ((NOT ROW) (RETURN NIL)))
               (PROGN
                (SETQ ID2 (CAR MX))
                (SETQ COL (CAR ROW))
                (PROG ()
                 WHILELABEL
                  (COND ((NOT COL) (RETURN NIL)))
                  (PROGN
                   (PUT (CAR ID1) (CAR ID2) (CAR COL))
                   (SETQ COL (CDR COL))
                   (SETQ ID2 (CDR ID2)))
                  (GO WHILELABEL))
                (SETQ ROW (CDR ROW))
                (SETQ ID1 (CDR ID1)))
               (GO WHILELABEL)))))) 
(MAKEGLUE
 '((ORD LOP BIN REL OPN CLO PCT INN) (0 1 -2 -3 0 0 0 0) (1 1 0 -3 0 0 0 -1)
   (-2 -2 0 0 -2 0 0 -2) (-3 -3 0 0 -3 0 0 -3) (0 0 0 0 0 0 0 0)
   (0 1 -2 -3 0 0 0 0) (-1 -1 0 -1 -1 -1 -1 -1) (0 1 -2 -3 -1 0 -1 0))) 
(DE KINDOF (ITEM) (GET ITEM 'TEXTAG)) 
(PUT 'KINDOF 'NUMBER-OF-ARGS 1) 
(PUT 'KINDOF 'DEFINED-ON-LINE '1114) 
(PUT 'KINDOF 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'KINDOF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'KINDOF 'INLINE '(LAMBDA (ITEM) (GET ITEM 'TEXTAG))) 
(DE CLASSOF (ITEM) (GET ITEM 'CLASS)) 
(PUT 'CLASSOF 'NUMBER-OF-ARGS 1) 
(PUT 'CLASSOF 'DEFINED-ON-LINE '1115) 
(PUT 'CLASSOF 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'CLASSOF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'CLASSOF 'INLINE '(LAMBDA (ITEM) (GET ITEM 'CLASS))) 
(DE GROUPBEG (KIND) (MEMQ KIND '(BEG SUP SUB FRC MAT))) 
(PUT 'GROUPBEG 'NUMBER-OF-ARGS 1) 
(PUT 'GROUPBEG 'DEFINED-ON-LINE '1117) 
(PUT 'GROUPBEG 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'GROUPBEG 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'GROUPBEG 'INLINE '(LAMBDA (KIND) (MEMQ KIND '(BEG SUP SUB FRC MAT)))) 
(DE GROUPEND (KIND) (EQUAL KIND 'END)) 
(PUT 'GROUPEND 'NUMBER-OF-ARGS 1) 
(PUT 'GROUPEND 'DEFINED-ON-LINE '1119) 
(PUT 'GROUPEND 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'GROUPEND 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'GROUPEND 'INLINE '(LAMBDA (KIND) (EQUAL KIND 'END))) 
(DE GROUPHS (KIND) (EQUAL KIND 'TAB)) 
(PUT 'GROUPHS 'NUMBER-OF-ARGS 1) 
(PUT 'GROUPHS 'DEFINED-ON-LINE '1120) 
(PUT 'GROUPHS 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'GROUPHS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'GROUPHS 'INLINE '(LAMBDA (KIND) (EQUAL KIND 'TAB))) 
(DE GROUPVS (KIND) (MEMQ KIND '(ESP ESB SEP CR))) 
(PUT 'GROUPVS 'NUMBER-OF-ARGS 1) 
(PUT 'GROUPVS 'DEFINED-ON-LINE '1121) 
(PUT 'GROUPVS 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'GROUPVS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'GROUPVS 'INLINE '(LAMBDA (KIND) (MEMQ KIND '(ESP ESB SEP CR)))) 
(PUT 'INTERGLUE 'NUMBER-OF-ARGS 4) 
(PUT 'INTERGLUE 'DEFINED-ON-LINE '1124) 
(PUT 'INTERGLUE 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'INTERGLUE 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE INTERGLUE (LEFT RIGHT DEPTH NESTING)
    (COND
     ((OR (NULL LEFT) (NULL RIGHT) (NOT (ATOM LEFT)) (NOT (ATOM RIGHT))) NIL)
     (T
      (PROG (GLUE LC RC)
        (SETQ LC (GET LEFT 'CLASS))
        (SETQ RC (GET RIGHT 'CLASS))
        (SETQ GLUE (GET LC RC))
        (COND ((NULL GLUE) (RETURN NIL)))
        (COND ((EQUAL LEFT '|\\CO |) (RETURN (LIST 0 (MINUS 10000)))))
        (COND
         ((LESSP GLUE 0)
          (COND ((GREATERP DEPTH 0) (RETURN NIL))
                (T (SETQ GLUE (MINUS GLUE))))))
        (COND
         ((EQUAL GLUE 1) (RETURN (LIST 80960 (PLUS (TIMES NESTING 10) 20))))
         ((EQUAL GLUE 2)
          (PROGN
           (COND ((OR (EQUAL LEFT '+) (EQUAL LEFT '-)) (RETURN NIL)))
           (COND
            ((EQUAL RIGHT '+)
             (RETURN (LIST 163840 (DIFFERENCE (TIMES NESTING 30) 390)))))
           (COND
            ((AND (EQUAL RIGHT '-) (OR (EQUAL LC 'ORD) (EQUAL LC 'CLO)))
             (RETURN (LIST 163840 (DIFFERENCE (TIMES NESTING 30) 210)))))
           (COND
            ((EQUAL LEFT '|\\CDOT |)
             (RETURN (LIST 163840 (PLUS (TIMES NESTING 10) 50)))))
           (COND ((EQUAL RIGHT '|\\CDOT |) (RETURN NIL)))
           (RETURN (LIST 163840 (TIMES NESTING 10)))))
         ((EQUAL GLUE 3)
          (RETURN (LIST 655360 (DIFFERENCE (TIMES NESTING 10) 50))))
         (T (RETURN NIL))))))) 
(PUT 'INSERTGLUE 'NUMBER-OF-ARGS 1) 
(PUT 'INSERTGLUE 'DEFINED-ON-LINE '1153) 
(PUT 'INSERTGLUE 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'INSERTGLUE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE INSERTGLUE (TERM)
    (PROG (GLUEITEM SUCC PRED PREV BACKUP DEPTH NESTING)
      (SETQ DEPTH 0)
      (SETQ NESTING 0)
      (SETQ DEPTH (SETQ NESTING 0))
      (SETQ SUCC NIL)
      (SETQ BACKUP TERM)
      (PROG ()
       WHILELABEL
        (COND ((NOT TERM) (RETURN NIL)))
        (PROGN
         (SETQ PRED SUCC)
         (SETQ SUCC (CAR TERM))
         (SETQ GLUEITEM (INTERGLUE PRED SUCC DEPTH NESTING))
         (COND (GLUEITEM (RPLACD PREV (CONS GLUEITEM TERM))))
         (SETQ PREV TERM)
         (SETQ TERM (CDR TERM))
         (COND
          ((EQUAL (GET SUCC 'CLASS) 'INN)
           (PROGN
            (COND
             ((AND (MEMQ (GET SUCC 'TEXTAG) '(BEG SUP SUB FRC MAT))
                   (NOT (AND (EQUAL (GET SUCC 'TEXTAG) 'FRC) (EQUAL DEPTH 0))))
              (SETQ DEPTH (PLUS DEPTH 1)))
             ((AND (EQUAL (GET SUCC 'TEXTAG) 'END) (GREATERP DEPTH 0))
              (SETQ DEPTH (DIFFERENCE DEPTH 1))))))
          ((EQUAL (GET SUCC 'CLASS) 'OPN) (SETQ NESTING (PLUS NESTING 1)))
          ((EQUAL (GET SUCC 'CLASS) 'CLO)
           (SETQ NESTING (DIFFERENCE NESTING 1)))))
        (GO WHILELABEL))
      (RETURN BACKUP))) 
(PUT 'WIDTH 'NUMBER-OF-ARGS 2) 
(PUT 'WIDTH 'DEFINED-ON-LINE '1217) 
(PUT 'WIDTH 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'WIDTH 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE WIDTH (ITEM STYLE)
    (PROG (TAG)
      (SETQ TAG (GET ITEM 'TEXTAG))
      (COND ((NULL TAG) (TRI-ERROR (LIST "cannot find item " ITEM) 'FATAL)))
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND (GREATERP STYLE 0) (CDR TAG))) (RETURN NIL)))
        (PROGN (SETQ TAG (CDR TAG)) (SETQ STYLE (DIFFERENCE STYLE 1)))
        (GO WHILELABEL))
      (RETURN (OR (CAR TAG) 0)))) 
(DE SP2MM (X) (QUOTIENT X 186468)) 
(PUT 'SP2MM 'NUMBER-OF-ARGS 1) 
(PUT 'SP2MM 'DEFINED-ON-LINE '1225) 
(PUT 'SP2MM 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'SP2MM 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'SP2MM 'INLINE '(LAMBDA (X) (QUOTIENT X 186468))) 
(PUT 'SETTOLERANCE 'NUMBER-OF-ARGS 1) 
(PUT 'SETTOLERANCE 'DEFINED-ON-LINE '1227) 
(PUT 'SETTOLERANCE 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'SETTOLERANCE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SETTOLERANCE (TOL)
    (PROGN
     (COND ((LESSP TOL 0) (SETQ TOL 0))
           ((GREATERP TOL 10000) (SETQ TOL 10000)))
     (PRIN2 "% \\tolerance ")
     (PRINT TOL)
     (SETQ TOLERANCE* TOL)
     NIL)) 
(PUT 'SETPAGEWIDTH 'NUMBER-OF-ARGS 1) 
(PUT 'SETPAGEWIDTH 'DEFINED-ON-LINE '1231) 
(PUT 'SETPAGEWIDTH 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'SETPAGEWIDTH 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SETPAGEWIDTH (HSIZE)
    (PROGN
     (COND ((GREATERP HSIZE 400) (SETQ HSIZE* HSIZE))
           (T (SETQ HSIZE* (TIMES HSIZE 186468))))
     (PRIN2 "% \\hsize=")
     (PRIN2 (QUOTIENT HSIZE* 186468))
     (PRIN2 "mm")
     (TERPRI)
     (SETQ HSS* (QUOTIENT (FLOAT HSIZE*) 6))
     (SETQ HWW* (QUOTIENT (FLOAT (TIMES 3 HSIZE*)) 4))
     NIL)) 
(PUT 'SETBREAK 'NUMBER-OF-ARGS 2) 
(PUT 'SETBREAK 'DEFINED-ON-LINE '1238) 
(PUT 'SETBREAK 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'SETBREAK 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE SETBREAK (HSIZE TOL) (PROGN (SETTOLERANCE TOL) (SETPAGEWIDTH HSIZE))) 
(PUT 'BADNESS 'NUMBER-OF-ARGS 2) 
(PUT 'BADNESS 'DEFINED-ON-LINE '1241) 
(PUT 'BADNESS 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'BADNESS 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE BADNESS (HLEN IBADNESS)
    (PROG (R)
      (SETQ R (QUOTIENT (ABS (DIFFERENCE HLEN HWW*)) HSS*))
      (RETURN (FIX (MIN 10000.0 (PLUS (TIMES R R R 100.0) IBADNESS)))))) 
(DE ISGLUE (L) (AND (NOT (ATOM L)) (NUMBERP (CAR L)))) 
(PUT 'ISGLUE 'NUMBER-OF-ARGS 1) 
(PUT 'ISGLUE 'DEFINED-ON-LINE '1249) 
(PUT 'ISGLUE 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'ISGLUE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'ISGLUE 'INLINE '(LAMBDA (L) (AND (NOT (ATOM L)) (NUMBERP (CAR L))))) 
(DE ISACTIVE (X) (NOT (NUMBERP X))) 
(PUT 'ISACTIVE 'NUMBER-OF-ARGS 1) 
(PUT 'ISACTIVE 'DEFINED-ON-LINE '1250) 
(PUT 'ISACTIVE 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'ISACTIVE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'ISACTIVE 'INLINE '(LAMBDA (X) (NOT (NUMBERP X)))) 
(DE ISPASSIVE (X) (NUMBERP X)) 
(PUT 'ISPASSIVE 'NUMBER-OF-ARGS 1) 
(PUT 'ISPASSIVE 'DEFINED-ON-LINE '1251) 
(PUT 'ISPASSIVE 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'ISPASSIVE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'ISPASSIVE 'INLINE '(LAMBDA (X) (NUMBERP X))) 
(DE ISDELTA (X) (CDDDR X)) 
(PUT 'ISDELTA 'NUMBER-OF-ARGS 1) 
(PUT 'ISDELTA 'DEFINED-ON-LINE '1252) 
(PUT 'ISDELTA 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'ISDELTA 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'ISDELTA 'INLINE '(LAMBDA (X) (CDDDR X))) 
(DE ADDUP (X) (COND (X (EVAL (CONS 'PLUS X))) (T 0))) 
(PUT 'ADDUP 'NUMBER-OF-ARGS 1) 
(PUT 'ADDUP 'DEFINED-ON-LINE '1253) 
(PUT 'ADDUP 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'ADDUP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'ADDUP 'INLINE '(LAMBDA (X) (COND (X (EVAL (CONS 'PLUS X))) (T 0)))) 
(PUT 'TPUSH 'NUMBER-OF-ARGS 2) 
(PUT 'TPUSH 'DEFINED-ON-LINE '1262) 
(PUT 'TPUSH 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'TPUSH 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(PUTC 'TPUSH 'SMACRO '(LAMBDA (STACK ITEM) (SETQ STACK (CONS ITEM STACK)))) 
(PUT 'TPOP 'NUMBER-OF-ARGS 1) 
(PUT 'TPOP 'DEFINED-ON-LINE '1264) 
(PUT 'TPOP 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'TPOP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'TPOP 'SMACRO
      '(LAMBDA (STACK)
         (COND ((NULL STACK) NIL)
               (T
                (PROG (Z)
                  (SETQ Z (CAR STACK))
                  (SETQ STACK (CDR STACK))
                  (RETURN Z)))))) 
(DE POKE (STACK PTR VAL)
    (COND ((NULL PTR) (SETQ STACK (NCONC STACK (CONS VAL NIL))))
          (T
           (PROGN
            (COND ((GREATERP VAL (CAR PTR)) (RPLACA PTR VAL)))
            (SETQ PTR (CDR PTR)))))) 
(PUT 'POKE 'NUMBER-OF-ARGS 3) 
(PUT 'POKE 'DEFINED-ON-LINE '1268) 
(PUT 'POKE 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'POKE 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(PUTC 'POKE 'INLINE
      '(LAMBDA (STACK PTR VAL)
         (COND ((NULL PTR) (SETQ STACK (NCONC STACK (CONS VAL NIL))))
               (T
                (PROGN
                 (COND ((GREATERP VAL (CAR PTR)) (RPLACA PTR VAL)))
                 (SETQ PTR (CDR PTR))))))) 
(DE CONCATENATE (L)
    (PROG (R)
      (PROG (E)
        (SETQ E L)
       LAB
        (COND ((NULL E) (RETURN NIL)))
        ((LAMBDA (E) (SETQ R (NCONC R (EXPLODE E)))) (CAR E))
        (SETQ E (CDR E))
        (GO LAB))
      (RETURN (COMPRESS R)))) 
(PUT 'CONCATENATE 'NUMBER-OF-ARGS 1) 
(PUT 'CONCATENATE 'DEFINED-ON-LINE '1272) 
(PUT 'CONCATENATE 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'CONCATENATE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'CONCATENATE 'INLINE
      '(LAMBDA (L)
         (PROG (R)
           (PROG (E)
             (SETQ E L)
            LAB
             (COND ((NULL E) (RETURN NIL)))
             ((LAMBDA (E) (SETQ R (NCONC R (EXPLODE E)))) (CAR E))
             (SETQ E (CDR E))
             (GO LAB))
           (RETURN (COMPRESS R))))) 
(PUT 'RESOLVE 'NUMBER-OF-ARGS 1) 
(PUT 'RESOLVE 'DEFINED-ON-LINE '1282) 
(PUT 'RESOLVE 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'RESOLVE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RESOLVE (TERM)
    (PROG (ITEM L M R LFLAG RFLAG DEPTH)
      (SETQ DEPTH 0)
      (SETQ L TERM)
      (SETQ DEPTH 0)
      (SETQ M (SETQ R (SETQ LFLAG (SETQ RFLAG NIL))))
      (SETQ ITEM T)
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND TERM ITEM)) (RETURN NIL)))
        (PROGN
         (SETQ ITEM (CAR TERM))
         (COND
          ((EQUAL (GET ITEM 'CLASS) 'INN)
           (PROGN
            (SETQ ITEM (GET ITEM 'TEXTAG))
            (COND
             ((MEMQ ITEM '(BEG SUP SUB FRC MAT)) (SETQ DEPTH (PLUS DEPTH 1)))
             ((EQUAL ITEM 'END)
              (COND ((EQUAL DEPTH 1) (PROGN (SETQ R TERM) (SETQ ITEM NIL)))
                    (T (SETQ DEPTH (DIFFERENCE DEPTH 1)))))
             ((MEMQ ITEM '(ESP ESB SEP CR))
              (COND ((EQUAL DEPTH 1) (SETQ M TERM)))))))
          ((NOT (EQUAL (GET ITEM 'CLASS) 'ORD))
           (PROGN (COND (M (SETQ RFLAG T)) (T (SETQ LFLAG T))))))
         (SETQ TERM (CDR TERM)))
        (GO WHILELABEL))
      (COND
       ((EQUAL (CAR L) '|\\FRAC{|)
        (PROGN
         (COND
          ((AND LFLAG RFLAG) (SETQ ITEM (LIST '/ (LIST 655360 (MINUS 10000)))))
          (T (SETQ ITEM (LIST '/))))
         (COND (LFLAG (PROGN (RPLACA L '|\\(|) (SETQ ITEM (CONS '|\\)| ITEM))))
               (T (RPLACA L BLANK)))
         (COND (RFLAG (PROGN (RPLACA R '|\\)|) (NCONC ITEM (CONS '|\\(| NIL))))
               (T (RPLACA R BLANK)))
         (RPLACA M (CAR ITEM))
         (SETQ ITEM (CDR ITEM))
         (COND (ITEM (RPLACD M (NCONC ITEM (CDR M)))))))
       ((EQUAL (CAR L) '|\\SQRT{|)
        (PROGN
         (RPLACA L '|\\(|)
         (RPLACA R '|\\)|)
         (RPLACD R
                 (CONS '^{
                       (CONS '|1| (CONS '/ (CONS '|2| (CONS '} (CDR R))))))))))
      (RETURN L))) 
(PUT 'BREAKLIST 'NUMBER-OF-ARGS 1) 
(PUT 'BREAKLIST 'DEFINED-ON-LINE '1331) 
(PUT 'BREAKLIST 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'BREAKLIST 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE BREAKLIST (TERM)
    (PROG (ITEM RESULT KIND VSTACK HSTACK FSTACK PSTACK P FLAG BACKUP DEPTH ACC
           AUX LOPW TOTAL INDENT)
      (SETQ DEPTH 0)
      (SETQ ACC 0)
      (SETQ AUX 0)
      (SETQ LOPW 0)
      (SETQ TOTAL 0)
      (SETQ INDENT 0)
      (SETQ P (SETQ RESULT (SETQ VSTACK (SETQ HSTACK (SETQ FSTACK NIL)))))
      (SETQ BACKUP TERM)
      (SETQ DEPTH (SETQ TOTAL (SETQ ACC (SETQ LOPW (SETQ INDENT 0)))))
      (PROG ()
       WHILELABEL
        (COND ((NOT TERM) (RETURN NIL)))
        (PROGN
         (SETQ ITEM (CAR TERM))
         (SETQ FLAG T)
         (COND
          ((NULL ITEM)
           (TRI-ERROR (LIST "found NIL in term : " BACKUP) 'FATAL)))
         (COND
          ((AND (NOT (ATOM ITEM)) (NUMBERP (CAR ITEM)))
           (COND
            ((LESSP DEPTH 1)
             (PROGN
              (SETQ TOTAL (PLUS TOTAL ACC (CAR ITEM)))
              (NCONC ITEM (CONS INDENT NIL))
              (SETQ RESULT (NCONC RESULT (CONS ACC (CONS ITEM NIL))))
              (SETQ ACC 0)))
            (T (SETQ ACC (PLUS ACC (CAR ITEM))))))
          ((EQUAL (GET ITEM 'CLASS) 'LOP) (SETQ LOPW (WIDTH ITEM DEPTH)))
          ((EQUAL (GET ITEM 'CLASS) 'INN)
           (PROGN
            (SETQ KIND (GET ITEM 'TEXTAG))
            (COND
             ((EQUAL KIND 'FRC)
              (PROGN
               (SETQ FSTACK (CONS TERM FSTACK))
               (SETQ FSTACK (CONS DEPTH FSTACK)))))
            (COND
             ((EQUAL KIND 'END)
              (PROGN
               (SETQ DEPTH (DIFFERENCE DEPTH 1))
               (COND
                ((GREATERP ACC 0)
                 (COND ((NULL P) (SETQ VSTACK (NCONC VSTACK (CONS ACC NIL))))
                       (T
                        (PROGN
                         (COND ((GREATERP ACC (CAR P)) (RPLACA P ACC)))
                         (SETQ P (CDR P)))))))
               (SETQ ACC
                       (COND ((NULL HSTACK) NIL)
                             (T
                              (PROG (Z)
                                (SETQ Z (CAR HSTACK))
                                (SETQ HSTACK (CDR HSTACK))
                                (RETURN Z)))))
               (SETQ AUX (COND (VSTACK (EVAL (CONS 'PLUS VSTACK))) (T 0)))
               (COND
                ((AND FSTACK (EQUAL DEPTH (CAR FSTACK)))
                 (PROGN
                  (COND ((NULL FSTACK) NIL)
                        (T
                         (PROG (Z)
                           (SETQ Z (CAR FSTACK))
                           (SETQ FSTACK (CDR FSTACK))
                           (RETURN Z))))
                  (COND
                   ((GREATERP AUX HWW*)
                    (PROGN
                     (SETQ TERM
                             (RESOLVE
                              (COND ((NULL FSTACK) NIL)
                                    (T
                                     (PROG (Z)
                                       (SETQ Z (CAR FSTACK))
                                       (SETQ FSTACK (CDR FSTACK))
                                       (RETURN Z))))))
                     (SETQ FLAG NIL)))
                   (T
                    (PROGN
                     (COND ((NULL FSTACK) NIL)
                           (T
                            (PROG (Z)
                              (SETQ Z (CAR FSTACK))
                              (SETQ FSTACK (CDR FSTACK))
                              (RETURN Z))))
                     (SETQ ACC (PLUS ACC AUX)))))))
                (T (SETQ ACC (PLUS ACC AUX))))
               (SETQ P
                       (COND ((NULL HSTACK) NIL)
                             (T
                              (PROG (Z)
                                (SETQ Z (CAR HSTACK))
                                (SETQ HSTACK (CDR HSTACK))
                                (RETURN Z)))))
               (SETQ VSTACK
                       (COND ((NULL HSTACK) NIL)
                             (T
                              (PROG (Z)
                                (SETQ Z (CAR HSTACK))
                                (SETQ HSTACK (CDR HSTACK))
                                (RETURN Z)))))))
             ((MEMQ KIND '(BEG SUP SUB FRC MAT))
              (PROGN
               (SETQ DEPTH (PLUS DEPTH 1))
               (SETQ HSTACK (CONS VSTACK HSTACK))
               (SETQ HSTACK (CONS P HSTACK))
               (SETQ HSTACK (CONS ACC HSTACK))
               (SETQ ACC 0)
               (SETQ P (SETQ VSTACK NIL))
               (COND
                ((GREATERP LOPW 0)
                 (COND ((NULL P) (SETQ VSTACK (NCONC VSTACK (CONS LOPW NIL))))
                       (T
                        (PROGN
                         (COND ((GREATERP LOPW (CAR P)) (RPLACA P LOPW)))
                         (SETQ P (CDR P)))))))
               (SETQ LOPW 0)))
             ((EQUAL KIND 'TAB)
              (PROGN
               (COND ((NULL P) (SETQ VSTACK (NCONC VSTACK (CONS ACC NIL))))
                     (T
                      (PROGN
                       (COND ((GREATERP ACC (CAR P)) (RPLACA P ACC)))
                       (SETQ P (CDR P)))))
               (SETQ ACC 0)))
             ((MEMQ KIND '(ESP ESB SEP CR))
              (PROGN
               (COND ((NULL P) (SETQ VSTACK (NCONC VSTACK (CONS ACC NIL))))
                     (T
                      (PROGN
                       (COND ((GREATERP ACC (CAR P)) (RPLACA P ACC)))
                       (SETQ P (CDR P)))))
               (SETQ ACC 0)
               (SETQ P VSTACK))))))
          ((LESSP DEPTH 1)
           (PROGN
            (SETQ AUX (WIDTH ITEM DEPTH))
            (COND
             ((EQUAL (GET ITEM 'CLASS) 'OPN)
              (PROGN
               (SETQ PSTACK (CONS INDENT PSTACK))
               (SETQ INDENT (PLUS TOTAL ACC AUX)))))
            (COND
             ((EQUAL (GET ITEM 'CLASS) 'CLO)
              (SETQ INDENT
                      (OR
                       (COND ((NULL PSTACK) NIL)
                             (T
                              (PROG (Z)
                                (SETQ Z (CAR PSTACK))
                                (SETQ PSTACK (CDR PSTACK))
                                (RETURN Z))))
                       0))))
            (SETQ ACC (PLUS ACC AUX))))
          (T (SETQ ACC (PLUS ACC (WIDTH ITEM DEPTH)))))
         (COND
          ((GREATERP LOPW 0) (PROGN (SETQ ACC (PLUS ACC LOPW)) (SETQ LOPW 0))))
         (COND (FLAG (SETQ TERM (CDR TERM)))))
        (GO WHILELABEL))
      (COND (ACC (SETQ TOTAL (PLUS TOTAL ACC))))
      (COND ((LESSP TOTAL HSIZE*) (RETURN NIL))
            (T
             (RETURN
              (CONS (LIST 0 0 0 0 0 0 0)
                    (NCONC RESULT
                           (CONS ACC
                                 (CONS
                                  (LIST 0 0 TOTAL (MINUS 1) 0 2147483647 0)
                                  NIL))))))))) 
(DE WIDTHOF (DELTANODE) (CAR DELTANODE)) 
(PUT 'WIDTHOF 'NUMBER-OF-ARGS 1) 
(PUT 'WIDTHOF 'DEFINED-ON-LINE '1411) 
(PUT 'WIDTHOF 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'WIDTHOF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'WIDTHOF 'INLINE '(LAMBDA (DELTANODE) (CAR DELTANODE))) 
(DE PENALTYOF (DELTANODE) (CADR DELTANODE)) 
(PUT 'PENALTYOF 'NUMBER-OF-ARGS 1) 
(PUT 'PENALTYOF 'DEFINED-ON-LINE '1412) 
(PUT 'PENALTYOF 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'PENALTYOF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'PENALTYOF 'INLINE '(LAMBDA (DELTANODE) (CADR DELTANODE))) 
(DE TOTALOF (DELTANODE) (CADR DELTANODE)) 
(PUT 'TOTALOF 'NUMBER-OF-ARGS 1) 
(PUT 'TOTALOF 'DEFINED-ON-LINE '1413) 
(PUT 'TOTALOF 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'TOTALOF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'TOTALOF 'INLINE '(LAMBDA (DELTANODE) (CADR DELTANODE))) 
(DE OFFSETOF (DELTANODE) (CADDR DELTANODE)) 
(PUT 'OFFSETOF 'NUMBER-OF-ARGS 1) 
(PUT 'OFFSETOF 'DEFINED-ON-LINE '1414) 
(PUT 'OFFSETOF 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'OFFSETOF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'OFFSETOF 'INLINE '(LAMBDA (DELTANODE) (CADDR DELTANODE))) 
(DE IDOF (DELTANODE) (CADDDR DELTANODE)) 
(PUT 'IDOF 'NUMBER-OF-ARGS 1) 
(PUT 'IDOF 'DEFINED-ON-LINE '1415) 
(PUT 'IDOF 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'IDOF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'IDOF 'INLINE '(LAMBDA (DELTANODE) (CADDDR DELTANODE))) 
(DE PTROF (DELTANODE) (CAR (CDDDDR DELTANODE))) 
(PUT 'PTROF 'NUMBER-OF-ARGS 1) 
(PUT 'PTROF 'DEFINED-ON-LINE '1416) 
(PUT 'PTROF 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'PTROF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'PTROF 'INLINE '(LAMBDA (DELTANODE) (CAR (CDDDDR DELTANODE)))) 
(DE INDENTOF (DELTANODE) (CADDR (CDDDDR DELTANODE))) 
(PUT 'INDENTOF 'NUMBER-OF-ARGS 1) 
(PUT 'INDENTOF 'DEFINED-ON-LINE '1417) 
(PUT 'INDENTOF 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'INDENTOF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'INDENTOF 'INLINE '(LAMBDA (DELTANODE) (CADDR (CDDDDR DELTANODE)))) 
(DE TAILOF (DELTANODE) (CDDDDR DELTANODE)) 
(PUT 'TAILOF 'NUMBER-OF-ARGS 1) 
(PUT 'TAILOF 'DEFINED-ON-LINE '1418) 
(PUT 'TAILOF 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'TAILOF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'TAILOF 'INLINE '(LAMBDA (DELTANODE) (CDDDDR DELTANODE))) 
(PUT 'OFFSETITEM 'NUMBER-OF-ARGS 1) 
(PUT 'OFFSETITEM 'DEFINED-ON-LINE '1420) 
(PUT 'OFFSETITEM 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'OFFSETITEM 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE OFFSETITEM (ITEM)
    (PROG (R)
      (PROG (E)
        (SETQ E (LIST '|\\OFF{| ITEM '}))
       LAB
        (COND ((NULL E) (RETURN NIL)))
        ((LAMBDA (E) (SETQ R (NCONC R (EXPLODE E)))) (CAR E))
        (SETQ E (CDR E))
        (GO LAB))
      (RETURN (COMPRESS R)))) 
(FLUID '(LASTOFF LASTPTR LASTINDENT DELTASTACK)) 
(PUT 'FINDINDENT 'NUMBER-OF-ARGS 2) 
(PUT 'FINDINDENT 'DEFINED-ON-LINE '1432) 
(PUT 'FINDINDENT 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'FINDINDENT 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE FINDINDENT (OFFT PTR)
    (COND ((AND (EQUAL OFFT LASTOFF) (EQUAL PTR LASTPTR)) LASTINDENT)
          (T
           (PROG (NODE P STACK TOT)
             (SETQ TOT 0)
             (SETQ STACK DELTASTACK)
             (SETQ P (SETQ LASTPTR PTR))
             (SETQ LASTOFF OFFT)
             (PROG ()
              WHILELABEL
               (COND ((NOT STACK) (RETURN NIL)))
               (PROGN
                (COND
                 ((EQUAL P (CADDDR (SETQ NODE (CAR STACK))))
                  (PROGN
                   (SETQ P (CAR (CDDDDR NODE)))
                   (SETQ TOT (CADR NODE))
                   (COND ((LESSP TOT OFFT) (SETQ STACK NIL))))))
                (COND (STACK (SETQ STACK (CDR STACK))))
                NIL)
               (GO WHILELABEL))
             (RETURN
              (SETQ LASTINDENT
                      (PLUS (DIFFERENCE OFFT TOT) (CADDR (CDDDDR NODE))))))))) 
(PUT 'TRYBREAK 'NUMBER-OF-ARGS 2) 
(PUT 'TRYBREAK 'DEFINED-ON-LINE '1447) 
(PUT 'TRYBREAK 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'TRYBREAK 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE TRYBREAK (TERM BRKL)
    (PROG (BOTTOM TOP BASE ITEM DELTASTACK PRED DEPTH FEASIBLE ID LEN TOTAL DM
           BASEDM BD PENALTY OFFSET BASEOFFSET BASEPTR INDENT BASEINDENT
           LASTOFF LASTINDENT LASTPTR INDENTBADNESS)
      (SETQ DEPTH 0)
      (SETQ FEASIBLE 0)
      (SETQ ID 0)
      (SETQ LEN 0)
      (SETQ TOTAL 0)
      (SETQ DM 0)
      (SETQ BASEDM 0)
      (SETQ BD 0)
      (SETQ PENALTY 0)
      (SETQ OFFSET 0)
      (SETQ BASEOFFSET 0)
      (SETQ BASEPTR 0)
      (SETQ INDENT 0)
      (SETQ BASEINDENT 0)
      (SETQ LASTOFF 0)
      (SETQ LASTINDENT 0)
      (SETQ LASTPTR 0)
      (COND ((NULL BRKL) (GO RETAIN)))
      (SETQ BOTTOM BRKL)
      (SETQ LASTOFF
              (SETQ LASTPTR
                      (SETQ LASTINDENT
                              (SETQ FEASIBLE (SETQ INDENT (SETQ TOTAL 0))))))
      (PROG ()
       WHILELABEL
        (COND ((NOT BOTTOM) (RETURN NIL)))
        (PROGN
         (SETQ TOP (CDR BOTTOM))
         (SETQ BASE (CAR BOTTOM))
         (SETQ PRED (CDDDDR BASE))
         (SETQ ID (CADDDR BASE))
         (COND ((EQUAL (CADR BASE) (MINUS 10000)) (RPLACA (CDR PRED) 0)))
         (SETQ BASEDM (CADR PRED))
         (SETQ DELTASTACK (CONS BASE DELTASTACK))
         (SETQ LEN (SETQ BASEINDENT (CADDR (CDDDDR BASE))))
         (SETQ INDENTBADNESS
                 (TIMES 2500.0 (QUOTIENT (FLOAT BASEINDENT) (FLOAT HWW*))))
         (SETQ BASEOFFSET (CADDR BASE))
         (SETQ BASEPTR (CAR PRED))
         (SETQ TOTAL (PLUS TOTAL (CAR BASE)))
         (PROG ()
          WHILELABEL
           (COND ((NOT (AND TOP (LESSP LEN HSIZE*))) (RETURN NIL)))
           (PROGN
            (SETQ ITEM (CAR TOP))
            (COND ((NUMBERP ITEM) (SETQ LEN (PLUS LEN ITEM)))
                  (T
                   (PROGN
                    (SETQ BD (BADNESS LEN INDENTBADNESS))
                    (SETQ PENALTY (CADR ITEM))
                    (SETQ OFFSET (CADDR ITEM))
                    (COND
                     ((OR (LESSP BD TOLERANCE*) (LESSP (PLUS BD PENALTY) 1)
                          (NULL (CDR TOP)))
                      (PROGN
                       (SETQ DM
                               (PLUS (TIMES BD BD) BASEDM
                                     (TIMES PENALTY (ABS PENALTY))))
                       (COND
                        ((CDDDR ITEM)
                         (PROGN
                          (SETQ PRED (CDDDDR ITEM))
                          (COND
                           ((LESSP DM (CADR PRED))
                            (PROGN
                             (RPLACA PRED ID)
                             (RPLACA (CDR PRED) DM)
                             (COND
                              (*TEXINDENT
                               (PROGN
                                (COND
                                 ((GREATERP OFFSET TOTAL)
                                  (SETQ INDENT
                                          (PLUS (DIFFERENCE OFFSET TOTAL)
                                                BASEINDENT)))
                                 ((LESSP OFFSET BASEOFFSET)
                                  (SETQ INDENT (FINDINDENT OFFSET BASEPTR)))
                                 (T (SETQ INDENT BASEINDENT)))
                                (RPLACA (CDDR PRED) INDENT)))))))))
                        (T
                         (PROGN
                          (SETQ FEASIBLE (PLUS FEASIBLE 1))
                          (COND
                           (*TEXINDENT
                            (COND
                             ((GREATERP OFFSET TOTAL)
                              (SETQ INDENT
                                      (PLUS (DIFFERENCE OFFSET TOTAL)
                                            BASEINDENT)))
                             ((LESSP OFFSET BASEOFFSET)
                              (SETQ INDENT (FINDINDENT OFFSET BASEPTR)))
                             (T (SETQ INDENT BASEINDENT))))
                           (T (SETQ INDENT 0)))
                          (RPLACD (CDDR ITEM)
                                  (CONS FEASIBLE
                                        (CONS ID
                                              (CONS DM (CONS INDENT NIL))))))))
                       (COND ((EQUAL PENALTY (MINUS 10000)) (SETQ TOP NIL))))))
                    (SETQ LEN (PLUS LEN (CAR ITEM))))))
            (COND (TOP (SETQ TOP (CDR TOP)))))
           (GO WHILELABEL))
         (RPLACA (CDR BASE) TOTAL)
         (SETQ BOTTOM (CDR BOTTOM))
         (PROG ()
          WHILELABEL
           (COND
            ((NOT
              (AND BOTTOM
                   (OR (NUMBERP (CAR BOTTOM)) (NOT (CDDDR (CAR BOTTOM))))))
             (RETURN NIL)))
           (PROGN
            (COND
             ((NUMBERP (CAR BOTTOM)) (SETQ TOTAL (PLUS TOTAL (CAR BOTTOM))))
             (T (SETQ TOTAL (PLUS TOTAL (CAAR BOTTOM)))))
            (SETQ BOTTOM (CDR BOTTOM)))
           (GO WHILELABEL))
         NIL)
        (GO WHILELABEL))
      (SETQ BOTTOM DELTASTACK)
      (SETQ FEASIBLE (MINUS 1))
      (SETQ TOP NIL)
      (PROG ()
       WHILELABEL
        (COND ((NOT BOTTOM) (RETURN NIL)))
        (PROGN
         (SETQ ID (CADDDR (CAR BOTTOM)))
         (COND
          ((EQUAL ID FEASIBLE)
           (PROGN
            (SETQ FEASIBLE (CAR (CDDDDR (CAR BOTTOM))))
            (SETQ TOP (CONS ID TOP))
            NIL)))
         (SETQ BOTTOM (CDR BOTTOM)))
        (GO WHILELABEL))
      (SETQ DELTASTACK (CDR TOP))
      (COND
       ((EQUAL (CAR DELTASTACK) (MINUS 1))
        (PROGN
         (PRIN2 "% Warning:    no suitable way of breaking found")
         (TERPRI)
         (PRIN2 "% ========    retry with a greater tolerance...")
         (TERPRI)
         (PRIN2 "% (output will produce overfull box if printed)")
         (TERPRI))))
      (SETQ BRKL (CDR BRKL))
     RETAIN
      (SETQ OFFSET (SETQ DEPTH 0))
      (SETQ BOTTOM TERM)
      (COND (BRKL (SETQ BRKL (CDR BRKL))))
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND TERM (CDR TERM))) (RETURN NIL)))
        (PROGN
         (SETQ ITEM (CAR TERM))
         (COND
          ((AND (NOT (ATOM ITEM)) (NUMBERP (CAR ITEM)))
           (COND
            ((AND (EQUAL DEPTH 0) BRKL)
             (PROGN
              (SETQ TOP (CAR BRKL))
              (COND
               ((CDDDR TOP)
                (PROGN
                 (COND
                  ((EQUAL (CADDDR TOP) (CAR DELTASTACK))
                   (PROGN
                    (SETQ DELTASTACK (CDR DELTASTACK))
                    (COND
                     ((GREATERP (SETQ LEN (CADDR (CDDDDR TOP))) 0)
                      (RPLACD PRED
                              (CONS '|\\NL |
                                    (CONS (OFFSETITEM LEN) (CDR TERM)))))
                     (T (RPLACD PRED (CONS '|\\NL | (CDR TERM)))))))
                  (T (RPLACD PRED (CDR TERM))))))
               (T (RPLACD PRED (CDR TERM))))
              (COND ((AND BRKL (CDR BRKL)) (SETQ BRKL (CDDR BRKL))))))
            (T (RPLACD PRED (CDR TERM)))))
          ((EQUAL (GET ITEM 'CLASS) 'INN)
           (PROGN
            (COND
             ((MEMQ (GET ITEM 'TEXTAG) '(BEG SUP SUB FRC MAT))
              (SETQ DEPTH (PLUS DEPTH 1)))
             ((EQUAL (GET ITEM 'TEXTAG) 'END)
              (SETQ DEPTH (DIFFERENCE DEPTH 1)))))))
         (SETQ PRED TERM)
         (SETQ TERM (CDR TERM)))
        (GO WHILELABEL))
      (RETURN BOTTOM))) 
(PUT 'TEXSTRLEN 'NUMBER-OF-ARGS 1) 
(PUT 'TEXSTRLEN 'DEFINED-ON-LINE '1610) 
(PUT 'TEXSTRLEN 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'TEXSTRLEN 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE TEXSTRLEN (S)
    (PROG (LENGTH FLAG)
      (SETQ LENGTH 0)
      (SETQ LENGTH 0)
      (SETQ FLAG NIL)
      (PROG (C)
        (SETQ C S)
       LAB
        (COND ((NULL C) (RETURN NIL)))
        ((LAMBDA (C)
           (COND ((AND (NOT FLAG) (EQUAL C '!)) (SETQ FLAG T))
                 (T (PROGN (SETQ LENGTH (PLUS LENGTH 1)) (SETQ FLAG NIL)))))
         (CAR C))
        (SETQ C (CDR C))
        (GO LAB))
      (RETURN LENGTH))) 
(FLUID '(NLFLAG INDENT CC)) 
(DE TRI_NEWLINE NIL
    (COND (NLFLAG (SETQ CC INDENT))
          ((GREATERP CC INDENT)
           (PROGN (TERPRI) (SETQ CC INDENT) (SETQ NLFLAG T))))) 
(PUT 'TRI_NEWLINE 'NUMBER-OF-ARGS 0) 
(PUT 'TRI_NEWLINE 'DEFINED-ON-LINE '1623) 
(PUT 'TRI_NEWLINE 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'TRI_NEWLINE 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(PUTC 'TRI_NEWLINE 'INLINE
      '(LAMBDA ()
         (COND (NLFLAG (SETQ CC INDENT))
               ((GREATERP CC INDENT)
                (PROGN (TERPRI) (SETQ CC INDENT) (SETQ NLFLAG T)))))) 
(PUT 'TEXOUT 'NUMBER-OF-ARGS 2) 
(PUT 'TEXOUT 'DEFINED-ON-LINE '1628) 
(PUT 'TEXOUT 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'TEXOUT 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE TEXOUT (ITEMLIST FLAG)
    (COND ((NULL ITEMLIST) NIL)
          (T
           (PROG (CC LEN INDENT CCMAX LINES ITEM CLASS TAG OLDTAG LASTTAG
                  INDENTSTACK ISPD NLFLAG)
             (SETQ CC 0)
             (SETQ LEN 0)
             (SETQ INDENT 0)
             (SETQ CCMAX 0)
             (SETQ LINES 0)
             (SETQ CCMAX 64)
             (SETQ CC (SETQ INDENT (SETQ LINES 0)))
             (SETQ TAG (SETQ ISPD (SETQ NLFLAG (SETQ INDENTSTACK NIL))))
             (PRIN2 '$$)
             (COND (FLAG (PRIN2 '|\\DISPLAYLINES{\\QDD|)))
             (TERPRI)
             (PROG ()
              WHILELABEL
               (COND ((NOT ITEMLIST) (RETURN NIL)))
               (PROGN
                (SETQ ITEM (CAR ITEMLIST))
                (SETQ ITEMLIST (CDR ITEMLIST))
                (SETQ LEN (TEXSTRLEN (EXPLODE ITEM)))
                (SETQ OLDTAG NIL)
                (SETQ LASTTAG (OR TAG CLASS))
                (SETQ CLASS (GET ITEM 'CLASS))
                (SETQ TAG (AND (EQUAL CLASS 'INN) (GET ITEM 'TEXTAG)))
                (COND
                 ((OR (EQUAL TAG 'MAT) (EQUAL TAG 'FRC) (EQUAL CLASS 'OPN))
                  (COND (NLFLAG (SETQ CC INDENT))
                        ((GREATERP CC INDENT)
                         (PROGN (TERPRI) (SETQ CC INDENT) (SETQ NLFLAG T))))))
                (COND
                 ((OR (MEMQ TAG '(BEG SUP SUB FRC MAT)) (EQUAL CLASS 'OPN))
                  (PROGN
                   (SETQ INDENTSTACK (CONS INDENT INDENTSTACK))
                   (SETQ INDENTSTACK (CONS LASTTAG INDENTSTACK))
                   (COND
                    ((LESSP (PLUS CC CC) CCMAX)
                     (COND
                      ((OR (AND (EQUAL CLASS 'OPN) (EQUAL LASTTAG 'ORD))
                           (AND (MEMQ TAG '(BEG SUP SUB FRC MAT))
                                (NOT (OR (EQUAL TAG 'FRC) (EQUAL TAG 'MAT)))))
                       (SETQ INDENT (PLUS CC LEN)))
                      (T (SETQ INDENT (PLUS INDENT LEN))))))))
                 ((OR (EQUAL TAG 'END) (EQUAL CLASS 'CLO))
                  (PROGN
                   (SETQ OLDTAG
                           (COND ((NULL INDENTSTACK) NIL)
                                 (T
                                  (PROG (Z)
                                    (SETQ Z (CAR INDENTSTACK))
                                    (SETQ INDENTSTACK (CDR INDENTSTACK))
                                    (RETURN Z)))))
                   (SETQ INDENT
                           (COND ((NULL INDENTSTACK) NIL)
                                 (T
                                  (PROG (Z)
                                    (SETQ Z (CAR INDENTSTACK))
                                    (SETQ INDENTSTACK (CDR INDENTSTACK))
                                    (RETURN Z))))))))
                (COND
                 ((OR (GREATERP (PLUS CC LEN) CCMAX) (EQUAL ITEM '+)
                      (EQUAL ITEM '-) (EQUAL CLASS 'CLO))
                  (COND (NLFLAG (SETQ CC INDENT))
                        ((GREATERP CC INDENT)
                         (PROGN (TERPRI) (SETQ CC INDENT) (SETQ NLFLAG T))))))
                (COND (NLFLAG (PROGN (SETQ NLFLAG NIL) (SPACES CC))))
                (COND ((EQUAL TAG 'CR) (SETQ LINES (PLUS LINES 1))))
                (COND ((NOT (EQUAL ITEM BLANK)) (PRIN2 ITEM)))
                (SETQ CC (PLUS CC LEN))
                (COND
                 ((OR (MEMQ TAG '(ESP ESB SEP CR))
                      (AND (EQUAL TAG 'END)
                           (OR (EQUAL OLDTAG 'FRC) (EQUAL OLDTAG 'MAT)))
                      (EQUAL CLASS 'CLO)
                      (AND (OR (EQUAL CLASS 'REL) (EQUAL CLASS 'BIN))
                           (GREATERP (PLUS CC CC CC) (PLUS CCMAX CCMAX)))
                      (EQUAL ITEM '|,|) (NULL CLASS))
                  (COND (NLFLAG (SETQ CC INDENT))
                        ((GREATERP CC INDENT)
                         (PROGN (TERPRI) (SETQ CC INDENT) (SETQ NLFLAG T)))))))
               (GO WHILELABEL))
             (COND (NLFLAG (SETQ CC INDENT))
                   ((GREATERP CC INDENT)
                    (PROGN (TERPRI) (SETQ CC INDENT) (SETQ NLFLAG T))))
             (COND
              (FLAG
               (COND ((EQUAL LINES 0) (PRIN2 '|\\CR}|)) (T (PRIN2 '|\\nL}|)))))
             (PRIN2 '$$)
             (TERPRI)
             (RETURN NIL))))) 
(DEFLIST '((TEXDISPLAY RLIS) (TEXLET RLIS)) 'STAT) 
(PUT 'TEXSETBREAK 'NUMBER-OF-ARGS 2) 
(FLAG '(TEXSETBREAK) 'OPFN) 
(PUT 'TEXSETBREAK 'DEFINED-ON-LINE '1687) 
(PUT 'TEXSETBREAK 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'TEXSETBREAK 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE TEXSETBREAK (HSIZE TOL) (SETBREAK HSIZE TOL)) 
(PUT 'TEXTOLERANCE 'NUMBER-OF-ARGS 1) 
(FLAG '(TEXTOLERANCE) 'OPFN) 
(PUT 'TEXTOLERANCE 'DEFINED-ON-LINE '1688) 
(PUT 'TEXTOLERANCE 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'TEXTOLERANCE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE TEXTOLERANCE (TOL) (SETTOLERANCE TOL)) 
(PUT 'TEXPAGEWIDTH 'NUMBER-OF-ARGS 1) 
(FLAG '(TEXPAGEWIDTH) 'OPFN) 
(PUT 'TEXPAGEWIDTH 'DEFINED-ON-LINE '1689) 
(PUT 'TEXPAGEWIDTH 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'TEXPAGEWIDTH 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE TEXPAGEWIDTH (HSIZE) (SETPAGEWIDTH HSIZE)) 
(PUT 'TEXLET 'NUMBER-OF-ARGS 1) 
(PUT 'TEXLET 'DEFINED-ON-LINE '1691) 
(PUT 'TEXLET 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'TEXLET 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE TEXLET (ARGLIST)
    (PROG (CLASS SYM ITEM)
      (COND ((NEQ (LENGTH ARGLIST) 2) (REDERR "Usage: TeXlet(symbol,item);")))
      (SETQ SYM (CAR ARGLIST))
      (SETQ ITEM (INTERN (CADR ARGLIST)))
      (SETQ CLASS (GET ITEM 'CLASS))
      (COND
       ((NULL CLASS) (PROGN (PRIN2 "% No such TeX symbol available") (TERPRI)))
       ((EQUAL CLASS 'INN)
        (PROGN (PRIN2 "% cannot assign inner TeX symbols yet") (TERPRI)))
       (T (PUT SYM 'TEXNAME ITEM)))
      (RETURN NIL))) 
(PUT 'TEXDISPLAY 'NUMBER-OF-ARGS 1) 
(PUT 'TEXDISPLAY 'DEFINED-ON-LINE '1705) 
(PUT 'TEXDISPLAY 'DEFINED-IN-FILE 'TRI/TRI.RED) 
(PUT 'TEXDISPLAY 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE TEXDISPLAY (ARGLIST)
    (PROG (ITEM TAG CLASS)
      (COND ((NEQ (LENGTH ARGLIST) 1) (REDERR "Usage: TeXdisplay(item);")))
      (SETQ ITEM (GET (CAR ARGLIST) 'TEXNAME))
      (COND
       ((NOT ITEM)
        (PROGN
         (PRIN2 "% ")
         (PRIN2 (CAR ARGLIST))
         (PRIN2 " is not defined")
         (TERPRI))))
      (COND ((NOT ITEM) (RETURN NIL)))
      (SETQ TAG (GET ITEM 'TEXTAG))
      (SETQ CLASS (GET ITEM 'CLASS))
      (PRIN2 "% TeX item ")
      (PRIN2 ITEM)
      (PRIN2 " is of class ")
      (PRIN2 CLASS)
      (PRIN2 " and has following widths: ")
      (TERPRI)
      (PRIN2 "% ")
      (PROG (W)
        (SETQ W TAG)
       LAB
        (COND ((NULL W) (RETURN NIL)))
        ((LAMBDA (W)
           (PROG (V) (SETQ V (QUOTIENT W 65536.0)) (PRIN2 V) (PRIN2 "pt  ")))
         (CAR W))
        (SETQ W (CDR W))
        (GO LAB))
      (TERPRI)
      (RETURN NIL))) 
(FLAG '(TEXLET) 'OPFN) 
(FLAG '(TEXITEM) 'OPFN) 
(FLAG '(TEXDISPLAY) 'OPFN) 
(FLAG '(TEXASSERTSET) 'OPFN) 
(FLAG '(TEXRETRACTSET) 'OPFN) 
(PRIN2 "% TeX-REDUCE-Interface 0.71") 
(TERPRI) 
(TEXASSERTSET (LIST 'GREEK)) 
(TEXASSERTSET (LIST 'LOWERCASE)) 
(TEXASSERTSET (LIST '|gREEK|)) 
(TEXASSERTSET (LIST '|uPPERCASE|)) 
(TEXTOLERANCE 10) 
(TEXPAGEWIDTH 150) 
(ENDMODULE) 