(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'HDIFF)) 
(PUT 'HDIFF 'NUMBER-OF-ARGS 2) 
(PUT 'HDIFF 'DEFINED-ON-LINE '30) 
(PUT 'HDIFF 'DEFINED-IN-FILE 'CAMAL/HDIFF.RED) 
(PUT 'HDIFF 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE HDIFF (X U)
    (COND ((NULL X) NIL) (T (|FS:PLUS| (HDIFF (GETV X 3) U) (HDIFFTERM X U))))) 
(PUT 'HDIFFTERM 'NUMBER-OF-ARGS 2) 
(PUT 'HDIFFTERM 'DEFINED-ON-LINE '34) 
(PUT 'HDIFFTERM 'DEFINED-IN-FILE 'CAMAL/HDIFF.RED) 
(PUT 'HDIFFTERM 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE HDIFFTERM (X U)
    (PROG (N)
      (SETQ N (GETV (GETV X 2) U))
      (COND ((EQUAL N 0) (RETURN NIL)))
      (SETQ N (MULTSQ (CONS N 1) (GETV X 0)))
      (COND
       ((EQUAL (GETV X 1) 'COS) (RETURN (MAKE-TERM 'SIN (GETV X 2) (NEGSQ N))))
       (T (RETURN (MAKE-TERM 'COS (GETV X 2) N)))))) 
(PUT 'HDIFF1 'NUMBER-OF-ARGS 2) 
(PUT 'HDIFF1 'DEFINED-ON-LINE '43) 
(PUT 'HDIFF1 'DEFINED-IN-FILE 'CAMAL/HDIFF.RED) 
(PUT 'HDIFF1 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE HDIFF1 (X U)
    (COND ((NULL X) NIL)
          (T
           (PROG (ANS AAA)
             (SETQ ANS (DIFFSQ (GETV X 0) U))
             (COND
              (ANS
               (PROGN
                (SETQ AAA (MKVECT 3))
                (PUTV AAA 0 ANS)
                (PUTV AAA 1 (GETV X 1))
                (PUTV AAA 2 (GETV X 2))
                (PUTV AAA 3 (HDIFF1 (GETV X 3) U))
                (RETURN AAA)))
              (T (RETURN (HDIFF1 (GETV X 3) U)))))))) 
(PUT 'SIMPHDIFF 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPHDIFF 'DEFINED-ON-LINE '57) 
(PUT 'SIMPHDIFF 'DEFINED-IN-FILE 'CAMAL/HDIFF.RED) 
(PUT 'SIMPHDIFF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPHDIFF (UU)
    (PROG (X U)
      (COND
       ((NOT (EQUAL (LENGTH UU) 2))
        (RERROR 'FOURIER 10 "Improper number of arguments to HDIFF")))
      (SETQ X (CAR UU))
      (SETQ UU (CDR UU))
      (SETQ U (CAR UU))
      (SETQ X (SIMP X))
      (COND ((NOT (EQCAR (CAR X) '|:FS:|)) (SETQ X (CONS (*SQ2FOURIER X) 1))))
      (COND
       ((NOT (HARMONICP U))
        (RETURN (CONS (CONS (GET 'FOURIER 'TAG) (HDIFF1 (CDAR X) U)) 1))))
      (SETQ X (HDIFF (CDAR X) (GET U 'FOURIER-ANGLE)))
      (COND ((NULL X) (RETURN (CONS NIL 1))))
      (RETURN (CONS (CONS (GET 'FOURIER 'TAG) X) 1)))) 
(PUT 'HDIFF 'SIMPFN 'SIMPHDIFF) 
(PUT 'HINT 'NUMBER-OF-ARGS 2) 
(PUT 'HINT 'DEFINED-ON-LINE '74) 
(PUT 'HINT 'DEFINED-IN-FILE 'CAMAL/HDIFF.RED) 
(PUT 'HINT 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE HINT (X U)
    (COND ((NULL X) NIL) (T (|FS:PLUS| (HINT (GETV X 3) U) (HINTTERM X U))))) 
(PUT 'HINTTERM 'NUMBER-OF-ARGS 2) 
(PUT 'HINTTERM 'DEFINED-ON-LINE '79) 
(PUT 'HINTTERM 'DEFINED-IN-FILE 'CAMAL/HDIFF.RED) 
(PUT 'HINTTERM 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE HINTTERM (X U)
    (PROG (N)
      (SETQ N (GETV (GETV X 2) U))
      (COND
       ((EQUAL N 0) (RETURN (MAKE-TERM (GETV X 1) (GETV X 2) (GETV X 0)))))
      (SETQ N (MULTSQ (CONS 1 N) (GETV X 0)))
      (COND ((EQUAL (GETV X 1) 'COS) (RETURN (MAKE-TERM 'SIN (GETV X 2) N)))
            (T (RETURN (MAKE-TERM 'COS (GETV X 2) (NEGSQ N))))))) 
(PUT 'HINT1 'NUMBER-OF-ARGS 2) 
(PUT 'HINT1 'DEFINED-ON-LINE '88) 
(PUT 'HINT1 'DEFINED-IN-FILE 'CAMAL/HDIFF.RED) 
(PUT 'HINT1 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE HINT1 (X U)
    (COND ((NULL X) NIL)
          (T
           (PROG (AAA)
             (SETQ AAA (MKVECT 3))
             (PUTV AAA 0 (SIMPINT (LIST (PREPSQ (GETV X 0)) U)))
             (PUTV AAA 1 (GETV X 1))
             (PUTV AAA 2 (GETV X 2))
             (PUTV AAA 3 (HINT1 (GETV X 3) U))
             (RETURN AAA))))) 
(PUT 'SIMPHINT 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPHINT 'DEFINED-ON-LINE '99) 
(PUT 'SIMPHINT 'DEFINED-IN-FILE 'CAMAL/HDIFF.RED) 
(PUT 'SIMPHINT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPHINT (UU)
    (PROG (X U)
      (COND
       ((NOT (EQUAL (LENGTH UU) 2))
        (RERROR 'FOURIER 11 "Improper number of arguments to HINT")))
      (SETQ X (CAR UU))
      (SETQ UU (CDR UU))
      (SETQ U (CAR UU))
      (SETQ X (SIMP X))
      (COND ((NOT (EQCAR (CAR X) '|:FS:|)) (SETQ X (CONS (*SQ2FOURIER X) 1))))
      (COND
       ((NOT (HARMONICP U))
        (RETURN (CONS (CONS (GET 'FOURIER 'TAG) (HINT1 (CDAR X) U)) 1))))
      (SETQ X (HINT (CDAR X) (GET U 'FOURIER-ANGLE)))
      (COND ((NULL X) (RETURN (CONS NIL 1))))
      (RETURN (CONS (CONS (GET 'FOURIER 'TAG) X) 1)))) 
(PUT 'HINT 'SIMPFN 'SIMPHINT) 
(INITDMODE 'FOURIER) 
(ENDMODULE) 