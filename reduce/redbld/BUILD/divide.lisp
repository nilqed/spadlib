(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'DIVIDE)) 
(FLUID '(*TRDIV *TRINT RESID SQRTLIST ZLIST)) 
(EXPORTS (LIST 'FQUOTF 'TESTDIVDF 'DFQUOTDF)) 
(IMPORTS
 (LIST 'DF2Q 'F2DF 'GCDF 'INTERR 'MULTDF 'NEGDF 'PLUSDF 'PRINTDF 'PRINTSF
       'QUOTF 'MULTSQ 'INVSQ 'NEGSQ)) 
(PUT 'DFQUOTDF 'NUMBER-OF-ARGS 2) 
(PUT 'DFQUOTDF 'DEFINED-ON-LINE '40) 
(PUT 'DFQUOTDF 'DEFINED-IN-FILE 'INT/DIVIDE.RED) 
(PUT 'DFQUOTDF 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE DFQUOTDF (A B)
    (PROG (RESID)
      (COND
       ((OR *TRINT *TRDIV)
        (PROGN
         (PROGN
          (PRIN2 "Dividing out a simple factor of ")
          (TERPRI)
          "Dividing out a simple factor of ")
         (PRINTDF B))))
      (SETQ A (DFQUOTDF1 A B))
      (COND
       ((OR *TRINT *TRDIV)
        (PROGN
         (PROGN
          (PRIN2 "Remaining term to be factorised is ")
          (TERPRI)
          "Remaining term to be factorised is ")
         (PRINTDF A))))
      (COND
       ((NOT (NULL RESID))
        (PROG (GRES W)
          (COND ((NULL (CAR (DF2Q RESID))) (RETURN NIL)))
          (COND
           ((OR *TRINT *TRDIV)
            (PROGN
             (PROGN
              (PRIN2 "Failure in factorisation:")
              (TERPRI)
              "Failure in factorisation:")
             (PRINTDF RESID)
             (PROGN
              (PRIN2 "Which should be zero")
              (TERPRI)
              "Which should be zero")
             (SETQ W RESID)
             (SETQ GRES (CAR (CDAR W)))
             (SETQ W (CDR W))
             (PROG ()
              WHILELABEL
               (COND ((NOT (NOT (NULL W))) (RETURN NIL)))
               (PROGN (SETQ GRES (GCDF GRES (CAR (CDAR W)))) (SETQ W (CDR W)))
               (GO WHILELABEL))
             (PROGN
              (PRIN2 "I.e. the following vanishes")
              (TERPRI)
              "I.e. the following vanishes")
             (PRINTSF GRES))))
          (INTERR "Non-exact division due to a log term"))))
      (RETURN A))) 
(PUT 'FQUOTF 'NUMBER-OF-ARGS 2) 
(PUT 'FQUOTF 'DEFINED-ON-LINE '68) 
(PUT 'FQUOTF 'DEFINED-IN-FILE 'INT/DIVIDE.RED) 
(PUT 'FQUOTF 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE FQUOTF (A B)
    (PROG (T1)
      (COND ((NULL A) (INTERR "a=0 in fquotf")))
      (SETQ T1 ((LAMBDA (*EXP) (QUOTF1 A B)) T))
      (COND ((NOT (NULL T1)) (RETURN (CONS T1 1))))
      (RETURN (DF2Q (DFQUOTDF (F2DF A) (F2DF B)))))) 
(PUT 'DFQUOTDF1 'NUMBER-OF-ARGS 2) 
(PUT 'DFQUOTDF1 'DEFINED-ON-LINE '83) 
(PUT 'DFQUOTDF1 'DEFINED-IN-FILE 'INT/DIVIDE.RED) 
(PUT 'DFQUOTDF1 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE DFQUOTDF1 (A B)
    (PROG (Q)
      (COND ((NULL B) (INTERR "Attempt to divide by zero")))
      (SETQ Q SQRTLIST)
      (PROG ()
       WHILELABEL
        (COND ((NOT (NOT (NULL Q))) (RETURN NIL)))
        (PROG (CONJ)
          (SETQ CONJ (CONJSQRT B (CAR Q)))
          (COND
           ((NOT (EQUAL B CONJ))
            (PROGN (SETQ A (MULTDF A CONJ)) (SETQ B (MULTDF B CONJ)))))
          (SETQ Q (CDR Q)))
        (GO WHILELABEL))
      (SETQ Q (DFQUOTDF2 A B))
      (SETQ RESID (REVERSIP RESID))
      (RETURN Q))) 
(PUT 'DFQUOTDF2 'NUMBER-OF-ARGS 2) 
(PUT 'DFQUOTDF2 'DEFINED-ON-LINE '99) 
(PUT 'DFQUOTDF2 'DEFINED-IN-FILE 'INT/DIVIDE.RED) 
(PUT 'DFQUOTDF2 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE DFQUOTDF2 (A B)
    (COND ((NULL A) NIL)
          (T
           (PROG (XD LCD)
             (SETQ XD (XPDIFF (CAAR A) (CAAR B)))
             (COND
              ((EQUAL XD 'FAILED)
               (PROGN
                (SETQ XD (CAR A))
                (SETQ A (CDR A))
                (SETQ RESID (CONS XD RESID))
                (RETURN (DFQUOTDF2 A B)))))
             (SETQ LCD (*MULTSQ (CDAR A) (*INVSQ (CDAR B))))
             (COND ((NULL (CAR LCD)) (RETURN (DFQUOTDF2 (CDR A) B))))
             (SETQ LCD (CONS XD LCD))
             (SETQ XD (PLUSDF A (MULTDF (NEGDF (CONS LCD NIL)) B)))
             (COND
              ((AND XD
                    (OR (EQUAL (CAAR XD) (CAAR A))
                        (EQUAL (XPDIFF (CAAR XD) (CAAR B)) 'FAILED)))
               (PROGN
                (COND
                 ((OR *TRINT *TRDIV)
                  (PROGN
                   (PROGN
                    (PRIN2 "Problems in dividing:")
                    (TERPRI)
                    "Problems in dividing:")
                   (PRINTDF XD))))
                (SETQ XD (ROOTEXTRACTDF XD))
                (COND ((OR *TRINT *TRDIV) (PRINTDF XD))))))
             (RETURN (CONS LCD (DFQUOTDF2 XD B))))))) 
(PUT 'ROOTEXTRACTDF 'NUMBER-OF-ARGS 1) 
(PUT 'ROOTEXTRACTDF 'DEFINED-ON-LINE '122) 
(PUT 'ROOTEXTRACTDF 'DEFINED-IN-FILE 'INT/DIVIDE.RED) 
(PUT 'ROOTEXTRACTDF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE ROOTEXTRACTDF (U)
    (COND ((NULL U) NIL)
          (T
           (PROG (V)
             (SETQ V (RESIMP (ROOTEXTRACTSQ (CDAR U))))
             (RETURN
              (COND ((NULL (CAR V)) (ROOTEXTRACTDF (CDR U)))
                    (T (CONS (CONS (CAAR U) V) (ROOTEXTRACTDF (CDR U)))))))))) 
(PUT 'ROOTEXTRACTSQ 'NUMBER-OF-ARGS 1) 
(PUT 'ROOTEXTRACTSQ 'DEFINED-ON-LINE '130) 
(PUT 'ROOTEXTRACTSQ 'DEFINED-IN-FILE 'INT/DIVIDE.RED) 
(PUT 'ROOTEXTRACTSQ 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE ROOTEXTRACTSQ (U)
    (COND ((NULL (CAR U)) U)
          (T
           ((LAMBDA (X) (CONS (ROOTEXTRACTF (CAR X)) (ROOTEXTRACTF (CDR X))))
            (SUBS2Q U))))) 
(PUT 'ROOTEXTRACTF 'NUMBER-OF-ARGS 1) 
(PUT 'ROOTEXTRACTF 'DEFINED-ON-LINE '136) 
(PUT 'ROOTEXTRACTF 'DEFINED-IN-FILE 'INT/DIVIDE.RED) 
(PUT 'ROOTEXTRACTF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE ROOTEXTRACTF (V)
    (COND ((OR (ATOM V) (ATOM (CAR V))) V)
          (T
           (PROG (U R C X P)
             (SETQ U (CAAAR V))
             (SETQ P (CDAAR V))
             (SETQ R (ROOTEXTRACTF (CDR V)))
             (SETQ C (ROOTEXTRACTF (CDAR V)))
             (COND ((NULL C) (RETURN R))
                   ((ATOM U) (RETURN (CONS (CONS (CAAR V) C) R)))
                   ((OR (EQ (CAR U) 'SQRT)
                        (AND (EQ (CAR U) 'EXPT) (EQCAR (CADDR U) 'QUOTIENT)
                             (EQUAL (CAR (CDADDR U)) 1)
                             (NUMBERP (CADR (CDADDR U)))))
                    (PROGN
                     (SETQ P
                             (DIVIDE P
                                     (COND ((EQ (CAR U) 'SQRT) 2)
                                           (T (CADR (CDADDR U))))))
                     (COND
                      ((EQUAL (CAR P) 0)
                       (RETURN
                        (COND ((NULL C) R) (T (CONS (CONS (CAAR V) C) R)))))
                      ((NUMBERP (CADR U))
                       (PROGN
                        (SETQ C (MULTD (EXPT (CADR U) (CAR P)) C))
                        (SETQ P (CDR P))))
                      (T
                       (PROGN
                        (SETQ X
                                ((LAMBDA (U)
                                   (COND (*QSUM-SIMPEXPT (QSUM-SIMPEXPT U))
                                         (T (BASIC-SIMPEXPT U))))
                                 (LIST (CADR U) (CAR P))))
                        (COND
                         ((EQUAL (CDR X) 1)
                          (PROGN
                           (SETQ C
                                   (COND
                                    (*PHYSOP-LOADED (PHYSOP-MULTF (CAR X) C))
                                    (T (POLY-MULTF (CAR X) C))))
                           (SETQ P (CDR P))))
                         (T (SETQ P (CDAAR V))))))))))
             (RETURN
              (COND ((EQUAL P 0) (ADDF C R)) ((NULL C) R)
                    (T (CONS (CONS (CONS U P) C) R)))))))) 
(PUT 'DF 'SIMPFN 'SIMPDF*) 
(PUT 'SIMPDF* 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPDF* 'DEFINED-ON-LINE '172) 
(PUT 'SIMPDF* 'DEFINED-IN-FILE 'INT/DIVIDE.RED) 
(PUT 'SIMPDF* 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPDF* (U)
    (PROG (V V1)
      (SETQ V (SIMPDF U))
      (SETQ V1 (ROOTEXTRACTSQ V))
      (COND ((NOT (EQUAL V1 V)) (RETURN (RESIMP V1))) (T (RETURN V))))) 
(PUT 'XPDIFF 'NUMBER-OF-ARGS 2) 
(PUT 'XPDIFF 'DEFINED-ON-LINE '180) 
(PUT 'XPDIFF 'DEFINED-IN-FILE 'INT/DIVIDE.RED) 
(PUT 'XPDIFF 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE XPDIFF (A B)
    (COND ((NULL A) (COND ((NULL B) NIL) (T (INTERR "B too long in xpdiff"))))
          ((NULL B) (INTERR "A too long in xpdiff"))
          ((GREATERP (CAR B) (CAR A)) 'FAILED)
          (T
           ((LAMBDA (R)
              (COND ((EQUAL R 'FAILED) 'FAILED)
                    (T (CONS (DIFFERENCE (CAR A) (CAR B)) R))))
            (XPDIFF (CDR A) (CDR B)))))) 
(PUT 'CONJSQRT 'NUMBER-OF-ARGS 2) 
(PUT 'CONJSQRT 'DEFINED-ON-LINE '191) 
(PUT 'CONJSQRT 'DEFINED-IN-FILE 'INT/DIVIDE.RED) 
(PUT 'CONJSQRT 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE CONJSQRT (B VAR)
    (COND ((NULL B) NIL)
          (T (CONS (CONJTERM (CAAR B) (CDAR B) VAR) (CONJSQRT (CDR B) VAR))))) 
(PUT 'CONJTERM 'NUMBER-OF-ARGS 3) 
(PUT 'CONJTERM 'DEFINED-ON-LINE '196) 
(PUT 'CONJTERM 'DEFINED-IN-FILE 'INT/DIVIDE.RED) 
(PUT 'CONJTERM 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE CONJTERM (XL COEF VAR)
    (COND ((INVOLVESP XL VAR ZLIST) (CONS XL (NEGSQ COEF))) (T (CONS XL COEF)))) 
(PUT 'INVOLVESP 'NUMBER-OF-ARGS 3) 
(PUT 'INVOLVESP 'DEFINED-ON-LINE '201) 
(PUT 'INVOLVESP 'DEFINED-IN-FILE 'INT/DIVIDE.RED) 
(PUT 'INVOLVESP 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE INVOLVESP (XL VAR ZL)
    (COND ((NULL XL) (INTERR "Var not found in involvesp"))
          ((EQUAL (CAR ZL) VAR) (NEQ (CAR XL) 0))
          (T (INVOLVESP (CDR XL) VAR (CDR ZL))))) 
(ENDMODULE) 