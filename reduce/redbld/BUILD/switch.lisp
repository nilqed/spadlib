(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'SWITCH)) 
(GLOBAL '(*SWITCHCHECK SWITCHLIST* SWITCHTREE* SWITCHSTRING*)) 
(PUT 'ADD-TO-SORTED-TREE 'NUMBER-OF-ARGS 2) 
(PUT 'ADD-TO-SORTED-TREE 'DEFINED-ON-LINE '69) 
(PUT 'ADD-TO-SORTED-TREE 'DEFINED-IN-FILE 'RLISP/SWITCH.RED) 
(PUT 'ADD-TO-SORTED-TREE 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE ADD-TO-SORTED-TREE (X U)
    (COND ((NULL U) (CONS NIL (CONS X NIL))) ((EQUAL X (CADR U)) U)
          ((ORDERP X (CADR U)) (CONS (ADD-TO-SORTED-TREE X (CAR U)) (CDR U)))
          (T (CONS (CAR U) (CONS (CADR U) (ADD-TO-SORTED-TREE X (CDDR U))))))) 
(PUT 'FLATTEN-SORTED-TREE 'NUMBER-OF-ARGS 2) 
(PUT 'FLATTEN-SORTED-TREE 'DEFINED-ON-LINE '76) 
(PUT 'FLATTEN-SORTED-TREE 'DEFINED-IN-FILE 'RLISP/SWITCH.RED) 
(PUT 'FLATTEN-SORTED-TREE 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE FLATTEN-SORTED-TREE (U L)
    (COND ((NULL U) L)
          (T
           (FLATTEN-SORTED-TREE (CAR U)
                                (CONS (CADR U)
                                      (FLATTEN-SORTED-TREE (CDDR U) L)))))) 
(PUT 'STRING-OF-LIST 'NUMBER-OF-ARGS 1) 
(PUT 'STRING-OF-LIST 'DEFINED-ON-LINE '83) 
(PUT 'STRING-OF-LIST 'DEFINED-IN-FILE 'RLISP/SWITCH.RED) 
(PUT 'STRING-OF-LIST 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE STRING-OF-LIST (L)
    (COND ((NULL L) "")
          (T
           (LIST2STRING
            (CDR
             (PROG (X FORALL-RESULT FORALL-ENDPTR)
               (SETQ X L)
              STARTOVER
               (COND ((NULL X) (RETURN NIL)))
               (SETQ FORALL-RESULT
                       ((LAMBDA (X) (CONS '|;| (EXPLODE X))) (CAR X)))
               (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
               (SETQ X (CDR X))
               (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
              LOOPLABEL
               (COND ((NULL X) (RETURN FORALL-RESULT)))
               (RPLACD FORALL-ENDPTR
                       ((LAMBDA (X) (CONS '|;| (EXPLODE X))) (CAR X)))
               (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
               (SETQ X (CDR X))
               (GO LOOPLABEL))))))) 
(SETQ SWITCHTREE* NIL) 
(SETQ SWITCHSTRING* "") 
(PUT 'ON 'NUMBER-OF-ARGS 1) 
(PUT 'ON 'DEFINED-ON-LINE '92) 
(PUT 'ON 'DEFINED-IN-FILE 'RLISP/SWITCH.RED) 
(PUT 'ON 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE ON (U)
    (PROG (J)
      (SETQ J U)
     LAB
      (COND ((NULL J) (RETURN NIL)))
      ((LAMBDA (J) (ON1 J)) (CAR J))
      (SETQ J (CDR J))
      (GO LAB))) 
(PUT 'OFF 'NUMBER-OF-ARGS 1) 
(PUT 'OFF 'DEFINED-ON-LINE '94) 
(PUT 'OFF 'DEFINED-IN-FILE 'RLISP/SWITCH.RED) 
(PUT 'OFF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE OFF (U)
    (PROG (J)
      (SETQ J U)
     LAB
      (COND ((NULL J) (RETURN NIL)))
      ((LAMBDA (J) (OFF1 J)) (CAR J))
      (SETQ J (CDR J))
      (GO LAB))) 
(PUT 'OFF1 'NUMBER-OF-ARGS 1) 
(PUT 'OFF1 'DEFINED-ON-LINE '96) 
(PUT 'OFF1 'DEFINED-IN-FILE 'RLISP/SWITCH.RED) 
(PUT 'OFF1 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE OFF1 (U) (ONOFF U NIL)) 
(PUT 'ON1 'NUMBER-OF-ARGS 1) 
(PUT 'ON1 'DEFINED-ON-LINE '98) 
(PUT 'ON1 'DEFINED-IN-FILE 'RLISP/SWITCH.RED) 
(PUT 'ON1 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE ON1 (U) (ONOFF U T)) 
(PUT 'ONOFF 'NUMBER-OF-ARGS 2) 
(PUT 'ONOFF 'DEFINED-ON-LINE '100) 
(PUT 'ONOFF 'DEFINED-IN-FILE 'RLISP/SWITCH.RED) 
(PUT 'ONOFF 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE ONOFF (U BOOL)
    (PROG (X Y)
      (COND
       ((NOT (IDP U))
        (PROGN (LPRIW "*****" (LIST U "not valid as switch")) (RETURN NIL)))
       ((NOT (FLAGP U 'SWITCH))
        (PROGN (LPRIW "*****" (LIST U "not defined as switch")) (RETURN NIL))))
      (SETQ X (INTERN (LIST2STRING (CONS '* (EXPLODE2 U)))))
      (COND ((AND *SWITCHCHECK (EQ (LISPEVAL X) BOOL)) (RETURN NIL))
            ((SETQ Y (ATSOC BOOL (GET U 'SIMPFG)))
             (LISPEVAL (CONS 'PROGN (APPEND (CDR Y) (LIST NIL))))))
      (COND ((AND BOOL (EQUAL X '*RAISE)) (SETQ X '*RAISE))
            ((AND BOOL (EQUAL X '|*lower|)) (SETQ X '*LOWER)))
      (SET X BOOL))) 
(FLUID '(SWCKSAVE)) 
(PUT 'ONOFF-RESET 'NUMBER-OF-ARGS 1) 
(PUT 'ONOFF-RESET 'DEFINED-ON-LINE '119) 
(PUT 'ONOFF-RESET 'DEFINED-IN-FILE 'RLISP/SWITCH.RED) 
(PUT 'ONOFF-RESET 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE ONOFF-RESET (U)
    ((LAMBDA (SWCKSAVE)
       (PROGN
        (SETQ *SWITCHCHECK T)
        (ONOFF U (COND ((GET U 'SWITCHDEFAULT) T) (T NIL)))
        (SETQ *SWITCHCHECK SWCKSAVE)))
     *SWITCHCHECK)) 
(PUT 'SWITCH 'NUMBER-OF-ARGS 1) 
(PUT 'SWITCH 'DEFINED-ON-LINE '127) 
(PUT 'SWITCH 'DEFINED-IN-FILE 'RLISP/SWITCH.RED) 
(PUT 'SWITCH 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SWITCH (U)
    (PROG (X)
      (SETQ X U)
     LAB
      (COND ((NULL X) (RETURN NIL)))
      ((LAMBDA (X)
         (PROG (Y DFLT)
           (COND
            ((AND (EQCAR X 'EQUAL) (NOT (ATOM (CDR X))) (IDP (CADR X))
                  (NOT (NULL (CDDR X))) (NULL (CDDDR X)))
             (COND
              ((MEMQ (CADDR X) '(ON OFF T NIL))
               (PROGN
                (SETQ DFLT
                        (LIST
                         (COND ((EQUAL (CADDR X) 'ON) T)
                               ((EQUAL (CADDR X) 'OFF) NIL) (T (CADDR X)))))
                (SETQ X (CADR X))))
              (T (TYPERR (CADDR X) "switch default value")))))
           (COND ((NOT (IDP X)) (TYPERR X "switch")))
           (COND ((AND (FLAGP X 'SWITCH) (MEMQ X SWITCHLIST*)) (RETURN NIL)))
           (SETQ SWITCHTREE* (ADD-TO-SORTED-TREE X SWITCHTREE*))
           (SETQ SWITCHLIST* (FLATTEN-SORTED-TREE SWITCHTREE* NIL))
           (SETQ SWITCHSTRING* (STRING-OF-LIST SWITCHLIST*))
           (FLAG (LIST X) 'SWITCH)
           (SETQ Y (INTERN (LIST2STRING (CONS '* (EXPLODE2 X)))))
           (COND ((AND (NOT (FLUIDP Y)) (NOT (GLOBALP Y))) (FLUID (LIST Y))))
           (COND
            ((NOT (NULL DFLT))
             (PROGN (PUT X 'SWITCHDEFAULT (CAR DFLT)) (SET Y (CAR DFLT)))))))
       (CAR X))
      (SETQ X (CDR X))
      (GO LAB))) 
(DEFLIST '((SWITCH RLIS)) 'STAT) 
(FLAG '(SWITCH) 'EVAL) 
(PUT 'OFF 'STAT 'RLIS) 
(PUT 'ON 'STAT 'RLIS) 
(FLAG '(OFF ON) 'IGNORE) 
(SWITCH
 (LIST 'BACKTRACE 'COMP 'DEFN 'DEMO 'ECHO 'ERRCONT 'FASTFOR 'INT 'LESSSPACE
       'MSG 'OUTPUT 'PRET 'QUOTENEWNAM 'RAISE 'LOWER 'TIME 'STRICT_ARGCOUNT
       (LIST 'EQUAL 'REPORT_COLONS 'ON))) 
(PUT 'EOLDELIMP 'SIMPFG
     '((T (FLAG (LIST $EOL$) 'DELCHAR)) (NIL (REMFLAG (LIST $EOL$) 'DELCHAR)))) 
(SWITCH (LIST 'REDUCE4)) 
(PUT 'REDUCE4 'SIMPFG '((T (LOAD-PACKAGE 'REDUCE4) (%REDUCE4)))) 
(ENDMODULE) 