(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'SPLUDCMP)) 
(PUT 'SPLU_DECOM 'NUMBER-OF-ARGS 1) 
(PUT 'SPLU_DECOM 'DEFINED-ON-LINE '48) 
(PUT 'SPLU_DECOM 'DEFINED-IN-FILE 'SPARSE/SPLUDCMP.RED) 
(PUT 'SPLU_DECOM 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SPLU_DECOM (IN_MAT)
    (PROG (ANS I_TURNED_ROUNDED_ON SQ_SIZE)
      (SETQ SQ_SIZE 0)
      (COND
       ((NOT (MATRIXP IN_MAT))
        (REDERR "Error in splu_decom: non matrix input.")))
      (COND
       ((NOT (SQUAREP IN_MAT))
        (REDERR "Error in splu_decom: input matrix should be square.")))
      (COND
       ((NOT *ROUNDED)
        (PROGN (SETQ I_TURNED_ROUNDED_ON T) (ON (LIST 'ROUNDED)) NIL)))
      (SETQ SQ_SIZE (SPROW_DIM IN_MAT))
      (COND ((SPCX_TEST IN_MAT SQ_SIZE) (SETQ ANS (SPCOMPDET IN_MAT)))
            (T (SETQ ANS (SPUNSYMDET IN_MAT))))
      (COND (I_TURNED_ROUNDED_ON (OFF (LIST 'ROUNDED))))
      (RETURN ANS))) 
(FLAG '(SPLU_DECOM) 'OPFN) 
(PUT 'SPCX_TEST 'NUMBER-OF-ARGS 2) 
(PUT 'SPCX_TEST 'DEFINED-ON-LINE '69) 
(PUT 'SPCX_TEST 'DEFINED-IN-FILE 'SPARSE/SPLUDCMP.RED) 
(PUT 'SPCX_TEST 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE SPCX_TEST (IN_MAT SQ_SIZE)
    (PROG (BOOL ELT COL VAL I)
      (SETQ I 0)
      (SETQ I 1)
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND (NOT BOOL) (LEQ I SQ_SIZE))) (RETURN NIL)))
        (PROGN
         (SETQ COL (FINDROW IN_MAT I))
         (COND
          ((NOT (EQUAL COL NIL))
           (PROGN
            (PROG (XX)
              (SETQ XX (CDR COL))
             LAB
              (COND ((NULL XX) (RETURN NIL)))
              ((LAMBDA (XX)
                 (PROGN
                  (SETQ ELT (CDR XX))
                  (SETQ VAL (AEVAL* (LIST 'IMPART ELT)))
                  (COND ((NEQ VAL 0) (PROGN (SETQ BOOL T) (SETQ XX NIL))))
                  NIL))
               (CAR XX))
              (SETQ XX (CDR XX))
              (GO LAB))
            NIL)))
         (SETQ I (PLUS I 1))
         NIL)
        (GO WHILELABEL))
      (RETURN BOOL))) 
(FLAG '(SPCX_TEST) 'BOOLEAN) 
(PUT 'SPUNSYMDET 'NUMBER-OF-ARGS 1) 
(PUT 'SPUNSYMDET 'DEFINED-ON-LINE '93) 
(PUT 'SPUNSYMDET 'DEFINED-IN-FILE 'SPARSE/SPLUDCMP.RED) 
(PUT 'SPUNSYMDET 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SPUNSYMDET (MAT1)
    (PROG (X Y IN_MAT TMP INT_VEC U COL TP_MAT1 TP_MAT2 VAL COL2 I J K L N)
      (SETQ I 0)
      (SETQ J 0)
      (SETQ K 0)
      (SETQ L 0)
      (SETQ N 0)
      (SETQ J 1)
      (SETQ IN_MAT (SP-COPY-VECT MAT1 NIL))
      (SETQ N (SPROW_DIM IN_MAT))
      (SETQ INT_VEC (MKVECT (DIFFERENCE N 1)))
      (PROG (I)
        (SETQ I 1)
       LAB
        (COND ((MINUSP (DIFFERENCE N I)) (RETURN NIL)))
        (PROGN
         (SETQ COL (FINDROW IN_MAT I))
         (COND ((EQUAL COL NIL) (SETQ COL (LIST NIL))))
         (SETQ Y (SPINNERPROD 1 1 N 0 COL COL))
         (PUTV INT_VEC (DIFFERENCE I 1) (LIST 'QUOTIENT 1 (LIST 'SQRT Y)))
         NIL)
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (PROG (K)
        (SETQ K 1)
       LAB
        (COND ((MINUSP (DIFFERENCE N K)) (RETURN NIL)))
        (PROGN
         (SETQ TP_MAT1 (SP-COPY-VECT (SMTP IN_MAT NIL) NIL))
         (SETQ L K)
         (SETQ X 0)
         (SETQ COL (FINDROW TP_MAT1 K))
         (COND
          ((NOT (EQUAL COL NIL))
           (PROGN
            (PROG (XX)
              (SETQ XX (CDR COL))
             LAB
              (COND ((NULL XX) (RETURN NIL)))
              ((LAMBDA (XX)
                 (PROGN
                  (SETQ I (CAR XX))
                  (SETQ VAL (CDR XX))
                  (COND
                   ((GEQ I K)
                    (PROGN
                     (SETQ Y
                             (SPINNERPROD 1 1 (DIFFERENCE K 1)
                              (LIST 'MINUS VAL) (FINDROW IN_MAT I) COL))
                     (LETMTR3 (LIST IN_MAT I K) (REVAL1 (LIST 'MINUS Y) T)
                      IN_MAT NIL)
                     (SETQ Y
                             (ABS
                              (GET_NUM_PART
                               (REVAL1
                                (LIST 'TIMES Y (GETV INT_VEC (DIFFERENCE I 1)))
                                T))))
                     (COND
                      ((GREATERP Y
                                 (GET_NUM_PART
                                  (COND ((FIXP X) X) (T (REVAL1 X T)))))
                       (PROGN (SETQ X Y) (SETQ L I) NIL)))
                     NIL)))
                  NIL))
               (CAR XX))
              (SETQ XX (CDR XX))
              (GO LAB))
            NIL)))
         (COND
          ((NEQ L K)
           (PROGN
            (SETQ COL (FINDROW IN_MAT K))
            (LETMTR3 (LIST IN_MAT K) (FINDROW IN_MAT L) IN_MAT NIL)
            (LETMTR3 (LIST IN_MAT L) COL IN_MAT NIL)
            (PUTV INT_VEC (DIFFERENCE L 1) (GETV INT_VEC (DIFFERENCE K 1)))
            NIL)))
         (PUTV INT_VEC (DIFFERENCE K 1) L)
         (COND
          ((LESSP (GET_NUM_PART (COND ((FIXP X) X) (T (REVAL1 X T))))
                  (GET_NUM_PART (REVAL1 (LIST 'TIMES 8 RD-TOLERANCE*) T)))
           (REDERR
            "Error in splu_decom: matrix is singular. LU decomposition not possible.")))
         (SETQ X (LIST 'QUOTIENT (LIST 'MINUS 1) (FINDELEM2 IN_MAT K K)))
         (SETQ TP_MAT1 (SP-COPY-VECT (SMTP IN_MAT NIL) NIL))
         (SETQ COL (FINDROW IN_MAT K))
         (PROG (XX)
           (SETQ XX (CDR COL))
          LAB
           (COND ((NULL XX) (RETURN NIL)))
           ((LAMBDA (XX)
              (PROGN
               (SETQ J (CAR XX))
               (SETQ VAL (CDR XX))
               (COND
                ((GEQ J (PLUS K 1))
                 (PROGN
                  (SETQ Y
                          (SPINNERPROD 1 1 (DIFFERENCE K 1) (LIST 'MINUS VAL)
                           COL (FINDROW TP_MAT1 J)))
                  (LETMTR3 (LIST IN_MAT K J) (REVAL1 (LIST 'TIMES X Y) T)
                   IN_MAT NIL))))
               NIL))
            (CAR XX))
           (SETQ XX (CDR XX))
           (GO LAB))
         NIL)
        (SETQ K (PLUS2 K 1))
        (GO LAB))
      (SETQ TMP (SPGET_L_AND_U IN_MAT N))
      (SETQ L (CAR TMP))
      (SETQ U (CADR TMP))
      (RETURN (LIST 'LIST L U INT_VEC)))) 
(PUT 'SPINNERPROD 'NUMBER-OF-ARGS 6) 
(PUT 'SPINNERPROD 'DEFINED-ON-LINE '164) 
(PUT 'SPINNERPROD 'DEFINED-IN-FILE 'SPARSE/SPLUDCMP.RED) 
(PUT 'SPINNERPROD 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE SPINNERPROD (L S U C1 ROWA ROWB)
    (PROG (S1 D1 VAL1 VAL2 J)
      (SETQ S1 C1)
      (SETQ D1 S1)
      (PROG (XX)
        (SETQ XX (CDR ROWA))
       LAB
        (COND ((NULL XX) (RETURN NIL)))
        ((LAMBDA (XX)
           (PROGN
            (SETQ J (CAR XX))
            (COND ((EQUAL J NIL) (SETQ J 0)))
            (SETQ VAL1 (CDR XX))
            (COND
             ((OR (EQUAL VAL1 NIL) (EQUAL VAL1 (LIST NIL))) (SETQ VAL1 0)))
            (COND
             ((LEQ J U)
              (PROGN
               (SETQ VAL2 (ATSOC J ROWB))
               (COND ((OR (EQUAL VAL2 NIL) (EQUAL VAL2 (LIST NIL))) NIL)
                     (T
                      (PROGN
                       (SETQ S1 (LIST 'PLUS S1 (LIST 'TIMES VAL1 (CDR VAL2))))
                       (SETQ D1 S1)
                       NIL)))
               NIL)))
            NIL))
         (CAR XX))
        (SETQ XX (CDR XX))
        (GO LAB))
      (RETURN D1))) 
(PUT 'SPGET_L_AND_U 'NUMBER-OF-ARGS 2) 
(PUT 'SPGET_L_AND_U 'DEFINED-ON-LINE '192) 
(PUT 'SPGET_L_AND_U 'DEFINED-IN-FILE 'SPARSE/SPLUDCMP.RED) 
(PUT 'SPGET_L_AND_U 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE SPGET_L_AND_U (IN_MAT SQ_SIZE)
    (PROG (L U COL I J VAL)
      (SETQ I 0)
      (SETQ J 0)
      (SETQ VAL 0)
      (SETQ L (MKEMPSPMAT SQ_SIZE (LIST 'SPM SQ_SIZE SQ_SIZE)))
      (SETQ U (MKEMPSPMAT SQ_SIZE (LIST 'SPM SQ_SIZE SQ_SIZE)))
      (PROG (I)
        (SETQ I 1)
       LAB
        (COND ((MINUSP (DIFFERENCE SQ_SIZE I)) (RETURN NIL)))
        (PROGN
         (LETMTR3 (LIST U I I) 1 U NIL)
         (SETQ COL (FINDROW IN_MAT I))
         (PROG (XX)
           (SETQ XX (CDR COL))
          LAB
           (COND ((NULL XX) (RETURN NIL)))
           ((LAMBDA (XX)
              (PROGN
               (SETQ J (CAR XX))
               (SETQ VAL (CDR XX))
               (COND ((LEQ J I) (PROGN (LETMTR3 (LIST L I J) VAL L NIL)))
                     ((GEQ J (PLUS I 1))
                      (PROGN (LETMTR3 (LIST U I J) VAL U NIL))))
               NIL))
            (CAR XX))
           (SETQ XX (CDR XX))
           (GO LAB))
         NIL)
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (RETURN (LIST L U)))) 
(PUT 'SPCOMPDET 'NUMBER-OF-ARGS 1) 
(PUT 'SPCOMPDET 'DEFINED-ON-LINE '218) 
(PUT 'SPCOMPDET 'DEFINED-IN-FILE 'SPARSE/SPLUDCMP.RED) 
(PUT 'SPCOMPDET 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SPCOMPDET (MAT1)
    (PROG (X Y IN_MAT TMP INT_VEC U P PP V W Z COL TP_MAT1 RCOL RECOL RE ICOL
           IMCOL IM RVAL IVAL RL IL CL I J K L N)
      (SETQ I 0)
      (SETQ J 0)
      (SETQ K 0)
      (SETQ L 0)
      (SETQ N 0)
      (COND
       ((EQUAL (AEVAL (LIST 'DET MAT1)) 0)
        (REDERR
         "Error in splu_decom: matrix is singular. LU decomposition not possible.")))
      (SETQ J 1)
      (SETQ N (SPROW_DIM MAT1))
      (SETQ IN_MAT (SPIM_UNCOMPRESS MAT1 N))
      (SETQ INT_VEC (MKVECT (DIFFERENCE N 1)))
      (PROG (I)
        (SETQ I 1)
       LAB
        (COND ((MINUSP (DIFFERENCE N I)) (RETURN NIL)))
        (PROGN
         (SETQ COL (FINDROW IN_MAT I))
         (COND
          ((NOT (EQUAL COL NIL))
           (PUTV INT_VEC (DIFFERENCE I 1)
                 (SPINNERPROD 1 1 (PLUS N N) 0 COL COL))))
         NIL)
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (PROG (K)
        (SETQ K 1)
       LAB
        (COND ((MINUSP (DIFFERENCE N K)) (RETURN NIL)))
        (PROGN
         (SETQ TP_MAT1 (SP-COPY-VECT (SMTP IN_MAT 'CX) NIL))
         (SETQ L K)
         (SETQ P (PLUS K K))
         (SETQ PP (DIFFERENCE P 1))
         (SETQ Z 0)
         (SETQ RECOL (FINDROW TP_MAT1 PP))
         (SETQ IMCOL (FINDROW TP_MAT1 P))
         (COND
          ((OR (NOT (EQUAL RECOL NIL)) (NOT (EQUAL IMCOL NIL)))
           (PROGN
            (SETQ RECOL (CDR RECOL))
            (SETQ IMCOL (CDR IMCOL))
            (SETQ RL RECOL)
            (SETQ IL IMCOL)
            (PROG ()
             WHILELABEL
              (COND ((NOT (AND RECOL IMCOL)) (RETURN NIL)))
              (PROGN
               (SETQ RCOL (CAR RECOL))
               (SETQ RE (CAR RCOL))
               (SETQ RVAL (CDR RCOL))
               (COND ((EQUAL RVAL (LIST NIL)) (SETQ RVAL 0)))
               (SETQ ICOL (CAR IMCOL))
               (SETQ IM (CAR ICOL))
               (SETQ IVAL (CDR ICOL))
               (COND ((EQUAL IVAL (LIST NIL)) (SETQ IVAL 0)))
               (SETQ I RE)
               (SETQ COL (FINDROW IN_MAT I))
               (COND
                ((GEQ I K)
                 (PROGN
                  (SETQ TMP
                          (SPCXINNERPROD 1 1 (DIFFERENCE K 1) RVAL IVAL
                           (SPRE_ROW_VEC (CDR COL)) (SPCX_ROW_VEC (CDDR COL))
                           (FINDROW TP_MAT1 PP) (FINDROW TP_MAT1 P)))
                  (SETQ X (CAR TMP))
                  (SETQ Y (CADR TMP))
                  (LETMTR3 (LIST IN_MAT I PP) (REVAL1 X T) IN_MAT 'CX)
                  (LETMTR3 (LIST IN_MAT I P) (REVAL1 Y T) IN_MAT 'CX)
                  (SETQ X
                          (LIST 'QUOTIENT
                                (LIST 'PLUS (LIST 'EXPT X 2) (LIST 'EXPT Y 2))
                                (GETV INT_VEC (DIFFERENCE I 1))))
                  (COND
                   ((GREATERP (GET_NUM_PART (REVAL1 X T))
                              (GET_NUM_PART (REVAL1 Z T)))
                    (PROGN (SETQ Z X) (SETQ L I) NIL)))
                  NIL)))
               (SETQ RECOL (CDR RECOL))
               (SETQ IMCOL (CDR IMCOL))
               NIL)
              (GO WHILELABEL))
            NIL)))
         (COND
          ((NEQ L K)
           (PROGN
            (SETQ COL (FINDROW IN_MAT K))
            (LETMTR3 (LIST IN_MAT K) (FINDROW IN_MAT L) IN_MAT 'CX)
            (LETMTR3 (LIST IN_MAT L) COL IN_MAT 'CX)
            (PUTV INT_VEC (DIFFERENCE L 1) (GETV INT_VEC (DIFFERENCE K 1)))
            NIL
            NIL)))
         (PUTV INT_VEC (DIFFERENCE K 1) L)
         (SETQ COL (FINDROW IN_MAT K))
         (COND (COL (SETQ COL (CDR COL))))
         (SETQ TP_MAT1 (SP-COPY-VECT (SMTP IN_MAT 'CX) NIL))
         (SETQ X (ATSOC PP COL))
         (COND (X (SETQ X (CDR X))))
         (COND ((EQUAL X (LIST NIL)) (SETQ X 0)))
         (SETQ Y (ATSOC P COL))
         (COND (Y (SETQ Y (CDR Y))))
         (COND ((EQUAL Y (LIST NIL)) (SETQ Y 0)))
         (SETQ Z (LIST 'PLUS (LIST 'EXPT X 2) (LIST 'EXPT Y 2)))
         (SETQ CL COL)
         (PROG ()
          WHILELABEL
           (COND ((NOT COL) (RETURN NIL)))
           (PROGN
            (SETQ RCOL (CAR COL))
            (SETQ RE (CAR RCOL))
            (SETQ RVAL (CDR RCOL))
            (COND ((EQUAL RVAL (LIST NIL)) (SETQ RVAL 0)))
            (SETQ ICOL (CADR COL))
            (SETQ IM (CAR ICOL))
            (SETQ IVAL (CDR ICOL))
            (COND ((EQUAL IVAL (LIST NIL)) (SETQ IVAL 0)))
            (SETQ J (QUOTIENT IM 2))
            (COND
             ((GEQ J (PLUS K 1))
              (PROGN
               (SETQ P (PLUS J J))
               (SETQ PP (DIFFERENCE P 1))
               (SETQ TMP
                       (SPCXINNERPROD 1 1 (DIFFERENCE K 1) RVAL IVAL
                        (SPRE_ROW_VEC CL) (SPCX_ROW_VEC (CDR CL))
                        (FINDROW TP_MAT1 PP) (FINDROW TP_MAT1 P)))
               (SETQ V (CAR TMP))
               (SETQ W (CADR TMP))
               (LETMTR3 (LIST IN_MAT K PP)
                (REVAL1
                 (LIST 'QUOTIENT
                       (LIST 'PLUS (LIST 'TIMES V X) (LIST 'TIMES W Y)) Z)
                 T)
                IN_MAT 'CX)
               (LETMTR3 (LIST IN_MAT K P)
                (REVAL1
                 (LIST 'QUOTIENT
                       (LIST 'PLUS (LIST 'TIMES W X)
                             (LIST 'MINUS (LIST 'TIMES V Y)))
                       Z)
                 T)
                IN_MAT 'CX)
               NIL)))
            (SETQ COL (CDDR COL))
            NIL)
           (GO WHILELABEL))
         NIL)
        (SETQ K (PLUS2 K 1))
        (GO LAB))
      (SETQ IN_MAT (SPIM_COMPRESS IN_MAT N))
      (SETQ TMP (SPGET_L_AND_U IN_MAT N))
      (SETQ L (CAR TMP))
      (SETQ U (CADR TMP))
      (RETURN (LIST 'LIST L U INT_VEC)))) 
(PUT 'SPCXINNERPROD 'NUMBER-OF-ARGS 9) 
(PUT 'SPCXINNERPROD 'DEFINED-ON-LINE '341) 
(PUT 'SPCXINNERPROD 'DEFINED-IN-FILE 'SPARSE/SPLUDCMP.RED) 
(PUT 'SPCXINNERPROD 'PROCEDURE_TYPE
     '(ARROW
       (TIMES GENERAL GENERAL GENERAL GENERAL GENERAL GENERAL GENERAL GENERAL
              GENERAL)
       GENERAL)) 
(DE SPCXINNERPROD (L S U CR CI VEC_AR VEC_AI VEC_BR VEC_BI)
    (PROG (H DR DI)
      (SETQ H (SPINNERPROD L S U (LIST 'MINUS CR) VEC_AR VEC_BR))
      (SETQ DR (SPINNERPROD L S U (LIST 'MINUS H) VEC_AI VEC_BI))
      (SETQ H (SPINNERPROD L S U (LIST 'MINUS CI) VEC_AI VEC_BR))
      (SETQ DI (LIST 'MINUS (SPINNERPROD L S U H VEC_AR VEC_BI)))
      (RETURN (LIST DR DI)))) 
(PUT 'SPCX_ROW_VEC 'NUMBER-OF-ARGS 1) 
(PUT 'SPCX_ROW_VEC 'DEFINED-ON-LINE '356) 
(PUT 'SPCX_ROW_VEC 'DEFINED-IN-FILE 'SPARSE/SPLUDCMP.RED) 
(PUT 'SPCX_ROW_VEC 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SPCX_ROW_VEC (LIST)
    (PROG (IMCOL NLIST VAL COLN)
      (SETQ COLN 0)
      (PROG ()
       WHILELABEL
        (COND ((NOT LIST) (RETURN NIL)))
        (PROGN
         (SETQ IMCOL (CAR LIST))
         (SETQ VAL (CDR IMCOL))
         (SETQ COLN (CAR IMCOL))
         (SETQ COLN (QUOTIENT COLN 2))
         (SETQ IMCOL (CONS COLN VAL))
         (SETQ NLIST (CONS IMCOL NLIST))
         (COND ((CDR LIST) (SETQ LIST (CDDR LIST))) (T (SETQ LIST (CDR LIST))))
         NIL)
        (GO WHILELABEL))
      (RETURN (CONS (LIST NIL) (REVERSE NLIST))))) 
(PUT 'SPRE_ROW_VEC 'NUMBER-OF-ARGS 1) 
(PUT 'SPRE_ROW_VEC 'DEFINED-ON-LINE '379) 
(PUT 'SPRE_ROW_VEC 'DEFINED-IN-FILE 'SPARSE/SPLUDCMP.RED) 
(PUT 'SPRE_ROW_VEC 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SPRE_ROW_VEC (LIST)
    (PROG (RECOL NLIST VAL COLN)
      (SETQ COLN 0)
      (PROG ()
       WHILELABEL
        (COND ((NOT LIST) (RETURN NIL)))
        (PROGN
         (SETQ RECOL (CAR LIST))
         (SETQ COLN (CAR RECOL))
         (SETQ COLN (QUOTIENT (PLUS COLN 1) 2))
         (SETQ VAL (CDR RECOL))
         (SETQ RECOL (CONS COLN VAL))
         (SETQ NLIST (CONS RECOL NLIST))
         (SETQ LIST (CDDR LIST))
         NIL)
        (GO WHILELABEL))
      (RETURN (CONS (LIST NIL) (REVERSE NLIST))))) 
(PUT 'SPIM_UNCOMPRESS 'NUMBER-OF-ARGS 2) 
(PUT 'SPIM_UNCOMPRESS 'DEFINED-ON-LINE '399) 
(PUT 'SPIM_UNCOMPRESS 'DEFINED-IN-FILE 'SPARSE/SPLUDCMP.RED) 
(PUT 'SPIM_UNCOMPRESS 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE SPIM_UNCOMPRESS (IN_MAT N)
    (PROG (CX_MAT TMP COL VAL1 VAL2 I J)
      (SETQ I 0)
      (SETQ J 0)
      (SETQ CX_MAT (MKEMPSPMAT N (LIST 'SPM N (TIMES 2 N))))
      (PROG (I)
        (SETQ I 1)
       LAB
        (COND ((MINUSP (DIFFERENCE N I)) (RETURN NIL)))
        (PROGN
         (SETQ COL (FINDROW IN_MAT I))
         (PROG (XX)
           (SETQ XX (CDR COL))
          LAB
           (COND ((NULL XX) (RETURN NIL)))
           ((LAMBDA (XX)
              (PROGN
               (SETQ J (CAR XX))
               (SETQ TMP (CDR XX))
               (SETQ VAL1 (AEVAL* (LIST 'REPART TMP)))
               (SETQ VAL2 (AEVAL* (LIST 'IMPART TMP)))
               (LETMTR3 (LIST CX_MAT I (DIFFERENCE (TIMES 2 J) 1)) VAL1 CX_MAT
                'CX)
               (LETMTR3 (LIST CX_MAT I (TIMES 2 J)) VAL2 CX_MAT 'CX)
               NIL))
            (CAR XX))
           (SETQ XX (CDR XX))
           (GO LAB))
         NIL)
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (RETURN CX_MAT))) 
(PUT 'SPIM_COMPRESS 'NUMBER-OF-ARGS 2) 
(PUT 'SPIM_COMPRESS 'DEFINED-ON-LINE '424) 
(PUT 'SPIM_COMPRESS 'DEFINED-IN-FILE 'SPARSE/SPLUDCMP.RED) 
(PUT 'SPIM_COMPRESS 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE SPIM_COMPRESS (CX_MAT N)
    (PROG (COMP_MAT COL VAL1 VAL2 COL1 COL2 I J)
      (SETQ I 0)
      (SETQ J 0)
      (SETQ COMP_MAT (MKEMPSPMAT N (LIST 'SPM N N)))
      (PROG (I)
        (SETQ I 1)
       LAB
        (COND ((MINUSP (DIFFERENCE N I)) (RETURN NIL)))
        (PROGN
         (SETQ COL (FINDROW CX_MAT I))
         (COND (COL (SETQ COL (CDR COL))))
         (PROG ()
          WHILELABEL
           (COND ((NOT COL) (RETURN NIL)))
           (PROGN
            (SETQ COL1 (CAR COL))
            (SETQ COL2 (CADR COL))
            (SETQ VAL1 (CDR COL1))
            (SETQ VAL2 (CDR COL2))
            (SETQ J (QUOTIENT (CAR COL2) 2))
            (LETMTR3 (LIST COMP_MAT I J)
             (REVAL1 (LIST 'PLUS VAL1 (LIST 'TIMES 'I VAL2)) T) COMP_MAT NIL)
            (SETQ COL (CDDR COL))
            NIL)
           (GO WHILELABEL))
         NIL)
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (RETURN COMP_MAT))) 
(PUT 'SPCONVERT 'NUMBER-OF-ARGS 2) 
(PUT 'SPCONVERT 'DEFINED-ON-LINE '449) 
(PUT 'SPCONVERT 'DEFINED-IN-FILE 'SPARSE/SPLUDCMP.RED) 
(PUT 'SPCONVERT 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE SPCONVERT (IN_MAT INT_VEC)
    (PROG (NEW_MAT I)
      (SETQ I 0)
      (COND
       ((NOT (MATRIXP IN_MAT))
        (REDERR "Error in convert(first argument): should be a matrix.")))
      (SETQ NEW_MAT (SP-COPY-VECT IN_MAT NIL))
      (PROG (I)
        (SETQ I 1)
       LAB
        (COND ((MINUSP (DIFFERENCE (PLUS (UPBV INT_VEC) 1) I)) (RETURN NIL)))
        (PROGN
         (COND
          ((NEQ (GETV INT_VEC (DIFFERENCE I 1)) I)
           (SETQ NEW_MAT
                   (SPSWAP_ROWS NEW_MAT I (GETV INT_VEC (DIFFERENCE I 1))))))
         NIL)
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (RETURN NEW_MAT))) 
(FLAG '(SPCONVERT) 'OPFN) 
(ENDMODULE) 