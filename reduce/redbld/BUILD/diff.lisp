(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'DIFF)) 
(FLUID '(*DEPEND FRLIS* POWLIS* SUBFG* WTL* DEPL*)) 
(FLUID '(*ALLOWDFINT *DFINT *EXPANDDF *INTFLAG* *DF_PARTIAL)) 
(GLOBAL '(MCOND* !FLEPS1)) 
(SWITCH (LIST 'ALLOWDFINT 'DFINT)) 
(DEFLIST
 '((DFINT ((T (RMSUBS))))
   (ALLOWDFINT
    ((T (PROGN (PUT 'INT 'DFFORM 'DFFORM_INT) (RMSUBS)))
     (NIL (REMPROP 'INT 'DFFORM)))))
 'SIMPFG) 
(SWITCH (LIST 'COMMUTEDF 'NOCOMMUTEDF 'SIMPNONCOMDF)) 
(DEFLIST
 '((COMMUTEDF ((T (OFF1 'NOCOMMUTEDF) (RMSUBS))))
   (NOCOMMUTEDF ((T (OFF1 'COMMUTEDF)) (NIL (RMSUBS))))
   (SIMPNONCOMDF ((T (RMSUBS)))))
 'SIMPFG) 
(SWITCH (LIST 'EXPANDDF)) 
(DEFLIST '((EXPANDDF ((T (RMSUBS))))) 'SIMPFG) 
(PUT 'SIMPDF 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPDF 'DEFINED-ON-LINE '122) 
(PUT 'SIMPDF 'DEFINED-IN-FILE 'POLY/DIFF.RED) 
(PUT 'SIMPDF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPDF (U)
    (PROG (V X Y Z)
      (COND ((NULL SUBFG*) (RETURN (MKSQ (CONS 'DF U) 1))))
      (SETQ V (CDR U))
      (SETQ U (SIMP* (CAR U)))
     A
      (COND ((OR (NULL V) (NULL (CAR U))) (RETURN U)))
      (SETQ X (COND ((OR (NULL Y) (EQUAL Y 0)) (SIMP* (CAR V))) (T Y)))
      (COND
       ((OR (NEQ (CDR X) 1) (ATOM (CAR X)))
        (TYPERR (PREPSQ X) "kernel or integer"))
       (T
        ((LAMBDA (Z)
           (COND
            ((OR (ATOM Z) (ATOM (CAR Z)))
             (COND
              ((GET (CAR Z) 'DOMAIN-DIFF-FN)
               (PROG (DMODE* ALGLIST*)
                 (SETQ ALGLIST* (CONS NIL NIL))
                 (SETQ X (PREPF Z))
                 (COND ((NULL (PREKERNP X)) (TYPERR X "kernel")))))
              (T (TYPERR (PREPF Z) "kernel"))))
            ((AND (NULL (CDR Z)) (EQUAL (CDAR Z) 1) (EQUAL (CDAAR Z) 1))
             (SETQ X (CAAAR Z)))
            (T (TYPERR (PREPF Z) "kernel"))))
         (CAR X))))
      (SETQ V (CDR V))
      (COND ((NULL V) (PROGN (SETQ U (DIFFSQ U X)) (GO A))))
      (SETQ Y (SIMP* (CAR V)))
      (COND ((NULL (CAR Y)) (PROGN (SETQ V (CDR V)) (SETQ Y NIL) (GO A)))
            ((NOT (SETQ Z (D2INT Y))) (PROGN (SETQ U (DIFFSQ U X)) (GO A))))
      (SETQ V (CDR V))
      (PROG (I)
        (SETQ I 1)
       LAB
        (COND ((MINUSP (DIFFERENCE Z I)) (RETURN NIL)))
        (SETQ U (DIFFSQ U X))
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (SETQ Y NIL)
      (GO A))) 
(PUT 'D2INT 'NUMBER-OF-ARGS 1) 
(PUT 'D2INT 'DEFINED-ON-LINE '158) 
(PUT 'D2INT 'DEFINED-IN-FILE 'POLY/DIFF.RED) 
(PUT 'D2INT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE D2INT (U)
    (COND ((NEQ (CDR U) 1) NIL) ((NUMBERP (SETQ U (CAR U))) U)
          ((OR (NOT (OR (ATOM U) (ATOM (CAR U)))) (NOT (EQ (CAR U) '|:RD:|)))
           NIL)
          (T
           ((LAMBDA (U)
              ((LAMBDA (X)
                 (COND ((LESSP (ABS (DIFFERENCE (FLOAT X) U)) !FLEPS1) X)
                       (T NIL)))
               (FIX U)))
            (CDR U))))) 
(PUT 'DF 'SIMPFN 'SIMPDF) 
(PUT 'PREKERNP 'NUMBER-OF-ARGS 1) 
(PUT 'PREKERNP 'DEFINED-ON-LINE '167) 
(PUT 'PREKERNP 'DEFINED-IN-FILE 'POLY/DIFF.RED) 
(PUT 'PREKERNP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PREKERNP (U)
    (COND ((ATOM U) (IDP U))
          (T
           (AND (IDP (CAR U))
                (NULL
                 (OR (MEMQ (CAR U) '(PLUS MINUS TIMES QUOTIENT RECIP))
                     (AND (EQ (CAR U) 'EXPT) (FIXP (CADDR U))))))))) 
(PUT 'DIFFSQ 'NUMBER-OF-ARGS 2) 
(PUT 'DIFFSQ 'DEFINED-ON-LINE '173) 
(PUT 'DIFFSQ 'DEFINED-IN-FILE 'POLY/DIFF.RED) 
(PUT 'DIFFSQ 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE DIFFSQ (U V)
    (MULTSQ (ADDSQ (DIFFF (CAR U) V) (NEGSQ (MULTSQ U (DIFFF (CDR U) V))))
            (CONS 1 (CDR U)))) 
(PUT 'DIFFF 'NUMBER-OF-ARGS 2) 
(PUT 'DIFFF 'DEFINED-ON-LINE '180) 
(PUT 'DIFFF 'DEFINED-IN-FILE 'POLY/DIFF.RED) 
(PUT 'DIFFF 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE DIFFF (U V)
    (COND ((ATOM U) (CONS NIL 1))
          ((ATOM (CAR U))
           ((LAMBDA (DIFF-FN)
              (COND (DIFF-FN (APPLY2 DIFF-FN U V)) (T (CONS NIL 1))))
            (GET (CAR U) 'DOMAIN-DIFF-FN)))
          (T
           (ADDSQ
            (ADDSQ
             (MULTSQ (CONS (LIST (CONS (CAAR U) 1)) 1) (DIFFF (CDAR U) V))
             (MULTSQ (DIFFP (CAAR U) V) (CONS (CDAR U) 1)))
            (DIFFF (CDR U) V))))) 
(PUT 'DIFFP 'NUMBER-OF-ARGS 2) 
(PUT 'DIFFP 'DEFINED-ON-LINE '192) 
(PUT 'DIFFP 'DEFINED-IN-FILE 'POLY/DIFF.RED) 
(PUT 'DIFFP 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE DIFFP (U V)
    (PROG (N W X Y Z M)
      (SETQ M 0)
      (SETQ N (CDR U))
      (SETQ U (CAR U))
      (COND
       ((AND (GREATERP N 1) (AND *NCMP (NONCOMP1 U)))
        (RETURN
         (ADDSQ
          (MULTSQ (SIMPDF (LIST U V))
                  ((LAMBDA (U)
                     (COND (*QSUM-SIMPEXPT (QSUM-SIMPEXPT U))
                           (T (BASIC-SIMPEXPT U))))
                   (LIST U (DIFFERENCE N 1))))
          (MULTSQ (CONS (LIST (CONS (CONS U 1) 1)) 1)
                  (DIFFP (CONS U (DIFFERENCE N 1)) V)))))
       ((AND (EQ U V) (SETQ W (CONS 1 1))) (GO E)) ((ATOM U) (GO F))
       ((OR (AND (NOT (ATOM (CAR U))) (SETQ W (DIFFF U V)))
            (AND (EQ (CAR U) '*SQ) (SETQ W (DIFFSQ (CADR U) V))))
        (GO C))
       ((SETQ X (GET (CAR U) 'DFFORM)) (RETURN (APPLY3 X U V N)))
       ((SETQ X (GET (CAR U) (DFN_PROP U))) NIL)
       ((AND (EQ (CAR U) 'PLUS) (SETQ W (DIFFSQ (SIMP U) V))) (GO C))
       (T (GO H)))
      (SETQ Y X)
      (SETQ Z (CDR U))
     A
      (SETQ W (CONS (DIFFSQ (SIMP (CAR Z)) V) W))
      (COND ((AND (CAAR W) (NULL (CAR Y))) (GO H)))
      (SETQ Y (CDR Y))
      (SETQ Z (CDR Z))
      (COND ((AND Z Y) (GO A)) ((OR Z Y) (GO H)))
      (SETQ Y (REVERSE W))
      (SETQ Z (CDR U))
      (SETQ W (CONS NIL 1))
      (PROG ()
       REPEATLABEL
        (PROGN
         (COND
          ((CAAR Y)
           (SETQ W
                   (ADDSQ
                    (MULTSQ (CAR Y) (SIMP (SUBLA (PAIR (CAAR X) Z) (CDAR X))))
                    W))))
         (SETQ X (CDR X))
         (SETQ Y (CDR Y)))
        (COND ((NOT (NULL Y)) (GO REPEATLABEL))))
     C
     E
      (COND
       ((SETQ X (ATSOC U WTL*))
        (SETQ W
                (MULTSQ (CONS (LIST (CONS (CONS 'K* (MINUS (CDR X))) 1)) 1)
                        W))))
      (SETQ M (DIFFERENCE N 1))
      (RETURN
       (RATIONALIZESQ
        (COND ((EQUAL N 1) W)
              ((AND (FLAGP DMODE* 'CONVERT)
                    (NULL
                     (SETQ N (INT-EQUIV-CHK (APPLY1 (GET DMODE* 'I2D) N)))))
               (CONS NIL 1))
              (T (MULTSQ (CONS (LIST (CONS (CONS U M) N)) 1) W)))))
     F
      (COND
       ((AND (NOT (DEPENDS U V))
             (OR (NOT (SETQ X (ATSOC U POWLIS*))) (NOT (DEPENDS (CADDDR X) V)))
             (NULL *DEPEND))
        (RETURN (CONS NIL 1))))
      (COND
       ((AND *EXPANDDF
             (OR (NOT (SETQ X (ATSOC U POWLIS*))) (NOT (DEPENDS (CADDDR X) V)))
             (SETQ X (ATSOC U DEPL*)) (NOT (MEMQ V (SETQ X (CDR X)))))
        (PROGN (SETQ W (DF-CHAIN-RULE U V X)) (GO E))))
      (SETQ W (LIST 'DF U V))
      (SETQ W (COND ((SETQ X (DIFFPMATCH W)) X) (T (MKSQ W 1))))
      (GO E)
     H
      (COND
       ((EQ (CAR U) 'DF)
        (PROGN
         (COND
          ((EQ (CADR U) V)
           (PROGN
            (COND ((AND *COMMUTEDF (NULL *DEPEND)) (RETURN (CONS NIL 1)))
                  ((AND *SIMPNONCOMDF (SETQ W (ATSOC V DEPL*)) (NULL (CDDR W)))
                   (PROGN
                    (SETQ X (CADDR U))
                    (SETQ W
                            (MULTSQ (SIMP (LIST 'DF U X))
                                    (INVSQ (SIMP (LIST 'DF V X)))))
                    (GO E))))))
          ((EQCAR (CADR U) 'INT)
           (COND
            ((EQ (CADDR (CADR U)) V)
             (PROGN
              (SETQ W (CONS 'DF (CONS (CADR (CADR U)) (CDDR U))))
              (GO J)))
            ((AND *ALLOWDFINT
                  (NOT_DF_P (SETQ W (DIFFSQ (SIMP* (CADR (CADR U))) V))))
             (PROGN
              (SETQ W
                      (CONS 'DF
                            (CONS
                             (REVAL1 (LIST 'INT (MK*SQ W) (CADDR (CADR U))) T)
                             (CDDR U))))
              (GO J))))))
         (COND
          ((AND *EXPANDDF (DEPENDS (CADR U) V)
                (OR (NOT (SETQ X (ATSOC (CADR U) POWLIS*)))
                    (NOT (DEPENDS (CADDDR X) V))))
           (PROGN
            (COND
             ((NOT (SMEMBER V (CADR U)))
              (PROGN
               (SETQ X (ASSOC (CADR U) DEPL*))
               (SETQ Y
                       (AND (NOT (ATOM (CADR U))) (CDR (CADR U))
                            (GET-ALL-KERNELS (CDR (CADR U)))))
               (COND ((AND X Y (LDEPENDS (DELETE V Y) V)) (PROGN NIL))
                     ((AND X (NOT (MEMQ V (SETQ X (CDR X)))))
                      (PROGN (SETQ W (DF-CHAIN-RULE U V X)) (GO E)))
                     ((AND Y (NOT (SMEMBER V Y)))
                      (PROGN (SETQ W (DF-CHAIN-RULE U V Y)) (GO E))))))))))
         (COND
          ((SETQ X
                   (FIND_SUB_DF (SETQ W (CONS (CADR U) (MERGE-IND-VARS U V)))
                                (GET 'DF 'KVALUE)))
           (PROGN
            (SETQ W (SIMP (CAR X)))
            (PROG (EL)
              (SETQ EL (CDR X))
             LAB
              (COND ((NULL EL) (RETURN NIL)))
              ((LAMBDA (EL)
                 (PROG (I)
                   (SETQ I 1)
                  LAB
                   (COND ((MINUSP (DIFFERENCE (CDR EL) I)) (RETURN NIL)))
                   (SETQ W (DIFFSQ W (CAR EL)))
                   (SETQ I (PLUS2 I 1))
                   (GO LAB)))
               (CAR EL))
              (SETQ EL (CDR EL))
              (GO LAB))
            (GO E)))
          (T (SETQ W (CONS 'DF W))))))
       ((AND *DF_PARTIAL *EXPANDDF (NOT (ATOM (CADR U))))
        (PROGN
         (SETQ X (INTERN (COMPRESS (NCONC (EXPLODE (CAR U)) '(! ! _)))))
         (SETQ Y (CDR U))
         (SETQ W (CONS NIL 1))
         (SETQ M 0)
         (PROG (A)
           (SETQ A Y)
          LAB
           (COND ((NULL A) (RETURN NIL)))
           ((LAMBDA (A)
              (PROG (B)
                (SETQ M (PLUS M 1))
                (COND
                 ((CAR (SETQ B (SIMP (LIST 'DF A V))))
                  (PROGN
                   (SETQ Z (MKID X M))
                   (PUT Z 'SIMPFN 'SIMPIDEN)
                   (SETQ W (ADDSQ W (MULTSQ (SIMP (CONS Z Y)) B))))))))
            (CAR A))
           (SETQ A (CDR A))
           (GO LAB))
         (GO E)))
       (T (SETQ W (LIST 'DF U V))))
     J
      (COND ((SETQ X (DIFFPMATCH W)) (SETQ W X))
            ((AND (NOT (DEPENDS U V))
                  (OR (NOT (SETQ X (ATSOC (SETQ U (CADR W)) POWLIS*)))
                      (NOT (DEPENDSL (CADDDR X) (CDDR W))))
                  (NULL *DEPEND))
             (RETURN (CONS NIL 1)))
            ((AND *EXPANDDF (NOT (ATOM U)) (NULL (CDDDR W))
                  (NOT (MEMQ (CAR U) '(DF INT))) (NOT (SMEMBER V U))
                  (OR (NOT (SETQ X (ATSOC U POWLIS*)))
                      (NOT (DEPENDS (CADDDR X) V))))
             (PROGN
              (SETQ X (ASSOC U DEPL*))
              (SETQ Y (AND (CDR U) (GET-ALL-KERNELS (CDR U))))
              (COND
               ((AND X Y (LDEPENDS (DELETE V Y) V))
                (PROGN
                 (MSGPRI "Possible inconsistent dependencies in" U NIL NIL NIL)
                 (SETQ W (MKSQ W 1))))
               (X
                (COND ((MEMQ V (SETQ X (CDR X))) (SETQ W (MKSQ W 1)))
                      (T (SETQ W (DF-CHAIN-RULE U V X)))))
               (Y
                (SETQ W
                        (COND ((SMEMBER V Y) (MKSQ W 1))
                              (T (DF-CHAIN-RULE U V Y)))))
               (T (SETQ W (MKSQ W 1))))))
            (T (SETQ W (MKSQ W 1))))
      (GO E))) 
(PUT 'DIFFPMATCH 'NUMBER-OF-ARGS 1) 
(PUT 'DIFFPMATCH 'DEFINED-ON-LINE '404) 
(PUT 'DIFFPMATCH 'DEFINED-IN-FILE 'POLY/DIFF.RED) 
(PUT 'DIFFPMATCH 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE DIFFPMATCH (U)
    (PROG (A N V W X Y)
      (COND
       (*NOCOMMUTEDF (RETURN (COND ((SETQ X (OPMTCH U)) (SIMP X)) (T NIL)))))
      (SETQ V (CDDR U))
      (SETQ Y V)
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND V (NULL X))) (RETURN NIL)))
        (PROGN
         (SETQ A
                 (CONS (CAR V)
                       (COND
                        ((AND (CDR V) (SETQ N (D2INT (SIMP* (CADR V)))))
                         (PROGN (SETQ V (CDR V)) (LIST N)))
                        (T NIL))))
         (SETQ W (CONS 'DF (CONS (CADR U) A)))
         (SETQ X (OPMTCH W))
         (COND (X (SETQ Y (CDR Y)))
               (T (SETQ Y (APPEND (COND ((CDR A) (CDDR Y)) (T (CDR Y))) A))))
         (SETQ V (CDR V)))
        (GO WHILELABEL))
      (RETURN (COND (X (COND (Y (SIMPDF (CONS X Y))) (T (SIMP X)))) (T NIL))))) 
(PUT 'GET-ALL-KERNELS 'NUMBER-OF-ARGS 1) 
(PUT 'GET-ALL-KERNELS 'DEFINED-ON-LINE '423) 
(PUT 'GET-ALL-KERNELS 'DEFINED-IN-FILE 'POLY/DIFF.RED) 
(PUT 'GET-ALL-KERNELS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE GET-ALL-KERNELS (PLIS)
    (COND ((ATOM PLIS) NIL)
          (T
           (UNION
            ((LAMBDA (SQ) (UNION (KERNELS (CAR SQ)) (KERNELS (CDR SQ))))
             (SIMP (CAR PLIS)))
            (GET-ALL-KERNELS (CDR PLIS)))))) 
(PUT 'DF-CHAIN-RULE 'NUMBER-OF-ARGS 3) 
(PUT 'DF-CHAIN-RULE 'DEFINED-ON-LINE '431) 
(PUT 'DF-CHAIN-RULE 'DEFINED-IN-FILE 'POLY/DIFF.RED) 
(PUT 'DF-CHAIN-RULE 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE DF-CHAIN-RULE (U V KLIS)
    (PROG (W)
      (SETQ W (CONS NIL 1))
      (PROG (KRNL)
        (SETQ KRNL KLIS)
       LAB
        (COND ((NULL KRNL) (RETURN NIL)))
        ((LAMBDA (KRNL)
           (SETQ W
                   (ADDSQ W
                          (MULTSQ (SIMP (LIST 'DF U KRNL))
                                  (SIMP (LIST 'DF KRNL V))))))
         (CAR KRNL))
        (SETQ KRNL (CDR KRNL))
        (GO LAB))
      (RETURN W))) 
(PUT 'DFFORM_INT 'NUMBER-OF-ARGS 3) 
(PUT 'DFFORM_INT 'DEFINED-ON-LINE '442) 
(PUT 'DFFORM_INT 'DEFINED-IN-FILE 'POLY/DIFF.RED) 
(PUT 'DFFORM_INT 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE DFFORM_INT (U V N)
    (PROG (RESULT X Y DX/DV)
      (SETQ Y (SIMP* (CADR U)))
      (SETQ X (CADDR U))
      (SETQ RESULT
              (COND ((EQ V X) Y)
                    ((AND (NOT *INTFLAG*) *ALLOWDFINT
                          (PROGN
                           (SETQ RESULT
                                   (COND
                                    ((CAR (SETQ DX/DV (DIFFP (CONS X 1) V)))
                                     ((LAMBDA (XX)
                                        (SUBST X XX (DIFFSQ (SUBST XX X Y) V)))
                                      (GENSYM)))
                                    (T (DIFFSQ Y V))))
                           (OR *DFINT (NOT_DF_P RESULT))))
                     (ADDSQ (MULTSQ DX/DV Y)
                            (SIMP (LIST 'INT (MK*SQ RESULT) X))))
                    (T
                     (CONS (LIST (CONS (GETPOWER (FKERN (LIST 'DF U V)) 1) 1))
                           1))))
      (COND
       ((NOT (EQUAL N 1))
        (SETQ RESULT
                (MULTSQ (CONS (CONS (CONS (CONS U (DIFFERENCE N 1)) N) NIL) 1)
                        RESULT))))
      (RETURN RESULT))) 
(PUT 'NOT_DF_P 'NUMBER-OF-ARGS 1) 
(PUT 'NOT_DF_P 'DEFINED-ON-LINE '488) 
(PUT 'NOT_DF_P 'DEFINED-IN-FILE 'POLY/DIFF.RED) 
(PUT 'NOT_DF_P 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE NOT_DF_P (Y)
    (NOT
     (AND (EQ (CDR Y) 1)
          (NOT ((LAMBDA (U) (OR (ATOM U) (ATOM (CAR U)))) (SETQ Y (CAR Y))))
          (EQCAR (CAAAR Y) 'DF)))) 
(PUT 'DFN_PROP 'NUMBER-OF-ARGS 1) 
(PUT 'DFN_PROP 'DEFINED-ON-LINE '497) 
(PUT 'DFN_PROP 'DEFINED-IN-FILE 'POLY/DIFF.RED) 
(PUT 'DFN_PROP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE DFN_PROP (W)
    ((LAMBDA (N)
       (COND ((EQUAL N 1) 'DFN) ((EQUAL N 2) 'DFN2) ((EQUAL N 3) 'DFN3)
             (T (MKID 'DFN N))))
     (LENGTH (CDR W)))) 
(PUT 'FIND_SUB_DF 'NUMBER-OF-ARGS 2) 
(PUT 'FIND_SUB_DF 'DEFINED-ON-LINE '505) 
(PUT 'FIND_SUB_DF 'DEFINED-IN-FILE 'POLY/DIFF.RED) 
(PUT 'FIND_SUB_DF 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE FIND_SUB_DF (DF_ARGS DF_VALUES)
    (AND DF_VALUES
         (OR (IS_SUB_DF DF_ARGS (CAR DF_VALUES))
             (FIND_SUB_DF DF_ARGS (CDR DF_VALUES))))) 
(PUT 'IS_SUB_DF 'NUMBER-OF-ARGS 2) 
(PUT 'IS_SUB_DF 'DEFINED-ON-LINE '510) 
(PUT 'IS_SUB_DF 'DEFINED-IN-FILE 'POLY/DIFF.RED) 
(PUT 'IS_SUB_DF 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE IS_SUB_DF (DF_ARGS DF_VALUE)
    (PROG (DF_SET KERNEL N ENTRY)
      (COND ((NEQ (CAR DF_ARGS) (CADAR DF_VALUE)) (RETURN NIL)))
      (SETQ DF_ARGS (DOT_DF_ARGS (CDR DF_ARGS)))
      (SETQ DF_SET (CDDAR DF_VALUE))
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND DF_SET DF_ARGS)) (RETURN NIL)))
        (PROGN
         (SETQ KERNEL (CAR DF_SET))
         (COND
          ((AND (CDR DF_SET) (FIXP (SETQ N (CADR DF_SET))))
           (SETQ DF_SET (CDR DF_SET)))
          (T (SETQ N 1)))
         (COND
          ((AND (SETQ ENTRY (ATSOC KERNEL DF_ARGS))
                (GEQ (SETQ N (DIFFERENCE (CDR ENTRY) N)) 0))
           (RPLACD ENTRY N))
          (T (SETQ DF_ARGS NIL)))
         (SETQ DF_SET (CDR DF_SET)))
        (GO WHILELABEL))
      (RETURN (COND (DF_ARGS (CONS (CADR DF_VALUE) DF_ARGS)))))) 
(PUT 'DOT_DF_ARGS 'NUMBER-OF-ARGS 1) 
(PUT 'DOT_DF_ARGS 'DEFINED-ON-LINE '526) 
(PUT 'DOT_DF_ARGS 'DEFINED-IN-FILE 'POLY/DIFF.RED) 
(PUT 'DOT_DF_ARGS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE DOT_DF_ARGS (L)
    (PROG (KERNEL N DF_ARGS)
      (PROG ()
       WHILELABEL
        (COND ((NOT L) (RETURN NIL)))
        (PROGN
         (SETQ KERNEL (CAR L))
         (COND ((AND (CDR L) (FIXP (SETQ N (CADR L)))) (SETQ L (CDR L)))
               (T (SETQ N 1)))
         (SETQ DF_ARGS (CONS (CONS KERNEL N) DF_ARGS))
         (SETQ L (CDR L)))
        (GO WHILELABEL))
      (RETURN DF_ARGS))) 
(PUT 'MERGE-IND-VARS 'NUMBER-OF-ARGS 2) 
(PUT 'MERGE-IND-VARS 'DEFINED-ON-LINE '536) 
(PUT 'MERGE-IND-VARS 'DEFINED-IN-FILE 'POLY/DIFF.RED) 
(PUT 'MERGE-IND-VARS 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MERGE-IND-VARS (U V)
    (COND
     ((OR *NOCOMMUTEDF
          (AND (NOT *COMMUTEDF) (MEMQ (CADR U) (CONS V (CDDR U)))))
      (DERAD* V (CDDR U)))
     (T (DERAD V (CDDR U))))) 
(PUT 'DERAD* 'NUMBER-OF-ARGS 2) 
(PUT 'DERAD* 'DEFINED-ON-LINE '544) 
(PUT 'DERAD* 'DEFINED-IN-FILE 'POLY/DIFF.RED) 
(PUT 'DERAD* 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE DERAD* (U V)
    (REVERSE
     (COND ((EQ U (CAR (SETQ V (REVERSE V)))) (CONS 2 V))
           ((AND (NUMBERP (CAR V)) (EQ U (CADR V)))
            (CONS (PLUS (CAR V) 1) (CDR V)))
           (T (CONS U V))))) 
(PUT 'DERAD 'NUMBER-OF-ARGS 2) 
(PUT 'DERAD 'DEFINED-ON-LINE '556) 
(PUT 'DERAD 'DEFINED-IN-FILE 'POLY/DIFF.RED) 
(PUT 'DERAD 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE DERAD (U V)
    (COND ((NULL V) (LIST U))
          ((NUMBERP (CAR V)) (CONS (CAR V) (DERAD U (CDR V))))
          ((EQUAL U (CAR V))
           (COND
            ((AND (CDR V) (NUMBERP (CADR V)))
             (CONS U (CONS (PLUS (CADR V) 1) (CDDR V))))
            (T (CONS U (CONS 2 (CDR V))))))
          ((ORDP U (CAR V)) (CONS U V)) (T (CONS (CAR V) (DERAD U (CDR V)))))) 
(PUT 'LETDF 'NUMBER-OF-ARGS 5) 
(PUT 'LETDF 'DEFINED-ON-LINE '565) 
(PUT 'LETDF 'DEFINED-IN-FILE 'POLY/DIFF.RED) 
(PUT 'LETDF 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE LETDF (U V W X B)
    (PROG (Y Z DFN)
      (COND ((ATOM (CADR X)) (GO B))
            ((NOT (IDP (CAADR X))) (TYPERR (CAADR X) "operator"))
            ((NOT (GET (CAADR X) 'SIMPFN))
             (PROGN (REDMSG (CAADR X) "operator") (MKOP (CAADR X)))))
      (RMSUBS)
      (SETQ DFN (DFN_PROP (CADR X)))
      (COND
       ((OR (NOT (EQ MCOND* 'T)) (NOT (FRLP (CDADR X))) (NULL (CDDR X))
            (CDDDR X) (NOT (FRLP (CDDR X))) (NOT (IDLISTP (CDADR X)))
            (REPEATS (CDADR X)) (NOT (MEMBER (CADDR X) (CDADR X))))
        (GO B)))
      (SETQ Z (LPOS (CADDR X) (CDADR X)))
      (COND
       ((NOT (GET (CAADR X) DFN))
        (PUT (CAADR X) DFN (NLIST NIL (LENGTH (CDADR X))))))
      (SETQ W (GET (CAADR X) DFN))
      (COND
       ((NEQ (LENGTH W) (LENGTH (CDADR X)))
        (RERROR 'POLY 17
                (LIST "Incompatible DF rule argument length for" (CAADR X)))))
     A
      (COND ((OR (NULL W) (EQUAL Z 0)) (RETURN (ERRPRI1 U)))
            ((NEQ Z 1)
             (PROGN
              (SETQ Y (CONS (CAR W) Y))
              (SETQ W (CDR W))
              (SETQ Z (DIFFERENCE Z 1))
              (GO A)))
            ((NULL B) (SETQ Y (APPEND (REVERSE Y) (CONS NIL (CDR W)))))
            (T
             (SETQ Y (APPEND (REVERSE Y) (CONS (CONS (CDADR X) V) (CDR W))))))
      (RETURN (PUT (CAADR X) DFN Y))
     B
      (COND ((SMEMQLP FRLIS* (CADDR X)) (RETURN NIL))
            ((AND (IDP (CADR X)) (NOT (MEMQ (CADR X) FRLIS*)))
             (DEPEND1 (CADR X) (CADDR X) T))
            ((AND (NOT (ATOM (CADR X))) (IDP (CAADR X)) (FRLP (CDADR X)))
             (DEPEND1 (CAADR X) (CADDR X) T)))
      (RETURN NIL))) 
(PUT 'FRLP 'NUMBER-OF-ARGS 1) 
(PUT 'FRLP 'DEFINED-ON-LINE '607) 
(PUT 'FRLP 'DEFINED-IN-FILE 'POLY/DIFF.RED) 
(PUT 'FRLP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FRLP (U) (OR (NULL U) (AND (MEMQ (CAR U) FRLIS*) (FRLP (CDR U))))) 
(PUT 'LPOS 'NUMBER-OF-ARGS 2) 
(PUT 'LPOS 'DEFINED-ON-LINE '610) 
(PUT 'LPOS 'DEFINED-IN-FILE 'POLY/DIFF.RED) 
(PUT 'LPOS 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE LPOS (U V) (COND ((EQ U (CAR V)) 1) (T (PLUS (LPOS U (CDR V)) 1)))) 
(ENDMODULE) 