(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'LTO)) 
(REVISION 'LTO "$Id: lto.red 6030 2021-09-16 14:01:45Z thomas-sturm $") 
(COPYRIGHT 'LTO "(c) 1995-2009 A. Dolzmann, T. Sturm, 2010-2017 T. Sturm") 
(PUT 'LTO_INSERT 'NUMBER-OF-ARGS 2) 
(DE LTO_INSERT (X L) (COND ((MEMBER X L) L) (T (CONS X L)))) 
(PUT 'LTO_INSERTQ 'NUMBER-OF-ARGS 2) 
(DE LTO_INSERTQ (X L) (COND ((MEMQ X L) L) (T (CONS X L)))) 
(PUT 'LTO_QUICKSORT 'NUMBER-OF-ARGS 2) 
(DE LTO_QUICKSORT (L SORTP)
    (PROG (CRIT S1 S2)
      (COND ((OR (NULL L) (NULL (CDR L))) (RETURN L)))
      (SETQ CRIT (CAR L))
      (PROG (ENTRY)
        (SETQ ENTRY (CDR L))
       LAB
        (COND ((NULL ENTRY) (RETURN NIL)))
        ((LAMBDA (ENTRY)
           (COND ((APPLY SORTP (LIST ENTRY CRIT)) (SETQ S1 (CONS ENTRY S1)))
                 (T (SETQ S2 (CONS ENTRY S2)))))
         (CAR ENTRY))
        (SETQ ENTRY (CDR ENTRY))
        (GO LAB))
      (RETURN
       (NCONC (LTO_QUICKSORT S1 SORTP) (CONS CRIT (LTO_QUICKSORT S2 SORTP)))))) 
(PUT 'LTO_MERGESORT 'NUMBER-OF-ARGS 2) 
(DE LTO_MERGESORT (L SORTP)
    (PROG (S1 S2 W RSLT)
      (COND ((OR (NULL L) (NULL (CDR L))) (RETURN L)))
      (PROG (ENTRY)
        (SETQ ENTRY L)
       LAB
        (COND ((NULL ENTRY) (RETURN NIL)))
        ((LAMBDA (ENTRY)
           (COND ((SETQ W (NULL W)) (SETQ S1 (CONS ENTRY S1)))
                 (T (SETQ S2 (CONS ENTRY S2)))))
         (CAR ENTRY))
        (SETQ ENTRY (CDR ENTRY))
        (GO LAB))
      (SETQ S1 (LTO_MERGESORT S1 SORTP))
      (SETQ S2 (LTO_MERGESORT S2 SORTP))
      (SETQ RSLT (CONS NIL NIL))
      (SETQ W RSLT)
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND S1 S2)) (RETURN NIL)))
        (PROGN
         (COND
          ((APPLY SORTP (LIST (CAR S1) (CAR S2)))
           (PROGN (SETCDR W (CONS (CAR S1) NIL)) (SETQ S1 (CDR S1))))
          (T (PROGN (SETCDR W (CONS (CAR S2) NIL)) (SETQ S2 (CDR S2)))))
         (SETQ W (CDR W)))
        (GO WHILELABEL))
      (SETCDR W (COND (S1 S1) (T S2)))
      (RETURN (CDR RSLT)))) 
(PUT 'LTO_LISTEND 'NUMBER-OF-ARGS 1) 
(DE LTO_LISTEND (L) (COND ((CDR L) (LTO_LISTEND (CDR L))) (T L))) 
(PUT 'LTO_SUBLISTP 'NUMBER-OF-ARGS 2) 
(DE LTO_SUBLISTP (L1 L2)
    (COND
     ((AND L1 L2)
      (COND ((EQUAL (CAR L1) (CAR L2)) (LTO_SUBLISTP (CDR L1) (CDR L2)))
            (T (LTO_SUBLISTP (CDR L1) L2))))
     (T (NULL L2)))) 
(PUT 'LTO_ORDPROD 'NUMBER-OF-ARGS 3) 
(DE LTO_ORDPROD (L1 L2 ORD)
    (OR (NULL L1)
        (AND (APPLY ORD (LIST (CAR L1) (CAR L2)))
             (LTO_ORDPROD (CDR L1) (CDR L2) ORD)))) 
(PUT 'LTO_TRANSPOSIP 'NUMBER-OF-ARGS 1) 
(DE LTO_TRANSPOSIP (L)
    (PROG (ROW RES W)
      (SETQ ROW 0)
      (SETQ RES 0)
      (SETQ W 0)
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND L (CAR L))) (RETURN NIL)))
        (PROGN
         (SETQ ROW
                 (PROG (RL FORALL-RESULT FORALL-ENDPTR)
                   (SETQ RL L)
                   (COND ((NULL RL) (RETURN NIL)))
                   (SETQ FORALL-RESULT
                           (SETQ FORALL-ENDPTR
                                   (CONS
                                    (PROGN
                                     (SETQ W (CAAR RL))
                                     (SETCAR RL (CDAR RL))
                                     W)
                                    NIL)))
                  LOOPLABEL
                   (SETQ RL (CDR RL))
                   (COND ((NULL RL) (RETURN FORALL-RESULT)))
                   (RPLACD FORALL-ENDPTR
                           (CONS
                            (PROGN (SETQ W (CAAR RL)) (SETCAR RL (CDAR RL)) W)
                            NIL))
                   (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                   (GO LOOPLABEL)))
         (PROGN (SETQ RES (CONS ROW RES)) ROW))
        (GO WHILELABEL))
      (RETURN (REVERSIP RES)))) 
(GLOBAL '(INT2ID_TABLE*)) 
(SETQ INT2ID_TABLE* (MKVECT (MINUS 1))) 
(PUT 'LTO_INT2ID 'NUMBER-OF-ARGS 1) 
(DE LTO_INT2ID (N)
    (COND ((AND (GEQ N 0) (LEQ N (UPBV INT2ID_TABLE*))) (GETV INT2ID_TABLE* N))
          ((OR (LESSP N 0) (GEQ N 1000)) (INTERN (LIST2STRING (EXPLODE2 N))))
          (T
           (PROG (W S)
             (SETQ W (MKVECT (TIMES 2 N)))
             (SETQ S (UPBV INT2ID_TABLE*))
             (PROG (I)
               (SETQ I 0)
              LAB
               (COND ((MINUSP (DIFFERENCE S I)) (RETURN NIL)))
               (PUTV W I (GETV INT2ID_TABLE* I))
               (SETQ I (PLUS2 I 1))
               (GO LAB))
             (PROG (I)
               (SETQ I (PLUS S 1))
              LAB
               (COND ((MINUSP (DIFFERENCE (TIMES 2 N) I)) (RETURN NIL)))
               (PROGN
                (SETQ S (INTERN (LIST2STRING (EXPLODE2 I))))
                (PUTV W I S)
                (PUT S 'ID2INT* I))
               (SETQ I (PLUS2 I 1))
               (GO LAB))
             (SETQ INT2ID_TABLE* W)
             (RETURN (GETV INT2ID_TABLE* N)))))) 
(LTO_INT2ID 30) 
(PUT 'LTO_ID2INT_ACN 'NUMBER-OF-ARGS 1) 
(DE LTO_ID2INT_ACN (A)
    (PROG (R)
      (SETQ R (GET A 'ID2INT*))
      (COND
       ((NULL R) (PROGN (SETQ R (COMPRESS (EXPLODE2 A))) (PUT A 'ID2INT* R))))
      (RETURN R))) 
(PUT 'LTO_ID2INT 'NUMBER-OF-ARGS 1) 
(DE LTO_ID2INT (A) (COMPRESS (CDR (EXPLODE A)))) 
(PUT 'LTO_ALPATCH 'NUMBER-OF-ARGS 3) 
(DE LTO_ALPATCH (KEY VAL AL)
    (PROG (W)
      (SETQ W (ATSOC KEY AL))
      (COND (W (PROGN (SETCDR W VAL) (RETURN AL))))
      (RETURN (CONS (CONS KEY VAL) AL)))) 
(PUT 'LTO_ALINSERT 'NUMBER-OF-ARGS 3) 
(DE LTO_ALINSERT (KEY VAL AL)
    (PROG (W)
      (COND (NIL NIL))
      (SETQ W (ASSOC KEY AL))
      (COND ((NULL W) (RETURN (CONS (CONS KEY (LIST VAL)) AL))))
      (SETCDR W (CONS VAL (CDR W)))
      (RETURN AL))) 
(PUT 'LTO_LENGTHP 'NUMBER-OF-ARGS 3) 
(DE LTO_LENGTHP (L N COMPP)
    (COND ((NULL L) (APPLY COMPP (LIST 0 N)))
          ((EQN N 0) (APPLY COMPP (LIST 1 0)))
          (T (LTO_LENGTHP (CDR L) (DIFFERENCE N 1) COMPP)))) 
(PUT 'LTO_CATSOC 'NUMBER-OF-ARGS 2) 
(DE LTO_CATSOC (KEY AL)
    ((LAMBDA (X) (COND (X (CDR X)) (T NIL))) (ATSOC KEY AL))) 
(PUT 'LTO_NATSOC 'NUMBER-OF-ARGS 2) 
(DE LTO_NATSOC (KEY AL) ((LAMBDA (W) (COND (W (CDR W)) (T 0))) (ATSOC KEY AL))) 
(PUT 'LTO_CASSOC 'NUMBER-OF-ARGS 2) 
(DE LTO_CASSOC (KEY AL) ((LAMBDA (X) (COND (X (CDR X)))) (ASSOC KEY AL))) 
(PUT 'LTO_EATSOC 'NUMBER-OF-ARGS 3) 
(DE LTO_EATSOC (KEY AL EMSG)
    ((LAMBDA (X) (COND (X (CDR X)) (T (REDERR EMSG)))) (ASSOC KEY AL))) 
(PUT 'LTO_APPENDN 'NUMBER-OF-ARGS 1) 
(DE LTO_APPENDN (L)
    (PROG (L1 FORALL-RESULT FORALL-ENDPTR)
      (SETQ L1 L)
     STARTOVER
      (COND ((NULL L1) (RETURN NIL)))
      (SETQ FORALL-RESULT ((LAMBDA (L1) (APPEND L1 NIL)) (CAR L1)))
      (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
      (SETQ L1 (CDR L1))
      (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
     LOOPLABEL
      (COND ((NULL L1) (RETURN FORALL-RESULT)))
      (RPLACD FORALL-ENDPTR ((LAMBDA (L1) (APPEND L1 NIL)) (CAR L1)))
      (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
      (SETQ L1 (CDR L1))
      (GO LOOPLABEL))) 
(PUT 'LTO_NCONCN 'NUMBER-OF-ARGS 1) 
(DE LTO_NCONCN (L)
    (PROG (L1 FORALL-RESULT FORALL-ENDPTR)
      (SETQ L1 L)
     STARTOVER
      (COND ((NULL L1) (RETURN NIL)))
      (SETQ FORALL-RESULT ((LAMBDA (L1) L1) (CAR L1)))
      (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
      (SETQ L1 (CDR L1))
      (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
     LOOPLABEL
      (COND ((NULL L1) (RETURN FORALL-RESULT)))
      (RPLACD FORALL-ENDPTR ((LAMBDA (L1) L1) (CAR L1)))
      (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
      (SETQ L1 (CDR L1))
      (GO LOOPLABEL))) 
(PUT 'LTO_ALUNION 'NUMBER-OF-ARGS 1) 
(DE LTO_ALUNION (ALL) (LTO_ALMERGE ALL 'UNION)) 
(PUT 'LTO_ALMERGE 'NUMBER-OF-ARGS 2) 
(DE LTO_ALMERGE (ALL MERGE)
    (PROG (L2 A)
      (COND ((NULL ALL) (RETURN NIL)))
      (COND ((NULL (CDR ALL)) (RETURN (CAR ALL))))
      (COND
       ((NULL (CDDR ALL))
        (PROGN
         (SETQ L2 (CADR ALL))
         (PROG (PAIR)
           (SETQ PAIR (CAR ALL))
          LAB
           (COND ((NULL PAIR) (RETURN NIL)))
           ((LAMBDA (PAIR)
              (PROGN
               (SETQ A (ASSOC (CAR PAIR) L2))
               (COND (A (SETCDR A (APPLY MERGE (LIST (CDR PAIR) (CDR A)))))
                     (T (SETQ L2 (CONS PAIR L2))))))
            (CAR PAIR))
           (SETQ PAIR (CDR PAIR))
           (GO LAB))
         (RETURN L2))))
      (RETURN
       (LTO_ALMERGE (LIST (CAR ALL) (LTO_ALMERGE (CDR ALL) MERGE)) MERGE)))) 
(PUT 'LTO_IDCONCAT2 'NUMBER-OF-ARGS 2) 
(PUT 'LTO_IDCONCAT2 'DEFINED-ON-LINE '262) 
(PUT 'LTO_IDCONCAT2 'DEFINED-IN-FILE 'REDLOG/RLTOOLS/LTO.RED) 
(PUT 'LTO_IDCONCAT2 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE LTO_IDCONCAT2 (ID1 ID2) (COMPRESS (NCONC (EXPLODE ID1) (EXPLODE ID2)))) 
(PUT 'LTO_IDCONCAT 'NUMBER-OF-ARGS 1) 
(PUT 'LTO_IDCONCAT 'DEFINED-ON-LINE '269) 
(PUT 'LTO_IDCONCAT 'DEFINED-IN-FILE 'REDLOG/RLTOOLS/LTO.RED) 
(PUT 'LTO_IDCONCAT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE LTO_IDCONCAT (L)
    (COMPRESS
     (PROG (ID FORALL-RESULT FORALL-ENDPTR)
       (SETQ ID L)
      STARTOVER
       (COND ((NULL ID) (RETURN NIL)))
       (SETQ FORALL-RESULT ((LAMBDA (ID) (EXPLODE ID)) (CAR ID)))
       (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
       (SETQ ID (CDR ID))
       (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
      LOOPLABEL
       (COND ((NULL ID) (RETURN FORALL-RESULT)))
       (RPLACD FORALL-ENDPTR ((LAMBDA (ID) (EXPLODE ID)) (CAR ID)))
       (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
       (SETQ ID (CDR ID))
       (GO LOOPLABEL)))) 
(PUT 'LTO_SCONCAT2 'NUMBER-OF-ARGS 2) 
(PUT 'LTO_SCONCAT2 'DEFINED-ON-LINE '276) 
(PUT 'LTO_SCONCAT2 'DEFINED-IN-FILE 'REDLOG/RLTOOLS/LTO.RED) 
(PUT 'LTO_SCONCAT2 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE LTO_SCONCAT2 (S1 S2) (LIST2STRING (APPEND (EXPLODE2 S2) (EXPLODE2 S2)))) 
(PUT 'LTO_SCONCAT 'NUMBER-OF-ARGS 1) 
(DE LTO_SCONCAT (L)
    (PROG (R)
      (PROG (S)
        (SETQ S (REVERSE L))
       LAB
        (COND ((NULL S) (RETURN NIL)))
        ((LAMBDA (S)
           (COND ((NULL R) (SETQ R (EXPLODE2 S)))
                 (T (SETQ R (APPEND (EXPLODE2 S) R)))))
         (CAR S))
        (SETQ S (CDR S))
        (GO LAB))
      (RETURN (LIST2STRING R)))) 
(PUT 'LTO_SUBSTR 'NUMBER-OF-ARGS 3) 
(DE LTO_SUBSTR (S N M)
    (PROG (L RES)
      (COND ((EQN M 0) (RETURN NIL)))
      (SETQ L (CDR (EXPLODE S)))
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND (NOT (EQN M 1)) L)) (RETURN NIL)))
        (PROGN (SETQ M (DIFFERENCE M 1)) (PROG1 (CAR L) (SETQ L (CDR L))))
        (GO WHILELABEL))
      (COND ((NOT L) (RETURN NIL)))
      (SETQ RES (CONS '|"| NIL))
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND (NOT (EQN N 0)) L)) (RETURN NIL)))
        (PROGN
         (SETQ N (DIFFERENCE N 1))
         (SETQ RES (CONS (PROG1 (CAR L) (SETQ L (CDR L))) RES)))
        (GO WHILELABEL))
      (COND ((NOT L) (RETURN NIL)))
      (RETURN (COMPRESS (REVERSIP (CONS '|"| RES)))))) 
(PUT 'LTO_STRINGLEQ 'NUMBER-OF-ARGS 2) 
(DE LTO_STRINGLEQ (S1 S2)
    (ORDP (INTERN (COMPRESS (EXPLODE2 S1))) (INTERN (COMPRESS (EXPLODE2 S2))))) 
(PUT 'LTO_STRINGGREATERP 'NUMBER-OF-ARGS 2) 
(DE LTO_STRINGGREATERP (S1 S2) (NOT (LTO_STRINGLEQ S1 S2))) 
(PUT 'LTO_STRING2ID 'NUMBER-OF-ARGS 1) 
(DE LTO_STRING2ID (S) (INTERN S)) 
(PUT 'LTO_MAX 'NUMBER-OF-ARGS 1) 
(DE LTO_MAX (L) (COND ((NULL L) '(MINUS INFINITY)) (T (LTO_MAX1 L)))) 
(PUT 'LTO_MAX1 'NUMBER-OF-ARGS 1) 
(DE LTO_MAX1 (L)
    (PROG (R)
      (SETQ R (CAR L))
      (PROG (X)
        (SETQ X (CDR L))
       LAB
        (COND ((NULL X) (RETURN NIL)))
        ((LAMBDA (X) (SETQ R (MAX X R))) (CAR X))
        (SETQ X (CDR X))
        (GO LAB))
      (RETURN R))) 
(PUT 'LTO_MIN 'NUMBER-OF-ARGS 1) 
(DE LTO_MIN (L) (COND ((NULL L) 'INFINITY) (T (LTO_MIN1 L)))) 
(PUT 'LTO_MIN1 'NUMBER-OF-ARGS 1) 
(DE LTO_MIN1 (L)
    (PROG (R)
      (SETQ R (CAR L))
      (PROG (X)
        (SETQ X (CDR L))
       LAB
        (COND ((NULL X) (RETURN NIL)))
        ((LAMBDA (X) (SETQ R (MIN X R))) (CAR X))
        (SETQ X (CDR X))
        (GO LAB))
      (RETURN R))) 
(PUT 'LTO_RAVG 'NUMBER-OF-ARGS 1) 
(DE LTO_RAVG (L)
    (PROG (S N)
      (SETQ S 0)
      (SETQ N 0)
      (COND ((NULL L) (REDERR "lto_ravg: empty list")))
      (SETQ S
              (PROG (X FORALL-RESULT)
                (SETQ X L)
                (SETQ FORALL-RESULT 0)
               LAB1
                (COND ((NULL X) (RETURN FORALL-RESULT)))
                (SETQ FORALL-RESULT
                        (PLUS
                         ((LAMBDA (X) (PROGN (SETQ N (PLUS N 1)) X)) (CAR X))
                         FORALL-RESULT))
                (SETQ X (CDR X))
                (GO LAB1)))
      (RETURN (QUOTIENT (FLOAT S) (FLOAT N))))) 
(PUT 'LTO_RMEDIAN 'NUMBER-OF-ARGS 1) 
(DE LTO_RMEDIAN (L)
    (PROG (N N2)
      (SETQ N 0)
      (SETQ N2 0)
      (COND ((NULL L) (REDERR "lto_rmedian: empty list")))
      (SETQ L (SORT L 'LEQ))
      (SETQ N (LENGTH L))
      (SETQ N2 (QUOTIENT N 2))
      (COND
       ((EVENP N)
        (RETURN
         (QUOTIENT (PLUS (FLOAT (NTH L N2)) (FLOAT (NTH L (PLUS N2 1))))
                   2.0))))
      (RETURN (FLOAT (NTH L (PLUS N2 1)))))) 
(PUT 'LTO_SGNCHG 'NUMBER-OF-ARGS 1) 
(DE LTO_SGNCHG (L)
    (LTO_SGNCHG1
     (PROG (N FORALL-RESULT FORALL-ENDPTR)
       (SETQ N L)
      STARTOVER
       (COND ((NULL N) (RETURN NIL)))
       (SETQ FORALL-RESULT
               ((LAMBDA (N) (COND ((EQUAL (SGN N) 0) NIL) (T (LIST N))))
                (CAR N)))
       (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
       (SETQ N (CDR N))
       (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
      LOOPLABEL
       (COND ((NULL N) (RETURN FORALL-RESULT)))
       (RPLACD FORALL-ENDPTR
               ((LAMBDA (N) (COND ((EQUAL (SGN N) 0) NIL) (T (LIST N))))
                (CAR N)))
       (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
       (SETQ N (CDR N))
       (GO LOOPLABEL)))) 
(PUT 'LTO_SGNCHG1 'NUMBER-OF-ARGS 1) 
(DE LTO_SGNCHG1 (L)
    (COND ((OR (NULL L) (NULL (CDR L))) 0)
          ((EQ (SGN (CAR L)) (SGN (CADR L))) (LTO_SGNCHG1 (CDR L)))
          (T (PLUS (LTO_SGNCHG1 (CDR L)) 1)))) 
(PUT 'LTO_SETMINUS 'NUMBER-OF-ARGS 2) 
(DE LTO_SETMINUS (L1 L2)
    (PROG (X FORALL-RESULT FORALL-ENDPTR)
      (SETQ X L1)
     STARTOVER
      (COND ((NULL X) (RETURN NIL)))
      (SETQ FORALL-RESULT
              ((LAMBDA (X) (COND ((NOT (MEMBER X L2)) (LIST X)))) (CAR X)))
      (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
      (SETQ X (CDR X))
      (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
     LOOPLABEL
      (COND ((NULL X) (RETURN FORALL-RESULT)))
      (RPLACD FORALL-ENDPTR
              ((LAMBDA (X) (COND ((NOT (MEMBER X L2)) (LIST X)))) (CAR X)))
      (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
      (SETQ X (CDR X))
      (GO LOOPLABEL))) 
(PUT 'LTO_UNIONN 'NUMBER-OF-ARGS 1) 
(DE LTO_UNIONN (L)
    (COND ((NULL L) NIL) (T (UNION (CAR L) (LTO_UNIONN (CDR L)))))) 
(SWITCH (LIST 'RLSETEQUALQHASH)) 
(ON1 'RLSETEQUALQHASH) 
(PUT 'LTO_SETEQUALQ 'NUMBER-OF-ARGS 2) 
(DE LTO_SETEQUALQ (S1 S2)
    (PROG (C A1 W)
      (SETQ W
              (COND (*RLSETEQUALQHASH (LTO_HASHEQUALQ S1 S2))
                    (T (LTO_EQUALLENGTHP S1 S2))))
      (COND ((NOT W) (RETURN NIL)))
      (SETQ C T)
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND C S1)) (RETURN NIL)))
        (PROGN
         (SETQ A1 (CAR S1))
         (COND ((MEMQ A1 S2) (SETQ S1 (CDR S1))) (T (SETQ C NIL))))
        (GO WHILELABEL))
      (RETURN C))) 
(PUT 'LTO_HASHEQUALQ 'NUMBER-OF-ARGS 2) 
(DE LTO_HASHEQUALQ (S1 S2)
    (PROG (A1 A2 N1 N2)
      (SETQ N1 0)
      (SETQ N2 0)
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND S1 S2)) (RETURN NIL)))
        (PROGN
         (SETQ A1 (CAR S1))
         (SETQ A2 (CAR S2))
         (SETQ S1 (CDR S1))
         (SETQ S2 (CDR S2))
         (SETQ N1 (IPLUS2 N1 (LTO_HASHID A1)))
         (SETQ N2 (IPLUS2 N2 (LTO_HASHID A2))))
        (GO WHILELABEL))
      (RETURN (AND (NULL S1) (NULL S2) (IEQUAL N1 N2))))) 
(PUT 'LTO_EQUALLENGTHP 'NUMBER-OF-ARGS 2) 
(DE LTO_EQUALLENGTHP (S1 S2)
    (PROGN
     (PROG ()
      WHILELABEL
       (COND ((NOT (AND S1 S2)) (RETURN NIL)))
       (PROGN (SETQ S1 (CDR S1)) (SETQ S2 (CDR S2)))
       (GO WHILELABEL))
     (AND (NULL S1) (NULL S2)))) 
(PUT 'LTO_LENGTHGEQ 'NUMBER-OF-ARGS 2) 
(DE LTO_LENGTHGEQ (L N)
    (OR (EQN N 0) (AND L (LTO_LENGTHGEQ (CDR L) (DIFFERENCE N 1))))) 
(PUT 'LTO_CARTPROD 'NUMBER-OF-ARGS 1) 
(DE LTO_CARTPROD (S)
    (COND ((OR (NULL S) (NULL (CDR S))) S) (T (LTO_CARTPROD1 S)))) 
(PUT 'LTO_CARTPROD1 'NUMBER-OF-ARGS 1) 
(DE LTO_CARTPROD1 (S)
    (PROG (W)
      (COND
       ((NULL (CDR S))
        (RETURN
         (PROG (M FORALL-RESULT FORALL-ENDPTR)
           (SETQ M (CAR S))
           (COND ((NULL M) (RETURN NIL)))
           (SETQ FORALL-RESULT
                   (SETQ FORALL-ENDPTR
                           (CONS ((LAMBDA (M) (LIST M)) (CAR M)) NIL)))
          LOOPLABEL
           (SETQ M (CDR M))
           (COND ((NULL M) (RETURN FORALL-RESULT)))
           (RPLACD FORALL-ENDPTR (CONS ((LAMBDA (M) (LIST M)) (CAR M)) NIL))
           (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
           (GO LOOPLABEL)))))
      (SETQ W (LTO_CARTPROD1 (CDR S)))
      (RETURN
       (PROG (M FORALL-RESULT FORALL-ENDPTR)
         (SETQ M (CAR S))
        STARTOVER
         (COND ((NULL M) (RETURN NIL)))
         (SETQ FORALL-RESULT
                 ((LAMBDA (M)
                    (PROG (Y FORALL-RESULT FORALL-ENDPTR)
                      (SETQ Y W)
                      (COND ((NULL Y) (RETURN NIL)))
                      (SETQ FORALL-RESULT
                              (SETQ FORALL-ENDPTR
                                      (CONS ((LAMBDA (Y) (CONS M Y)) (CAR Y))
                                            NIL)))
                     LOOPLABEL
                      (SETQ Y (CDR Y))
                      (COND ((NULL Y) (RETURN FORALL-RESULT)))
                      (RPLACD FORALL-ENDPTR
                              (CONS ((LAMBDA (Y) (CONS M Y)) (CAR Y)) NIL))
                      (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                      (GO LOOPLABEL)))
                  (CAR M)))
         (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
         (SETQ M (CDR M))
         (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
        LOOPLABEL
         (COND ((NULL M) (RETURN FORALL-RESULT)))
         (RPLACD FORALL-ENDPTR
                 ((LAMBDA (M)
                    (PROG (Y FORALL-RESULT FORALL-ENDPTR)
                      (SETQ Y W)
                      (COND ((NULL Y) (RETURN NIL)))
                      (SETQ FORALL-RESULT
                              (SETQ FORALL-ENDPTR
                                      (CONS ((LAMBDA (Y) (CONS M Y)) (CAR Y))
                                            NIL)))
                     LOOPLABEL
                      (SETQ Y (CDR Y))
                      (COND ((NULL Y) (RETURN FORALL-RESULT)))
                      (RPLACD FORALL-ENDPTR
                              (CONS ((LAMBDA (Y) (CONS M Y)) (CAR Y)) NIL))
                      (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                      (GO LOOPLABEL)))
                  (CAR M)))
         (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
         (SETQ M (CDR M))
         (GO LOOPLABEL))))) 
(PUT 'LTO_HMEMBER 'NUMBER-OF-ARGS 3) 
(PUT 'LTO_HMEMBER 'DEFINED-ON-LINE '476) 
(PUT 'LTO_HMEMBER 'DEFINED-IN-FILE 'REDLOG/RLTOOLS/LTO.RED) 
(PUT 'LTO_HMEMBER 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE LTO_HMEMBER (ITEM HL HFN) (LTO_HMEMBER1 ITEM HL (APPLY HFN (LIST ITEM)))) 
(PUT 'LTO_HMEMBER1 'NUMBER-OF-ARGS 3) 
(PUT 'LTO_HMEMBER1 'DEFINED-ON-LINE '479) 
(PUT 'LTO_HMEMBER1 'DEFINED-IN-FILE 'REDLOG/RLTOOLS/LTO.RED) 
(PUT 'LTO_HMEMBER1 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE LTO_HMEMBER1 (ITEM HL KEYL)
    (PROG (W)
      (COND ((NOT KEYL) (RETURN (MEMBER ITEM HL))))
      (SETQ W (ASSOC (CAR KEYL) HL))
      (COND ((NOT W) (RETURN NIL)))
      (RETURN (LTO_HMEMBER1 ITEM (CDR W) (CDR KEYL))))) 
(PUT 'LTO_HINSERT 'NUMBER-OF-ARGS 3) 
(PUT 'LTO_HINSERT 'DEFINED-ON-LINE '489) 
(PUT 'LTO_HINSERT 'DEFINED-IN-FILE 'REDLOG/RLTOOLS/LTO.RED) 
(PUT 'LTO_HINSERT 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE LTO_HINSERT (ITEM HL HFN) (LTO_HINSERT1 ITEM HL (APPLY HFN (LIST ITEM)))) 
(PUT 'LTO_HINSERT1 'NUMBER-OF-ARGS 3) 
(PUT 'LTO_HINSERT1 'DEFINED-ON-LINE '492) 
(PUT 'LTO_HINSERT1 'DEFINED-IN-FILE 'REDLOG/RLTOOLS/LTO.RED) 
(PUT 'LTO_HINSERT1 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE LTO_HINSERT1 (ITEM HL KEYL)
    (PROG (KEY W)
      (COND ((NOT KEYL) (RETURN (CONS ITEM HL))))
      (SETQ KEY (CAR KEYL))
      (SETQ W (ASSOC KEY HL))
      (COND ((NOT W) (RETURN (CONS (LTO_HENTRY KEY (CDR KEYL) ITEM) HL))))
      (SETCDR W (LTO_HINSERT1 ITEM (CDR W) (CDR KEYL)))
      (RETURN HL))) 
(PUT 'LTO_HENTRY 'NUMBER-OF-ARGS 3) 
(PUT 'LTO_HENTRY 'DEFINED-ON-LINE '504) 
(PUT 'LTO_HENTRY 'DEFINED-IN-FILE 'REDLOG/RLTOOLS/LTO.RED) 
(PUT 'LTO_HENTRY 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE LTO_HENTRY (KEY KEYL ITEM)
    (COND ((NOT KEYL) (CONS KEY (LIST ITEM)))
          (T (CONS KEY (LIST (LTO_HENTRY (CAR KEYL) (CDR KEYL) ITEM)))))) 
(PUT 'LTO_HDELETE 'NUMBER-OF-ARGS 3) 
(PUT 'LTO_HDELETE 'DEFINED-ON-LINE '510) 
(PUT 'LTO_HDELETE 'DEFINED-IN-FILE 'REDLOG/RLTOOLS/LTO.RED) 
(PUT 'LTO_HDELETE 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE LTO_HDELETE (ITEM HL HFN) (LTO_HDELETE1 ITEM HL (APPLY HFN (LIST ITEM)))) 
(PUT 'LTO_HDELETE1 'NUMBER-OF-ARGS 3) 
(PUT 'LTO_HDELETE1 'DEFINED-ON-LINE '513) 
(PUT 'LTO_HDELETE1 'DEFINED-IN-FILE 'REDLOG/RLTOOLS/LTO.RED) 
(PUT 'LTO_HDELETE1 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE LTO_HDELETE1 (ITEM HL KEYL)
    (PROG (W KEY)
      (COND ((NOT KEYL) (RETURN (DELETIP ITEM HL))))
      (SETQ KEY (CAR KEYL))
      (SETQ W (ASSOC KEY HL))
      (COND (W (SETCDR W (LTO_HDELETE1 ITEM (CDR W) (CDR KEYL)))))
      (RETURN HL))) 
(PUT 'LTO_SUBSET 'NUMBER-OF-ARGS 2) 
(DE LTO_SUBSET (S1 S2)
    (OR (NULL S1) (AND (MEMBER (CAR S1) S2) (LTO_SUBSET (CDR S1) S2)))) 
(PUT 'LTO_SUBSETQ 'NUMBER-OF-ARGS 2) 
(DE LTO_SUBSETQ (S1 S2)
    (OR (NULL S1) (AND (MEMQ (CAR S1) S2) (LTO_SUBSETQ (CDR S1) S2)))) 
(PUT 'LTO_ZIP 'NUMBER-OF-ARGS 3) 
(DE LTO_ZIP (L1 L2 F)
    (COND
     ((AND L1 L2)
      (CONS (APPLY F (LIST (CAR L1) (CAR L2))) (LTO_ZIP (CDR L1) (CDR L2) F))))) 
(PUT 'LTO_PARTITION 'NUMBER-OF-ARGS 2) 
(DE LTO_PARTITION (L F)
    (PROG (GOODL BADL)
      (PROG (X)
        (SETQ X L)
       LAB
        (COND ((NULL X) (RETURN NIL)))
        ((LAMBDA (X)
           (COND ((APPLY F (LIST X)) (SETQ GOODL (CONS X GOODL)))
                 (T (SETQ BADL (CONS X BADL)))))
         (CAR X))
        (SETQ X (CDR X))
        (GO LAB))
      (RETURN (CONS (REVERSIP GOODL) (REVERSIP BADL))))) 
(PUT 'LTO_DELNTHIP 'NUMBER-OF-ARGS 2) 
(DE LTO_DELNTHIP (L N)
    (PROG (SCL)
      (COND
       ((NULL L) (REDERR (LIST "index" N "out of range for in lto_delnthip"))))
      (COND ((LESSP N 1) (RETURN L)))
      (COND ((EQN N 1) (RETURN (CDR L))))
      (SETQ SCL L)
      (PROG (I)
        (SETQ I 1)
       LAB
        (COND ((MINUSP (DIFFERENCE (DIFFERENCE N 2) I)) (RETURN NIL)))
        (COND ((CDR SCL) (SETQ SCL (CDR SCL)))
              (T (REDERR (LIST "index" N "out of range in lto_delnthip"))))
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (COND ((CDR SCL) (SETCDR SCL (CDDR SCL)))
            (T (REDERR (LIST "index" N "out of range in lto_delnthip"))))
      (RETURN L))) 
(PUT 'LTO_APPLY2NTHIP 'NUMBER-OF-ARGS 4) 
(DE LTO_APPLY2NTHIP (L N FUN XARGL)
    (PROG (SCL)
      (COND (NIL NIL))
      (SETQ SCL L)
      (PROG (I)
        (SETQ I 1)
       LAB
        (COND ((MINUSP (DIFFERENCE (DIFFERENCE N 1) I)) (RETURN NIL)))
        (SETQ SCL (CDR SCL))
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (SETCAR SCL (APPLY FUN (CONS (CAR SCL) XARGL)))
      (RETURN L))) 
(DE LTO_HASHID (ID) (ID2INT ID)) 
(PUT 'LTO_HASHID 'NUMBER-OF-ARGS 1) 
(PUT 'LTO_HASHID 'DEFINED-ON-LINE '591) 
(PUT 'LTO_HASHID 'DEFINED-IN-FILE 'REDLOG/RLTOOLS/LTO.RED) 
(PUT 'LTO_HASHID 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'LTO_HASHID 'INLINE '(LAMBDA (ID) (ID2INT ID))) 
(PUT 'LTO_DELQ 'NUMBER-OF-ARGS 2) 
(DE LTO_DELQ (X L)
    (COND ((ATOM L) L) ((EQ (CAR L) X) (CDR L))
          (T (CONS (CAR L) (LTO_DELQ X (CDR L)))))) 
(PUT 'LTO_DELQIP 'NUMBER-OF-ARGS 2) 
(DE LTO_DELQIP (U V)
    (COND ((NOT (PAIRP V)) V) ((EQ U (CAR V)) (CDR V))
          (T (PROGN (LTO_DELQIP1 U V) V)))) 
(PUT 'LTO_DELQIP1 'NUMBER-OF-ARGS 2) 
(DE LTO_DELQIP1 (U V)
    (COND ((NOT (PAIRP (CDR V))) NIL) ((EQ U (CADR V)) (RPLACD V (CDDR V)))
          (T (LTO_DELQIP1 U (CDR V))))) 
(PUT 'LTO_LIST2SET 'NUMBER-OF-ARGS 1) 
(DE LTO_LIST2SET (L)
    (COND ((NULL L) NIL) ((MEMBER (CAR L) (CDR L)) (LTO_LIST2SET (CDR L)))
          (T (CONS (CAR L) (LTO_LIST2SET (CDR L)))))) 
(PUT 'LTO_LIST2VECTOR 'NUMBER-OF-ARGS 1) 
(DE LTO_LIST2VECTOR (L)
    (PROG (I V)
      (SETQ I 0)
      (SETQ V (MKVECT (SUB1 (LENGTH L))))
      (SETQ I 0)
      (PROG (VL)
        (SETQ VL L)
       LAB
        (COND ((NULL VL) (RETURN NIL)))
        ((LAMBDA (VL) (PROGN (PUTV V I VL) (SETQ I (PLUS I 1)))) (CAR VL))
        (SETQ VL (CDR VL))
        (GO LAB))
      (RETURN V))) 
(PUT 'LTO_AT2STR 'NUMBER-OF-ARGS 1) 
(DE LTO_AT2STR (S)
    (COND ((IDP S) (ID2STRING S)) ((STRINGP S) S)
          (T (LIST2STRING (EXPLODE2 S))))) 
(DE LTO_FASTGENSYM NIL
    ((LAMBDA (W) (PROGN (COND (*RLGENSYMINTERN (INTERN W)) (T (REMOB W))) W))
     (COMPRESS
      (CONS '!
            (CONS '_
                  (CONS 'K
                        (EXPLODE
                         (SETCDR RLGENSYMFAST*
                                 (PLUS (CDR RLGENSYMFAST*) 1))))))))) 
(PUT 'LTO_FASTGENSYM 'NUMBER-OF-ARGS 0) 
(PUT 'LTO_FASTGENSYM 'DEFINED-ON-LINE '656) 
(PUT 'LTO_FASTGENSYM 'DEFINED-IN-FILE 'REDLOG/RLTOOLS/LTO.RED) 
(PUT 'LTO_FASTGENSYM 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(PUTC 'LTO_FASTGENSYM 'INLINE
      '(LAMBDA ()
         ((LAMBDA (W)
            (PROGN (COND (*RLGENSYMINTERN (INTERN W)) (T (REMOB W))) W))
          (COMPRESS
           (CONS '!
                 (CONS '_
                       (CONS 'K
                             (EXPLODE
                              (SETCDR RLGENSYMFAST*
                                      (PLUS (CDR RLGENSYMFAST*) 1)))))))))) 
(DE LTO_GENSYM NIL (LTO_GENSYM1 RLGENSYMBASE*)) 
(PUT 'LTO_GENSYM 'NUMBER-OF-ARGS 0) 
(PUT 'LTO_GENSYM 'DEFINED-ON-LINE '664) 
(PUT 'LTO_GENSYM 'DEFINED-IN-FILE 'REDLOG/RLTOOLS/LTO.RED) 
(PUT 'LTO_GENSYM 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(PUTC 'LTO_GENSYM 'INLINE '(LAMBDA () (LTO_GENSYM1 RLGENSYMBASE*))) 
(PUT 'LTO_GENSYM1 'NUMBER-OF-ARGS 1) 
(DE LTO_GENSYM1 (BASE)
    (PROG (L W C)
      (SETQ C 0)
      (SETQ C (ATSOC BASE RLGENSYMCOUNTAL*))
      (COND (C (SETCDR C (PLUS (CDR C) 1)))
            (T
             (PROGN
              (SETQ C (CONS BASE 1))
              (PROGN (SETQ RLGENSYMCOUNTAL* (CONS C RLGENSYMCOUNTAL*)) C))))
      (SETQ L (EXPLODE (CDR C)))
      (PROG (I)
        (SETQ I (PLUS (LENGTH L) 1))
       LAB
        (COND ((MINUSP (DIFFERENCE RLGENSYMLEN* I)) (RETURN NIL)))
        (PROGN (SETQ L (CONS '|0| L)) '|0|)
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (SETQ W (COMPRESS (NCONC (EXPLODE BASE) L)))
      (COND (*RLGENSYMINTERN (INTERN W)) (T (REMOB W)))
      (RETURN W))) 
(PUT 'LTO_MAXKL 'NUMBER-OF-ARGS 1) 
(DE LTO_MAXKL (KL)
    (PROG (M W)
      (COND ((NULL KL) (RETURN NIL)))
      (SETQ M (PROG1 (CAR KL) (SETQ KL (CDR KL))))
      (PROG ()
       WHILELABEL
        (COND ((NOT KL) (RETURN NIL)))
        (PROGN
         (SETQ W (PROG1 (CAR KL) (SETQ KL (CDR KL))))
         (COND ((ORDOP M W) (SETQ M W))))
        (GO WHILELABEL))
      (RETURN M))) 
(PUT 'LTO_0LISTP 'NUMBER-OF-ARGS 1) 
(DE LTO_0LISTP (L) (OR (NULL L) (AND (EQN (CAR L) 0) (LTO_0LISTP (CDR L))))) 
(PUT 'LTO_ALPHAP 'NUMBER-OF-ARGS 1) 
(DE LTO_ALPHAP (X)
    (PROG (C L)
      (SETQ C T)
      (SETQ L (EXPLODE X))
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND C L)) (RETURN NIL)))
        (SETQ C (LITER (PROG1 (CAR L) (SETQ L (CDR L)))))
        (GO WHILELABEL))
      (RETURN C))) 
(PUT 'LTO_UPCASE 'NUMBER-OF-ARGS 1) 
(DE LTO_UPCASE (S)
    (COMPRESS
     (PROG (C FORALL-RESULT FORALL-ENDPTR)
       (SETQ C (EXPLODE S))
       (COND ((NULL C) (RETURN NIL)))
       (SETQ FORALL-RESULT
               (SETQ FORALL-ENDPTR
                       (CONS ((LAMBDA (C) (LTO_CHARUPCASE C)) (CAR C)) NIL)))
      LOOPLABEL
       (SETQ C (CDR C))
       (COND ((NULL C) (RETURN FORALL-RESULT)))
       (RPLACD FORALL-ENDPTR
               (CONS ((LAMBDA (C) (LTO_CHARUPCASE C)) (CAR C)) NIL))
       (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
       (GO LOOPLABEL)))) 
(PUT 'LTO_CHARUPCASE 'NUMBER-OF-ARGS 1) 
(DE LTO_CHARUPCASE (C)
    (PROG (TABLE)
      (SETQ TABLE
              '((A . |a|) (B . |b|) (C . |c|) (D . |d|) (E . |e|) (F . |f|)
                (G . |g|) (H . |h|) (I . |i|) (J . |j|) (K . |k|) (L . |l|)
                (M . |m|) (N . |n|) (O . |o|) (P . |p|) (Q . |q|) (R . |r|)
                (S . |s|) (T . |t|) (U . |u|) (V . |v|) (W . |w|) (X . |x|)
                (Y . |y|) (Z . |z|)))
      (RETURN (OR (LTO_CATSOC C TABLE) C)))) 
(PUT 'LTO_DOWNCASE 'NUMBER-OF-ARGS 1) 
(DE LTO_DOWNCASE (S)
    (COMPRESS
     (PROG (C FORALL-RESULT FORALL-ENDPTR)
       (SETQ C (EXPLODE S))
       (COND ((NULL C) (RETURN NIL)))
       (SETQ FORALL-RESULT
               (SETQ FORALL-ENDPTR
                       (CONS ((LAMBDA (C) (LTO_CHARDOWNCASE C)) (CAR C)) NIL)))
      LOOPLABEL
       (SETQ C (CDR C))
       (COND ((NULL C) (RETURN FORALL-RESULT)))
       (RPLACD FORALL-ENDPTR
               (CONS ((LAMBDA (C) (LTO_CHARDOWNCASE C)) (CAR C)) NIL))
       (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
       (GO LOOPLABEL)))) 
(PUT 'LTO_CHARDOWNCASE 'NUMBER-OF-ARGS 1) 
(DE LTO_CHARDOWNCASE (C)
    (PROG (TABLE)
      (SETQ TABLE
              '((|a| . A) (|b| . B) (|c| . C) (|d| . D) (|e| . E) (|f| . F)
                (|g| . G) (|h| . H) (|i| . I) (|j| . J) (|k| . K) (|l| . L)
                (|m| . M) (|n| . N) (|o| . O) (|p| . P) (|q| . Q) (|r| . R)
                (|s| . S) (|t| . T) (|u| . U) (|v| . V) (|w| . W) (|x| . X)
                (|y| . Y) (|z| . Z)))
      (RETURN (OR (LTO_CATSOC C TABLE) C)))) 
(PUT 'LTO_STRINGDESCRIPTIONLIST 'NUMBER-OF-ARGS 5) 
(DE LTO_STRINGDESCRIPTIONLIST (AL INDENT COLSEP LEN XDTL)
    (PROG (LINE LINES INDENTL DT DDL LLEN ROFFSET LENDT)
      (SETQ LLEN 0)
      (SETQ ROFFSET 0)
      (SETQ LENDT 0)
      (PROG (I)
        (SETQ I 1)
       LAB
        (COND ((MINUSP (DIFFERENCE INDENT I)) (RETURN NIL)))
        (PROGN
         (PROGN (SETQ INDENTL (CONS '! INDENTL)) '!)
         (PROGN (SETQ INDENTL (CONS '| | INDENTL)) '| |))
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (PROG (PR)
        (SETQ PR AL)
       LAB
        (COND ((NULL PR) (RETURN NIL)))
        ((LAMBDA (PR) (SETQ LLEN (MAX2 LLEN (LTO_STRLEN (CAR PR))))) (CAR PR))
        (SETQ PR (CDR PR))
        (GO LAB))
      (PROG (X)
        (SETQ X XDTL)
       LAB
        (COND ((NULL X) (RETURN NIL)))
        ((LAMBDA (X) (SETQ LLEN (MAX2 LLEN (LTO_STRLEN X)))) (CAR X))
        (SETQ X (CDR X))
        (GO LAB))
      (SETQ ROFFSET (PLUS INDENT LLEN COLSEP))
      (SETQ LINE INDENTL)
      (PROG (PR)
        (SETQ PR AL)
       LAB
        (COND ((NULL PR) (RETURN NIL)))
        ((LAMBDA (PR)
           (PROGN
            (SETQ DT (CAR PR))
            (SETQ LENDT (LTO_STRLEN DT))
            (PROG (C)
              (SETQ C (EXPLODE2 DT))
             LAB
              (COND ((NULL C) (RETURN NIL)))
              ((LAMBDA (C)
                 (PROGN
                  (PROGN (SETQ LINE (CONS '! LINE)) '!)
                  (PROGN (SETQ LINE (CONS C LINE)) C)))
               (CAR C))
              (SETQ C (CDR C))
              (GO LAB))
            (SETQ DDL
                    (LTO_STRINGPARAGRAPH (CDR PR) 0 (DIFFERENCE LEN ROFFSET)))
            (PROG (L)
              (SETQ L DDL)
             LAB
              (COND ((NULL L) (RETURN NIL)))
              ((LAMBDA (L)
                 (PROGN
                  (PROG (I)
                    (SETQ I (PLUS INDENT LENDT))
                   LAB
                    (COND ((MINUSP (DIFFERENCE ROFFSET I)) (RETURN NIL)))
                    (PROGN
                     (PROGN (SETQ LINE (CONS '! LINE)) '!)
                     (PROGN (SETQ LINE (CONS '| | LINE)) '| |))
                    (SETQ I (PLUS2 I 1))
                    (GO LAB))
                  (PROG (C)
                    (SETQ C (EXPLODE2 L))
                   LAB
                    (COND ((NULL C) (RETURN NIL)))
                    ((LAMBDA (C)
                       (PROGN
                        (PROGN (SETQ LINE (CONS '! LINE)) '!)
                        (PROGN (SETQ LINE (CONS C LINE)) C)))
                     (CAR C))
                    (SETQ C (CDR C))
                    (GO LAB))
                  (PROG (W1)
                    (SETQ W1 (ID2STRING (COMPRESS (REVERSE LINE))))
                    (SETQ LINES (CONS W1 LINES))
                    (RETURN W1))
                  (SETQ LINE INDENTL)
                  (SETQ LENDT 0)))
               (CAR L))
              (SETQ L (CDR L))
              (GO LAB))))
         (CAR PR))
        (SETQ PR (CDR PR))
        (GO LAB))
      (RETURN (REVERSIP LINES)))) 
(PUT 'LTO_STRINGPARAGRAPH 'NUMBER-OF-ARGS 3) 
(DE LTO_STRINGPARAGRAPH (S INDENT LEN)
    (LTO_STRINGFORMAT (LTO_STRINGSPLIT S (LIST '| | $EOL$ CR* FF* TAB*)) INDENT
     LEN)) 
(PUT 'LTO_STRINGSPLIT 'NUMBER-OF-ARGS 2) 
(DE LTO_STRINGSPLIT (S FSL)
    (PROG (WL SL)
      (PROG (C)
        (SETQ C (EXPLODE2 S))
       LAB
        (COND ((NULL C) (RETURN NIL)))
        ((LAMBDA (C)
           (COND
            ((MEMQ C FSL)
             (PROGN
              (COND
               (WL
                (PROGN
                 (PROG (W1)
                   (SETQ W1 (ID2STRING (COMPRESS (REVERSIP WL))))
                   (SETQ SL (CONS W1 SL))
                   (RETURN W1))
                 (SETQ WL NIL))))))
            (T
             (PROGN
              (PROGN (SETQ WL (CONS '! WL)) '!)
              (PROGN (SETQ WL (CONS C WL)) C)))))
         (CAR C))
        (SETQ C (CDR C))
        (GO LAB))
      (COND
       (WL
        (PROG (W1)
          (SETQ W1 (ID2STRING (COMPRESS (REVERSIP WL))))
          (SETQ SL (CONS W1 SL))
          (RETURN W1))))
      (RETURN (REVERSIP SL)))) 
(PUT 'LTO_STRINGFORMAT 'NUMBER-OF-ARGS 3) 
(DE LTO_STRINGFORMAT (SL INDENT LEN)
    (PROG (LINE LINES INDENTL S L SLEN)
      (SETQ L 0)
      (SETQ SLEN 0)
      (SETQ L (DIFFERENCE LEN INDENT))
      (PROG (I)
        (SETQ I 1)
       LAB
        (COND ((MINUSP (DIFFERENCE INDENT I)) (RETURN NIL)))
        (PROGN
         (PROGN (SETQ INDENTL (CONS '! INDENTL)) '!)
         (PROGN (SETQ INDENTL (CONS '| | INDENTL)) '| |))
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (SETQ LINE INDENTL)
      (PROG (REST)
        (SETQ REST SL)
       LAB
        (COND ((NULL REST) (RETURN NIL)))
        (PROGN
         (SETQ S (CAR REST))
         (SETQ SLEN (LTO_STRLEN S))
         (COND
          ((AND (GREATERP SLEN L) (NEQ LINE INDENTL))
           (PROGN
            (PROG (W1)
              (SETQ W1 (ID2STRING (COMPRESS (REVERSE (CDDR LINE)))))
              (SETQ LINES (CONS W1 LINES))
              (RETURN W1))
            (SETQ LINE INDENTL)
            (SETQ L (DIFFERENCE LEN INDENT)))))
         (PROG (C)
           (SETQ C (EXPLODE2 S))
          LAB
           (COND ((NULL C) (RETURN NIL)))
           ((LAMBDA (C)
              (PROGN
               (PROGN (SETQ LINE (CONS '! LINE)) '!)
               (PROGN (SETQ LINE (CONS C LINE)) C)))
            (CAR C))
           (SETQ C (CDR C))
           (GO LAB))
         (SETQ L (DIFFERENCE L SLEN))
         (COND
          ((CDR REST)
           (PROGN
            (PROGN (SETQ LINE (CONS '! LINE)) '!)
            (PROGN (SETQ LINE (CONS '| | LINE)) '| |)
            (SETQ L (DIFFERENCE L 1))))))
        (SETQ REST (CDR REST))
        (GO LAB))
      (PROG (W1)
        (SETQ W1 (COND (LINE (ID2STRING (COMPRESS (REVERSIP LINE)))) (T "")))
        (SETQ LINES (CONS W1 LINES))
        (RETURN W1))
      (RETURN (REVERSIP LINES)))) 
(PUT 'LTO_STRLEN 'NUMBER-OF-ARGS 1) 
(DE LTO_STRLEN (S) (LENGTH (EXPLODE2 S))) 
(PUT 'LTO_VERTEXCOVER 'NUMBER-OF-ARGS 2) 
(DE LTO_VERTEXCOVER (EL EXACT)
    (PROG (OC SEENL FL OBJ Z ZZ W BEST S)
      (SETQ OC (RL_SET '(R)))
      (PROG (E)
        (SETQ E EL)
       LAB
        (COND ((NULL E) (RETURN NIL)))
        ((LAMBDA (E)
           (PROGN
            (PROG (V)
              (SETQ V (LIST (CAR E) (CDR E)))
             LAB
              (COND ((NULL V) (RETURN NIL)))
              ((LAMBDA (V)
                 (COND
                  ((NOT (MEMQ V SEENL))
                   (PROGN
                    (PROGN (SETQ SEENL (CONS V SEENL)) V)
                    (COND
                     (EXACT
                      (PROG (W1)
                        (SETQ W1 (LTO_VCZEROORONE (LIST (CONS (CONS V 1) 1))))
                        (SETQ FL (CONS W1 FL))
                        (RETURN W1)))
                     (T
                      (PROG (W1)
                        (SETQ W1
                                (LTO_VCVERTEXGEQONE
                                 (LIST (CONS (CONS V 1) 1))))
                        (SETQ FL (CONS W1 FL))
                        (RETURN W1))))
                    (SETQ OBJ (ADDF OBJ (LIST (CONS (CONS V 1) 1))))))))
               (CAR V))
              (SETQ V (CDR V))
              (GO LAB))
            (PROG (W1)
              (SETQ W1
                      (LTO_VCEDGEGEQONE (LIST (CONS (CONS (CAR E) 1) 1))
                       (LIST (CONS (CONS (CDR E) 1) 1))))
              (SETQ FL (CONS W1 FL))
              (RETURN W1))))
         (CAR E))
        (SETQ E (CDR E))
        (GO LAB))
      (SETQ ZZ (INTERN (GENSYM)))
      (SETQ Z (LIST (CONS (CONS ZZ 1) 1)))
      (SETQ W
              (OFSF_XOPT-ANSL-ANSL
               (OFSF_XOPT-XOPT
                (CL_EX
                 (RL_SMKN 'AND (CONS (OFSF_0MK2 'GEQ (ADDF Z (NEGF OBJ))) FL))
                 (LIST ZZ)))))
      (SETQ BEST (PROG1 (CAR W) (SETQ W (CDR W))))
      (PROG (ANS)
        (SETQ ANS W)
       LAB
        (COND ((NULL ANS) (RETURN NIL)))
        ((LAMBDA (ANS) (COND ((LTO_VCBETTERP ANS BEST Z) (SETQ BEST ANS))))
         (CAR ANS))
        (SETQ ANS (CDR ANS))
        (GO LAB))
      (SETQ W
              (PROG (PR FORALL-RESULT FORALL-ENDPTR)
                (SETQ PR (OFSF_XOPT-ANS-PT BEST))
               STARTOVER
                (COND ((NULL PR) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        ((LAMBDA (PR)
                           (PROGN
                            (SETQ S (SIMP (CDR PR)))
                            (COND
                             ((GEQ (TIMES 2 (OR (CAR S) 0)) (CDR S))
                              (LIST (CAR PR))))))
                         (CAR PR)))
                (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
                (SETQ PR (CDR PR))
                (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
               LOOPLABEL
                (COND ((NULL PR) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        ((LAMBDA (PR)
                           (PROGN
                            (SETQ S (SIMP (CDR PR)))
                            (COND
                             ((GEQ (TIMES 2 (OR (CAR S) 0)) (CDR S))
                              (LIST (CAR PR))))))
                         (CAR PR)))
                (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
                (SETQ PR (CDR PR))
                (GO LOOPLABEL)))
      (RL_SET OC)
      (RETURN W))) 
(PUT 'LTO_VCZEROORONE 'NUMBER-OF-ARGS 1) 
(DE LTO_VCZEROORONE (V)
    (RL_MKN 'OR
     (LIST (OFSF_0MK2 'EQUAL V) (OFSF_0MK2 'EQUAL (ADDF V (NEGF 1)))))) 
(PUT 'LTO_VCVERTEXGEQONE 'NUMBER-OF-ARGS 1) 
(DE LTO_VCVERTEXGEQONE (V) (OFSF_0MK2 'GEQ V)) 
(PUT 'LTO_VCEDGEGEQONE 'NUMBER-OF-ARGS 2) 
(DE LTO_VCEDGEGEQONE (V1 V2) (OFSF_0MK2 'GEQ (ADDF (ADDF V1 V2) (NEGF 1)))) 
(PUT 'LTO_VCBETTERP 'NUMBER-OF-ARGS 3) 
(DE LTO_VCBETTERP (A1 A2 Z)
    (LESSP (ADDF (NEGF (OFSF_ARG2L (OFSF_XOPT-ANS-GD A1))) Z)
           (ADDF (NEGF (OFSF_ARG2L (OFSF_XOPT-ANS-GD A2))) Z))) 
(PUT 'LTO_SETCOVER 'NUMBER-OF-ARGS 1) 
(DE LTO_SETCOVER (L)
    (LTO_SETCOVER1
     (PROG (PR FORALL-RESULT FORALL-ENDPTR)
       (SETQ PR L)
       (COND ((NULL PR) (RETURN NIL)))
       (SETQ FORALL-RESULT
               (SETQ FORALL-ENDPTR
                       (CONS
                        ((LAMBDA (PR) (CONS (CAR PR) (APPEND (CDR PR) NIL)))
                         (CAR PR))
                        NIL)))
      LOOPLABEL
       (SETQ PR (CDR PR))
       (COND ((NULL PR) (RETURN FORALL-RESULT)))
       (RPLACD FORALL-ENDPTR
               (CONS
                ((LAMBDA (PR) (CONS (CAR PR) (APPEND (CDR PR) NIL))) (CAR PR))
                NIL))
       (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
       (GO LOOPLABEL)))) 
(PUT 'LTO_SETCOVER1 'NUMBER-OF-ARGS 1) 
(DE LTO_SETCOVER1 (L)
    (PROG (OC F1 XF LHS L2 F2 OBJ F3 ZZ Z W)
      (SETQ OC (RL_SET '(R)))
      (SETQ F1
              (RL_SMKN 'AND
               (PROG (PR FORALL-RESULT FORALL-ENDPTR)
                 (SETQ PR L)
                 (COND ((NULL PR) (RETURN NIL)))
                 (SETQ FORALL-RESULT
                         (SETQ FORALL-ENDPTR
                                 (CONS
                                  ((LAMBDA (PR)
                                     (PROGN
                                      (SETQ XF
                                              (LIST
                                               (CONS (CONS (CAR PR) 1) 1)))
                                      (RL_MKN 'OR
                                       (LIST (OFSF_0MK2 'EQUAL XF)
                                             (OFSF_0MK2 'EQUAL
                                              (ADDF XF (NEGF 1)))))))
                                   (CAR PR))
                                  NIL)))
                LOOPLABEL
                 (SETQ PR (CDR PR))
                 (COND ((NULL PR) (RETURN FORALL-RESULT)))
                 (RPLACD FORALL-ENDPTR
                         (CONS
                          ((LAMBDA (PR)
                             (PROGN
                              (SETQ XF (LIST (CONS (CONS (CAR PR) 1) 1)))
                              (RL_MKN 'OR
                               (LIST (OFSF_0MK2 'EQUAL XF)
                                     (OFSF_0MK2 'EQUAL (ADDF XF (NEGF 1)))))))
                           (CAR PR))
                          NIL))
                 (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                 (GO LOOPLABEL))))
      (PROG ()
       WHILELABEL
        (COND ((NOT (CDR (CAR L))) (RETURN NIL)))
        (PROGN
         (SETQ LHS NIL)
         (PROG (PR)
           (SETQ PR L)
          LAB
           (COND ((NULL PR) (RETURN NIL)))
           ((LAMBDA (PR)
              (PROGN
               (COND
                ((EQN (CAR (CDR PR)) 1)
                 (SETQ LHS (ADDF LHS (LIST (CONS (CONS (CAR PR) 1) 1))))))
               (SETCDR PR (CDR (CDR PR)))))
            (CAR PR))
           (SETQ PR (CDR PR))
           (GO LAB))
         (COND
          (LHS
           (PROG (W1)
             (SETQ W1 (OFSF_0MK2 'GEQ (ADDF LHS (NEGF 1))))
             (SETQ L2 (CONS W1 L2))
             (RETURN W1)))))
        (GO WHILELABEL))
      (SETQ F2 (RL_SMKN 'AND L2))
      (PROG (PR)
        (SETQ PR L)
       LAB
        (COND ((NULL PR) (RETURN NIL)))
        ((LAMBDA (PR) (SETQ OBJ (ADDF OBJ (LIST (CONS (CONS (CAR PR) 1) 1)))))
         (CAR PR))
        (SETQ PR (CDR PR))
        (GO LAB))
      (SETQ ZZ (INTERN (GENSYM)))
      (SETQ Z (LIST (CONS (CONS ZZ 1) 1)))
      (SETQ F3 (OFSF_0MK2 'GEQ (ADDF Z (NEGF OBJ))))
      (SETQ W
              (OFSF_XOPT-ANSL-ANSL
               (OFSF_XOPT-XOPT
                (RL_EX (RL_MKN 'AND (LIST F1 F2 F3)) (LIST ZZ)))))
      (SETQ W
              (PROG (PR FORALL-RESULT FORALL-ENDPTR)
                (SETQ PR (LTO_SETCOVERBESTRES W))
               STARTOVER
                (COND ((NULL PR) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        ((LAMBDA (PR)
                           (COND ((EQN (CDR PR) 1) (LIST (CAR PR)))))
                         (CAR PR)))
                (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
                (SETQ PR (CDR PR))
                (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
               LOOPLABEL
                (COND ((NULL PR) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        ((LAMBDA (PR)
                           (COND ((EQN (CDR PR) 1) (LIST (CAR PR)))))
                         (CAR PR)))
                (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
                (SETQ PR (CDR PR))
                (GO LOOPLABEL)))
      (RL_SET OC)
      (RETURN W))) 
(PUT 'LTO_SETCOVERBESTRES 'NUMBER-OF-ARGS 1) 
(DE LTO_SETCOVERBESTRES (L)
    (PROG (CUR BEST RES)
      (PROG (ANS)
        (SETQ ANS L)
       LAB
        (COND ((NULL ANS) (RETURN NIL)))
        ((LAMBDA (ANS)
           (PROGN
            (SETQ CUR (NEGF (CDR (OFSF_ARG2L (OFSF_XOPT-ANS-GD ANS)))))
            NIL
            (COND (NIL NIL))
            (COND
             ((OR (NOT BEST) (LESSP CUR BEST))
              (PROGN (SETQ BEST CUR) (SETQ RES (OFSF_XOPT-ANS-PT ANS)))))))
         (CAR ANS))
        (SETQ ANS (CDR ANS))
        (GO LAB))
      (RETURN RES))) 
(PUT 'LTO_LPVARL 'NUMBER-OF-ARGS 1) 
(DE LTO_LPVARL (U)
    (COND ((IDP U) (LIST U))
          ((PAIRP U)
           (PROG (V FORALL-RESULT FORALL-ENDPTR)
             (SETQ V (CDR U))
            STARTOVER
             (COND ((NULL V) (RETURN NIL)))
             (SETQ FORALL-RESULT ((LAMBDA (V) (LTO_LPVARL V)) (CAR V)))
             (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
             (SETQ V (CDR V))
             (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
            LOOPLABEL
             (COND ((NULL V) (RETURN FORALL-RESULT)))
             (RPLACD FORALL-ENDPTR ((LAMBDA (V) (LTO_LPVARL V)) (CAR V)))
             (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
             (SETQ V (CDR V))
             (GO LOOPLABEL))))) 
(PUT 'LTO_LOREMIPSUMAL 'NUMBER-OF-ARGS 0) 
(DE LTO_LOREMIPSUMAL NIL
    '(("Lorem"
       . "Lorem ipsum dolor sit amet, consectetur adipisici elit, sed eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquid ex ea commodi consequat. Quis aute iure reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint obcaecat cupiditat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.")
      ("Duis"
       . "Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.")
      ("Ut"
       . "Ut  wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi.")
      ("Nam"
       . "Nam liber tempor cum soluta nobis eleifend option congue nihil imperdiet doming id quod mazim placerat facer possim assum. Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.")
      ("Duis"
       . "Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis.")
      ("At"
       . "At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, At accusam aliquyam diam diam dolore dolores duo eirmod eos erat, et nonumy sed tempor et et invidunt justo labore Stet clita ea et gubergren, kasd magna no rebum. sanctus sea sed takimata ut vero voluptua. est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat.")
      ("Consetetur"
       . "Consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet."))) 
(PUT 'LTO_LOREMIPSUM 'NUMBER-OF-ARGS 0) 
(DE LTO_LOREMIPSUM NIL
    (LTO_SCONCAT
     (PROG (RPR FORALL-RESULT FORALL-ENDPTR)
       (SETQ RPR (LTO_LOREMIPSUMAL))
      STARTOVER
       (COND ((NULL RPR) (RETURN NIL)))
       (SETQ FORALL-RESULT (LIST (CDAR RPR) (COND ((CDR RPR) " ") (T ""))))
       (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
       (SETQ RPR (CDR RPR))
       (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
      LOOPLABEL
       (COND ((NULL RPR) (RETURN FORALL-RESULT)))
       (RPLACD FORALL-ENDPTR (LIST (CDAR RPR) (COND ((CDR RPR) " ") (T ""))))
       (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
       (SETQ RPR (CDR RPR))
       (GO LOOPLABEL)))) 
(PUT 'LTO_CDRASSOC 'NUMBER-OF-ARGS 2) 
(DE LTO_CDRASSOC (ENTRY AL)
    (COND ((NULL AL) NIL) ((EQUAL (CDAR AL) ENTRY) (CAR AL))
          (T (LTO_CDRASSOC ENTRY (CDR AL))))) 
(PUT 'LTO_REMOVE 'NUMBER-OF-ARGS 2) 
(DE LTO_REMOVE (FN L) (LTO_REMOVE1 FN L NIL)) 
(PUT 'LTO_REMOVE1 'NUMBER-OF-ARGS 3) 
(DE LTO_REMOVE1 (FN L XARL)
    (PROG (A FORALL-RESULT FORALL-ENDPTR)
      (SETQ A L)
     STARTOVER
      (COND ((NULL A) (RETURN NIL)))
      (SETQ FORALL-RESULT
              ((LAMBDA (A) (COND ((NOT (APPLY FN (CONS A XARL))) (LIST A))))
               (CAR A)))
      (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
      (SETQ A (CDR A))
      (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
     LOOPLABEL
      (COND ((NULL A) (RETURN FORALL-RESULT)))
      (RPLACD FORALL-ENDPTR
              ((LAMBDA (A) (COND ((NOT (APPLY FN (CONS A XARL))) (LIST A))))
               (CAR A)))
      (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
      (SETQ A (CDR A))
      (GO LOOPLABEL))) 
(PUT 'LTO_RMPOS 'NUMBER-OF-ARGS 2) 
(DE LTO_RMPOS (LST POSL)
    (PROG (POS)
      (SETQ POS 0)
      (RETURN
       (PROG (A FORALL-RESULT FORALL-ENDPTR)
         (SETQ A LST)
        STARTOVER
         (COND ((NULL A) (RETURN NIL)))
         (SETQ FORALL-RESULT
                 ((LAMBDA (A)
                    (PROGN
                     (SETQ POS (PLUS POS 1))
                     (COND ((NOT (MEMQ POS POSL)) (LIST A)))))
                  (CAR A)))
         (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
         (SETQ A (CDR A))
         (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
        LOOPLABEL
         (COND ((NULL A) (RETURN FORALL-RESULT)))
         (RPLACD FORALL-ENDPTR
                 ((LAMBDA (A)
                    (PROGN
                     (SETQ POS (PLUS POS 1))
                     (COND ((NOT (MEMQ POS POSL)) (LIST A)))))
                  (CAR A)))
         (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
         (SETQ A (CDR A))
         (GO LOOPLABEL))))) 
(PUT 'LTO_DROP 'NUMBER-OF-ARGS 2) 
(DE LTO_DROP (L N)
    (COND ((AND L (GREATERP N 0)) (LTO_DROP (CDR L) (DIFFERENCE N 1))) (T L))) 
(ENDMODULE) 