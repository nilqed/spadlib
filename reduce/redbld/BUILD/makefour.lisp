(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'MAKEFOUR)) 
(PUT 'HARMONICP 'NUMBER-OF-ARGS 1) 
(PUT 'HARMONICP 'DEFINED-ON-LINE '30) 
(PUT 'HARMONICP 'DEFINED-IN-FILE 'CAMAL/MAKEFOUR.RED) 
(PUT 'HARMONICP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE HARMONICP (U) (GET U 'FOURIER-ANGLE)) 
(PUT 'HARMONIC 'NUMBER-OF-ARGS 1) 
(PUT 'HARMONIC 'DEFINED-ON-LINE '32) 
(PUT 'HARMONIC 'DEFINED-IN-FILE 'CAMAL/MAKEFOUR.RED) 
(PUT 'HARMONIC 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE HARMONIC (U)
    (PROGN
     (PROG (X)
       (SETQ X U)
      LAB
       (COND ((NULL X) (RETURN NIL)))
       ((LAMBDA (X)
          (COND
           ((NOT (GET X 'FOURIER-ANGLE))
            (PROGN
             (COND
              ((GREATERP NEXT-ANGLE* 7) (RERROR 'FOURIER 3 "Too many angles")))
             (PUT X 'FOURIER-ANGLE NEXT-ANGLE*)
             (PUTV FOURIER-NAME* NEXT-ANGLE* X)
             (SETQ NEXT-ANGLE* (IPLUS2 NEXT-ANGLE* 1))
             NIL))))
        (CAR X))
       (SETQ X (CDR X))
       (GO LAB)))) 
(PUT 'HARMONIC 'STAT 'RLIS) 
(PUT 'SIMPFOURIER 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPFOURIER 'DEFINED-ON-LINE '44) 
(PUT 'SIMPFOURIER 'DEFINED-IN-FILE 'CAMAL/MAKEFOUR.RED) 
(PUT 'SIMPFOURIER 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPFOURIER (U)
    (PROG ()
      (COND
       ((NOT (EQUAL (LENGTH U) 1))
        (RERROR 'FOURIER 1 "Argument should be single expression")))
      (RETURN (SIMPFOURIER1 (PREPSQ (SIMP* (CAR U))))))) 
(PUT 'SIMPFOURIER1 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPFOURIER1 'DEFINED-ON-LINE '52) 
(PUT 'SIMPFOURIER1 'DEFINED-IN-FILE 'CAMAL/MAKEFOUR.RED) 
(PUT 'SIMPFOURIER1 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPFOURIER1 (U)
    (PROG (FF)
      (COND
       ((ATOM U)
        (PROGN
         (COND ((HARMONICP U) (RERROR 'FOURIER 2 "Secular angle not allowed")))
         (RETURN (CONS (*SQ2FOURIER (SIMP U)) 1))
         NIL))
       ((EQCAR U '|:FS:|) (RETURN U))
       ((SETQ FF (GET (CAR U) 'SIMPFOUR)) (RETURN (APPLY1 FF (CDR U))))
       (T
        (PROGN
         (RERROR 'FOURIER 4 (CONS "Unknown function" (CAR U)))
         (RETURN (CONS (*SQ2FOURIER U) 1))
         NIL))))) 
(PUT 'FOURIER 'SIMPFN 'SIMPFOURIER) 
(PUT 'SIMPFOURIERSIN 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPFOURIERSIN 'DEFINED-ON-LINE '69) 
(PUT 'SIMPFOURIERSIN 'DEFINED-IN-FILE 'CAMAL/MAKEFOUR.RED) 
(PUT 'SIMPFOURIERSIN 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPFOURIERSIN (U)
    (PROG (ANS VV)
      (SETQ U (CAR U))
      (COND
       ((ATOM U)
        (COND
         ((HARMONICP U)
          (PROGN
           (SETQ ANS (MKVECT 3))
           (PUTV ANS 0 (CONS 1 1))
           (PUTV ANS 1 'SIN)
           (SETQ VV (MKVECT 7))
           (PROG (I)
             (SETQ I 0)
            LAB
             (COND ((MINUSP (DIFFERENCE 7 I)) (RETURN NIL)))
             (PUTV VV I 0)
             (SETQ I (PLUS2 I 1))
             (GO LAB))
           (PUTV VV (GET U 'FOURIER-ANGLE) 1)
           (PUTV ANS 2 VV)
           (PUTV ANS 3 NIL)
           (RETURN (CONS (CONS (GET 'FOURIER 'TAG) ANS) 1))))
         (T (RETURN (CONS (*SQ2FOURIER (SIMP (LIST 'SIN U))) 1))))))
      (COND
       ((ANGLE-EXPRESSION-P U)
        (PROGN
         (SETQ ANS (MKVECT 3))
         (PUTV ANS 0 (CONS 1 1))
         (PUTV ANS 1 'SIN)
         (SETQ VV (MKVECT 7))
         (PROG (I)
           (SETQ I 0)
          LAB
           (COND ((MINUSP (DIFFERENCE 7 I)) (RETURN NIL)))
           (PUTV VV I 0)
           (SETQ I (PLUS2 I 1))
           (GO LAB))
         (COMPILE-ANGLE-EXPRESSION U VV)
         (PUTV ANS 2 VV)
         (PUTV ANS 3 NIL)
         (RETURN (CONS (CONS (GET 'FOURIER 'TAG) ANS) 1)))))
      (RERROR 'FOURIER 99 "Not finished yet"))) 
(PUT 'SIN 'SIMPFOUR 'SIMPFOURIERSIN) 
(PUT 'SIMPFOURIERCOS 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPFOURIERCOS 'DEFINED-ON-LINE '100) 
(PUT 'SIMPFOURIERCOS 'DEFINED-IN-FILE 'CAMAL/MAKEFOUR.RED) 
(PUT 'SIMPFOURIERCOS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPFOURIERCOS (U)
    (PROG (ANS VV)
      (SETQ U (CAR U))
      (COND
       ((ATOM U)
        (COND
         ((HARMONICP U)
          (PROGN
           (SETQ ANS (MKVECT 3))
           (PUTV ANS 0 (CONS 1 1))
           (PUTV ANS 1 'COS)
           (SETQ VV (MKVECT 7))
           (PROG (I)
             (SETQ I 0)
            LAB
             (COND ((MINUSP (DIFFERENCE 7 I)) (RETURN NIL)))
             (PUTV VV I 0)
             (SETQ I (PLUS2 I 1))
             (GO LAB))
           (PUTV VV (GET U 'FOURIER-ANGLE) 1)
           (PUTV ANS 2 VV)
           (PUTV ANS 3 NIL)
           (RETURN (CONS (CONS (GET 'FOURIER 'TAG) ANS) 1))))
         (T (RETURN (CONS (*SQ2FOURIER (SIMP (LIST 'COS U))) 1))))))
      (COND
       ((ANGLE-EXPRESSION-P U)
        (PROGN
         (SETQ ANS (MKVECT 3))
         (PUTV ANS 0 (CONS 1 1))
         (PUTV ANS 1 'COS)
         (SETQ VV (MKVECT 7))
         (PROG (I)
           (SETQ I 0)
          LAB
           (COND ((MINUSP (DIFFERENCE 7 I)) (RETURN NIL)))
           (PUTV VV I 0)
           (SETQ I (PLUS2 I 1))
           (GO LAB))
         (COMPILE-ANGLE-EXPRESSION U VV)
         (PUTV ANS 2 VV)
         (PUTV ANS 3 NIL)
         (RETURN (CONS (CONS (GET 'FOURIER 'TAG) ANS) 1)))))
      (RERROR 'FOURIER 99 "Not finished yet"))) 
(PUT 'COS 'SIMPFOUR 'SIMPFOURIERCOS) 
(PUT 'ANGLE-EXPRESSION-P 'NUMBER-OF-ARGS 1) 
(PUT 'ANGLE-EXPRESSION-P 'DEFINED-ON-LINE '133) 
(PUT 'ANGLE-EXPRESSION-P 'DEFINED-IN-FILE 'CAMAL/MAKEFOUR.RED) 
(PUT 'ANGLE-EXPRESSION-P 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE ANGLE-EXPRESSION-P (U)
    (COND ((AND (ATOM U) (HARMONICP U)) T)
          ((OR (EQCAR U 'PLUS) (EQCAR U 'DIFFERENCE))
           (AND (ANGLE-EXPRESSION-P (CADR U)) (ANGLE-EXPRESSION-P (CADDR U))))
          ((EQCAR U 'MINUS) (ANGLE-EXPRESSION-P (CADR U)))
          ((EQCAR U 'TIMES)
           (COND ((NUMBERP (CADR U)) (ANGLE-EXPRESSION-P (CADDR U)))
                 (T (AND (ANGLE-EXPRESSION-P (CADR U)) (NUMBERP (CADDR U))))))
          (T NIL))) 
(PUT 'COMPILE-ANGLE-EXPRESSION 'NUMBER-OF-ARGS 2) 
(PUT 'COMPILE-ANGLE-EXPRESSION 'DEFINED-ON-LINE '145) 
(PUT 'COMPILE-ANGLE-EXPRESSION 'DEFINED-IN-FILE 'CAMAL/MAKEFOUR.RED) 
(PUT 'COMPILE-ANGLE-EXPRESSION 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE COMPILE-ANGLE-EXPRESSION (U V)
    (COND
     ((AND (ATOM U) (HARMONICP U))
      (PUTV V (GET U 'FOURIER-ANGLE) (PLUS 1 (GETV V (GET U 'FOURIER-ANGLE)))))
     ((EQCAR U 'PLUS)
      (PROGN
       (SETQ U (CDR U))
       (PROG ()
        WHILELABEL
         (COND ((NOT U) (RETURN NIL)))
         (PROGN (COMPILE-ANGLE-EXPRESSION (CAR U) V) (SETQ U (CDR U)))
         (GO WHILELABEL))
       V))
     ((EQCAR U 'DIFFERENCE)
      (PROG (VV)
        (COMPILE-ANGLE-EXPRESSION (CADR U) V)
        (SETQ VV (MKVECT 7))
        (PROG (I)
          (SETQ I 0)
         LAB
          (COND ((MINUSP (DIFFERENCE 7 I)) (RETURN NIL)))
          (PUTV VV I 0)
          (SETQ I (PLUS2 I 1))
          (GO LAB))
        (COMPILE-ANGLE-EXPRESSION (CADDR U) VV)
        (PROG (I)
          (SETQ I 0)
         LAB
          (COND ((MINUSP (DIFFERENCE 7 I)) (RETURN NIL)))
          (PUTV V I (DIFFERENCE (GETV V I) (GETV VV I)))
          (SETQ I (PLUS2 I 1))
          (GO LAB))
        (RETURN V)))
     ((EQCAR U 'MINUS)
      (PROG (VV)
        (SETQ VV (MKVECT 7))
        (PROG (I)
          (SETQ I 0)
         LAB
          (COND ((MINUSP (DIFFERENCE 7 I)) (RETURN NIL)))
          (PUTV VV I 0)
          (SETQ I (PLUS2 I 1))
          (GO LAB))
        (COMPILE-ANGLE-EXPRESSION (CADR U) VV)
        (PROG (I)
          (SETQ I 0)
         LAB
          (COND ((MINUSP (DIFFERENCE 7 I)) (RETURN NIL)))
          (PUTV V I (DIFFERENCE (GETV V I) (GETV VV I)))
          (SETQ I (PLUS2 I 1))
          (GO LAB))
        (RETURN V)))
     ((EQCAR U 'TIMES)
      (COND
       ((NUMBERP (CADR U))
        (PROG (VV)
          (SETQ VV (MKVECT 7))
          (PROG (I)
            (SETQ I 0)
           LAB
            (COND ((MINUSP (DIFFERENCE 7 I)) (RETURN NIL)))
            (PUTV VV I 0)
            (SETQ I (PLUS2 I 1))
            (GO LAB))
          (COMPILE-ANGLE-EXPRESSION (CADDR U) VV)
          (PROG (I)
            (SETQ I 0)
           LAB
            (COND ((MINUSP (DIFFERENCE 7 I)) (RETURN NIL)))
            (PUTV V I (PLUS (TIMES (CADR U) (GETV VV I)) (GETV V I)))
            (SETQ I (PLUS2 I 1))
            (GO LAB))))
       (T
        (PROG (VV)
          (SETQ VV (MKVECT 7))
          (PROG (I)
            (SETQ I 0)
           LAB
            (COND ((MINUSP (DIFFERENCE 7 I)) (RETURN NIL)))
            (PUTV VV I 0)
            (SETQ I (PLUS2 I 1))
            (GO LAB))
          (COMPILE-ANGLE-EXPRESSION (CADR U) VV)
          (PROG (I)
            (SETQ I 0)
           LAB
            (COND ((MINUSP (DIFFERENCE 7 I)) (RETURN NIL)))
            (PUTV V I (PLUS (TIMES (CADDR U) (GETV VV I)) (GETV V I)))
            (SETQ I (PLUS2 I 1))
            (GO LAB))))))
     (T NIL))) 
(PUT 'SIMPFOURIERTIMES 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPFOURIERTIMES 'DEFINED-ON-LINE '191) 
(PUT 'SIMPFOURIERTIMES 'DEFINED-IN-FILE 'CAMAL/MAKEFOUR.RED) 
(PUT 'SIMPFOURIERTIMES 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPFOURIERTIMES (U)
    (PROG (Z)
      (SETQ Z (CAR (SIMPFOURIER1 (CAR U))))
      (SETQ U (CDR U))
     A
      (COND ((NULL U) (RETURN (CONS Z 1))))
      (SETQ Z (|FS:TIMES:| (CAR (SIMPFOURIER1 (CAR U))) Z))
      (SETQ U (CDR U))
      (GO A))) 
(PUT 'TIMES 'SIMPFOUR 'SIMPFOURIERTIMES) 
(PUT 'SIMPFOURIEREXPT 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPFOURIEREXPT 'DEFINED-ON-LINE '203) 
(PUT 'SIMPFOURIEREXPT 'DEFINED-IN-FILE 'CAMAL/MAKEFOUR.RED) 
(PUT 'SIMPFOURIEREXPT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPFOURIEREXPT (U)
    (CONS (|FS:EXPT:| (CAR (SIMPFOURIER1 (CAR U))) (CADR U)) 1)) 
(PUT 'EXPT 'SIMPFOUR 'SIMPFOURIEREXPT) 
(PUT 'SIMPFOURIERPLUS 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPFOURIERPLUS 'DEFINED-ON-LINE '208) 
(PUT 'SIMPFOURIERPLUS 'DEFINED-IN-FILE 'CAMAL/MAKEFOUR.RED) 
(PUT 'SIMPFOURIERPLUS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPFOURIERPLUS (U)
    (PROG (Z)
      (SETQ Z (CAR (SIMPFOURIER1 (CAR U))))
      (SETQ U (CDR U))
     A
      (COND ((NULL U) (RETURN (CONS Z 1))))
      (SETQ Z (|FS:PLUS:| (CAR (SIMPFOURIER1 (CAR U))) Z))
      (SETQ U (CDR U))
      (GO A))) 
(PUT 'PLUS 'SIMPFOUR 'SIMPFOURIERPLUS) 
(PUT 'SIMPFOURIERDIFFERENCE 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPFOURIERDIFFERENCE 'DEFINED-ON-LINE '220) 
(PUT 'SIMPFOURIERDIFFERENCE 'DEFINED-IN-FILE 'CAMAL/MAKEFOUR.RED) 
(PUT 'SIMPFOURIERDIFFERENCE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPFOURIERDIFFERENCE (U)
    (CONS
     (|FS:PLUS:| (CAR (SIMPFOURIER1 (CAR U)))
      (|FS:NEGATE:| (CAR (SIMPFOURIER1 (CADR U)))))
     1)) 
(PUT 'DIFFERENCE 'SIMPFOUR 'SIMPFOURIERDIFFERENCE) 
(PUT 'SIMPFOURIERMINUS 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPFOURIERMINUS 'DEFINED-ON-LINE '226) 
(PUT 'SIMPFOURIERMINUS 'DEFINED-IN-FILE 'CAMAL/MAKEFOUR.RED) 
(PUT 'SIMPFOURIERMINUS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPFOURIERMINUS (U)
    (CONS
     (CONS (GET 'FOURIER 'TAG)
           (|FS:NEGATE| (CDR (CAR (SIMPFOURIER1 (CAR U))))))
     1)) 
(PUT 'MINUS 'SIMPFOUR 'SIMPFOURIERMINUS) 
(PUT 'SIMPFOURIERQUOT 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPFOURIERQUOT 'DEFINED-ON-LINE '231) 
(PUT 'SIMPFOURIERQUOT 'DEFINED-IN-FILE 'CAMAL/MAKEFOUR.RED) 
(PUT 'SIMPFOURIERQUOT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPFOURIERQUOT (U)
    (PROG (V)
      (SETQ V (SIMP* (CADR U)))
      (SETQ V (CONS (CDR V) (CAR V)))
      (RETURN
       (CONS (|FS:TIMES:| (CAR (SIMPFOURIER1 (CAR U))) (*SQ2FOURIER V)) 1)))) 
(PUT 'QUOTIENT 'SIMPFOUR 'SIMPFOURIERQUOT) 
(PUT 'SIMPHSIN 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPHSIN 'DEFINED-ON-LINE '240) 
(PUT 'SIMPHSIN 'DEFINED-IN-FILE 'CAMAL/MAKEFOUR.RED) 
(PUT 'SIMPHSIN 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPHSIN (U)
    (PROG ()
      (COND
       ((NOT (EQUAL (LENGTH U) 1))
        (RERROR 'FOURIER 5 "Argument should be single expression")))
      (RETURN (SIMPFOURIERSIN (LIST (SETQ U (PREPSQ (SIMP* (CAR U))))))))) 
(PUT 'HSIN 'SIMPFN 'SIMPHSIN) 
(PUT 'SIMPHCOS 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPHCOS 'DEFINED-ON-LINE '249) 
(PUT 'SIMPHCOS 'DEFINED-IN-FILE 'CAMAL/MAKEFOUR.RED) 
(PUT 'SIMPHCOS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPHCOS (U)
    (PROG ()
      (COND
       ((NOT (EQUAL (LENGTH U) 1))
        (RERROR 'FOURIER 6 "Argument should be single expression")))
      (RETURN (SIMPFOURIERCOS (LIST (SETQ U (PREPSQ (SIMP* (CAR U))))))))) 
(PUT 'HCOS 'SIMPFN 'SIMPHCOS) 
(ENDMODULE) 