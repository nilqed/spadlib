(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'INTEGRATOR)) 
(NULL (SETQ *MODE 'SYMBOLIC)) 
(PUT 'INITIALIZE_EQUATIONS 'PSOPFN 'INITIALIZE_EQUATIONS1) 
(GLOBAL '(CUR_EQ_SET*)) 
(SETQ CUR_EQ_SET* 'EQU) 
(FLUID '(*COEFFICIENT_CHECK)) 
(SETQ *COEFFICIENT_CHECK T) 
(FLAG '(COEFFICIENT_CHECK) 'SWITCH) 
(FLUID '(*POLYNOMIAL_CHECK)) 
(SETQ *POLYNOMIAL_CHECK NIL) 
(FLAG '(POLYNOMIAL_CHECK) 'SWITCH) 
(FLUID '(*ALLOW_DIFFERENTIATION)) 
(SETQ *ALLOW_DIFFERENTIATION NIL) 
(FLAG '(ALLOW_DIFFERENTIATION) 'SWITCH) 
(FLUID '(LISTPRI_DEPTH*)) 
(SETQ LISTPRI_DEPTH* 40) 
(AEVAL (NULL (SETQ *MODE 'ALGEBRAIC))) 
(PUT 'INITIALIZE_EQUATIONS1 'NUMBER-OF-ARGS 1) 
(PUT 'INITIALIZE_EQUATIONS1 'DEFINED-ON-LINE '77) 
(PUT 'INITIALIZE_EQUATIONS1 'DEFINED-IN-FILE 'CDIFF/INTEGRATOR.RED) 
(PUT 'INITIALIZE_EQUATIONS1 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE INITIALIZE_EQUATIONS1 (SPECIFICATION_LIST)
    (PROG (OPERATOR_NAME TOTAL_USED VARIABLE_LIST SPECIFICATION EVEN_USED
           ODD_USED CONSTANT_OPERATOR BRACKETNAME FUNCTION_NAME FUNCTION_LIST)
      (COND
       ((LESSP (LENGTH SPECIFICATION_LIST) 5)
        (REDERR "INITIALIZE_EQUATIONS: wrong number of parameters")))
      (COND
       ((NOT (IDP (SETQ OPERATOR_NAME (CAR SPECIFICATION_LIST))))
        (REDERR
         "INITIALIZE_EQUATIONS: equations operator must be identifier")))
      (COND
       ((OR
         (NOT
          (FIXP
           (SETQ TOTAL_USED
                   (REVAL1
                    (CAR (SETQ SPECIFICATION_LIST (CDR SPECIFICATION_LIST)))
                    T))))
         (LESSP TOTAL_USED 0))
        (REDERR
         "INITIALIZE_EQUATIONS: total number of equations must be positive")))
      (PUT OPERATOR_NAME 'TOTAL_USED TOTAL_USED)
      (SETQ VARIABLE_LIST
              (REVAL1 (CAR (SETQ SPECIFICATION_LIST (CDR SPECIFICATION_LIST)))
                      T))
      (COND
       ((OR (ATOM VARIABLE_LIST) (NEQ (CAR VARIABLE_LIST) 'LIST))
        (REDERR "INITIALIZE_EQUATIONS: variable list must be algebraic list")))
      (PUT OPERATOR_NAME 'VARIABLE_LIST (CDR VARIABLE_LIST))
      (SETQ SPECIFICATION_LIST (CDR SPECIFICATION_LIST))
      (SETQ SPECIFICATION (CAR SPECIFICATION_LIST))
      (COND
       ((OR (ATOM SPECIFICATION) (NEQ (LENGTH SPECIFICATION) 4)
            (NEQ (CAR SPECIFICATION) 'LIST)
            (NOT (IDP (SETQ CONSTANT_OPERATOR (CADR SPECIFICATION))))
            (NOT (FIXP (SETQ EVEN_USED (REVAL1 (CADDR SPECIFICATION) T))))
            (NOT (FIXP (SETQ ODD_USED (REVAL1 (CADDDR SPECIFICATION) T))))
            (LESSP EVEN_USED 0) (LESSP ODD_USED 0))
        (MSGPRI "INITIALIZE_EQUATIONS: invalid declaration of" SPECIFICATION
                NIL NIL T)))
      (PUT OPERATOR_NAME 'CONSTANT_OPERATOR CONSTANT_OPERATOR)
      (COND
       ((SETQ BRACKETNAME (GET CONSTANT_OPERATOR 'BRACKETNAME))
        (PUT OPERATOR_NAME 'BRACKETNAME BRACKETNAME)))
      (COND
       ((GET CONSTANT_OPERATOR 'BRACKETNAME)
        (DEFINE_USED BRACKETNAME (LIST 'LIST EVEN_USED ODD_USED)))
       (T
        (PROG ()
          (PUT CONSTANT_OPERATOR 'EVEN_USED EVEN_USED)
          (PUT CONSTANT_OPERATOR 'ODD_USED ODD_USED))))
      (PROG (FUNCTION_SPECIFICATION)
        (SETQ FUNCTION_SPECIFICATION (CDR SPECIFICATION_LIST))
       LAB
        (COND ((NULL FUNCTION_SPECIFICATION) (RETURN NIL)))
        ((LAMBDA (FUNCTION_SPECIFICATION)
           (PROG ()
             (COND
              ((OR (ATOM FUNCTION_SPECIFICATION)
                   (NEQ (LENGTH FUNCTION_SPECIFICATION) 4)
                   (NEQ (CAR FUNCTION_SPECIFICATION) 'LIST)
                   (NOT
                    (IDP (SETQ FUNCTION_NAME (CADR FUNCTION_SPECIFICATION))))
                   (NOT
                    (FIXP
                     (SETQ EVEN_USED
                             (REVAL1 (CADDR FUNCTION_SPECIFICATION) T))))
                   (NOT
                    (FIXP
                     (SETQ ODD_USED
                             (REVAL1 (CADDDR FUNCTION_SPECIFICATION) T))))
                   (LESSP EVEN_USED 0) (LESSP ODD_USED 0))
               (MSGPRI "INITIALIZE_EQUATIONS: invalid declaration of"
                       FUNCTION_SPECIFICATION NIL NIL T)))
             (COND
              ((GET FUNCTION_NAME 'BRACKETNAME)
               (DEFINE_USED BRACKETNAME (LIST 'LIST EVEN_USED ODD_USED)))
              (T
               (PROG ()
                 (PUT FUNCTION_NAME 'EVEN_USED EVEN_USED)
                 (PUT FUNCTION_NAME 'ODD_USED ODD_USED))))
             (SETQ FUNCTION_LIST (CONS FUNCTION_NAME FUNCTION_LIST))))
         (CAR FUNCTION_SPECIFICATION))
        (SETQ FUNCTION_SPECIFICATION (CDR FUNCTION_SPECIFICATION))
        (GO LAB))
      (PUT OPERATOR_NAME 'FUNCTION_LIST FUNCTION_LIST))) 
(FLAG '(USE_EQUATIONS) 'OPFN) 
(PUT 'USE_EQUATIONS 'NUMBER-OF-ARGS 1) 
(PUT 'USE_EQUATIONS 'DEFINED-ON-LINE '147) 
(PUT 'USE_EQUATIONS 'DEFINED-IN-FILE 'CDIFF/INTEGRATOR.RED) 
(PUT 'USE_EQUATIONS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE USE_EQUATIONS (OPERATOR_NAME)
    (PROG ()
      (COND ((IDP OPERATOR_NAME) (SETQ CUR_EQ_SET* OPERATOR_NAME))
            (T (REDERR "USE_EQUATIONS: argument must be identifier"))))) 
(FLAG '(INTEGRATE_EQUATION) 'OPFN) 
(PUT 'INTEGRATE_EQUATION 'NUMBER-OF-ARGS 1) 
(PUT 'INTEGRATE_EQUATION 'DEFINED-ON-LINE '156) 
(PUT 'INTEGRATE_EQUATION 'DEFINED-IN-FILE 'CDIFF/INTEGRATOR.RED) 
(PUT 'INTEGRATE_EQUATION 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE INTEGRATE_EQUATION (N)
    (PROG (LISTPRI_DEPTH* TOTAL_USED EQUATION DENOMINATOR SOLVABLE_KERNEL
           SOLVABLE_KERNELS DF_LIST FUNCTION_LIST PRESENT_FUNCTIONS_LIST
           VARIABLE_LIST ABSENT_VARIABLES LINEAR_FUNCTIONS_LIST CONSTANTS_LIST
           BRACKETNAME DF_TERMS DF_FUNCTIONS LINEAR_FUNCTIONS
           FUNCTIONS_AND_CONSTANTS_LIST COMMUTATOR_FUNCTIONS PRESENT_VARIABLES
           NR_OF_VARIABLES INTEGRATION_VARIABLES)
      (SETQ LISTPRI_DEPTH* 200)
      (TERPRI* T)
      (COND
       ((OR (NULL (SETQ TOTAL_USED (GET CUR_EQ_SET* 'TOTAL_USED)))
            (GREATERP N TOTAL_USED))
        (MSGPRI "INTEGRATE_EQUATIONS: properly initialize" CUR_EQ_SET* NIL NIL
                T)))
      (COND
       ((NULL
         (SETQ EQUATION
                 (CADR
                  (ASSOC (LIST CUR_EQ_SET* N) (GET CUR_EQ_SET* 'KVALUE)))))
        (MSGPRI "INTEGRATE_EQUATION:" (LIST CUR_EQ_SET* N) "is non-existent"
                NIL T)))
      (SETQ DENOMINATOR (CDR (SETQ EQUATION (SIMP* EQUATION))))
      (SETQ EQUATION (CAR EQUATION))
      (COND
       ((NULL EQUATION)
        (PROGN
         (PROGN (PRIN2 CUR_EQ_SET*) (PRIN2 "(") (PRIN2 N) (PRIN2 ") = 0") NIL)
         (TERPRI* T)
         (SETK (LIST CUR_EQ_SET* N) 0)
         (GO SOLVED))))
      (SETQ DF_LIST (SPLIT_FORM EQUATION '(DF)))
      (COND
       ((TRY_A_HOMOGENEOUS_INTEGRATION N DENOMINATOR DF_LIST) (GO SOLVED)))
      (SETQ FUNCTION_LIST (GET CUR_EQ_SET* 'FUNCTION_LIST))
      (SETQ PRESENT_FUNCTIONS_LIST
              (GET_RECURSIVE_KERNELS EQUATION FUNCTION_LIST))
      (SETQ VARIABLE_LIST (GET CUR_EQ_SET* 'VARIABLE_LIST))
      (SETQ ABSENT_VARIABLES VARIABLE_LIST)
      (PROG (FUNCTION)
        (SETQ FUNCTION PRESENT_FUNCTIONS_LIST)
       LAB
        (COND ((NULL FUNCTION) (RETURN NIL)))
        ((LAMBDA (FUNCTION)
           (PROG (VARIABLE)
             (SETQ VARIABLE
                     ((LAMBDA (DEPL_ENTRY)
                        (COND (DEPL_ENTRY (CDR DEPL_ENTRY))))
                      (ASSOC FUNCTION DEPL*)))
            LAB
             (COND ((NULL VARIABLE) (RETURN NIL)))
             ((LAMBDA (VARIABLE)
                (SETQ ABSENT_VARIABLES (DELETE VARIABLE ABSENT_VARIABLES)))
              (CAR VARIABLE))
             (SETQ VARIABLE (CDR VARIABLE))
             (GO LAB)))
         (CAR FUNCTION))
        (SETQ FUNCTION (CDR FUNCTION))
        (GO LAB))
      (COND
       ((SPLIT_EQUATION_POLYNOMIALLY N TOTAL_USED EQUATION ABSENT_VARIABLES)
        (GO SOLVED)))
      (SETQ LINEAR_FUNCTIONS_LIST (SPLIT_FORM (CAR DF_LIST) FUNCTION_LIST))
      (SETQ DF_LIST (CDR DF_LIST))
      (SETQ CONSTANTS_LIST
              (SPLIT_FORM (CAR LINEAR_FUNCTIONS_LIST)
               (LIST (GET CUR_EQ_SET* 'CONSTANT_OPERATOR))))
      (SETQ LINEAR_FUNCTIONS_LIST (CDR LINEAR_FUNCTIONS_LIST))
      (COND
       ((SETQ BRACKETNAME (GET CUR_EQ_SET* 'BRACKETNAME))
        (COND
         ((AND (EQUAL (LENGTH DF_LIST) 0)
               (EQUAL (LENGTH LINEAR_FUNCTIONS_LIST) 0))
          (PROGN
           (COND
            ((ATOM
              (SETQ SOLVABLE_KERNEL
                      (RELATION_ANALYSIS (*FF2A EQUATION DENOMINATOR)
                       BRACKETNAME)))
             (PROGN
              (PROGN
               (PRIN2 CUR_EQ_SET*)
               (PRIN2 "(")
               (PRIN2 N)
               (PRIN2 ") is a non-solvable Lie relation")
               NIL)
              (TERPRI* T)))
            (T
             (PROGN
              (PROGN
               (PRIN2 CUR_EQ_SET*)
               (PRIN2 "(")
               (PRIN2 N)
               (PRIN2 ") solved for ")
               NIL)
              (MAPRIN SOLVABLE_KERNEL)
              (TERPRI* T)
              (SETK (LIST CUR_EQ_SET* N) 0))))
           (GO SOLVED))))))
      (SETQ DF_TERMS
              (PROG (DF_TERM FORALL-RESULT FORALL-ENDPTR)
                (SETQ DF_TERM DF_LIST)
               STARTOVER
                (COND ((NULL DF_TERM) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        ((LAMBDA (DF_TERM)
                           (COND
                            ((MEMBER (CAR (CADR (CAR DF_TERM))) FUNCTION_LIST)
                             (LIST (CAR DF_TERM)))))
                         (CAR DF_TERM)))
                (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
                (SETQ DF_TERM (CDR DF_TERM))
                (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
               LOOPLABEL
                (COND ((NULL DF_TERM) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        ((LAMBDA (DF_TERM)
                           (COND
                            ((MEMBER (CAR (CADR (CAR DF_TERM))) FUNCTION_LIST)
                             (LIST (CAR DF_TERM)))))
                         (CAR DF_TERM)))
                (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
                (SETQ DF_TERM (CDR DF_TERM))
                (GO LOOPLABEL)))
      (PROG (DF_TERM)
        (SETQ DF_TERM DF_TERMS)
       LAB
        (COND ((NULL DF_TERM) (RETURN NIL)))
        ((LAMBDA (DF_TERM)
           (COND
            ((NOT (MEMBER (CADR DF_TERM) DF_FUNCTIONS))
             (SETQ DF_FUNCTIONS (CONS (CADR DF_TERM) DF_FUNCTIONS)))))
         (CAR DF_TERM))
        (SETQ DF_TERM (CDR DF_TERM))
        (GO LAB))
      (SETQ FUNCTIONS_AND_CONSTANTS_LIST
              (APPEND LINEAR_FUNCTIONS_LIST (CDR CONSTANTS_LIST)))
      (SETQ LINEAR_FUNCTIONS
              (PROG (LINEAR_FUNCTION FORALL-RESULT FORALL-ENDPTR)
                (SETQ LINEAR_FUNCTION FUNCTIONS_AND_CONSTANTS_LIST)
                (COND ((NULL LINEAR_FUNCTION) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS
                                 ((LAMBDA (LINEAR_FUNCTION)
                                    (CAR LINEAR_FUNCTION))
                                  (CAR LINEAR_FUNCTION))
                                 NIL)))
               LOOPLABEL
                (SETQ LINEAR_FUNCTION (CDR LINEAR_FUNCTION))
                (COND ((NULL LINEAR_FUNCTION) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        (CONS
                         ((LAMBDA (LINEAR_FUNCTION) (CAR LINEAR_FUNCTION))
                          (CAR LINEAR_FUNCTION))
                         NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (COND
       (BRACKETNAME
        (SETQ COMMUTATOR_FUNCTIONS
                (GET_RECURSIVE_KERNELS (CAR CONSTANTS_LIST)
                 (GET CUR_EQ_SET* 'FUNCTION_LIST)))))
      (SETQ PRESENT_VARIABLES VARIABLE_LIST)
      (PROG (VARIABLE)
        (SETQ VARIABLE ABSENT_VARIABLES)
       LAB
        (COND ((NULL VARIABLE) (RETURN NIL)))
        ((LAMBDA (VARIABLE)
           (SETQ PRESENT_VARIABLES (DELETE VARIABLE PRESENT_VARIABLES)))
         (CAR VARIABLE))
        (SETQ VARIABLE (CDR VARIABLE))
        (GO LAB))
      (SETQ NR_OF_VARIABLES (LENGTH PRESENT_VARIABLES))
      (PROG (KERNEL)
        (SETQ KERNEL LINEAR_FUNCTIONS)
       LAB
        (COND ((NULL KERNEL) (RETURN NIL)))
        ((LAMBDA (KERNEL)
           (COND
            ((EQUAL
              (LENGTH
               ((LAMBDA (DEPL_ENTRY) (COND (DEPL_ENTRY (CDR DEPL_ENTRY))))
                (ASSOC KERNEL DEPL*)))
              NR_OF_VARIABLES)
             (SETQ SOLVABLE_KERNELS (CONS KERNEL SOLVABLE_KERNELS)))))
         (CAR KERNEL))
        (SETQ KERNEL (CDR KERNEL))
        (GO LAB))
      (PROG (KERNEL)
        (SETQ KERNEL (APPEND DF_FUNCTIONS COMMUTATOR_FUNCTIONS))
       LAB
        (COND ((NULL KERNEL) (RETURN NIL)))
        ((LAMBDA (KERNEL)
           (SETQ SOLVABLE_KERNELS (DELETE KERNEL SOLVABLE_KERNELS)))
         (CAR KERNEL))
        (SETQ KERNEL (CDR KERNEL))
        (GO LAB))
      (COND
       (SOLVABLE_KERNELS
        (PROGN
         (SETQ SOLVABLE_KERNEL
                 (FIND_SOLVABLE_KERNEL SOLVABLE_KERNELS
                  FUNCTIONS_AND_CONSTANTS_LIST DENOMINATOR))
         (COND
          (SOLVABLE_KERNEL
           (PROGN
            (LINEAR_SOLVE_AND_ASSIGN (*FF2A EQUATION 1) SOLVABLE_KERNEL)
            (SETQ DEPL* (DELETE (ASSOC SOLVABLE_KERNEL DEPL*) DEPL*))
            (SUCCESSFUL_MESSAGE_FOR N "Solved for " SOLVABLE_KERNEL)
            (GO SOLVED)))
          (T
           (PROGN
            (NOT_A_NUMBER_MESSAGE_FOR N "Solving a function"
             (PARTIAL_LIST SOLVABLE_KERNELS 3))
            (GO SOLVED)))))))
      (SETQ INTEGRATION_VARIABLES PRESENT_VARIABLES)
      (PROG (KERNEL)
        (SETQ KERNEL (APPEND LINEAR_FUNCTIONS COMMUTATOR_FUNCTIONS))
       LAB
        (COND ((NULL KERNEL) (RETURN NIL)))
        ((LAMBDA (KERNEL)
           (PROG (VARIABLE)
             (SETQ VARIABLE
                     ((LAMBDA (DEPL_ENTRY)
                        (COND (DEPL_ENTRY (CDR DEPL_ENTRY))))
                      (ASSOC KERNEL DEPL*)))
            LAB
             (COND ((NULL VARIABLE) (RETURN NIL)))
             ((LAMBDA (VARIABLE)
                (SETQ INTEGRATION_VARIABLES
                        (DELETE VARIABLE INTEGRATION_VARIABLES)))
              (CAR VARIABLE))
             (SETQ VARIABLE (CDR VARIABLE))
             (GO LAB)))
         (CAR KERNEL))
        (SETQ KERNEL (CDR KERNEL))
        (GO LAB))
      (PROG (DF_FUNCTION)
        (SETQ DF_FUNCTION DF_FUNCTIONS)
       LAB
        (COND ((NULL DF_FUNCTION) (RETURN NIL)))
        ((LAMBDA (DF_FUNCTION)
           (COND
            ((NOT
              (EQUAL
               (LENGTH
                ((LAMBDA (DEPL_ENTRY) (COND (DEPL_ENTRY (CDR DEPL_ENTRY))))
                 (ASSOC DF_FUNCTION DEPL*)))
               NR_OF_VARIABLES))
             (PROG (VARIABLE)
               (SETQ VARIABLE
                       ((LAMBDA (DEPL_ENTRY)
                          (COND (DEPL_ENTRY (CDR DEPL_ENTRY))))
                        (ASSOC DF_FUNCTION DEPL*)))
              LAB
               (COND ((NULL VARIABLE) (RETURN NIL)))
               ((LAMBDA (VARIABLE)
                  (SETQ INTEGRATION_VARIABLES
                          (DELETE VARIABLE INTEGRATION_VARIABLES)))
                (CAR VARIABLE))
               (SETQ VARIABLE (CDR VARIABLE))
               (GO LAB)))))
         (CAR DF_FUNCTION))
        (SETQ DF_FUNCTION (CDR DF_FUNCTION))
        (GO LAB))
      (COND
       ((TRY_AN_INHOMOGENEOUS_INTEGRATION N EQUATION DENOMINATOR DF_LIST
         DF_TERMS INTEGRATION_VARIABLES NR_OF_VARIABLES)
        (GO SOLVED)))
      (COND
       ((TRY_A_DIFFERENTIATION N TOTAL_USED EQUATION PRESENT_VARIABLES DF_TERMS
         LINEAR_FUNCTIONS COMMUTATOR_FUNCTIONS)
        (GO SOLVED)))
      (PROGN
       (PRIN2 CUR_EQ_SET*)
       (PRIN2 "(")
       (PRIN2 N)
       (PRIN2 ") not solved")
       NIL)
      (TERPRI* T)
     SOLVED)) 
(PUT 'SUCCESSFUL_MESSAGE_FOR 'NUMBER-OF-ARGS 3) 
(PUT 'SUCCESSFUL_MESSAGE_FOR 'DEFINED-ON-LINE '290) 
(PUT 'SUCCESSFUL_MESSAGE_FOR 'DEFINED-IN-FILE 'CDIFF/INTEGRATOR.RED) 
(PUT 'SUCCESSFUL_MESSAGE_FOR 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE SUCCESSFUL_MESSAGE_FOR (N ACTION KERNEL)
    (PROGN
     (PROGN
      (PRIN2 CUR_EQ_SET*)
      (PRIN2 "(")
      (PRIN2 N)
      (PRIN2 "): ")
      (PRIN2 ACTION)
      NIL)
     (MAPRIN KERNEL)
     (TERPRI* (NOT *NAT))
     (SETK (LIST CUR_EQ_SET* N) 0)
     T)) 
(PUT 'NOT_A_NUMBER_MESSAGE_FOR 'NUMBER-OF-ARGS 3) 
(PUT 'NOT_A_NUMBER_MESSAGE_FOR 'DEFINED-ON-LINE '297) 
(PUT 'NOT_A_NUMBER_MESSAGE_FOR 'DEFINED-IN-FILE 'CDIFF/INTEGRATOR.RED) 
(PUT 'NOT_A_NUMBER_MESSAGE_FOR 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE NOT_A_NUMBER_MESSAGE_FOR (N ACTION KERNEL)
    (PROGN
     (PROGN
      (PRIN2 "*** ")
      (PRIN2 CUR_EQ_SET*)
      (PRIN2 "(")
      (PRIN2 N)
      (PRIN2 "): ")
      (PRIN2 ACTION)
      (PRIN2 " failed:")
      NIL)
     (TERPRI* T)
     (PROGN (PRIN2 "    coefficient not a number for ") NIL)
     (MAPRIN KERNEL)
     (TERPRI* (NOT *NAT))
     (PROGN (PRIN2 "    Solvable with 'off coefficient_check'") NIL)
     (TERPRI* T)
     T)) 
(PUT 'TRY_A_HOMOGENEOUS_INTEGRATION 'NUMBER-OF-ARGS 3) 
(PUT 'TRY_A_HOMOGENEOUS_INTEGRATION 'DEFINED-ON-LINE '306) 
(PUT 'TRY_A_HOMOGENEOUS_INTEGRATION 'DEFINED-IN-FILE 'CDIFF/INTEGRATOR.RED) 
(PUT 'TRY_A_HOMOGENEOUS_INTEGRATION 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE TRY_A_HOMOGENEOUS_INTEGRATION (N DENOMINATOR DF_LIST)
    (PROG (SOLVABLE_KERNEL SOLVABLE_KERNELS DF_KERNEL)
      (RETURN
       (COND
        ((AND (NULL (CAR DF_LIST)) (CDR DF_LIST)
              (EQUAL (LENGTH (CDR DF_LIST)) 1))
         (COND
          ((SETQ SOLVABLE_KERNEL
                   (FIND_SOLVABLE_KERNEL
                    (SETQ SOLVABLE_KERNELS (LIST (CAR (CAR (CDR DF_LIST)))))
                    (CDR DF_LIST) DENOMINATOR))
           (PROGN
            (SETQ DF_KERNEL (CADR SOLVABLE_KERNEL))
            (SETK DF_KERNEL (HOMOGENEOUS_INTEGRATION_OF SOLVABLE_KERNEL))
            (SETQ DEPL* (DELETE (ASSOC DF_KERNEL DEPL*) DEPL*))
            (SUCCESSFUL_MESSAGE_FOR N "Homogeneous integration of "
             SOLVABLE_KERNEL)))
          (T
           (NOT_A_NUMBER_MESSAGE_FOR N "Homogeneous integration"
            (CAR SOLVABLE_KERNELS))))))))) 
(PUT 'FIND_SOLVABLE_KERNEL 'NUMBER-OF-ARGS 3) 
(PUT 'FIND_SOLVABLE_KERNEL 'DEFINED-ON-LINE '326) 
(PUT 'FIND_SOLVABLE_KERNEL 'DEFINED-IN-FILE 'CDIFF/INTEGRATOR.RED) 
(PUT 'FIND_SOLVABLE_KERNEL 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE FIND_SOLVABLE_KERNEL (KERNEL_LIST KC_LIST DENOMINATOR)
    (COND
     (*COEFFICIENT_CHECK
      (FIRST_SOLVABLE_KERNEL KERNEL_LIST KC_LIST DENOMINATOR))
     (T (CAR KERNEL_LIST)))) 
(PUT 'FIRST_SOLVABLE_KERNEL 'NUMBER-OF-ARGS 3) 
(PUT 'FIRST_SOLVABLE_KERNEL 'DEFINED-ON-LINE '332) 
(PUT 'FIRST_SOLVABLE_KERNEL 'DEFINED-IN-FILE 'CDIFF/INTEGRATOR.RED) 
(PUT 'FIRST_SOLVABLE_KERNEL 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE FIRST_SOLVABLE_KERNEL (KERNEL_LIST KC_LIST DENOMINATOR)
    (COND
     (KERNEL_LIST
      ((LAMBDA (KC_PAIR)
         (COND
          ((OR (OR (ATOM (CDR KC_PAIR)) (ATOM (CAR (CDR KC_PAIR))))
               (NUMBERP (*FF2A (CDR KC_PAIR) DENOMINATOR)))
           (CAR KC_PAIR))
          (T (FIRST_SOLVABLE_KERNEL (CDR KERNEL_LIST) KC_LIST DENOMINATOR))))
       (ASSOC (CAR KERNEL_LIST) KC_LIST))))) 
(PUT 'HOMOGENEOUS_INTEGRATION_OF 'NUMBER-OF-ARGS 1) 
(PUT 'HOMOGENEOUS_INTEGRATION_OF 'DEFINED-ON-LINE '341) 
(PUT 'HOMOGENEOUS_INTEGRATION_OF 'DEFINED-IN-FILE 'CDIFF/INTEGRATOR.RED) 
(PUT 'HOMOGENEOUS_INTEGRATION_OF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE HOMOGENEOUS_INTEGRATION_OF (DF_TERM)
    (PROG (DF_FUNCTION FUNCTION_NUMBER DEPENDENCY_LIST INTEGRATION_LIST
           COEFFICIENT_NAME BRACKETNAME EVEN_USED ODD_USED INTEGRATION_VARIABLE
           NUMBER_OF_INTEGRATIONS SOLUTION NEW_DEPENDENCY_LIST)
      (SETQ DF_FUNCTION (CADR DF_TERM))
      (COND
       ((OR (NOT (MEMBER (CAR DF_FUNCTION) (GET CUR_EQ_SET* 'FUNCTION_LIST)))
            (NOT (FIXP (SETQ FUNCTION_NUMBER (CADR DF_FUNCTION))))
            (EQUAL FUNCTION_NUMBER 0))
        (MSGPRI "PERFORM_HOMOGENEOUS_INTEGRATION: integration of" DF_FUNCTION
                "not allowed" NIL T)))
      (SETQ DEPENDENCY_LIST
              ((LAMBDA (DEPL_ENTRY) (COND (DEPL_ENTRY (CDR DEPL_ENTRY))))
               (ASSOC DF_FUNCTION DEPL*)))
      (COND
       ((EQUAL (LENGTH DEPENDENCY_LIST) 1)
        (SETQ COEFFICIENT_NAME (GET CUR_EQ_SET* 'CONSTANT_OPERATOR)))
       (T (SETQ COEFFICIENT_NAME (CAR DF_FUNCTION))))
      (COND
       ((SETQ BRACKETNAME (GET COEFFICIENT_NAME 'BRACKETNAME))
        (PROG ()
          (SETQ EVEN_USED (GET BRACKETNAME 'EVEN_USED))
          (SETQ ODD_USED (GET BRACKETNAME 'ODD_USED))))
       (T
        (PROG ()
          (SETQ EVEN_USED (GET COEFFICIENT_NAME 'EVEN_USED))
          (SETQ ODD_USED (GET COEFFICIENT_NAME 'ODD_USED)))))
      (SETQ INTEGRATION_LIST (CDR (CDR DF_TERM)))
      (COND
       (INTEGRATION_LIST (SETQ INTEGRATION_VARIABLE (CAR INTEGRATION_LIST)))
       (T (SETQ INTEGRATION_VARIABLE NIL)))
      (COND
       ((AND INTEGRATION_VARIABLE
             (SETQ INTEGRATION_LIST (CDR INTEGRATION_LIST))
             (FIXP (CAR INTEGRATION_LIST)))
        (PROGN
         (SETQ NUMBER_OF_INTEGRATIONS (CAR INTEGRATION_LIST))
         (SETQ INTEGRATION_LIST (CDR INTEGRATION_LIST))))
       (T (SETQ NUMBER_OF_INTEGRATIONS 1)))
      (COND
       (BRACKETNAME
        (COND
         ((GREATERP FUNCTION_NUMBER 0)
          (COND
           ((GREATERP (PLUS EVEN_USED NUMBER_OF_INTEGRATIONS)
                      (GET BRACKETNAME 'EVEN_DIMENSION))
            (CHANGE_DIMENSIONS_OF BRACKETNAME
             (PLUS EVEN_USED NUMBER_OF_INTEGRATIONS)
             (GET BRACKETNAME 'ODD_DIMENSION)))))
         (T
          (COND
           ((GREATERP (PLUS ODD_USED NUMBER_OF_INTEGRATIONS)
                      (GET BRACKETNAME 'ODD_DIMENSION))
            (CHANGE_DIMENSIONS_OF BRACKETNAME (GET BRACKETNAME 'EVEN_DIMENSION)
             (PLUS ODD_USED NUMBER_OF_INTEGRATIONS))))))))
      (SETQ SOLUTION (CONS NIL 1))
      (PROG ()
       WHILELABEL
        (COND ((NOT INTEGRATION_VARIABLE) (RETURN NIL)))
        (PROG ()
          (SETQ NEW_DEPENDENCY_LIST
                  (DELETE INTEGRATION_VARIABLE DEPENDENCY_LIST))
          (PROG (I)
            (SETQ I 0)
           LAB
            (COND
             ((MINUSP (DIFFERENCE (DIFFERENCE NUMBER_OF_INTEGRATIONS 1) I))
              (RETURN NIL)))
            (PROGN
             (SETQ SOLUTION
                     (ADDSQ SOLUTION
                            (MULTSQ
                             (COND ((EQUAL I 0) (CONS 1 1))
                                   (T (MKSQ INTEGRATION_VARIABLE I)))
                             (MKSQ
                              (LIST COEFFICIENT_NAME
                                    (COND
                                     ((GREATERP FUNCTION_NUMBER 0)
                                      (SETQ EVEN_USED (PLUS EVEN_USED 1)))
                                     (T
                                      (MINUS
                                       (SETQ ODD_USED (PLUS ODD_USED 1))))))
                              1))))
             (COND
              (NEW_DEPENDENCY_LIST
               (SETQ DEPL*
                       (CONS
                        (CONS
                         (LIST COEFFICIENT_NAME
                               (COND ((GREATERP FUNCTION_NUMBER 0) EVEN_USED)
                                     (T (MINUS ODD_USED))))
                         NEW_DEPENDENCY_LIST)
                        DEPL*))))
             NIL)
            (SETQ I (PLUS2 I 1))
            (GO LAB))
          (COND
           (INTEGRATION_LIST
            (SETQ INTEGRATION_VARIABLE (CAR INTEGRATION_LIST)))
           (T (SETQ INTEGRATION_VARIABLE NIL)))
          (COND
           ((AND INTEGRATION_VARIABLE
                 (SETQ INTEGRATION_LIST (CDR INTEGRATION_LIST))
                 (FIXP (CAR INTEGRATION_LIST)))
            (PROGN
             (SETQ NUMBER_OF_INTEGRATIONS (CAR INTEGRATION_LIST))
             (SETQ INTEGRATION_LIST (CDR INTEGRATION_LIST))))
           (T (SETQ NUMBER_OF_INTEGRATIONS 1))))
        (GO WHILELABEL))
      (SETQ SOLUTION (MK*SQ (SUBS2 SOLUTION)))
      (COND
       ((GET COEFFICIENT_NAME 'BRACKETNAME)
        (DEFINE_USED BRACKETNAME (LIST 'LIST EVEN_USED ODD_USED)))
       (T
        (PROG ()
          (PUT COEFFICIENT_NAME 'EVEN_USED EVEN_USED)
          (PUT COEFFICIENT_NAME 'ODD_USED ODD_USED))))
      (RETURN SOLUTION))) 
(PUT 'SPLIT_EQUATION_POLYNOMIALLY 'NUMBER-OF-ARGS 4) 
(PUT 'SPLIT_EQUATION_POLYNOMIALLY 'DEFINED-ON-LINE '427) 
(PUT 'SPLIT_EQUATION_POLYNOMIALLY 'DEFINED-IN-FILE 'CDIFF/INTEGRATOR.RED) 
(PUT 'SPLIT_EQUATION_POLYNOMIALLY 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE SPLIT_EQUATION_POLYNOMIALLY (N TOTAL_USED EQUATION ABSENT_VARIABLES)
    (PROG (POLYNOMIAL_VARIABLES EQUATIONS_LIST)
      (SETQ POLYNOMIAL_VARIABLES ABSENT_VARIABLES)
      (COND
       (*POLYNOMIAL_CHECK
        (SETQ POLYNOMIAL_VARIABLES
                (PROG (VARIABLE FORALL-RESULT FORALL-ENDPTR)
                  (SETQ VARIABLE POLYNOMIAL_VARIABLES)
                 STARTOVER
                  (COND ((NULL VARIABLE) (RETURN NIL)))
                  (SETQ FORALL-RESULT
                          ((LAMBDA (VARIABLE)
                             (COND
                              ((POLYNOMIALP EQUATION VARIABLE)
                               (LIST VARIABLE))))
                           (CAR VARIABLE)))
                  (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
                  (SETQ VARIABLE (CDR VARIABLE))
                  (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
                 LOOPLABEL
                  (COND ((NULL VARIABLE) (RETURN FORALL-RESULT)))
                  (RPLACD FORALL-ENDPTR
                          ((LAMBDA (VARIABLE)
                             (COND
                              ((POLYNOMIALP EQUATION VARIABLE)
                               (LIST VARIABLE))))
                           (CAR VARIABLE)))
                  (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
                  (SETQ VARIABLE (CDR VARIABLE))
                  (GO LOOPLABEL)))))
      (SETQ EQUATIONS_LIST
              (SPLIT_NON_LINEAR_FORM EQUATION POLYNOMIAL_VARIABLES))
      (COND
       ((GREATERP (LENGTH EQUATIONS_LIST) 1)
        (PROGN
         (PROG (PC_PAIR)
           (SETQ PC_PAIR (CDR EQUATIONS_LIST))
          LAB
           (COND ((NULL PC_PAIR) (RETURN NIL)))
           ((LAMBDA (PC_PAIR)
              (SETK (LIST CUR_EQ_SET* (SETQ TOTAL_USED (PLUS TOTAL_USED 1)))
                    (MK*SQ (CONS (CDR PC_PAIR) 1))))
            (CAR PC_PAIR))
           (SETQ PC_PAIR (CDR PC_PAIR))
           (GO LAB))
         (COND
          ((CAR EQUATIONS_LIST)
           (SETK (LIST CUR_EQ_SET* (SETQ TOTAL_USED (PLUS TOTAL_USED 1)))
                 (MK*SQ (CONS (CAR EQUATIONS_LIST) 1)))))
         (PROGN
          (PRIN2 CUR_EQ_SET*)
          (PRIN2 "(")
          (PRIN2 N)
          (PRIN2 ") breaks into ")
          (PRIN2 CUR_EQ_SET*)
          (PRIN2 "(")
          (PRIN2 (PLUS (GET CUR_EQ_SET* 'TOTAL_USED) 1))
          (PRIN2 "),...,")
          (PRIN2 CUR_EQ_SET*)
          (PRIN2 "(")
          (PRIN2 TOTAL_USED)
          (PRIN2 ") by ")
          NIL)
         (MAPRIN (PARTIAL_LIST POLYNOMIAL_VARIABLES 5))
         (TERPRI* (NOT *NAT))
         (SETK (LIST CUR_EQ_SET* N) 0)
         (PUT CUR_EQ_SET* 'TOTAL_USED TOTAL_USED))))
      (COND ((GREATERP (LENGTH EQUATIONS_LIST) 1) (RETURN T))))) 
(PUT 'POLYNOMIALP 'NUMBER-OF-ARGS 2) 
(PUT 'POLYNOMIALP 'DEFINED-ON-LINE '459) 
(PUT 'POLYNOMIALP 'DEFINED-IN-FILE 'CDIFF/INTEGRATOR.RED) 
(PUT 'POLYNOMIALP 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE POLYNOMIALP (EXPRESSION KERNEL)
    (COND ((OR (ATOM EXPRESSION) (ATOM (CAR EXPRESSION))) T)
          (T
           ((LAMBDA (MAIN_VARIABLE)
              (AND
               (OR (EQUAL MAIN_VARIABLE KERNEL)
                   (NOT (DEPENDS MAIN_VARIABLE KERNEL)))
               (POLYNOMIALP (CDAR EXPRESSION) KERNEL)
               (POLYNOMIALP (CDR EXPRESSION) KERNEL)))
            (CAAAR EXPRESSION))))) 
(PUT 'PARTIAL_LIST 'NUMBER-OF-ARGS 2) 
(PUT 'PARTIAL_LIST 'DEFINED-ON-LINE '466) 
(PUT 'PARTIAL_LIST 'DEFINED-IN-FILE 'CDIFF/INTEGRATOR.RED) 
(PUT 'PARTIAL_LIST 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE PARTIAL_LIST (PRINTED_LIST NR_OF_ITEMS)
    (CONS 'LIST (BROKEN_LIST PRINTED_LIST NR_OF_ITEMS))) 
(PUT 'BROKEN_LIST 'NUMBER-OF-ARGS 2) 
(PUT 'BROKEN_LIST 'DEFINED-ON-LINE '469) 
(PUT 'BROKEN_LIST 'DEFINED-IN-FILE 'CDIFF/INTEGRATOR.RED) 
(PUT 'BROKEN_LIST 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE BROKEN_LIST (LIST N)
    (COND
     (LIST
      (COND ((EQUAL N 0) '(|...|))
            (T (CONS (CAR LIST) (BROKEN_LIST (CDR LIST) (DIFFERENCE N 1)))))))) 
(PUT 'CHECK_DIFFERENTIATION_SEQUENCE 'NUMBER-OF-ARGS 2) 
(PUT 'CHECK_DIFFERENTIATION_SEQUENCE 'DEFINED-ON-LINE '474) 
(PUT 'CHECK_DIFFERENTIATION_SEQUENCE 'DEFINED-IN-FILE 'CDIFF/INTEGRATOR.RED) 
(PUT 'CHECK_DIFFERENTIATION_SEQUENCE 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE CHECK_DIFFERENTIATION_SEQUENCE (SEQUENCE VARIABLE_LIST)
    (COND ((NULL SEQUENCE) T)
          ((OR (FIXP (CAR SEQUENCE)) (MEMBER (CAR SEQUENCE) VARIABLE_LIST))
           (CHECK_DIFFERENTIATION_SEQUENCE (CDR SEQUENCE) VARIABLE_LIST)))) 
(PUT 'TRY_AN_INHOMOGENEOUS_INTEGRATION 'NUMBER-OF-ARGS 7) 
(PUT 'TRY_AN_INHOMOGENEOUS_INTEGRATION 'DEFINED-ON-LINE '481) 
(PUT 'TRY_AN_INHOMOGENEOUS_INTEGRATION 'DEFINED-IN-FILE 'CDIFF/INTEGRATOR.RED) 
(PUT 'TRY_AN_INHOMOGENEOUS_INTEGRATION 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL GENERAL GENERAL GENERAL)
       GENERAL)) 
(DE TRY_AN_INHOMOGENEOUS_INTEGRATION
    (N EQUATION DENOMINATOR DF_LIST DF_TERMS INTEGRATION_VARIABLES
     NR_OF_VARIABLES)
    (PROG (SOLVABLE_KERNEL SOLVABLE_KERNELS FORBIDDEN_FUNCTIONS DF_KERNEL
           INHOMOGENEOUS_TERM)
      (PROG (DF_TERM)
        (SETQ DF_TERM DF_TERMS)
       LAB
        (COND ((NULL DF_TERM) (RETURN NIL)))
        ((LAMBDA (DF_TERM)
           (PROGN
            (COND
             ((AND
               (EQUAL
                (LENGTH
                 ((LAMBDA (DEPL_ENTRY) (COND (DEPL_ENTRY (CDR DEPL_ENTRY))))
                  (ASSOC (CADR DF_TERM) DEPL*)))
                NR_OF_VARIABLES)
               (OR
                (CHECK_DIFFERENTIATION_SEQUENCE (CDR (CDR DF_TERM))
                 INTEGRATION_VARIABLES)
                (MEMBER (CADR DF_TERM) FORBIDDEN_FUNCTIONS)))
              (SETQ SOLVABLE_KERNELS
                      (COND
                       ((MEMBER (CADR DF_TERM) FORBIDDEN_FUNCTIONS)
                        (LIST NIL NIL))
                       (T (CONS DF_TERM SOLVABLE_KERNELS))))))
            (SETQ FORBIDDEN_FUNCTIONS
                    (CONS (CADR DF_TERM) FORBIDDEN_FUNCTIONS))))
         (CAR DF_TERM))
        (SETQ DF_TERM (CDR DF_TERM))
        (GO LAB))
      (RETURN
       (COND
        (SOLVABLE_KERNELS
         (COND
          ((EQUAL (LENGTH SOLVABLE_KERNELS) 1)
           (COND
            ((SETQ SOLVABLE_KERNEL
                     (FIND_SOLVABLE_KERNEL SOLVABLE_KERNELS DF_LIST
                      DENOMINATOR))
             (COND
              ((AND
                (SETQ INHOMOGENEOUS_TERM
                        (LINEAR_SOLVE (MK*SQ (CONS EQUATION 1))
                         SOLVABLE_KERNEL))
                (OR (NOT *POLYNOMIAL_CHECK)
                    (CHECK_POLYNOMIAL_INTEGRATION SOLVABLE_KERNEL
                     INHOMOGENEOUS_TERM)))
               (PROGN
                (SETQ DF_KERNEL (CADR SOLVABLE_KERNEL))
                (SETK DF_KERNEL
                      (INHOMOGENEOUS_INTEGRATION_OF SOLVABLE_KERNEL
                       INHOMOGENEOUS_TERM))
                (SETQ DEPL* (DELETE (ASSOC DF_KERNEL DEPL*) DEPL*))
                (SUCCESSFUL_MESSAGE_FOR N "Inhomogeneous integration of "
                 SOLVABLE_KERNEL)))
              (T
               (PROGN
                (PROGN
                 (PRIN2 CUR_EQ_SET*)
                 (PRIN2 "(")
                 (PRIN2 N)
                 (PRIN2 "): Inhomogeneous integration failed: ")
                 NIL)
                (TERPRI* T)
                (PROGN
                 (PRIN2
                  "inhomogeneous term not polynomial in integration variables")
                 NIL)
                (TERPRI* T)
                T))))
            (T
             (NOT_A_NUMBER_MESSAGE_FOR N "Inhomogeneous integration"
              (CAR SOLVABLE_KERNELS)))))
          (T
           (PROGN
            (PROGN
             (PRIN2 CUR_EQ_SET*)
             (PRIN2 "(")
             (PRIN2 N)
             (PRIN2 "): Inhomogeneous integration failed: ")
             NIL)
            (TERPRI* T)
            (PROGN (PRIN2 "more terms with maximal dependency") NIL)
            (TERPRI* T)
            T)))))))) 
(PUT 'CHECK_POLYNOMIAL_INTEGRATION 'NUMBER-OF-ARGS 2) 
(PUT 'CHECK_POLYNOMIAL_INTEGRATION 'DEFINED-ON-LINE '527) 
(PUT 'CHECK_POLYNOMIAL_INTEGRATION 'DEFINED-IN-FILE 'CDIFF/INTEGRATOR.RED) 
(PUT 'CHECK_POLYNOMIAL_INTEGRATION 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE CHECK_POLYNOMIAL_INTEGRATION (DF_TERM INTEGRATION_TERM)
    (PROG (NUMERATOR DENOMINATOR INTEGRATION_VARIABLES VARIABLE OK)
      (SETQ NUMERATOR (CAR (SIMP INTEGRATION_TERM)))
      (SETQ DENOMINATOR (CDR (SIMP INTEGRATION_TERM)))
      (SETQ INTEGRATION_VARIABLES
              (PROG (ARGUMENT FORALL-RESULT FORALL-ENDPTR)
                (SETQ ARGUMENT (CDR (CDR DF_TERM)))
               STARTOVER
                (COND ((NULL ARGUMENT) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        ((LAMBDA (ARGUMENT)
                           (COND ((NOT (FIXP ARGUMENT)) (LIST ARGUMENT))))
                         (CAR ARGUMENT)))
                (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
                (SETQ ARGUMENT (CDR ARGUMENT))
                (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
               LOOPLABEL
                (COND ((NULL ARGUMENT) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        ((LAMBDA (ARGUMENT)
                           (COND ((NOT (FIXP ARGUMENT)) (LIST ARGUMENT))))
                         (CAR ARGUMENT)))
                (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
                (SETQ ARGUMENT (CDR ARGUMENT))
                (GO LOOPLABEL)))
      (SETQ OK T)
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND OK INTEGRATION_VARIABLES)) (RETURN NIL)))
        (PROGN
         (SETQ VARIABLE (CAR INTEGRATION_VARIABLES))
         (SETQ OK
                 (AND (NOT (DEPENDS DENOMINATOR VARIABLE))
                      (POLYNOMIALP NUMERATOR VARIABLE)))
         (SETQ INTEGRATION_VARIABLES (CDR INTEGRATION_VARIABLES)))
        (GO WHILELABEL))
      (RETURN OK))) 
(PUT 'INHOMOGENEOUS_INTEGRATION_OF 'NUMBER-OF-ARGS 2) 
(PUT 'INHOMOGENEOUS_INTEGRATION_OF 'DEFINED-ON-LINE '544) 
(PUT 'INHOMOGENEOUS_INTEGRATION_OF 'DEFINED-IN-FILE 'CDIFF/INTEGRATOR.RED) 
(PUT 'INHOMOGENEOUS_INTEGRATION_OF 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE INHOMOGENEOUS_INTEGRATION_OF (DF_TERM INHOMOGENEOUS_TERM)
    (PROG (DF_SEQUENCE INTEGRATION_VARIABLES INT_SEQUENCE VARIABLE
           NR_OF_INTEGRATIONS INTEGRATION_TERMS SOLUTION POWERS COEFFICIENT
           INT_FACTOR SOLUTION_TERM N K)
      (SETQ DF_SEQUENCE (CDR (CDR DF_TERM)))
      (PROG ()
       WHILELABEL
        (COND ((NOT DF_SEQUENCE) (RETURN NIL)))
        (PROGN
         (SETQ VARIABLE (CAR DF_SEQUENCE))
         (SETQ DF_SEQUENCE (CDR DF_SEQUENCE))
         (COND
          ((AND DF_SEQUENCE (FIXP (CAR DF_SEQUENCE)))
           (PROGN
            (SETQ NR_OF_INTEGRATIONS (CAR DF_SEQUENCE))
            (SETQ DF_SEQUENCE (CDR DF_SEQUENCE))))
          (T (SETQ NR_OF_INTEGRATIONS 1)))
         (SETQ INTEGRATION_VARIABLES (CONS VARIABLE INTEGRATION_VARIABLES))
         (SETQ INT_SEQUENCE
                 (CONS (CONS VARIABLE NR_OF_INTEGRATIONS) INT_SEQUENCE)))
        (GO WHILELABEL))
      (SETQ INTEGRATION_TERMS
              (SPLIT_NON_LINEAR_FORM (CAR (SIMP INHOMOGENEOUS_TERM))
               INTEGRATION_VARIABLES))
      (SETQ INTEGRATION_TERMS
              (CONS (CONS NIL (CAR INTEGRATION_TERMS))
                    (CDR INTEGRATION_TERMS)))
      (SETQ SOLUTION (CONS NIL 1))
      (PROG (TERM)
        (SETQ TERM INTEGRATION_TERMS)
       LAB
        (COND ((NULL TERM) (RETURN NIL)))
        ((LAMBDA (TERM)
           (PROGN
            (SETQ POWERS (CAR TERM))
            (SETQ COEFFICIENT (CDR TERM))
            (SETQ INT_FACTOR 1)
            (SETQ SOLUTION_TERM (CONS 1 1))
            (PROG (INTEGRATION)
              (SETQ INTEGRATION INT_SEQUENCE)
             LAB
              (COND ((NULL INTEGRATION) (RETURN NIL)))
              ((LAMBDA (INTEGRATION)
                 (PROGN
                  (SETQ VARIABLE (CAR INTEGRATION))
                  (SETQ K (CDR INTEGRATION))
                  ((LAMBDA (POWER) (SETQ N (COND (POWER (CDR POWER)) (T 0))))
                   (ASSOC VARIABLE POWERS))
                  (PROG (I)
                    (SETQ I 1)
                   LAB
                    (COND ((MINUSP (DIFFERENCE K I)) (RETURN NIL)))
                    (SETQ INT_FACTOR (TIMES (PLUS N I) INT_FACTOR))
                    (SETQ I (PLUS2 I 1))
                    (GO LAB))
                  (SETQ SOLUTION_TERM
                          (MULTSQ SOLUTION_TERM (MKSQ VARIABLE (PLUS N K))))))
               (CAR INTEGRATION))
              (SETQ INTEGRATION (CDR INTEGRATION))
              (GO LAB))
            (SETQ SOLUTION_TERM
                    (MULTSQ SOLUTION_TERM (CONS COEFFICIENT INT_FACTOR)))
            (SETQ SOLUTION (ADDSQ SOLUTION SOLUTION_TERM))))
         (CAR TERM))
        (SETQ TERM (CDR TERM))
        (GO LAB))
      (SETQ SOLUTION
              (MULTSQ SOLUTION (CONS 1 (CDR (SIMP INHOMOGENEOUS_TERM)))))
      (SETQ SOLUTION
              (MK*SQ
               (SUBS2
                (ADDSQ SOLUTION (SIMP (HOMOGENEOUS_INTEGRATION_OF DF_TERM))))))
      (RETURN SOLUTION))) 
(PUT 'TRY_A_DIFFERENTIATION 'NUMBER-OF-ARGS 7) 
(PUT 'TRY_A_DIFFERENTIATION 'DEFINED-ON-LINE '586) 
(PUT 'TRY_A_DIFFERENTIATION 'DEFINED-IN-FILE 'CDIFF/INTEGRATOR.RED) 
(PUT 'TRY_A_DIFFERENTIATION 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL GENERAL GENERAL GENERAL)
       GENERAL)) 
(DE TRY_A_DIFFERENTIATION
    (N TOTAL_USED EQUATION PRESENT_VARIABLES DF_TERMS LINEAR_FUNCTIONS
     COMMUTATOR_FUNCTIONS)
    (PROG (DIFFERENTIATIONS_LIST POLYNOMIAL_ORDER)
      (SETQ PRESENT_VARIABLES
              (PROG (VARIABLE FORALL-RESULT FORALL-ENDPTR)
                (SETQ VARIABLE PRESENT_VARIABLES)
                (COND ((NULL VARIABLE) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS
                                 ((LAMBDA (VARIABLE)
                                    (CONS VARIABLE (CONS NIL 0)))
                                  (CAR VARIABLE))
                                 NIL)))
               LOOPLABEL
                (SETQ VARIABLE (CDR VARIABLE))
                (COND ((NULL VARIABLE) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        (CONS
                         ((LAMBDA (VARIABLE) (CONS VARIABLE (CONS NIL 0)))
                          (CAR VARIABLE))
                         NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (PROG (KERNEL)
        (SETQ KERNEL DF_TERMS)
       LAB
        (COND ((NULL KERNEL) (RETURN NIL)))
        ((LAMBDA (KERNEL)
           (PROG (VARIABLE)
             (SETQ VARIABLE
                     ((LAMBDA (DEPL_ENTRY)
                        (COND (DEPL_ENTRY (CDR DEPL_ENTRY))))
                      (ASSOC (CADR KERNEL) DEPL*)))
            LAB
             (COND ((NULL VARIABLE) (RETURN NIL)))
             ((LAMBDA (VARIABLE)
                ((LAMBDA (ENTRY)
                   (RPLACD ENTRY (CONS KERNEL (PLUS (CDDR ENTRY) 1))))
                 (ASSOC VARIABLE PRESENT_VARIABLES)))
              (CAR VARIABLE))
             (SETQ VARIABLE (CDR VARIABLE))
             (GO LAB)))
         (CAR KERNEL))
        (SETQ KERNEL (CDR KERNEL))
        (GO LAB))
      (PROG (KERNEL)
        (SETQ KERNEL LINEAR_FUNCTIONS)
       LAB
        (COND ((NULL KERNEL) (RETURN NIL)))
        ((LAMBDA (KERNEL)
           (PROG (VARIABLE)
             (SETQ VARIABLE
                     ((LAMBDA (DEPL_ENTRY)
                        (COND (DEPL_ENTRY (CDR DEPL_ENTRY))))
                      (ASSOC KERNEL DEPL*)))
            LAB
             (COND ((NULL VARIABLE) (RETURN NIL)))
             ((LAMBDA (VARIABLE)
                ((LAMBDA (ENTRY)
                   (RPLACD ENTRY (CONS KERNEL (PLUS (CDDR ENTRY) 1))))
                 (ASSOC VARIABLE PRESENT_VARIABLES)))
              (CAR VARIABLE))
             (SETQ VARIABLE (CDR VARIABLE))
             (GO LAB)))
         (CAR KERNEL))
        (SETQ KERNEL (CDR KERNEL))
        (GO LAB))
      (PROG (KERNEL)
        (SETQ KERNEL COMMUTATOR_FUNCTIONS)
       LAB
        (COND ((NULL KERNEL) (RETURN NIL)))
        ((LAMBDA (KERNEL)
           (PROG (VARIABLE)
             (SETQ VARIABLE
                     ((LAMBDA (DEPL_ENTRY)
                        (COND (DEPL_ENTRY (CDR DEPL_ENTRY))))
                      (ASSOC KERNEL DEPL*)))
            LAB
             (COND ((NULL VARIABLE) (RETURN NIL)))
             ((LAMBDA (VARIABLE)
                ((LAMBDA (ENTRY)
                   (RPLACD ENTRY (CONS NIL (PLUS (CDDR ENTRY) 1))))
                 (ASSOC VARIABLE PRESENT_VARIABLES)))
              (CAR VARIABLE))
             (SETQ VARIABLE (CDR VARIABLE))
             (GO LAB)))
         (CAR KERNEL))
        (SETQ KERNEL (CDR KERNEL))
        (GO LAB))
      (SETQ DIFFERENTIATIONS_LIST
              (PROG (ENTRY FORALL-RESULT FORALL-ENDPTR)
                (SETQ ENTRY PRESENT_VARIABLES)
               STARTOVER
                (COND ((NULL ENTRY) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        ((LAMBDA (ENTRY)
                           (COND
                            ((AND (CADR ENTRY) (EQUAL (CDDR ENTRY) 1)
                                  (SETQ POLYNOMIAL_ORDER
                                          (GET_POLYNOMIAL_ORDER
                                           (LINEAR_SOLVE
                                            (MK*SQ (CONS EQUATION 1))
                                            (CADR ENTRY))
                                           (CAR ENTRY))))
                             (LIST
                              (CONS (CAR ENTRY)
                                    (CONS (CADR ENTRY)
                                          (PLUS POLYNOMIAL_ORDER 1)))))))
                         (CAR ENTRY)))
                (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
                (SETQ ENTRY (CDR ENTRY))
                (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
               LOOPLABEL
                (COND ((NULL ENTRY) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        ((LAMBDA (ENTRY)
                           (COND
                            ((AND (CADR ENTRY) (EQUAL (CDDR ENTRY) 1)
                                  (SETQ POLYNOMIAL_ORDER
                                          (GET_POLYNOMIAL_ORDER
                                           (LINEAR_SOLVE
                                            (MK*SQ (CONS EQUATION 1))
                                            (CADR ENTRY))
                                           (CAR ENTRY))))
                             (LIST
                              (CONS (CAR ENTRY)
                                    (CONS (CADR ENTRY)
                                          (PLUS POLYNOMIAL_ORDER 1)))))))
                         (CAR ENTRY)))
                (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
                (SETQ ENTRY (CDR ENTRY))
                (GO LOOPLABEL)))
      (RETURN
       (COND
        (DIFFERENTIATIONS_LIST
         (COND
          (*ALLOW_DIFFERENTIATION
           (PROGN
            (PROG (ENTRY)
              (SETQ ENTRY DIFFERENTIATIONS_LIST)
             LAB
              (COND ((NULL ENTRY) (RETURN NIL)))
              ((LAMBDA (ENTRY)
                 (SETK (LIST CUR_EQ_SET* (SETQ TOTAL_USED (PLUS TOTAL_USED 1)))
                       (MK*SQ
                        (SIMPDF
                         (LIST (MK*SQ (CONS EQUATION 1)) (CAR ENTRY)
                               (CDDR ENTRY))))))
               (CAR ENTRY))
              (SETQ ENTRY (CDR ENTRY))
              (GO LAB))
            (PROGN
             (PRIN2 CUR_EQ_SET*)
             (PRIN2 "(")
             (PRIN2 N)
             (PRIN2 "): Generation of ")
             (PRIN2 CUR_EQ_SET*)
             (PRIN2 "(")
             (PRIN2 (PLUS (GET CUR_EQ_SET* 'TOTAL_USED) 1))
             (PRIN2 "),...,")
             (PRIN2 CUR_EQ_SET*)
             (PRIN2 "(")
             (PRIN2 TOTAL_USED)
             (PRIN2 ") by differentiation w.r.t. ")
             NIL)
            (TERPRI* T)
            (MAPRIN
             (PARTIAL_LIST
              (PROG (ENTRY FORALL-RESULT FORALL-ENDPTR)
                (SETQ ENTRY DIFFERENTIATIONS_LIST)
                (COND ((NULL ENTRY) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS
                                 ((LAMBDA (ENTRY)
                                    (LIST 'LIST (CAR ENTRY) (CDDR ENTRY)))
                                  (CAR ENTRY))
                                 NIL)))
               LOOPLABEL
                (SETQ ENTRY (CDR ENTRY))
                (COND ((NULL ENTRY) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        (CONS
                         ((LAMBDA (ENTRY)
                            (LIST 'LIST (CAR ENTRY) (CDDR ENTRY)))
                          (CAR ENTRY))
                         NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL))
              10))
            (TERPRI* (NOT *NAT))
            (PUT CUR_EQ_SET* 'TOTAL_USED TOTAL_USED)
            T))
          (T
           (PROGN
            (PROGN
             (PRIN2 "*** ")
             (PRIN2 CUR_EQ_SET*)
             (PRIN2 "(")
             (PRIN2 N)
             (PRIN2
              "): Generation of new equations by differentiation possible.")
             NIL)
            (TERPRI* T)
            (PROGN (PRIN2 "    Solvable with 'on allow_differentiation'") NIL)
            (TERPRI* T)
            T)))))))) 
(PUT 'GET_POLYNOMIAL_ORDER 'NUMBER-OF-ARGS 2) 
(PUT 'GET_POLYNOMIAL_ORDER 'DEFINED-ON-LINE '652) 
(PUT 'GET_POLYNOMIAL_ORDER 'DEFINED-IN-FILE 'CDIFF/INTEGRATOR.RED) 
(PUT 'GET_POLYNOMIAL_ORDER 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE GET_POLYNOMIAL_ORDER (EXPRESSION VARIABLE)
    (COND
     ((AND (NOT (DEPENDS (CDR (SETQ EXPRESSION (SIMP EXPRESSION))) VARIABLE))
           (OR (NOT *POLYNOMIAL_CHECK)
               (POLYNOMIALP (CAR EXPRESSION) VARIABLE)))
      (PROG (KORD*)
        (SETKORDER (LIST (*A2K VARIABLE)))
        (SETQ EXPRESSION (REORDER (CAR EXPRESSION)))
        (RETURN
         (COND ((EQUAL (CAAAR EXPRESSION) VARIABLE) (CDAAR EXPRESSION))
               (T 0))))))) 
(PUT 'INTEGRATE_EQUATIONS 'NUMBER-OF-ARGS 2) 
(FLAG '(INTEGRATE_EQUATIONS) 'OPFN) 
(PUT 'INTEGRATE_EQUATIONS 'DEFINED-ON-LINE '662) 
(PUT 'INTEGRATE_EQUATIONS 'DEFINED-IN-FILE 'CDIFF/INTEGRATOR.RED) 
(PUT 'INTEGRATE_EQUATIONS 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE INTEGRATE_EQUATIONS (M N)
    (PROG (I)
      (SETQ I (AEVAL* M))
     LAB
      (COND ((|AMINUSP:| (LIST 'DIFFERENCE (AEVAL* N) I)) (RETURN NIL)))
      (AEVAL* (LIST 'INTEGRATE_EQUATION I))
      (SETQ I
              ((LAMBDA (FORALL-RESULT) (AEVAL* (LIST 'PLUS FORALL-RESULT 1)))
               I))
      (GO LAB))) 
(FLAG '(INTEGRATE_EXCEPTIONAL_EQUATION) 'OPFN) 
(PUT 'INTEGRATE_EXCEPTIONAL_EQUATION 'NUMBER-OF-ARGS 1) 
(PUT 'INTEGRATE_EXCEPTIONAL_EQUATION 'DEFINED-ON-LINE '667) 
(PUT 'INTEGRATE_EXCEPTIONAL_EQUATION 'DEFINED-IN-FILE 'CDIFF/INTEGRATOR.RED) 
(PUT 'INTEGRATE_EXCEPTIONAL_EQUATION 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE INTEGRATE_EXCEPTIONAL_EQUATION (N)
    ((LAMBDA (*COEFFICIENT_CHECK *POLYNOMIAL_CHECK *ALLOW_DIFFERENTIATION)
       (INTEGRATE_EQUATION N))
     NIL NIL T)) 
(FLAG '(AUTO_SOLVE) 'OPFN) 
(PUT 'AUTO_SOLVE 'NUMBER-OF-ARGS 1) 
(PUT 'AUTO_SOLVE 'DEFINED-ON-LINE '677) 
(PUT 'AUTO_SOLVE 'DEFINED-IN-FILE 'CDIFF/INTEGRATOR.RED) 
(PUT 'AUTO_SOLVE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE AUTO_SOLVE (NR_LIST)
    (PROG (TOTAL OLD_TOTAL TO_DO UNSOLVED OLD_UNSOLVED STUCK)
      (SETQ TOTAL (SETQ OLD_TOTAL (GET CUR_EQ_SET* 'TOTAL_USED)))
      (SETQ TO_DO
              (COND ((FIXP NR_LIST) (LIST NR_LIST))
                    ((EQUAL (CAR NR_LIST) 'LIST) (CDR NR_LIST)) (T NR_LIST)))
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND (NOT STUCK) TO_DO)) (RETURN NIL)))
        (PROG ()
          (PROG (EQ_NR)
            (SETQ EQ_NR TO_DO)
           LAB
            (COND ((NULL EQ_NR) (RETURN NIL)))
            ((LAMBDA (EQ_NR)
               (PROGN
                (INTEGRATE_EQUATION EQ_NR)
                (COND
                 ((NEQ
                   (CADR
                    (ASSOC (LIST CUR_EQ_SET* EQ_NR) (GET CUR_EQ_SET* 'KVALUE)))
                   0)
                  (SETQ UNSOLVED (CONS EQ_NR UNSOLVED))))))
             (CAR EQ_NR))
            (SETQ EQ_NR (CDR EQ_NR))
            (GO LAB))
          (SETQ TOTAL (GET CUR_EQ_SET* 'TOTAL_USED))
          (COND
           ((AND (EQUAL TOTAL OLD_TOTAL) UNSOLVED
                 (EQUAL UNSOLVED OLD_UNSOLVED))
            (SETQ STUCK T))
           (T
            (PROGN
             (SETQ OLD_UNSOLVED UNSOLVED)
             (SETQ TO_DO (REVERSE UNSOLVED))
             (SETQ UNSOLVED NIL)
             (SETQ TO_DO
                     (APPEND
                      (PROG (EQ_NR FORALL-RESULT FORALL-ENDPTR)
                        (SETQ EQ_NR (PLUS OLD_TOTAL 1))
                        (COND ((MINUSP (DIFFERENCE TOTAL EQ_NR)) (RETURN NIL)))
                        (SETQ FORALL-RESULT
                                (SETQ FORALL-ENDPTR (CONS EQ_NR NIL)))
                       LOOPLABEL
                        (SETQ EQ_NR (PLUS2 EQ_NR 1))
                        (COND
                         ((MINUSP (DIFFERENCE TOTAL EQ_NR))
                          (RETURN FORALL-RESULT)))
                        (RPLACD FORALL-ENDPTR (CONS EQ_NR NIL))
                        (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                        (GO LOOPLABEL))
                      TO_DO))
             (SETQ OLD_TOTAL TOTAL)))))
        (GO WHILELABEL))
      (COND (STUCK (RETURN (CONS 'LIST (REVERSE UNSOLVED))))
            (T
             (PROGN
              (TERPRI)
              (PROGN (PRIN2 "Successful integration of all equations") NIL)
              (TERPRI)))))) 
(FLAG '(SHOW_EQUATION) 'OPFN) 
(PUT 'SHOW_EQUATION 'NUMBER-OF-ARGS 1) 
(PUT 'SHOW_EQUATION 'DEFINED-ON-LINE '701) 
(PUT 'SHOW_EQUATION 'DEFINED-IN-FILE 'CDIFF/INTEGRATOR.RED) 
(PUT 'SHOW_EQUATION 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SHOW_EQUATION (N)
    (PROG (EQUATION TOTAL_USED FUNCTION_LIST)
      (COND
       ((OR (NULL (SETQ TOTAL_USED (GET CUR_EQ_SET* 'TOTAL_USED)))
            (GREATERP N TOTAL_USED))
        (MSGPRI "SHOW_EQUATION: properly initialize" CUR_EQ_SET* NIL NIL T)))
      (COND
       ((SETQ EQUATION (ASSOC (LIST CUR_EQ_SET* N) (GET CUR_EQ_SET* 'KVALUE)))
        (PROG ()
          (SETQ EQUATION
                  (SETK (LIST CUR_EQ_SET* N) (REVAL1 (CADR EQUATION) NIL)))
          (ASSGNPRI EQUATION (LIST (LIST CUR_EQ_SET* N)) 'ONLY)
          (SETQ FUNCTION_LIST
                  (GET_RECURSIVE_KERNELS (CAR (SIMP EQUATION))
                   (GET CUR_EQ_SET* 'FUNCTION_LIST)))
          (COND
           (FUNCTION_LIST
            (PROGN
             (TERPRI* T)
             (PROGN (PRIN2 "Functions occurring:") NIL)
             (TERPRI* T)
             (PROG (FN)
               (SETQ FN FUNCTION_LIST)
              LAB
               (COND ((NULL FN) (RETURN NIL)))
               ((LAMBDA (FN)
                  (PROGN
                   (MAPRIN
                    (CONS FN
                          ((LAMBDA (DEPL_ENTRY)
                             (COND (DEPL_ENTRY (CDR DEPL_ENTRY))))
                           (ASSOC FN DEPL*))))
                   (TERPRI* (NOT *NAT))))
                (CAR FN))
               (SETQ FN (CDR FN))
               (GO LAB))))
           (T (TERPRI* NIL)))))))) 
(PUT 'SHOW_EQUATIONS 'NUMBER-OF-ARGS 2) 
(FLAG '(SHOW_EQUATIONS) 'OPFN) 
(PUT 'SHOW_EQUATIONS 'DEFINED-ON-LINE '731) 
(PUT 'SHOW_EQUATIONS 'DEFINED-IN-FILE 'CDIFF/INTEGRATOR.RED) 
(PUT 'SHOW_EQUATIONS 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE SHOW_EQUATIONS (M N)
    (PROG (I)
      (SETQ I (AEVAL* M))
     LAB
      (COND ((|AMINUSP:| (LIST 'DIFFERENCE (AEVAL* N) I)) (RETURN NIL)))
      (AEVAL* (LIST 'SHOW_EQUATION I))
      (SETQ I
              ((LAMBDA (FORALL-RESULT) (AEVAL* (LIST 'PLUS FORALL-RESULT 1)))
               I))
      (GO LAB))) 
(FLAG '(FUNCTIONS_USED PUT_FUNCTIONS_USED EQUATIONS_USED PUT_EQUATIONS_USED)
      'OPFN) 
(PUT 'FUNCTIONS_USED 'NUMBER-OF-ARGS 1) 
(PUT 'FUNCTIONS_USED 'DEFINED-ON-LINE '739) 
(PUT 'FUNCTIONS_USED 'DEFINED-IN-FILE 'CDIFF/INTEGRATOR.RED) 
(PUT 'FUNCTIONS_USED 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FUNCTIONS_USED (FUNCTION_NAME)
    (LIST 'LIST (GET FUNCTION_NAME 'EVEN_USED) (GET FUNCTION_NAME 'ODD_USED))) 
(PUT 'PUT_FUNCTIONS_USED 'NUMBER-OF-ARGS 3) 
(PUT 'PUT_FUNCTIONS_USED 'DEFINED-ON-LINE '743) 
(PUT 'PUT_FUNCTIONS_USED 'DEFINED-IN-FILE 'CDIFF/INTEGRATOR.RED) 
(PUT 'PUT_FUNCTIONS_USED 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE PUT_FUNCTIONS_USED (FUNCTION_NAME EVEN_USED ODD_USED)
    (PROG ()
      (COND
       ((OR (NOT (FIXP EVEN_USED)) (LESSP EVEN_USED 0) (NOT (FIXP ODD_USED))
            (LESSP ODD_USED 0))
        (MSGPRI "PUT_FUNCTIONS_USED: used functions number invalid" NIL NIL NIL
                T)))
      (PUT FUNCTION_NAME 'EVEN_USED EVEN_USED)
      (PUT FUNCTION_NAME 'ODD_USED ODD_USED))) 
(PUT 'EQUATIONS_USED 'NUMBER-OF-ARGS 0) 
(PUT 'EQUATIONS_USED 'DEFINED-ON-LINE '755) 
(PUT 'EQUATIONS_USED 'DEFINED-IN-FILE 'CDIFF/INTEGRATOR.RED) 
(PUT 'EQUATIONS_USED 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE EQUATIONS_USED NIL (GET CUR_EQ_SET* 'TOTAL_USED)) 
(PUT 'PUT_EQUATIONS_USED 'NUMBER-OF-ARGS 1) 
(PUT 'PUT_EQUATIONS_USED 'DEFINED-ON-LINE '759) 
(PUT 'PUT_EQUATIONS_USED 'DEFINED-IN-FILE 'CDIFF/INTEGRATOR.RED) 
(PUT 'PUT_EQUATIONS_USED 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PUT_EQUATIONS_USED (N)
    (COND
     ((OR (NOT (FIXP N)) (LESSP N 0))
      (MSGPRI "PUT_EQUATIONS_USED: used equation number invalid" NIL NIL NIL
              T))
     (T (PUT CUR_EQ_SET* 'TOTAL_USED N)))) 
(FLAG '(DF_ACTS_AS_DERIVATION_ON) 'OPFN) 
(PUT 'DF_ACTS_AS_DERIVATION_ON 'NUMBER-OF-ARGS 1) 
(PUT 'DF_ACTS_AS_DERIVATION_ON 'DEFINED-ON-LINE '768) 
(PUT 'DF_ACTS_AS_DERIVATION_ON 'DEFINED-IN-FILE 'CDIFF/INTEGRATOR.RED) 
(PUT 'DF_ACTS_AS_DERIVATION_ON 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE DF_ACTS_AS_DERIVATION_ON (OPERATOR_NAME)
    (PROG () (PUT OPERATOR_NAME 'DFFORM 'DF_AS_DERIVATION))) 
(PUT 'DF_AS_DERIVATION 'NUMBER-OF-ARGS 3) 
(PUT 'DF_AS_DERIVATION 'DEFINED-ON-LINE '774) 
(PUT 'DF_AS_DERIVATION 'DEFINED-IN-FILE 'CDIFF/INTEGRATOR.RED) 
(PUT 'DF_AS_DERIVATION 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE DF_AS_DERIVATION (KERNEL VARIABLE POWER)
    (PROG (LEFT_PART RIGHT_PART ARGUMENT DERIVATIVE)
      (COND
       ((NEQ POWER 1)
        (MSGPRI "DF_AS_DERIVATION:" KERNEL "must occur linearly" NIL T)))
      (SETQ LEFT_PART (LIST (CAR KERNEL)))
      (SETQ RIGHT_PART (CDR KERNEL))
      (SETQ DERIVATIVE (CONS NIL 1))
      (PROG ()
       WHILELABEL
        (COND ((NOT RIGHT_PART) (RETURN NIL)))
        (PROGN
         (SETQ ARGUMENT (CAR RIGHT_PART))
         (SETQ RIGHT_PART (CDR RIGHT_PART))
         (SETQ DERIVATIVE
                 (ADDSQ DERIVATIVE
                        (SIMP
                         (APPEND (REVERSE LEFT_PART)
                                 (CONS (LIST 'DF ARGUMENT VARIABLE)
                                       RIGHT_PART)))))
         (SETQ LEFT_PART (CONS ARGUMENT LEFT_PART))
         NIL)
        (GO WHILELABEL))
      (RETURN DERIVATIVE))) 
(FLAG '(LISTLENGTH) 'OPFN) 
(PUT 'LISTLENGTH 'NUMBER-OF-ARGS 1) 
(PUT 'LISTLENGTH 'DEFINED-ON-LINE '796) 
(PUT 'LISTLENGTH 'DEFINED-IN-FILE 'CDIFF/INTEGRATOR.RED) 
(PUT 'LISTLENGTH 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE LISTLENGTH (L) (SETQ LISTPRI_DEPTH* L)) 
(PUT 'LISTPRI 'NUMBER-OF-ARGS 1) 
(PUT 'LISTPRI 'DEFINED-ON-LINE '800) 
(PUT 'LISTPRI 'DEFINED-IN-FILE 'CDIFF/INTEGRATOR.RED) 
(PUT 'LISTPRI 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE LISTPRI (L)
    (PROG (ORIG SPLIT U)
      (SETQ U L)
      (SETQ L (CDR L))
      (PRIN2* (GET '*LCBKT* 'PRTCH))
      (SETQ ORIG ORIG*)
      (SETQ ORIG* (COND ((LESSP POSN* 18) POSN*) (T (PLUS ORIG* 3))))
      (COND ((NULL L) (GO B)))
      (SETQ SPLIT (ZEROP (TREESIZEP1 L LISTPRI_DEPTH*)))
     A
      (MAPRINT (NEGNUMBERCHK (CAR L)) 0)
      (SETQ L (CDR L))
      (COND ((NULL L) (GO B)))
      (OPRIN '*COMMA*)
      (COND (SPLIT (TERPRI* T)))
      (GO A)
     B
      (PRIN2* (GET '*RCBKT* 'PRTCH))
      (SETQ ORIG* ORIG)
      (RETURN U))) 
(ENDMODULE) 