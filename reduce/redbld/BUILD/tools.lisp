(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(SETQ LOADED-MODULES* (UNION LOADED-MODULES* '(ASSIST))) 
(EVLOAD '(ASSIST)) 
(SETQ LOADED-MODULES* (UNION LOADED-MODULES* '(MATRIX))) 
(EVLOAD '(MATRIX)) 
(GLOBAL '(F DFUNCTIONS* FILE*)) 
(GLOBAL '(*MATHML)) 
(SWITCH (LIST 'MATHML)) 
(GLOBAL '(*BOTH)) 
(SWITCH (LIST 'BOTH)) 
(GLOBAL '(*WEB)) 
(SWITCH (LIST 'WEB)) 
(SETQ FILE* NIL) 
(SETQ *MATHML NIL) 
(SETQ *BOTH NIL) 
(SETQ *WEB NIL) 
(PUT 'LEX 'NUMBER-OF-ARGS 0) 
(PUT 'LEX 'DEFINED-ON-LINE '73) 
(PUT 'LEX 'DEFINED-IN-FILE 'MATHML/TOOLS.RED) 
(PUT 'LEX 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE LEX NIL
    (PROG (TOKEN SAFE_ATTS)
      (SETQ TOKEN NIL)
      (SETQ CHAR NIL)
      (COND ((NEQ ATTS NIL) (SETQ SAFE_ATTS ATTS)))
      (SETQ ATTS NIL)
      (COND ((EQ CH $EOL$) (SETQ CH (READCH))))
      (COND
       ((NEQ CH $EOF$)
        (PROGN
         (COND
          ((EQUAL CH SPACE)
           (PROG ()
            WHILELABEL
             (COND ((NOT (EQUAL (SETQ CH (READCH)) SPACE)) (RETURN NIL)))
            NIL
             (GO WHILELABEL)))
          ((EQUAL CH '<) (SETQ CHAR (GET_TOKEN)))
          (T (SETQ CHAR (GET_CONTENT))))
         (COND
          ((NEQ CHAR NIL)
           (PROGN
            (SETQ COUNT (PLUS COUNT 1))
            (SETQ TOKEN (REVERSE CHAR))
            (COND
             ((NOTSTRING CHAR)
              (PROGN
               (SETQ CHAR (BUTES TOKEN))
               (ISVALID CHAR)
               (ATTRIBUTES CHAR TOKEN))))))
          (T (LEX)))
         NIL))))) 
(PUT 'GET_TOKEN 'NUMBER-OF-ARGS 0) 
(PUT 'GET_TOKEN 'DEFINED-ON-LINE '100) 
(PUT 'GET_TOKEN 'DEFINED-IN-FILE 'MATHML/TOOLS.RED) 
(PUT 'GET_TOKEN 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE GET_TOKEN NIL
    (PROG (D)
      (SETQ D 'NIL)
      (PROG ()
       WHILELABEL
        (COND ((NOT (NEQ (SETQ CH (READCH)) '>)) (RETURN NIL)))
        (SETQ D (CONS CH D))
        (GO WHILELABEL))
      (RETURN (CONS '$ D)))) 
(PUT 'GET_CONTENT 'NUMBER-OF-ARGS 0) 
(PUT 'GET_CONTENT 'DEFINED-ON-LINE '112) 
(PUT 'GET_CONTENT 'DEFINED-IN-FILE 'MATHML/TOOLS.RED) 
(PUT 'GET_CONTENT 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE GET_CONTENT NIL
    (PROG (D D2)
      (SETQ D 'NIL)
      (PROG ()
       WHILELABEL
        (COND
         ((NOT (AND (NEQ (SETQ CH (READCH)) '<) (NEQ CH $EOF$))) (RETURN NIL)))
        (PROGN (COND ((NEQ CH $EOL$) (SETQ D (CONS CH D)))))
        (GO WHILELABEL))
      (SETQ D2 (DELALL BLANK D))
      (COND ((EQ D2 NIL) (SETQ D NIL))
            (T
             (PROGN
              (COND
               ((AND (NEQ (CAR D2) '|"|) (NEQ (CAR (REVERSE D2)) '|"|))
                (SETQ D D2))
               (T (RETURN (REVERSE D)))))))
      (COND ((NEQ D NIL) (SETQ D (CONS '$ D))))
      (RETURN D))) 
(PUT 'SEARCH_ATT 'NUMBER-OF-ARGS 2) 
(PUT 'SEARCH_ATT 'DEFINED-ON-LINE '138) 
(PUT 'SEARCH_ATT 'DEFINED-IN-FILE 'MATHML/TOOLS.RED) 
(PUT 'SEARCH_ATT 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE SEARCH_ATT (ATT KEY)
    (PROG (L STOP D)
      (SETQ L NIL)
      (SETQ D NIL)
      (SETQ STOP 0)
      (SETQ ATT (FIND2 ATT KEY))
      (COND
       ((NEQ ATT '(STOP))
        (PROGN
         (PROG ()
          WHILELABEL
           (COND ((NOT (EQUAL (CAR ATT) BLANK)) (RETURN NIL)))
           (SETQ ATT (CDR ATT))
           (GO WHILELABEL))
         (COND
          ((EQUAL (CAR ATT) '=)
           (PROGN
            (SETQ ATT (CDR ATT))
            (PROG ()
             WHILELABEL
              (COND ((NOT (EQUAL (CAR ATT) BLANK)) (RETURN NIL)))
              (SETQ ATT (CDR ATT))
              (GO WHILELABEL))
            (COND
             ((EQUAL (CAR ATT) '|"|)
              (PROGN
               (SETQ ATT (CDR ATT))
               (PROG ()
                WHILELABEL
                 (COND ((NOT (EQUAL STOP 0)) (RETURN NIL)))
                 (PROGN
                  (SETQ D (CONS (CAR ATT) D))
                  (SETQ ATT (CDR ATT))
                  (COND
                   ((OR (EQUAL (CAR ATT) BLANK) (EQUAL (CAR ATT) '$))
                    (SETQ STOP 1))))
                 (GO WHILELABEL))))
             (T
              (PROG ()
               WHILELABEL
                (COND ((NOT (EQUAL STOP 0)) (RETURN NIL)))
                (PROGN
                 (SETQ D (CONS (CAR ATT) D))
                 (SETQ ATT (CDR ATT))
                 (COND
                  ((OR (EQUAL (CAR ATT) BLANK) (EQUAL (CAR ATT) '$))
                   (SETQ STOP 1))))
                (GO WHILELABEL))))))
          (T (ERRORML (COMPRESS KEY) 1)))
         (COND ((EQUAL (CAR D) '|"|) (SETQ D (CDR D))))
         (RETURN (REVERSE D))))))) 
(PUT 'ATTRIBUTES 'NUMBER-OF-ARGS 2) 
(PUT 'ATTRIBUTES 'DEFINED-ON-LINE '176) 
(PUT 'ATTRIBUTES 'DEFINED-IN-FILE 'MATHML/TOOLS.RED) 
(PUT 'ATTRIBUTES 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE ATTRIBUTES (A B)
    (PROG (L)
      (SETQ L (LENGTH A))
      (PROG (A)
        (SETQ A 1)
       LAB
        (COND ((MINUSP (DIFFERENCE L A)) (RETURN NIL)))
        (SETQ B (CDR B))
        (SETQ A (PLUS2 A 1))
        (GO LAB))
      (PROG ()
       WHILELABEL
        (COND ((NOT (EQUAL (CAR B) BLANK)) (RETURN NIL)))
        (SETQ B (CDR B))
        (GO WHILELABEL))
      (COND ((NEQ B '($)) (SETQ ATTS B))))) 
(PUT 'BUTES 'NUMBER-OF-ARGS 1) 
(PUT 'BUTES 'DEFINED-ON-LINE '187) 
(PUT 'BUTES 'DEFINED-IN-FILE 'MATHML/TOOLS.RED) 
(PUT 'BUTES 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE BUTES (STR)
    (PROG (CHA)
      (SETQ CHA (CAR STR))
      (RETURN
       (COND ((OR (EQUAL CHA BLANK) (EQUAL CHA '$)) NIL)
             (T (CONS (CAR STR) (BUTES (CDR STR)))))))) 
(PUT 'FIND 'NUMBER-OF-ARGS 2) 
(PUT 'FIND 'DEFINED-ON-LINE '202) 
(PUT 'FIND 'DEFINED-IN-FILE 'MATHML/TOOLS.RED) 
(PUT 'FIND 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE FIND (FATT FKEY)
    (PROG (A)
      (SETQ FKEY (EXPLODE FKEY))
      (SETQ A (FIND2 FATT FKEY))
      (COND ((NEQ (CAR A) '=) (SETQ A (FIND2 A FKEY))))
      (SETQ A (DELALL '|"| A))
      (SETQ A (DELALL '= A))
      (SETQ A (DELALL '$ A))
      (COND
       ((NEQ A '(STOP))
        (COND
         ((EQUAL (CAR (REVERSE A)) '/) (SETQ A (REVERSE (CDR (REVERSE A))))))))
      (COND
       ((NEQ A '(STOP))
        (COND
         ((EQUAL FKEY '(D E F I N I T I O N U R L)) (RETURN (DELALL BLANK A)))
         (T (RETURN (COMPRESS* A)))))
       (T (RETURN NIL))))) 
(PUT 'COMPRESS* 'NUMBER-OF-ARGS 1) 
(PUT 'COMPRESS* 'DEFINED-ON-LINE '222) 
(PUT 'COMPRESS* 'DEFINED-IN-FILE 'MATHML/TOOLS.RED) 
(PUT 'COMPRESS* 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE COMPRESS* (U)
    (PROG (X)
      (COND ((DIGIT (CAR U)) (RETURN (COMPRESS U))))
      (PROG (J)
        (SETQ J U)
       LAB
        (COND ((NULL J) (RETURN NIL)))
        ((LAMBDA (J)
           (COND
            ((OR (EQ J '/) (EQ J '-) (EQ J '|;|) (EQ J '|.|))
             (SETQ X (CONS J (CONS '! X))))
            (T (SETQ X (CONS J X)))))
         (CAR J))
        (SETQ J (CDR J))
        (GO LAB))
      (RETURN (INTERN (COMPRESS (REVERSIP X)))))) 
(PUT 'FIND2 'NUMBER-OF-ARGS 2) 
(PUT 'FIND2 'DEFINED-ON-LINE '232) 
(PUT 'FIND2 'DEFINED-IN-FILE 'MATHML/TOOLS.RED) 
(PUT 'FIND2 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE FIND2 (FATT FKEY)
    (PROG ()
      (RETURN
       (COND ((EQUAL FKEY 'NIL) (COND ((NEQ FATT NIL) (CDR FATT)) (T '(STOP))))
             (T (FIND2 (MEMBER (CAR FKEY) FATT) (CDR FKEY))))))) 
(PUT 'RETATTRIBUTES 'NUMBER-OF-ARGS 2) 
(PUT 'RETATTRIBUTES 'DEFINED-ON-LINE '243) 
(PUT 'RETATTRIBUTES 'DEFINED-IN-FILE 'MATHML/TOOLS.RED) 
(PUT 'RETATTRIBUTES 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE RETATTRIBUTES (ATS LIST)
    (PROG (A)
      (COND ((EQ LIST NIL) NIL)
            (T
             (PROGN
              (SETQ A (FIND ATS (CAR LIST)))
              (COND
               ((NEQ A NIL)
                (RETURN
                 (CONS (LIST (CAR LIST) A) (RETATTRIBUTES ATS (CDR LIST)))))
               (T (RETURN (RETATTRIBUTES ATS (CDR LIST)))))
              NIL))))) 
(PUT 'ISVALID 'NUMBER-OF-ARGS 1) 
(PUT 'ISVALID 'DEFINED-ON-LINE '269) 
(PUT 'ISVALID 'DEFINED-IN-FILE 'MATHML/TOOLS.RED) 
(PUT 'ISVALID 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE ISVALID (A)
    (PROG ()
      (COND ((NEQ (IDP (COMPRESS A)) T) (RETURN (COMPRESS A))))
      (COND ((ASSOC (COMPRESS* A) FUNCTIONS*) (RETURN T)))
      (SETQ A (REVERSE (CONS '/ (REVERSE A))))
      (COND
       ((ASSOC (COMPRESS* A) FUNCTIONS*) (PROGN (SETQ CHAR A) (RETURN T))))
      (RETURN NIL))) 
(PUT 'NOTSTRING 'NUMBER-OF-ARGS 1) 
(PUT 'NOTSTRING 'DEFINED-ON-LINE '281) 
(PUT 'NOTSTRING 'DEFINED-IN-FILE 'MATHML/TOOLS.RED) 
(PUT 'NOTSTRING 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE NOTSTRING (A)
    (PROG (A2)
      (SETQ A2 (DELALL BLANK A))
      (COND
       ((AND (NEQ (CAR A2) '|"|) (NEQ (CAR (REVERSE A2)) '|"|)) (RETURN T))
       (T (RETURN NIL))))) 
(PUT 'NOREPEAT 'NUMBER-OF-ARGS 1) 
(PUT 'NOREPEAT 'DEFINED-ON-LINE '291) 
(PUT 'NOREPEAT 'DEFINED-IN-FILE 'MATHML/TOOLS.RED) 
(PUT 'NOREPEAT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE NOREPEAT (ARGS)
    (PROG ()
      (RETURN
       (COND ((EQUAL ARGS NIL) NIL) ((EQUAL (LENGTH ARGS) 1) (LIST (CAR ARGS)))
             (T
              (APPEND (LIST (CAR ARGS))
                      (NOREPEAT (DELALL (CAR ARGS) (CDR ARGS))))))))) 
(PUT 'DELALL 'NUMBER-OF-ARGS 2) 
(PUT 'DELALL 'DEFINED-ON-LINE '300) 
(PUT 'DELALL 'DEFINED-IN-FILE 'MATHML/TOOLS.RED) 
(PUT 'DELALL 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE DELALL (X L)
    (COND ((EQUAL L NIL) NIL) ((EQUAL X (CAR L)) (DELALL X (CDR L)))
          (T (APPEND (LIST (CAR L)) (DELALL X (CDR L)))))) 
(PUT 'MATHML_LIST2STRING 'NUMBER-OF-ARGS 1) 
(PUT 'MATHML_LIST2STRING 'DEFINED-ON-LINE '310) 
(PUT 'MATHML_LIST2STRING 'DEFINED-IN-FILE 'MATHML/TOOLS.RED) 
(PUT 'MATHML_LIST2STRING 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MATHML_LIST2STRING (A)
    (PROG ()
      (COND
       ((NEQ A NIL) (PROGN (PRINC (CAR A)) (MATHML_LIST2STRING (CDR A))))))) 
(PUT 'ERRORML 'NUMBER-OF-ARGS 2) 
(PUT 'ERRORML 'DEFINED-ON-LINE '321) 
(PUT 'ERRORML 'DEFINED-IN-FILE 'MATHML/TOOLS.RED) 
(PUT 'ERRORML 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE ERRORML (STR MSG)
    (PROG ()
      (TERPRI)
      (PRINC "***** Error in token number ")
      (PRINC COUNT)
      (PRINC " (<")
      (PRINC (COMPRESS CHAR))
      (PRINC ">)")
      (TERPRI)
      (COND
       ((EQUAL MSG 1)
        (PROGN
         (PRINC "Needed attribute")
         (PRINC STR)
         (PRINC " and none was found.")))
       ((EQUAL MSG 2) (PROGN (PRINC "Missing tag: ") (PRINC STR)))
       ((EQUAL MSG 3) (PROGN (PRINC "Undefined error!")))
       ((EQUAL MSG 4)
        (PROGN
         (PRINC "Numerical constant ")
         (PRINC STR)
         (PRINC " was enclosed between <ci></ci> tags.")
         (TERPRI)
         (PRINC "Correct syntax: <cn>")
         (PRINC STR)
         (PRINC "</cn>.")))
       ((EQUAL MSG 5)
        (PROGN
         (PRINC "All arguments must be sets")
         (TERPRI)
         (PRINC STR)
         (PRINC " does not represent a set.")))
       ((EQUAL MSG 6) (PROGN (PRINC "Non-numeric argument in arithmetic.")))
       ((EQUAL MSG 7)
        (PROGN
         (PRINC "The degree quantifier is of no use in the sumation")
         (PRINC "operator.")))
       ((EQUAL MSG 8)
        (PROGN
         (PRINC "The degree quantifier is of no use in the limit")
         (PRINC " operator.")))
       ((EQUAL MSG 9)
        (PROGN
         (PRINC "The index of sumation has not been specified.")
         (TERPRI)
         (PRINC "Please use <bvar></bvar> tags to specify an index.")))
       ((EQUAL MSG 10) (PROGN (PRINC "Upperlimit not specified.")))
       ((EQUAL MSG 11)
        (PROGN (PRINC "Upper and lower limits have not been specified.")))
       ((EQUAL MSG 12)
        (PROGN
         (PRINC "The degree quantifier is of no use in the product")
         (PRINC " operator.")))
       ((EQUAL MSG 13)
        (PROGN
         (PRINC "The degree quantifier is not allowed in the integral")
         (PRINC " operator.")))
       ((EQUAL MSG 14)
        (PROGN
         (PRINC "Variable of integration not specified.")
         (PRINC "Please use <bvar></bvar> tags to specify variable.")))
       ((EQUAL MSG 15)
        (PROGN
         (PRINC "Incorrect use of <bvar></bvar> tags.")
         (PRINC " Correct use:")
         (TERPRI)
         (PRINC
          "<bvar> bound_var </bvar> [<degree> degree </degree>] </bvar>")))
       ((EQUAL MSG 16)
        (PROGN
         (PRINC "Symbolic constant ")
         (PRINC STR)
         (PRINC " was enclosed between <cn></cn> tags.")
         (TERPRI)
         (PRINC "Correct syntax: <ci> ")
         (PRINC STR)
         (PRINC " </ci>")
         (TERPRI)
         (PRINC "or <cn type=\"constant\"> </cn>")
         (PRINC
          "if using constants &ImaginaryI;, &ii;, &ExponentialE;, &gamma;, &ee; or &pi;.")))
       ((EQUAL MSG 17)
        (PROGN
         (PRINC "Unknown tag: <")
         (PRINC STR)
         (PRINC ">.")
         (TERPRI)
         (PRINC "Token not allowed within <apply></apply> tags.")
         (TERPRI)
         (PRINC "Might be: <")
         (PRINC STR)
         (PRINC "/>.")))
       ((EQUAL MSG 18)
        (PROGN
         (PRINC "Unknown tag: <")
         (PRINC STR)
         (PRINC ">.")
         (TERPRI)
         (PRINC "Not allowed within <reln></reln> tags.")))
       ((EQUAL MSG 19)
        (PROGN
         (PRINC "Undefined error!")
         (PRINC " Token ")
         (PRINC (SUB1 COUNT))
         (PRINC " is probably mispelled")
         (TERPRI)
         (PRINC "or unknown, ")
         (PRINC "or the </math> tag is missing")))
       ((EQUAL MSG 20)
        (PROGN
         (PRINC "Function ")
         (PRINC STR)
         (PRINC "()")
         (PRINC " was not enclosed in <ci></ci> tags.")
         (TERPRI)
         (PRINC "Correct syntax: <fn><ci>")
         (PRINC STR)
         (PRINC "</ci></fn>.")))
       ((EQUAL MSG 21) (PROGN (PRINC "Error, division by 0")))
       ((EQUAL MSG 22)
        (PROGN
         (PRINC "<tendsto/> should contain a type attribute")
         (TERPRI)
         (PRINC "example: <tendsto type=\"above\"/>")
         NIL)))
      (TERPRI)
      (COND ((EQUAL FILE* T) (CLOSE (RDS *F*))))
      (SETQ FILE* NIL)
      (REDERR "")
      (REDERR "")
      (TERPRI))) 
(PUT 'COLS2ROWS 'NUMBER-OF-ARGS 1) 
(PUT 'COLS2ROWS 'DEFINED-ON-LINE '448) 
(PUT 'COLS2ROWS 'DEFINED-IN-FILE 'MATHML/TOOLS.RED) 
(PUT 'COLS2ROWS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE COLS2ROWS (L)
    (PROG (LEN)
      (SETQ LEN (LENGTH (CAR L)))
      (RETURN (REVERSE (COLS2ROWS2 L LEN))))) 
(PUT 'COLS2ROWS2 'NUMBER-OF-ARGS 2) 
(PUT 'COLS2ROWS2 'DEFINED-ON-LINE '455) 
(PUT 'COLS2ROWS2 'DEFINED-IN-FILE 'MATHML/TOOLS.RED) 
(PUT 'COLS2ROWS2 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE COLS2ROWS2 (L S)
    (PROG ()
      (COND
       ((NEQ S 0)
        (RETURN (CONS (ITHLISTELEM L S) (COLS2ROWS2 L (DIFFERENCE S 1)))))))) 
(PUT 'ITHLISTELEM 'NUMBER-OF-ARGS 2) 
(PUT 'ITHLISTELEM 'DEFINED-ON-LINE '464) 
(PUT 'ITHLISTELEM 'DEFINED-IN-FILE 'MATHML/TOOLS.RED) 
(PUT 'ITHLISTELEM 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE ITHLISTELEM (LST I)
    (PROG ()
      (COND
       ((NEQ LST NIL)
        (RETURN (CONS (NTH (CAR LST) I) (ITHLISTELEM (CDR LST) I))))))) 
(PUT 'DEBUG 'NUMBER-OF-ARGS 2) 
(PUT 'DEBUG 'DEFINED-ON-LINE '476) 
(PUT 'DEBUG 'DEFINED-IN-FILE 'MATHML/TOOLS.RED) 
(PUT 'DEBUG 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE DEBUG (S1 S2) (PROG () (TERPRI* T) (PRINC S1) (PRINC S2) (TERPRI* T))) 
(FLUID '(INDENT IND)) 
(PUT 'INDENT* 'NUMBER-OF-ARGS 1) 
(PUT 'INDENT* 'DEFINED-ON-LINE '489) 
(PUT 'INDENT* 'DEFINED-IN-FILE 'MATHML/TOOLS.RED) 
(PUT 'INDENT* 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE INDENT* (V)
    (PROG ()
      (COND ((EQUAL V T) (SETQ INDENT (PLUS INDENT IND))))
      (COND ((EQUAL V NIL) (SETQ INDENT (DIFFERENCE INDENT IND)))))) 