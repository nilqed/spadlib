(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'PASFPRINT)) 
(REVISION 'PASFPRINT
          "$Id: pasfprint.red 6020 2021-09-11 09:15:49Z thomas-sturm $") 
(COPYRIGHT 'PASFPRINT "(c) 2021 T. Sturm") 
(PUT 'PASF 'RL_PRIBQ 'PASF_PRIBQ) 
(SWITCH (LIST 'RLPRIBQSM)) 
(ON1 'RLPRIBQSM) 
(PUT 'PASF_PRIBQ 'NUMBER-OF-ARGS 1) 
(DE PASF_PRIBQ (F)
    (PROG ()
      (COND ((NULL *NAT) (RETURN 'FAILED)))
      (MAPRIN (CAR F))
      (PRIN2* " ")
      (MAPRIN (CADR F))
      (PRIN2* " ")
      (PRIN2* "[")
      (COND (*RLPRIBQSM (MAPRIN (PASF_BOUNDSM (CADDR F) (CADR F))))
            (T (MAPRIN (CADDR F))))
      (PRIN2* "] ")
      (PRIN2* "(")
      (MAPRIN (CADDDR F))
      (PRIN2* ")"))) 
(PUT 'PASF_BOUNDSM 'NUMBER-OF-ARGS 2) 
(DE PASF_BOUNDSM (F V)
    (PROG (W W1 W2 ARGL)
      (COND
       ((EQCAR F 'OR)
        (PROGN
         (SETQ W
                 (CONS 'OR
                       (PROG (X FORALL-RESULT FORALL-ENDPTR)
                         (SETQ X (CDR F))
                         (COND ((NULL X) (RETURN NIL)))
                         (SETQ FORALL-RESULT
                                 (SETQ FORALL-ENDPTR
                                         (CONS
                                          ((LAMBDA (X) (PASF_BOUNDSM X V))
                                           (CAR X))
                                          NIL)))
                        LOOPLABEL
                         (SETQ X (CDR X))
                         (COND ((NULL X) (RETURN FORALL-RESULT)))
                         (RPLACD FORALL-ENDPTR
                                 (CONS
                                  ((LAMBDA (X) (PASF_BOUNDSM X V)) (CAR X))
                                  NIL))
                         (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                         (GO LOOPLABEL))))
         (RETURN (PASF_BOUNDSMTRYABS W)))))
      (SETQ ARGL (CDR F))
      (COND ((CDDR ARGL) (RETURN F)))
      (SETQ W1 (PASF_BOUNDSM1 (CAR ARGL) V))
      (COND ((NULL W1) (RETURN F)))
      (SETQ W2 (PASF_BOUNDSM1 (CADR ARGL) V))
      (COND ((NULL W2) (RETURN F)))
      (COND ((EQ (CAR W1) (CAR W2)) (RETURN F)))
      (COND ((EQCAR W1 'UB) (PROGN (SETQ W W1) (SETQ W1 W2) (SETQ W2 W))))
      (SETQ W1 (CDR W1))
      (SETQ W2 (CDR W2))
      (COND
       ((NEQ (CAR W1) (CAR W2))
        (COND
         ((EQ (CAR W1) 'LEQ)
          (PROGN
           (SETCAR (CDDR W2)
                   (REVAL1 (LIST 'PLUS (CADDR W2) (LIST 'MINUS 1)) T))
           (SETCAR W2 'LEQ)))
         (T
          (PROGN
           (SETCAR (CDR W1) (REVAL1 (LIST 'PLUS (CADR W1) 1) T))
           (SETCAR W1 'LEQ))))))
      (RETURN (NCONC W1 (LIST (CADDR W2)))))) 
(PUT 'PASF_BOUNDSM1 'NUMBER-OF-ARGS 2) 
(DE PASF_BOUNDSM1 (A V)
    (PROG (W C)
      (COND
       ((MEMQ (CAR A) '(GEQ GREATERP))
        (SETQ A (LIST (PASF_ANEGREL (CAR A)) (LIST 'MINUS (CADR A)) 0))))
      (SETQ W (SFTO_REORDER (CAR (SIMP (CADR A))) V))
      (COND
       ((AND (NOT (OR (ATOM W) (ATOM (CAR W)))) (EQ (CAAAR W) V))
        (SETQ C (CDAR W))))
      (COND
       ((AND (MEMQ (CAR A) '(LEQ LESSP)) (EQUAL C 1))
        (RETURN (CONS 'UB (LIST (CAR A) V (PREPF (NEGF (CDR W))))))))
      (COND
       ((AND (MEMQ (CAR A) '(LEQ LESSP)) (EQUAL C (MINUS 1)))
        (RETURN (CONS 'LB (LIST (CAR A) (PREPF (CDR W)) V))))))) 
(PUT 'PASF_BOUNDSMTRYABS 'NUMBER-OF-ARGS 1) 
(DE PASF_BOUNDSMTRYABS (F)
    (PROG (W V R1 R2 L1 L2 U1 U2)
      (SETQ W (CDR F))
      (COND ((CDDR W) (RETURN F)))
      (COND
       ((OR (NEQ (LENGTH (CAR W)) 4) (NEQ (LENGTH (CADR W)) 4)) (RETURN F)))
      (SETQ R1 (CAR (CAR W)))
      (SETQ R2 (CAR (CADR W)))
      (COND ((OR (NEQ R1 R2) (EQ R1 'CONG)) (RETURN F)))
      (SETQ L1 (CAR (SIMP (CADR (CAR W)))))
      (SETQ V (CADDR (CAR W)))
      (SETQ U1 (CAR (SIMP (CADDDR (CAR W)))))
      (SETQ L2 (CAR (SIMP (CADR (CADR W)))))
      (SETQ U2 (CAR (SIMP (CADDDR (CADR W)))))
      (COND
       ((AND (EQUAL L1 U2) (EQUAL L2 U1) (EQUAL L1 (NEGF U1))
             (EQUAL L2 (NEGF U2)))
        (RETURN
         (LIST R1 (LIST 'MINUS (LIST 'ABS (PREPF (ABSF L1)))) V
               (LIST 'ABS (PREPF (ABSF U1)))))))
      (RETURN F))) 
(PUT 'CONG 'PRIFN 'PASF_PRICONG) 
(PUT 'PASF_PRICONG 'NUMBER-OF-ARGS 1) 
(DE PASF_PRICONG (L)
    (COND ((NULL *NAT) 'FAILED) (*UTF8 (PASF_PRICONGUTF8 L))
          (T
           (PROGN
            (MAPRIN (CADR L))
            (PRIN2* " ~")
            (MAPRIN (CADDDR L))
            (PRIN2* "~ ")
            (MAPRIN (CADDR L)))))) 
(PUT 'PASF_PRICONGUTF8 'NUMBER-OF-ARGS 1) 
(DE PASF_PRICONGUTF8 (L)
    (COND
     ((NUMBERP (CADDDR L))
      (PROGN
       (MAPRIN (CADR L))
       (PRIN2* " ")
       (PRIN2*
        (INTERN (COMPRESS (NCONC (EXPLODE (CAR L)) (EXPLODE (CADDDR L))))))
       (PRIN2* " ")
       (MAPRIN (CADDR L))))
     (T
      (PROGN
       (MAPRIN (CADR L))
       (PRIN2* " ")
       (PRIN2* (CAR L))
       (PRIN2* " ")
       (MAPRIN (CADDR L))
       (PRIN2* " mod ")
       (MAPRIN (CADDDR L)))))) 
(PUT 'NCONG 'PRIFN 'PASF_PRINCONG) 
(PUT 'PASF_PRINCONG 'NUMBER-OF-ARGS 1) 
(DE PASF_PRINCONG (L)
    (COND ((NULL *NAT) 'FAILED) (*UTF8 (PASF_PRICONGUTF8 L))
          (T
           (PROGN
            (MAPRIN (CADR L))
            (PRIN2* " #")
            (MAPRIN (CADDDR L))
            (PRIN2* "# ")
            (MAPRIN (CADDR L)))))) 
(COND
 ((OR (RL_TEXMACSP) (MEMQ 'CSL LISPSYSTEM*))
  (PROGN
   (PUT 'BEX 'FANCY-FUNCTIONSYMBOL "\\bigsqcup ")
   (PUT 'BALL 'FANCY-FUNCTIONSYMBOL "\\bigsqcap ")))) 
(PUT 'PASF 'RL_FANCY-PRIBQ 'PASF_FANCY-PRIBQ) 
(SWITCH (LIST 'RLPRIBQLIMITS)) 
(OFF1 'RLPRIBQLIMITS) 
(PUT 'PASF_FANCY-PRIBQ 'NUMBER-OF-ARGS 1) 
(DE PASF_FANCY-PRIBQ (QF)
    (COND
     ((RL_TEXMACSP)
      (COND (*RLPRIBQLIMITS (PASF_FANCY-PRIBQ-TEXMACS-LIMITS QF))
            (T (PASF_FANCY-PRIBQ-TEXMACS-CLASSIC QF))))
     (T (PASF_FANCY-PRIBQ-FM QF)))) 
(PUT 'PASF_FANCY-PRIBQ-FM 'NUMBER-OF-ARGS 1) 
(DE PASF_FANCY-PRIBQ-FM (QF)
    (PROG (V W)
      (SETQ V (MKVECT 0))
      (COND ((NULL *NAT) (RETURN 'FAILED)))
      (SETQ W (FANCY-PREFIX-OPERATOR (CAR QF)))
      (COND
       ((EQ W 'FAILED)
        (PROGN (FANCY-TERPRI* T) (FANCY-PREFIX-OPERATOR (CAR QF)))))
      (FANCY-PRIN2 " ")
      (SETQ W (FANCY-MAPRINT-ATOM (CADR QF) 0))
      (COND
       ((EQ W 'FAILED)
        (PROGN (FANCY-TERPRI* T) (FANCY-MAPRINT-ATOM (CADR QF) 0))))
      (FANCY-PRIN2 " ")
      (COND (*RLPRIBQSM (PUTV V 0 (PASF_BOUNDSM (CADDR QF) (CADR QF))))
            (T (PUTV V 0 (CADDR QF))))
      (SETQ W (FANCY-MAPRINT-ATOM V 0))
      (COND
       ((EQ W 'FAILED) (PROGN (FANCY-TERPRI* T) (FANCY-MAPRINT-ATOM V 0))))
      (FANCY-PRIN2 " ")
      (SETQ W
              (FANCY-IN-BRACKETS (LIST 'FANCY-MAPRINT (MKQUOTE (CADDDR QF)) 0)
               '|(| '|)|))
      (COND
       ((EQ W 'FAILED)
        (PROGN
         (FANCY-TERPRI* T)
         (FANCY-IN-BRACKETS (LIST 'FANCY-MAPRINT (MKQUOTE (CADDDR QF)) 0) '|(|
          '|)|)))))) 
(PUT 'PASF_FANCY-PRIBQ-TEXMACS-CLASSIC 'NUMBER-OF-ARGS 1) 
(DE PASF_FANCY-PRIBQ-TEXMACS-CLASSIC (QF)
    (PROG ()
      (COND ((NULL *NAT) (RETURN 'FAILED)))
      (FANCY-PREFIX-OPERATOR (CAR QF))
      (FANCY-PRIN2 " ")
      (FANCY-PRIN2 (CADR QF))
      (FANCY-PRIN2 " [")
      (COND (*RLPRIBQSM (FANCY-MAPRINT (PASF_BOUNDSM (CADDR QF) (CADR QF)) 0))
            (T (FANCY-MAPRINT (CADDR QF) 0)))
      (FANCY-PRIN2 "] ")
      (FANCY-PRIN2 "(")
      (FANCY-MAPRINT (CADDDR QF) 0)
      (FANCY-PRIN2 ")"))) 
(PUT 'PASF_FANCY-PRIBQ-TEXMACS-LIMITS 'NUMBER-OF-ARGS 1) 
(DE PASF_FANCY-PRIBQ-TEXMACS-LIMITS (QF)
    (PROG ()
      (COND ((NULL *NAT) (RETURN 'FAILED)))
      (FANCY-PREFIX-OPERATOR (CAR QF))
      (FANCY-PRIN2-UNDERSCORE)
      (FANCY-PRIN2 "{")
      (PASF_FANCY-PRIB (CADDR QF) (CADR QF))
      (FANCY-PRIN2 "}")
      (FANCY-PRIN2 "(")
      (FANCY-MAPRINT (CADDDR QF) 0)
      (FANCY-PRIN2 ")"))) 
(PUT 'FANCY-PRIN2-UNDERSCORE 'NUMBER-OF-ARGS 0) 
(DE FANCY-PRIN2-UNDERSCORE NIL
    (PROGN
     (SETQ FANCY-LINE* (CONS '_ FANCY-LINE*))
     (SETQ FANCY-POS* (IPLUS2 FANCY-POS* 1))
     (COND
      ((IGREATERP FANCY-POS* (ITIMES2 2 (IPLUS2 (LINELENGTH NIL) 1)))
       (SETQ OVERFLOWED* T)))
     NIL)) 
(PUT 'PASF_FANCY-PRIB 'NUMBER-OF-ARGS 2) 
(DE PASF_FANCY-PRIB (F V)
    (PROGN
     (FANCY-PRIN2 V)
     (FANCY-PRIN2 ":")
     (FANCY-PRIN2 " ")
     (COND (*RLPRIBQSM (FANCY-MAPRINT (PASF_BOUNDSM F V) 0))
           (T (FANCY-MAPRINT (CADDR F) 0)))
     NIL)) 
(COND
 ((OR (RL_TEXMACSP) (MEMQ 'CSL LISPSYSTEM*))
  (PROGN
   (PUT 'NEQ 'FANCY-INFIX-SYMBOL "\\,\\neq\\, ")
   (PUT 'LEQ 'FANCY-INFIX-SYMBOL "\\,\\leq\\, ")
   (PUT 'GEQ 'FANCY-INFIX-SYMBOL "\\,\\geq\\, ")
   (PUT 'LESSP 'FANCY-INFIX-SYMBOL "\\,<\\, ")
   (PUT 'GREATERP 'FANCY-INFIX-SYMBOL "\\,>\\, ")))) 
(PUT 'CONG 'FANCY-PRIFN 'PASF_FANCY-PRICONG) 
(PUT 'NCONG 'FANCY-PRIFN 'PASF_FANCY-PRICONG) 
(PUT 'PASF_FANCY-PRICONG 'NUMBER-OF-ARGS 1) 
(DE PASF_FANCY-PRICONG (L)
    (COND
     ((OR (RL_TEXMACSP) (MEMQ 'CSL LISPSYSTEM*))
      (PASF_FANCY-PRICONG-TEXMACS L))
     (T (PASF_FANCY-PRICONG-FM L)))) 
(PUT 'PASF_FANCY-PRICONG-TEXMACS 'NUMBER-OF-ARGS 1) 
(DE PASF_FANCY-PRICONG-TEXMACS (L)
    (COND ((NULL *NAT) 'FAILED)
          (T
           (PROGN
            (MAPRIN (CADR L))
            (COND ((EQ (CAR L) 'CONG) (FANCY-PRIN2 "\\,\\equiv"))
                  (T (FANCY-PRIN2 "\\,\\not\\equiv")))
            (FANCY-PRIN2-UNDERSCORE)
            (FANCY-PRIN2 "{")
            (MAPRIN (CADDDR L))
            (FANCY-PRIN2 "}\\,")
            (MAPRIN (CADDR L))
            NIL)))) 
(PUT 'PASF_FANCY-PRICONG-FM 'NUMBER-OF-ARGS 1) 
(DE PASF_FANCY-PRICONG-FM (L)
    (COND ((NULL *NAT) 'FAILED)
          (T
           (PROGN
            (MAPRIN (CADR L))
            (COND ((EQ (CAR L) 'CONG) (FANCY-SPECIAL-SYMBOL 186 2))
                  (T (FANCY-SPECIAL-SYMBOL 187 2)))
            (MAPRIN (CADDR L))
            (FANCY-PRIN2 " (")
            (MAPRIN (CADDDR L))
            (FANCY-PRIN2 ")"))))) 
(ENDMODULE) 