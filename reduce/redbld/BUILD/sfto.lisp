(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'SFTO)) 
(REVISION 'SFTO "$Id: sfto.red 6030 2021-09-16 14:01:45Z thomas-sturm $") 
(COPYRIGHT 'SFTO "(c) 1995-2009 A. Dolzmann, T. Sturm, 2010-2017 T. Sturm") 
(FLUID '(*EZGCD *GCD *RLDAVGCD *RATIONAL)) 
(FLUID '(SFTO_FCTRFLIMIT*)) 
(SETQ SFTO_FCTRFLIMIT* 3) 
(SWITCH (LIST 'SFTO_YUN 'SFTO_TOBEY 'SFTO_MUSSER)) 
(SETQ *SFTO_YUN T) 
(PUT 'SQFPART 'POLYFN 'SFTO_SQFPARTF) 
(PUT 'DPRPART 'POLYFN 'SFTO_DPRPARTF) 
(PUT 'TSQSUM 'PSOPFN 'SFTO_TSQSUM$) 
(PUT 'SQFDEC 'PSOPFN 'SFTO_SQFDEC$) 
(PUT 'PDEC 'PSOPFN 'SFTO_PDEC$) 
(PUT 'SFTO_YUN 'SIMPFG '((T (SETQ *SFTO_TOBEY NIL) (SETQ *SFTO_MUSSER NIL)))) 
(PUT 'SFTO_TOBEY 'SIMPFG '((T (SETQ *SFTO_YUN NIL) (SETQ *SFTO_MUSSER NIL)))) 
(PUT 'SFTO_MUSSER 'SIMPFG '((T (SETQ *SFTO_TOBEY NIL) (SETQ *SFTO_YUN NIL)))) 
(FLAG '(EXTEUC) 'OPFN) 
(FLAG '(DEGREE) 'OPFN) 
(FLAG '(COEFFICIENTS) 'OPFN) 
(PUT 'AMLIST 'ASSERT_DYNTYPECHK 'AM_LISTP) 
(FLAG '(AMLIST) 'ASSERT_DYNTYPE) 
(PUT 'AMPOLY 'ASSERT_DYNTYPECHK 'AM_POLYP) 
(FLAG '(AMPOLY) 'ASSERT_DYNTYPE) 
(PUT 'AM_LISTP 'NUMBER-OF-ARGS 1) 
(PUT 'AM_LISTP 'DEFINED-ON-LINE '57) 
(PUT 'AM_LISTP 'DEFINED-IN-FILE 'REDLOG/RLTOOLS/SFTO.RED) 
(PUT 'AM_LISTP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE AM_LISTP (X) T) 
(PUT 'AM_POLYP 'NUMBER-OF-ARGS 1) 
(PUT 'AM_POLYP 'DEFINED-ON-LINE '60) 
(PUT 'AM_POLYP 'DEFINED-IN-FILE 'REDLOG/RLTOOLS/SFTO.RED) 
(PUT 'AM_POLYP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE AM_POLYP (X) T) 
(PUT 'SFTO_LCMN 'NUMBER-OF-ARGS 2) 
(DE SFTO_LCMN (A B)
    (COND ((EQN A 1) B) ((EQN B 1) A) (T (TIMES A (QUOTIENT B (GCDN A B)))))) 
(PUT 'SFTO_DCONTENTF 'NUMBER-OF-ARGS 1) 
(DE SFTO_DCONTENTF (U) (SFTO_DCONTENTF1 U NIL)) 
(PUT 'SFTO_DCONTENTF1 'NUMBER-OF-ARGS 2) 
(DE SFTO_DCONTENTF1 (U G)
    (COND ((EQUAL G 1) G) ((OR (ATOM U) (ATOM (CAR U))) (SFTO_GCDF (ABSF U) G))
          (T (SFTO_DCONTENTF1 (CDR U) (SFTO_DCONTENTF1 (CDAR U) G))))) 
(PUT 'SFTO_DPRPARTF 'NUMBER-OF-ARGS 1) 
(DE SFTO_DPRPARTF (U) (SFTO_DPRPARTF1 U (SFTO_DCONTENTF U))) 
(PUT 'SFTO_DPRPARTKSF 'NUMBER-OF-ARGS 1) 
(DE SFTO_DPRPARTKSF (U) ((LAMBDA (*EXP) (QUOTF1 U (SFTO_DCONTENTF U))) T)) 
(PUT 'SFTO_DPRPARTF1 'NUMBER-OF-ARGS 2) 
(DE SFTO_DPRPARTF1 (U C)
    ((LAMBDA (W) (COND ((MINUSF W) (NEGF W)) (T W)))
     ((LAMBDA (*EXP) (QUOTF1 U C)) T))) 
(PUT 'SFTO_SQFPARTF 'NUMBER-OF-ARGS 1) 
(DE SFTO_SQFPARTF (U)
    (PROG (C PP)
      (COND ((OR (ATOM U) (ATOM (CAR U))) (RETURN 1)))
      (SETQ C (SFTO_UCONTENTF U))
      (SETQ PP ((LAMBDA (*EXP) (QUOTF1 U C)) T))
      (RETURN
       ((LAMBDA (G144 G145)
          (COND (*PHYSOP-LOADED (PHYSOP-MULTF G144 G145))
                (T (POLY-MULTF G144 G145))))
        (SFTO_SQFPARTF C)
        ((LAMBDA (*EXP) (QUOTF1 PP (SFTO_GCDF* PP (DIFF PP (CAAAR U))))) T))))) 
(PUT 'SFTO_UCONTENTF 'NUMBER-OF-ARGS 1) 
(DE SFTO_UCONTENTF (U)
    (COND ((OR (ATOM U) (ATOM (CAR U))) U) (T (SFTO_UCONTENTF1 U (CAAAR U))))) 
(PUT 'SFTO_UCONTENTF1 'NUMBER-OF-ARGS 2) 
(DE SFTO_UCONTENTF1 (U V)
    (COND ((OR (OR (ATOM U) (ATOM (CAR U))) (NEQ (CAAAR U) V)) U)
          (T (SFTO_GCDF* (CDAR U) (SFTO_UCONTENTF1 (CDR U) V))))) 
(PUT 'SFTO_UPRPARTF 'NUMBER-OF-ARGS 1) 
(DE SFTO_UPRPARTF (U) ((LAMBDA (*EXP) (QUOTF1 U (SFTO_UCONTENTF U))) T)) 
(PUT 'SFTO_TSQSUMF 'NUMBER-OF-ARGS 1) 
(DE SFTO_TSQSUMF (U)
    (COND
     ((OR (ATOM U) (ATOM (CAR U)))
      (COND ((NULL U) 'TSQ) ((NOT (MINUSF U)) 'STSQ)))
     (T
      (AND (EVENP (CDAAR U)) (SFTO_TSQSUMF (CDAR U)) (SFTO_TSQSUMF (CDR U)))))) 
(PUT 'SFTO_TSQSUM$ 'NUMBER-OF-ARGS 1) 
(DE SFTO_TSQSUM$ (ARGL) (SFTO_TSQSUMF (CAR (SIMP (CAR ARGL))))) 
(PUT 'SFTO_SQFDECF 'NUMBER-OF-ARGS 1) 
(DE SFTO_SQFDECF (U)
    (PROG (C PP)
      (COND ((OR (ATOM U) (ATOM (CAR U))) (RETURN (LIST (CONS 1 1)))))
      (SETQ C (SFTO_UCONTENTF U))
      (SETQ PP ((LAMBDA (*EXP) (QUOTF1 U C)) T))
      (RETURN (SFTO_SQDMERGE (SFTO_SQFDECF C) (SFTO_USQFDECF PP))))) 
(PUT 'SFTO_SQFDEC$ 'NUMBER-OF-ARGS 1) 
(DE SFTO_SQFDEC$ (ARGL)
    (PROG (W)
      (RETURN
       (CONS 'LIST
             (PROG (X FORALL-RESULT FORALL-ENDPTR)
               (SETQ X (SFTO_SQFDECF (CAR (SIMP (CAR ARGL)))))
              STARTOVER
               (COND ((NULL X) (RETURN NIL)))
               (SETQ FORALL-RESULT
                       ((LAMBDA (X)
                          (COND
                           ((NEQ (SETQ W (PREPF (CAR X))) 1)
                            (LIST (LIST 'LIST W (CDR X))))))
                        (CAR X)))
               (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
               (SETQ X (CDR X))
               (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
              LOOPLABEL
               (COND ((NULL X) (RETURN FORALL-RESULT)))
               (RPLACD FORALL-ENDPTR
                       ((LAMBDA (X)
                          (COND
                           ((NEQ (SETQ W (PREPF (CAR X))) 1)
                            (LIST (LIST 'LIST W (CDR X))))))
                        (CAR X)))
               (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
               (SETQ X (CDR X))
               (GO LOOPLABEL)))))) 
(PUT 'SFTO_USQFDECF 'NUMBER-OF-ARGS 1) 
(DE SFTO_USQFDECF (U)
    (COND (*SFTO_YUN (SFTO_YUN-USQFDECF U))
          (*SFTO_MUSSER (SFTO_MUSSER-USQFDECF U))
          (*SFTO_TOBEY (SFTO_TOBEY-USQFDECF U))
          (T (REDERR (LIST "sfto_usqfdecf: select a decomposition method"))))) 
(PUT 'SFTO_YUN-USQFDECF 'NUMBER-OF-ARGS 1) 
(DE SFTO_YUN-USQFDECF (P)
    (PROG (*GCD X G C D W L N)
      (SETQ N 0)
      (SETQ *GCD T)
      (SETQ X (CAAAR P))
      (SETQ G (SFTO_GCDF P (SETQ W (DIFF P X))))
      (SETQ C ((LAMBDA (*EXP) (QUOTF1 P G)) T))
      (SETQ D (ADDF ((LAMBDA (*EXP) (QUOTF1 W G)) T) (NEGF (DIFF C X))))
      (PROG ()
       REPEATLABEL
        (PROGN
         (SETQ P (SFTO_GCDF C D))
         (SETQ L (CONS (CONS P (SETQ N (PLUS N 1))) L))
         (SETQ C ((LAMBDA (*EXP) (QUOTF1 C P)) T))
         (SETQ D (ADDF ((LAMBDA (*EXP) (QUOTF1 D P)) T) (NEGF (DIFF C X)))))
        (COND ((NOT (OR (ATOM C) (ATOM (CAR C)))) (GO REPEATLABEL))))
      (RETURN (REVERSIP L)))) 
(PUT 'SFTO_MUSSER-USQFDECF 'NUMBER-OF-ARGS 1) 
(DE SFTO_MUSSER-USQFDECF (U)
    (PROG (*GCD V U1 SQFP SQFP1 L N)
      (SETQ N 0)
      (SETQ *GCD T)
      (SETQ V (CAAAR U))
      (SETQ U1 (SFTO_GCDF U (DIFF U V)))
      (SETQ SQFP ((LAMBDA (*EXP) (QUOTF1 U U1)) T))
      (PROG ()
       WHILELABEL
        (COND ((NOT (GREATERP (DEGR U1 V) 0)) (RETURN NIL)))
        (PROGN
         (SETQ SQFP1 (SFTO_GCDF SQFP U1))
         (SETQ L
                 (CONS
                  (CONS ((LAMBDA (*EXP) (QUOTF1 SQFP SQFP1)) T)
                        (SETQ N (PLUS N 1)))
                  L))
         (SETQ U1 ((LAMBDA (*EXP) (QUOTF1 U1 SQFP1)) T))
         (SETQ SQFP SQFP1))
        (GO WHILELABEL))
      (SETQ L (CONS (CONS SQFP (SETQ N (PLUS N 1))) L))
      (RETURN (REVERSIP L)))) 
(PUT 'SFTO_TOBEY-USQFDECF 'NUMBER-OF-ARGS 1) 
(DE SFTO_TOBEY-USQFDECF (U)
    (PROG (*GCD V H Q1 Q2 L N)
      (SETQ N 0)
      (SETQ *GCD T)
      (SETQ V (CAAAR U))
      (SETQ H (SFTO_GCDF U (DIFF U V)))
      (SETQ Q2 ((LAMBDA (*EXP) (QUOTF1 U H)) T))
      (PROG ()
       WHILELABEL
        (COND ((NOT (GREATERP (DEGR U V) 0)) (RETURN NIL)))
        (PROGN
         (SETQ U H)
         (SETQ Q1 Q2)
         (SETQ H (SFTO_GCDF U (DIFF U V)))
         (SETQ Q2 ((LAMBDA (*EXP) (QUOTF1 U H)) T))
         (SETQ L
                 (CONS
                  (CONS ((LAMBDA (*EXP) (QUOTF1 Q1 Q2)) T) (SETQ N (PLUS N 1)))
                  L)))
        (GO WHILELABEL))
      (RETURN (REVERSIP L)))) 
(PUT 'SFTO_SQDMERGE 'NUMBER-OF-ARGS 2) 
(DE SFTO_SQDMERGE (L1 L2)
    (PROG (L)
      (SETQ L L1)
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND L1 L2)) (RETURN NIL)))
        (PROGN
         (SETCAR (CAR L1)
                 (COND (*PHYSOP-LOADED (PHYSOP-MULTF (CAAR L1) (CAAR L2)))
                       (T (POLY-MULTF (CAAR L1) (CAAR L2)))))
         (SETQ L1 (CDR L1))
         (SETQ L2 (CDR L2)))
        (GO WHILELABEL))
      (COND (L2 (SETQ L (NCONC L L2))))
      (RETURN L))) 
(PUT 'SFTO_PDECF 'NUMBER-OF-ARGS 1) 
(DE SFTO_PDECF (U)
    (PROG (C DPDC DPDPP)
      (COND ((OR (ATOM U) (ATOM (CAR U))) (RETURN (CONS 1 1))))
      (SETQ C (SFTO_UCONTENTF U))
      (SETQ DPDC (SFTO_PDECF C))
      (SETQ DPDPP (SFTO_UPDECF ((LAMBDA (*EXP) (QUOTF1 U C)) T)))
      (RETURN
       (CONS
        (COND (*PHYSOP-LOADED (PHYSOP-MULTF (CAR DPDC) (CAR DPDPP)))
              (T (POLY-MULTF (CAR DPDC) (CAR DPDPP))))
        (COND (*PHYSOP-LOADED (PHYSOP-MULTF (CDR DPDC) (CDR DPDPP)))
              (T (POLY-MULTF (CDR DPDC) (CDR DPDPP)))))))) 
(PUT 'SFTO_UPDECF 'NUMBER-OF-ARGS 1) 
(DE SFTO_UPDECF (U)
    (COND (*SFTO_YUN (SFTO_YUN-UPDECF U)) (*SFTO_MUSSER (SFTO_MUSSER-UPDECF U))
          (T (REDERR (LIST "sfto_updecf: select a decomposition method"))))) 
(PUT 'SFTO_YUN-UPDECF 'NUMBER-OF-ARGS 1) 
(DE SFTO_YUN-UPDECF (P)
    (PROG (*GCD X G C D W L OD)
      (SETQ *GCD T)
      (SETQ L (CONS 1 1))
      (SETQ X (CAAAR P))
      (SETQ G (SFTO_GCDF P (SETQ W (DIFF P X))))
      (SETQ C ((LAMBDA (*EXP) (QUOTF1 P G)) T))
      (SETQ D (ADDF ((LAMBDA (*EXP) (QUOTF1 W G)) T) (NEGF (DIFF C X))))
      (PROG ()
       REPEATLABEL
        (PROGN
         (SETQ OD (NOT OD))
         (SETQ P (SFTO_GCDF C D))
         (COND
          (OD
           (SETCAR L
                   (COND (*PHYSOP-LOADED (PHYSOP-MULTF (CAR L) P))
                         (T (POLY-MULTF (CAR L) P)))))
          (T
           (SETCDR L
                   (COND (*PHYSOP-LOADED (PHYSOP-MULTF (CDR L) P))
                         (T (POLY-MULTF (CDR L) P))))))
         (SETQ C ((LAMBDA (*EXP) (QUOTF1 C P)) T))
         (SETQ D (ADDF ((LAMBDA (*EXP) (QUOTF1 D P)) T) (NEGF (DIFF C X)))))
        (COND ((NOT (OR (ATOM C) (ATOM (CAR C)))) (GO REPEATLABEL))))
      (RETURN L))) 
(PUT 'SFTO_MUSSER-UPDECF 'NUMBER-OF-ARGS 1) 
(DE SFTO_MUSSER-UPDECF (U)
    (PROG (*GCD OD V U1 SQFP SQFP1 L)
      (SETQ *GCD T)
      (SETQ OD T)
      (SETQ L (CONS 1 1))
      (SETQ V (CAAAR U))
      (SETQ U1 (SFTO_GCDF U (DIFF U V)))
      (SETQ SQFP ((LAMBDA (*EXP) (QUOTF1 U U1)) T))
      (PROG ()
       WHILELABEL
        (COND ((NOT (GREATERP (DEGR U1 V) 0)) (RETURN NIL)))
        (PROGN
         (SETQ SQFP1 (SFTO_GCDF SQFP U1))
         (COND
          (OD
           (SETCAR L
                   ((LAMBDA (G149)
                      (COND (*PHYSOP-LOADED (PHYSOP-MULTF (CAR L) G149))
                            (T (POLY-MULTF (CAR L) G149))))
                    ((LAMBDA (*EXP) (QUOTF1 SQFP SQFP1)) T))))
          (T
           (SETCDR L
                   ((LAMBDA (G153)
                      (COND (*PHYSOP-LOADED (PHYSOP-MULTF (CDR L) G153))
                            (T (POLY-MULTF (CDR L) G153))))
                    ((LAMBDA (*EXP) (QUOTF1 SQFP SQFP1)) T)))))
         (SETQ U1 ((LAMBDA (*EXP) (QUOTF1 U1 SQFP1)) T))
         (SETQ SQFP SQFP1)
         (SETQ OD (NOT OD)))
        (GO WHILELABEL))
      (COND
       (OD
        (SETCAR L
                (COND (*PHYSOP-LOADED (PHYSOP-MULTF (CAR L) SQFP))
                      (T (POLY-MULTF (CAR L) SQFP)))))
       (T
        (SETCDR L
                (COND (*PHYSOP-LOADED (PHYSOP-MULTF (CDR L) SQFP))
                      (T (POLY-MULTF (CDR L) SQFP))))))
      (RETURN L))) 
(PUT 'SFTO_PDEC$ 'NUMBER-OF-ARGS 1) 
(DE SFTO_PDEC$ (ARGL)
    ((LAMBDA (W) (LIST 'LIST (PREPF (CAR W)) (PREPF (CDR W))))
     (SFTO_PDECF (CAR (SIMP (CAR ARGL)))))) 
(PUT 'SFTO_DGCDF 'NUMBER-OF-ARGS 2) 
(DE SFTO_DGCDF (F X)
    (PROG (OO G)
      (SETQ G 0)
      (COND ((OR (ATOM F) (ATOM (CAR F))) (RETURN 0)))
      (SETQ OO (SETKORDER (LIST X)))
      (SETQ F (REORDER F))
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND (SFTO_MVARTEST F X) (NOT (EQN G 1)))) (RETURN NIL)))
        (PROGN (SETQ G (GCDN G (CDAAR F))) (SETQ F (CDR F)))
        (GO WHILELABEL))
      (SETKORDER OO)
      (RETURN G))) 
(PUT 'SFTO_DECDEGF 'NUMBER-OF-ARGS 3) 
(DE SFTO_DECDEGF (U K N)
    (PROG (SAL HIT NEWKK)
      (COND
       (*RLBRKCXK
        (PROGN
         (PROG (KK)
           (SETQ KK (KERNELS U))
          LAB
           (COND ((NULL KK) (RETURN NIL)))
           ((LAMBDA (KK)
              (COND
               ((PAIRP KK)
                (PROGN
                 (PROG (G154)
                   (SETQ G154 (SFTO_DECDEGCXK KK K N NIL))
                   (SETQ HIT (CAR G154))
                   (SETQ NEWKK (CDR G154))
                   (RETURN G154))
                 (COND (HIT (SETQ SAL (CONS (CONS KK NEWKK) SAL))))))))
            (CAR KK))
           (SETQ KK (CDR KK))
           (GO LAB))
         (SETQ U (CAR (SUBF U SAL))))))
      (SETQ U (REORDER (SFTO_DECDEGF1 (SFTO_REORDER U K) K N)))
      (RETURN U))) 
(PUT 'SFTO_DECDEGCXK 'NUMBER-OF-ARGS 4) 
(DE SFTO_DECDEGCXK (KK K N HIT)
    (PROG (W ARGL)
      (COND ((NOT (PAIRP KK)) (RETURN (CONS HIT KK))))
      (COND
       ((AND (EQ (CAR KK) 'EXPT) (EQ (CADR KK) K))
        (RETURN (CONS T (LIST 'EXPT K (QUOTIENT (CADDR KK) N))))))
      (PROG (ARG)
        (SETQ ARG (CDR KK))
       LAB
        (COND ((NULL ARG) (RETURN NIL)))
        ((LAMBDA (ARG)
           (PROGN
            (PROG (G155)
              (SETQ G155 (SFTO_DECDEGCXK ARG K N HIT))
              (SETQ HIT (CAR G155))
              (SETQ W (CDR G155))
              (RETURN G155))
            (SETQ ARGL (CONS W ARGL))))
         (CAR ARG))
        (SETQ ARG (CDR ARG))
        (GO LAB))
      (RETURN (CONS HIT (CONS (CAR KK) (REVERSIP ARGL)))))) 
(PUT 'SFTO_DECDEGF1 'NUMBER-OF-ARGS 3) 
(DE SFTO_DECDEGF1 (U K N)
    (COND ((EQUAL (DEGR U K) 0) U)
          (T
           (CONS (CONS (CONS (CAAAR U) (QUOTIENT (CDAAR U) N)) (CDAR U))
                 (SFTO_DECDEGF1 (CDR U) K N))))) 
(PUT 'SFTO_REORDER 'NUMBER-OF-ARGS 2) 
(DE SFTO_REORDER (U V)
    (PROG (W)
      (SETQ W (SETKORDER (LIST V)))
      (SETQ U (REORDER U))
      (SETKORDER W)
      (RETURN U))) 
(PUT 'SFTO_LREORDER 'NUMBER-OF-ARGS 2) 
(DE SFTO_LREORDER (U VL)
    (PROG (W)
      (SETQ W (SETKORDER VL))
      (SETQ U (REORDER U))
      (SETKORDER W)
      (RETURN U))) 
(PUT 'SFTO_GROEBNERF 'NUMBER-OF-ARGS 1) 
(DE SFTO_GROEBNERF (L)
    (PROG (W)
      (COND ((NULL L) (RETURN NIL)))
      (SETQ W
              (GROEBNEREVAL
               (LIST
                (CONS 'LIST
                      (PROG (SF FORALL-RESULT FORALL-ENDPTR)
                        (SETQ SF L)
                        (COND ((NULL SF) (RETURN NIL)))
                        (SETQ FORALL-RESULT
                                (SETQ FORALL-ENDPTR
                                        (CONS
                                         ((LAMBDA (SF) (PREPF SF)) (CAR SF))
                                         NIL)))
                       LOOPLABEL
                        (SETQ SF (CDR SF))
                        (COND ((NULL SF) (RETURN FORALL-RESULT)))
                        (RPLACD FORALL-ENDPTR
                                (CONS ((LAMBDA (SF) (PREPF SF)) (CAR SF)) NIL))
                        (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                        (GO LOOPLABEL))))))
      (RETURN
       (PROG (X FORALL-RESULT FORALL-ENDPTR)
         (SETQ X (CDR W))
         (COND ((NULL X) (RETURN NIL)))
         (SETQ FORALL-RESULT
                 (SETQ FORALL-ENDPTR
                         (CONS ((LAMBDA (X) (CAR (SIMP X))) (CAR X)) NIL)))
        LOOPLABEL
         (SETQ X (CDR X))
         (COND ((NULL X) (RETURN FORALL-RESULT)))
         (RPLACD FORALL-ENDPTR
                 (CONS ((LAMBDA (X) (CAR (SIMP X))) (CAR X)) NIL))
         (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
         (GO LOOPLABEL))))) 
(PUT 'SFTO_PREDUCEF 'NUMBER-OF-ARGS 2) 
(DE SFTO_PREDUCEF (F GL)
    (COND ((NULL GL) F)
          ((AND (NULL (CDR GL)) (OR (ATOM (CAR GL)) (ATOM (CAR (CAR GL)))))
           NIL)
          (T
           (CAR
            (SIMP
             (PREDUCEEVAL
              (LIST (PREPF F)
                    (CONS 'LIST
                          (PROG (SF FORALL-RESULT FORALL-ENDPTR)
                            (SETQ SF GL)
                            (COND ((NULL SF) (RETURN NIL)))
                            (SETQ FORALL-RESULT
                                    (SETQ FORALL-ENDPTR
                                            (CONS
                                             ((LAMBDA (SF) (PREPF SF))
                                              (CAR SF))
                                             NIL)))
                           LOOPLABEL
                            (SETQ SF (CDR SF))
                            (COND ((NULL SF) (RETURN FORALL-RESULT)))
                            (RPLACD FORALL-ENDPTR
                                    (CONS ((LAMBDA (SF) (PREPF SF)) (CAR SF))
                                          NIL))
                            (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                            (GO LOOPLABEL)))))))))) 
(PUT 'SFTO_GREDUCEF 'NUMBER-OF-ARGS 2) 
(DE SFTO_GREDUCEF (F GL)
    (COND ((NULL GL) F)
          ((AND (NULL (CDR GL)) (OR (ATOM (CAR GL)) (ATOM (CAR (CAR GL)))))
           NIL)
          (T
           (CAR
            (SIMP
             (GREDUCEEVAL
              (LIST (PREPF F)
                    (CONS 'LIST
                          (PROG (SF FORALL-RESULT FORALL-ENDPTR)
                            (SETQ SF GL)
                            (COND ((NULL SF) (RETURN NIL)))
                            (SETQ FORALL-RESULT
                                    (SETQ FORALL-ENDPTR
                                            (CONS
                                             ((LAMBDA (SF) (PREPF SF))
                                              (CAR SF))
                                             NIL)))
                           LOOPLABEL
                            (SETQ SF (CDR SF))
                            (COND ((NULL SF) (RETURN FORALL-RESULT)))
                            (RPLACD FORALL-ENDPTR
                                    (CONS ((LAMBDA (SF) (PREPF SF)) (CAR SF))
                                          NIL))
                            (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                            (GO LOOPLABEL)))))))))) 
(PUT 'SFTO_GCDF* 'NUMBER-OF-ARGS 2) 
(DE SFTO_GCDF* (F G) ((LAMBDA (*GCD) (SFTO_GCDF F G)) T)) 
(PUT 'SFTO_GCDF 'NUMBER-OF-ARGS 2) 
(DE SFTO_GCDF (F G)
    (COND ((NULL *RLDAVGCD) (GCDF F G))
          ((OR (SFTO_DAVP F NIL) (SFTO_DAVP G NIL))
           ((LAMBDA (*EZGCD) (GCDF F G)) NIL))
          (T (EZGCDF F G)))) 
(PUT 'SFTO_DAVP 'NUMBER-OF-ARGS 2) 
(DE SFTO_DAVP (F BADV)
    (COND ((OR (ATOM F) (ATOM (CAR F))) T)
          ((GREATERP (CDAAR F) 2)
           (COND ((AND BADV (NEQ (CAAAR F) BADV)) NIL)
                 (T
                  (AND (SFTO_DAVP (CDAR F) (CAAAR F))
                       (SFTO_DAVP (CDR F) (CAAAR F))))))
          (T (AND (SFTO_DAVP (CDAR F) BADV) (SFTO_DAVP (CDR F) BADV))))) 
(PUT 'SFTO_SQRTF 'NUMBER-OF-ARGS 1) 
(DE SFTO_SQRTF (F)
    (PROG (A C W SD RESULT)
      (SETQ C (SFTO_DCONTENTF F))
      (SETQ RESULT (ISQRT C))
      (COND ((NEQ (EXPT RESULT 2) C) (RETURN NIL)))
      (SETQ SD (SFTO_SQFDECF F))
      (SETQ W SD)
      (PROG ()
       WHILELABEL
        (COND ((NOT SD) (RETURN NIL)))
        (PROGN
         (SETQ A (CAR SD))
         (SETQ SD (CDR SD))
         (COND
          ((AND (NOT (EVENP (CDR A))) (NEQ (CAR A) 1))
           (PROGN (SETQ SD NIL) (SETQ A 'BREAK)))
          (T
           (SETQ RESULT
                   ((LAMBDA (G157)
                      (COND (*PHYSOP-LOADED (PHYSOP-MULTF RESULT G157))
                            (T (POLY-MULTF RESULT G157))))
                    (EXPTF (CAR A) (QUOTIENT (CDR A) 2)))))))
        (GO WHILELABEL))
      (COND ((AND (NEQ A 'BREAK) (EQUAL (EXPTF RESULT 2) F)) (RETURN RESULT))))) 
(PUT 'SFTO_MONFP 'NUMBER-OF-ARGS 1) 
(DE SFTO_MONFP (SF)
    (OR (OR (ATOM SF) (ATOM (CAR SF)))
        (AND (NULL (CDR SF)) (SFTO_MONFP (CDAR SF))))) 
(PUT 'SFTO_SQFPARTZ 'NUMBER-OF-ARGS 1) 
(DE SFTO_SQFPARTZ (Z) (SFTO_ZDGEN Z 0)) 
(PUT 'SFTO_ZDEQN 'NUMBER-OF-ARGS 2) 
(DE SFTO_ZDEQN (Z N)
    (PROG (X FORALL-RESULT)
      (SETQ X (ZFACTOR Z))
      (SETQ FORALL-RESULT 1)
     LAB1
      (COND ((NULL X) (RETURN FORALL-RESULT)))
      (SETQ FORALL-RESULT
              (TIMES
               ((LAMBDA (X) (COND ((EQUAL (CDR X) N) (CAR X)) (T 1))) (CAR X))
               FORALL-RESULT))
      (SETQ X (CDR X))
      (GO LAB1))) 
(PUT 'SFTO_ZDGTN 'NUMBER-OF-ARGS 2) 
(DE SFTO_ZDGTN (Z N)
    (PROG (X FORALL-RESULT)
      (SETQ X (ZFACTOR Z))
      (SETQ FORALL-RESULT 1)
     LAB1
      (COND ((NULL X) (RETURN FORALL-RESULT)))
      (SETQ FORALL-RESULT
              (TIMES
               ((LAMBDA (X) (COND ((GREATERP (CDR X) N) (CAR X)) (T 1)))
                (CAR X))
               FORALL-RESULT))
      (SETQ X (CDR X))
      (GO LAB1))) 
(PUT 'SFTO_ZDGEN 'NUMBER-OF-ARGS 2) 
(DE SFTO_ZDGEN (Z N)
    (PROG (X FORALL-RESULT)
      (SETQ X (ZFACTOR Z))
      (SETQ FORALL-RESULT 1)
     LAB1
      (COND ((NULL X) (RETURN FORALL-RESULT)))
      (SETQ FORALL-RESULT
              (TIMES
               ((LAMBDA (X) (COND ((GEQ (CDR X) N) (CAR X)) (T 1))) (CAR X))
               FORALL-RESULT))
      (SETQ X (CDR X))
      (GO LAB1))) 
(PUT 'SFTO_EXTEUCF 'NUMBER-OF-ARGS 2) 
(DE SFTO_EXTEUCF (A B)
    (PROG (W S TT U V S1 T1 *RATIONAL)
      (ON1 'RATIONAL)
      (SETQ S (CAR (SIMP 1)))
      (SETQ TT (CAR (SIMP 0)))
      (SETQ U (CAR (SIMP 0)))
      (SETQ V (CAR (SIMP 1)))
      (PROG ()
       WHILELABEL
        (COND ((NOT (NOT (NULL B))) (RETURN NIL)))
        (PROGN
         (SETQ W (QREMF A B))
         (SETQ A B)
         (SETQ B (CDR W))
         (SETQ S1 S)
         (SETQ T1 TT)
         (SETQ S U)
         (SETQ TT V)
         (SETQ U
                 (ADDF S1
                       (NEGF
                        (COND (*PHYSOP-LOADED (PHYSOP-MULTF (CAR W) U))
                              (T (POLY-MULTF (CAR W) U))))))
         (SETQ V
                 (ADDF T1
                       (NEGF
                        (COND (*PHYSOP-LOADED (PHYSOP-MULTF (CAR W) V))
                              (T (POLY-MULTF (CAR W) V)))))))
        (GO WHILELABEL))
      (COND
       ((OR (ATOM A) (ATOM (CAR A)))
        (PROGN
         (SETQ S ((LAMBDA (*EXP) (QUOTF1 S A)) T))
         (SETQ TT ((LAMBDA (*EXP) (QUOTF1 TT A)) T))
         (SETQ A 1))))
      (OFF1 'RATIONAL)
      (RETURN
       (LIST (RESIMP (CONS A 1)) (RESIMP (CONS S 1)) (RESIMP (CONS TT 1)))))) 
(PUT 'EXTEUC 'NUMBER-OF-ARGS 2) 
(DE EXTEUC (A B)
    (PROG (AF BF KA KB)
      (SETQ AF (CAR (SIMP A)))
      (SETQ BF (CAR (SIMP B)))
      (COND
       ((AND (OR (ATOM AF) (ATOM (CAR AF))) (OR (ATOM BF) (ATOM (CAR BF))))
        (RETURN (CONS 'LIST (SFTO_EXTEUCD A B)))))
      (SETQ KA (KERNELS AF))
      (COND
       ((OR (AND KA (CDR KA)) (AND KB (CDR KB)))
        (REDERR "non-univariate input polynomial")))
      (RETURN
       (CONS 'LIST
             (PROG (X FORALL-RESULT FORALL-ENDPTR)
               (SETQ X (SFTO_EXTEUCF AF BF))
               (COND ((NULL X) (RETURN NIL)))
               (SETQ FORALL-RESULT
                       (SETQ FORALL-ENDPTR
                               (CONS ((LAMBDA (X) (PREPSQ X)) (CAR X)) NIL)))
              LOOPLABEL
               (SETQ X (CDR X))
               (COND ((NULL X) (RETURN FORALL-RESULT)))
               (RPLACD FORALL-ENDPTR
                       (CONS ((LAMBDA (X) (PREPSQ X)) (CAR X)) NIL))
               (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
               (GO LOOPLABEL)))))) 
(PUT 'SFTO_EXTEUCD 'NUMBER-OF-ARGS 2) 
(DE SFTO_EXTEUCD (A B)
    (PROG (S TT U V S1 T1 Q R)
      (SETQ S 0)
      (SETQ TT 0)
      (SETQ U 0)
      (SETQ V 0)
      (SETQ S1 0)
      (SETQ T1 0)
      (SETQ Q 0)
      (SETQ R 0)
      (SETQ S 1)
      (SETQ V 1)
      (PROG ()
       WHILELABEL
        (COND ((NOT (NOT (EQN B 0))) (RETURN NIL)))
        (PROGN
         (SETQ Q (QUOTIENT A B))
         (SETQ R (REMAINDER A B))
         (SETQ A B)
         (SETQ B R)
         (SETQ S1 S)
         (SETQ T1 TT)
         (SETQ S U)
         (SETQ TT V)
         (SETQ U (DIFFERENCE S1 (TIMES Q U)))
         (SETQ V (DIFFERENCE T1 (TIMES Q V))))
        (GO WHILELABEL))
      (COND
       ((LESSP A 0)
        (PROGN (SETQ S (MINUS S)) (SETQ TT (MINUS TT)) (SETQ A (MINUS A)))))
      (RETURN (LIST A S TT)))) 
(PUT 'SFTO_LINP 'NUMBER-OF-ARGS 2) 
(DE SFTO_LINP (F VL) (SFTO_LINP1 F VL NIL)) 
(PUT 'SFTO_LINP1 'NUMBER-OF-ARGS 3) 
(DE SFTO_LINP1 (F VL OC)
    (OR (OR (ATOM F) (ATOM (CAR F)))
        (AND (NOT (MEMQ (CAAAR F) VL)) (NOT (MEMQ (CAAAR F) OC))
             (SFTO_LINP1 (CDAR F) VL OC) (SFTO_LINP1 (CDR F) VL OC))
        (AND (MEMQ (CAAAR F) VL) (NOT (MEMQ (CAAAR F) OC)) (EQUAL (CDAAR F) 1)
             (SFTO_LINP1 (CDAR F) VL (CONS (CAAAR F) OC))
             (SFTO_LINP1 (CDR F) VL OC)))) 
(PUT 'SFTO_LINWPP 'NUMBER-OF-ARGS 2) 
(DE SFTO_LINWPP (F VL)
    (OR (OR (ATOM F) (ATOM (CAR F)))
        (AND (NOT (MEMQ (CAAAR F) VL))
             (NULL (INTERSECTION (KERNELS (CDAR F)) VL))
             (SFTO_LINWPP (CDR F) VL))
        (AND (MEMQ (CAAAR F) VL) (EQUAL (CDAAR F) 1)
             (OR (ATOM (CDAR F)) (ATOM (CAR (CDAR F))))
             (SFTO_LINWPP (CDR F) VL)))) 
(PUT 'SFTO_VARF 'NUMBER-OF-ARGS 1) 
(DE SFTO_VARF (F)
    (COND
     ((AND (NOT (OR (ATOM F) (ATOM (CAR F)))) (NULL (CDR F)) (EQN (CDAR F) 1)
           (EQN (CDAAR F) 1))
      (CAAAR F)))) 
(PUT 'SFTO_IDVARF 'NUMBER-OF-ARGS 1) 
(DE SFTO_IDVARF (F)
    (COND
     ((AND (NOT (OR (ATOM F) (ATOM (CAR F)))) (NULL (CDR F)) (EQN (CDAR F) 1)
           (EQN (CDAAR F) 1) (IDP (CAAAR F)))
      (CAAAR F)))) 
(PUT 'SFTO_LMULTF 'NUMBER-OF-ARGS 1) 
(DE SFTO_LMULTF (FL)
    (COND ((NULL FL) 1)
          (T
           ((LAMBDA (G159)
              (COND (*PHYSOP-LOADED (PHYSOP-MULTF (CAR FL) G159))
                    (T (POLY-MULTF (CAR FL) G159))))
            (SFTO_LMULTF (CDR FL)))))) 
(PUT 'DEGREE 'NUMBER-OF-ARGS 1) 
(DE DEGREE (U) (SFTO_TDEGF (CAR (SIMP U)))) 
(PUT 'SFTO_TDEGF 'NUMBER-OF-ARGS 1) 
(DE SFTO_TDEGF (F)
    (PROG (W X TD)
      (SETQ TD 0)
      (COND ((OR (ATOM F) (ATOM (CAR F))) (RETURN 0)))
      (SETQ X (CAAAR F))
      (PROG ()
       WHILELABEL
        (COND
         ((NOT (AND (NOT (OR (ATOM F) (ATOM (CAR F)))) (EQ (CAAAR F) X)))
          (RETURN NIL)))
        (PROGN
         (SETQ W (PLUS (SFTO_TDEGF (CDAR F)) (CDAAR F)))
         (COND ((GREATERP W TD) (SETQ TD W)))
         (SETQ F (CDR F)))
        (GO WHILELABEL))
      (SETQ W (SFTO_TDEGF F))
      (COND ((GREATERP W TD) (RETURN W)))
      (RETURN TD))) 
(FLAG '(INDETS) 'OPFN) 
(PUT 'INDETS 'NUMBER-OF-ARGS 1) 
(DE INDETS (P) (CONS 'LIST (KERNELS (CAR (SIMP P))))) 
(FLAG '(COEFF) 'OPFN) 
(PUT 'COEFF 'NUMBER-OF-ARGS 3) 
(DE COEFF (P X N) (PREPF (SFTO_COEFF (CAR (SIMP P)) X N))) 
(PUT 'SFTO_COEFF 'NUMBER-OF-ARGS 3) 
(DE SFTO_COEFF (P X N)
    (PROG (RP)
      (SETQ RP (SFTO_REORDER P (LIST X)))
      (PROG ()
       WHILELABEL
        (COND
         ((NOT
           (AND (NOT (OR (ATOM RP) (ATOM (CAR RP)))) (EQ (CAAAR RP) X)
                (GREATERP (CDAAR RP) N)))
          (RETURN NIL)))
        (SETQ RP (CDR RP))
        (GO WHILELABEL))
      (COND
       ((AND (NOT (OR (ATOM RP) (ATOM (CAR RP)))) (EQ (CAAAR RP) X))
        (RETURN (COND ((EQN (CDAAR RP) N) (CDAR RP)) (T 0)))))
      (COND ((EQN N 0) (RETURN (OR RP 0))))
      (RETURN 0))) 
(FLAG '(RLCOEFFS) 'OPFN) 
(PUT 'RLCOEFFS 'NUMBER-OF-ARGS 2) 
(DE RLCOEFFS (F VL)
    (CONS 'LIST
          (PROG (C FORALL-RESULT FORALL-ENDPTR)
            (SETQ C (SFTO_COEFFS (CAR (SIMP F)) (CDR VL)))
            (COND ((NULL C) (RETURN NIL)))
            (SETQ FORALL-RESULT
                    (SETQ FORALL-ENDPTR
                            (CONS ((LAMBDA (C) (PREPF C)) (CAR C)) NIL)))
           LOOPLABEL
            (SETQ C (CDR C))
            (COND ((NULL C) (RETURN FORALL-RESULT)))
            (RPLACD FORALL-ENDPTR (CONS ((LAMBDA (C) (PREPF C)) (CAR C)) NIL))
            (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
            (GO LOOPLABEL)))) 
(PUT 'SFTO_COEFFS 'NUMBER-OF-ARGS 2) 
(DE SFTO_COEFFS (F VL) (SFTO_COEFFS1 (LIST F) VL)) 
(PUT 'SFTO_COEFFS1 'NUMBER-OF-ARGS 2) 
(DE SFTO_COEFFS1 (L VL)
    (COND ((NULL VL) L)
          (T
           (SFTO_COEFFS1
            (PROG (F FORALL-RESULT FORALL-ENDPTR)
              (SETQ F L)
             STARTOVER
              (COND ((NULL F) (RETURN NIL)))
              (SETQ FORALL-RESULT
                      ((LAMBDA (F)
                         (SFTO_COEFFS2 (SFTO_REORDER F (CAR VL)) (CAR VL)))
                       (CAR F)))
              (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
              (SETQ F (CDR F))
              (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
             LOOPLABEL
              (COND ((NULL F) (RETURN FORALL-RESULT)))
              (RPLACD FORALL-ENDPTR
                      ((LAMBDA (F)
                         (SFTO_COEFFS2 (SFTO_REORDER F (CAR VL)) (CAR VL)))
                       (CAR F)))
              (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
              (SETQ F (CDR F))
              (GO LOOPLABEL))
            (CDR VL))))) 
(PUT 'SFTO_COEFFS2 'NUMBER-OF-ARGS 2) 
(DE SFTO_COEFFS2 (F V)
    (COND
     ((AND (NOT (OR (ATOM F) (ATOM (CAR F)))) (EQ (CAAAR F) V))
      (PROG (C FORALL-RESULT FORALL-ENDPTR)
        (SETQ C (COEFFS F))
       STARTOVER
        (COND ((NULL C) (RETURN NIL)))
        (SETQ FORALL-RESULT ((LAMBDA (C) (COND (C (LIST C)))) (CAR C)))
        (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
        (SETQ C (CDR C))
        (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
       LOOPLABEL
        (COND ((NULL C) (RETURN FORALL-RESULT)))
        (RPLACD FORALL-ENDPTR ((LAMBDA (C) (COND (C (LIST C)))) (CAR C)))
        (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
        (SETQ C (CDR C))
        (GO LOOPLABEL)))
     (T (LIST F)))) 
(PUT 'SFTO_ABSSUMMAND 'NUMBER-OF-ARGS 1) 
(DE SFTO_ABSSUMMAND (F)
    (COND ((OR (ATOM F) (ATOM (CAR F))) F) (T (SFTO_ABSSUMMAND (CDR F))))) 
(PUT 'SFTO_KERNELP 'NUMBER-OF-ARGS 1) 
(DE SFTO_KERNELP (U)
    (PROG (W)
      (COND ((IDP U) (RETURN T)))
      (COND ((NOT (PAIRP U)) (RETURN NIL)))
      (COND ((GET (CAR U) 'FKERNFN) (RETURN T)))
      (SETQ W (COND ((ATOM (CAR U)) (GET (CAR U) 'KLIST)) (T EXLIST*)))
      (RETURN (ATSOC U W)))) 
(PUT 'SFTO_VARP 'NUMBER-OF-ARGS 1) 
(DE SFTO_VARP (F)
    (COND
     ((AND (NOT (OR (ATOM F) (ATOM (CAR F)))) (NULL (CDR F)) (EQN (CDAR F) 1)
           (EQN (CDAAR F) 1))
      (CAAAR F)))) 
(PUT 'SFTO_VARISNUMP 'NUMBER-OF-ARGS 1) 
(DE SFTO_VARISNUMP (F)
    (COND
     ((AND (NOT (OR (ATOM F) (ATOM (CAR F))))
           (OR (ATOM (CDAR F)) (ATOM (CAR (CDAR F))))
           (OR (ATOM (CDR F)) (ATOM (CAR (CDR F)))) (EQN (CDAAR F) 1))
      (CAAAR F)))) 
(FLAG '(RLFACLIMIT) 'OPFN) 
(PUT 'RLFACLIMIT 'NUMBER-OF-ARGS 1) 
(DE RLFACLIMIT (N)
    (PROG (OLD)
      (COND
       ((OR (NOT (FIXP N)) (LEQ N 0))
        (REDERR (LIST "rlfaclimit" N "is not a non-negative integer"))))
      (SETQ OLD SFTO_FCTRFLIMIT*)
      (COND ((NOT (EQN N 0)) (SETQ SFTO_FCTRFLIMIT* N)))
      (RETURN OLD))) 
(PUT 'SFTO_FCTRF 'NUMBER-OF-ARGS 1) 
(DE SFTO_FCTRF (F)
    (PROG (W E N)
      (SETQ N 0)
      (PROG ()
       REPEATLABEL
        (PROGN
         (RANDOM_NEW_SEED (PLUS N 1))
         (SETQ W (ERRORSET (LIST 'FCTRF (MKQUOTE F)) T *BACKTRACE))
         (COND ((ERRORP W) (SETQ E T)))
         (SETQ N (PLUS N 1)))
        (COND
         ((NOT (OR (NOT (ERRORP W)) (EQN N SFTO_FCTRFLIMIT*)))
          (GO REPEATLABEL))))
      (COND
       ((ERRORP W)
        (PROGN
         (LPRIM
          (LIST "sfto_fctrf: factorization failed after" SFTO_FCTRFLIMIT*
                "attempts"))
         (RETURN (CONS 1 (LIST (CONS F 1)))))))
      (COND
       ((AND *RLVERBOSE E)
        (IOTO_TPRIN2T
         (LIST "+++ sfto_fctrf: factorization successful after" N
               "attempts"))))
      (RETURN (CAR W)))) 
(PUT 'SFTO_FCTRFPROPERP 'NUMBER-OF-ARGS 1) 
(DE SFTO_FCTRFPROPERP (U)
    (NOT (AND (EQN (CAR U) 1) (CDR U) (NULL (CDDR U)) (EQN (CDADR U) 1)))) 
(PUT 'SFTO_INT2SF 'NUMBER-OF-ARGS 1) 
(DE SFTO_INT2SF (N) (COND ((NEQ N 0) N))) 
(PUT 'SFTO_SF2INT 'NUMBER-OF-ARGS 1) 
(DE SFTO_SF2INT (N) (OR N 0)) 
(PUT 'SFTO_SF2MONL 'NUMBER-OF-ARGS 1) 
(DE SFTO_SF2MONL (F)
    (PROG (VL)
      (SETQ VL (SORT (KERNELS F) 'ORDOP))
      (RETURN (CONS VL (SFTO_SF2MONL1 F VL))))) 
(PUT 'SFTO_SF2MONL1 'NUMBER-OF-ARGS 2) 
(DE SFTO_SF2MONL1 (F VL)
    (PROG (RL LL)
      (COND ((NULL F) (RETURN NIL)))
      (COND
       ((OR (ATOM F) (ATOM (CAR F)))
        (RETURN
         (LIST
          (CONS
           (PROG (V FORALL-RESULT FORALL-ENDPTR)
             (SETQ V VL)
             (COND ((NULL V) (RETURN NIL)))
             (SETQ FORALL-RESULT
                     (SETQ FORALL-ENDPTR (CONS ((LAMBDA (V) 0) (CAR V)) NIL)))
            LOOPLABEL
             (SETQ V (CDR V))
             (COND ((NULL V) (RETURN FORALL-RESULT)))
             (RPLACD FORALL-ENDPTR (CONS ((LAMBDA (V) 0) (CAR V)) NIL))
             (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
             (GO LOOPLABEL))
           F)))))
      (COND
       ((NOT (EQCAR VL (CAAAR F)))
        (RETURN
         (PROG (PR FORALL-RESULT FORALL-ENDPTR)
           (SETQ PR (SFTO_SF2MONL1 F (CDR VL)))
           (COND ((NULL PR) (RETURN NIL)))
           (SETQ FORALL-RESULT
                   (SETQ FORALL-ENDPTR
                           (CONS
                            ((LAMBDA (PR) (CONS (CONS 0 (CAR PR)) (CDR PR)))
                             (CAR PR))
                            NIL)))
          LOOPLABEL
           (SETQ PR (CDR PR))
           (COND ((NULL PR) (RETURN FORALL-RESULT)))
           (RPLACD FORALL-ENDPTR
                   (CONS
                    ((LAMBDA (PR) (CONS (CONS 0 (CAR PR)) (CDR PR))) (CAR PR))
                    NIL))
           (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
           (GO LOOPLABEL)))))
      (SETQ LL
              (PROG (PR FORALL-RESULT FORALL-ENDPTR)
                (SETQ PR (SFTO_SF2MONL1 (CDAR F) (CDR VL)))
                (COND ((NULL PR) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS
                                 ((LAMBDA (PR)
                                    (CONS (CONS (CDAAR F) (CAR PR)) (CDR PR)))
                                  (CAR PR))
                                 NIL)))
               LOOPLABEL
                (SETQ PR (CDR PR))
                (COND ((NULL PR) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        (CONS
                         ((LAMBDA (PR)
                            (CONS (CONS (CDAAR F) (CAR PR)) (CDR PR)))
                          (CAR PR))
                         NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (SETQ RL (SFTO_SF2MONL1 (CDR F) VL))
      (RETURN (APPEND LL RL)))) 
(PUT 'SFTO_SF2MONLIP 'NUMBER-OF-ARGS 1) 
(DE SFTO_SF2MONLIP (F)
    (PROG (VL)
      (SETQ VL (SORT (KERNELS F) 'ORDOP))
      (RETURN (CONS VL (SFTO_SF2MONLIP1 F VL))))) 
(PUT 'SFTO_SF2MONLIP1 'NUMBER-OF-ARGS 2) 
(DE SFTO_SF2MONLIP1 (F VL)
    (PROG (MONL RMONL)
      (COND ((NULL F) (RETURN NIL)))
      (COND
       ((OR (ATOM F) (ATOM (CAR F)))
        (RETURN
         (LIST
          (CONS
           (PROG (V FORALL-RESULT FORALL-ENDPTR)
             (SETQ V VL)
             (COND ((NULL V) (RETURN NIL)))
             (SETQ FORALL-RESULT
                     (SETQ FORALL-ENDPTR (CONS ((LAMBDA (V) 0) (CAR V)) NIL)))
            LOOPLABEL
             (SETQ V (CDR V))
             (COND ((NULL V) (RETURN FORALL-RESULT)))
             (RPLACD FORALL-ENDPTR (CONS ((LAMBDA (V) 0) (CAR V)) NIL))
             (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
             (GO LOOPLABEL))
           F)))))
      (COND
       ((NOT (EQCAR VL (CAAAR F)))
        (PROGN
         (SETQ MONL (SFTO_SF2MONLIP1 F (CDR VL)))
         (PROG (PR)
           (SETQ PR MONL)
          LAB
           (COND ((NULL PR) (RETURN NIL)))
           ((LAMBDA (PR) (SETCAR PR (CONS 0 (CAR PR)))) (CAR PR))
           (SETQ PR (CDR PR))
           (GO LAB))
         (RETURN MONL))))
      (SETQ MONL (SFTO_SF2MONLIP1 (CDAR F) (CDR VL)))
      (PROG (PR)
        (SETQ PR MONL)
       LAB
        (COND ((NULL PR) (RETURN NIL)))
        ((LAMBDA (PR) (SETCAR PR (CONS (CDAAR F) (CAR PR)))) (CAR PR))
        (SETQ PR (CDR PR))
        (GO LAB))
      (SETQ RMONL (SFTO_SF2MONLIP1 (CDR F) VL))
      (RETURN (NCONC MONL RMONL)))) 
(PUT 'SFTO_MVARTEST 'NUMBER-OF-ARGS 2) 
(DE SFTO_MVARTEST (F X)
    (AND (NOT (OR (ATOM F) (ATOM (CAR F)))) (EQ (CAAAR F) X))) 
(PUT 'SFTO_MVARX 'NUMBER-OF-ARGS 1) 
(DE SFTO_MVARX (F) (COND ((OR (ATOM F) (ATOM (CAR F))) NIL) (T (CAAAR F)))) 
(PUT 'SFTO_LDEGX 'NUMBER-OF-ARGS 1) 
(DE SFTO_LDEGX (F)
    (COND ((NULL F) (MINUS 1)) ((OR (ATOM F) (ATOM (CAR F))) 0) (T (CDAAR F)))) 
(PUT 'SFTO_LCX 'NUMBER-OF-ARGS 1) 
(DE SFTO_LCX (F) (COND ((OR (ATOM F) (ATOM (CAR F))) F) (T (CDAR F)))) 
(PUT 'SFTO_REDX 'NUMBER-OF-ARGS 1) 
(DE SFTO_REDX (F) (COND ((OR (ATOM F) (ATOM (CAR F))) NIL) (T (CDR F)))) 
(PUT 'SFTO_VARDEG 'NUMBER-OF-ARGS 2) 
(DE SFTO_VARDEG (F X)
    (COND ((SFTO_MVARTEST F X) (CDAAR F)) ((NULL F) (MINUS 1)) (T 0))) 
(PUT 'SFTO_UNIVARP 'NUMBER-OF-ARGS 1) 
(DE SFTO_UNIVARP (F)
    (OR (OR (ATOM F) (ATOM (CAR F)))
        (AND (OR (ATOM (CDAR F)) (ATOM (CAR (CDAR F))))
             (SFTO_UNIVARP1 (CDR F) (CAAAR F))))) 
(PUT 'SFTO_UNIVARP1 'NUMBER-OF-ARGS 2) 
(DE SFTO_UNIVARP1 (F X)
    (OR (OR (ATOM F) (ATOM (CAR F)))
        (AND (OR (ATOM (CDAR F)) (ATOM (CAR (CDAR F)))) (EQ (CAAAR F) X)
             (SFTO_UNIVARP1 (CDR F) X)))) 
(PUT 'SFTO_KMEMBERF 'NUMBER-OF-ARGS 2) 
(DE SFTO_KMEMBERF (X F)
    (AND (NOT (OR (ATOM F) (ATOM (CAR F))))
         (OR (EQ (CAAAR F) X) (SFTO_KMEMBERF X (CDAR F))
             (SFTO_KMEMBERF X (CDR F))))) 
(PUT 'SFTO_RENAMEF 'NUMBER-OF-ARGS 3) 
(DE SFTO_RENAMEF (F VOLD VNEW)
    (PROG (MV RECURSE)
      (COND ((OR (ATOM F) (ATOM (CAR F))) (RETURN F)))
      (SETQ MV (CAAAR F))
      (COND ((EQ MV VOLD) (PROGN (SETQ MV VNEW) (SETQ RECURSE NIL)))
            (T (SETQ RECURSE T)))
      (RETURN
       (ADDF
        ((LAMBDA (G160 G161)
           (COND (*PHYSOP-LOADED (PHYSOP-MULTF G160 G161))
                 (T (POLY-MULTF G160 G161))))
         (EXPTF (LIST (CONS (CONS MV 1) 1)) (CDAAR F))
         (COND (RECURSE (SFTO_RENAMEF (CDAR F) VOLD VNEW)) (T (CDAR F))))
        (SFTO_RENAMEF (CDR F) VOLD VNEW))))) 
(PUT 'SFTO_RENAMEALF 'NUMBER-OF-ARGS 2) 
(DE SFTO_RENAMEALF (F AL)
    (PROG (MV W AL1)
      (COND ((OR (ATOM F) (ATOM (CAR F))) (RETURN F)))
      (SETQ MV (CAAAR F))
      (COND
       ((SETQ W (ATSOC MV AL))
        (PROGN (SETQ MV (CDR W)) (SETQ AL1 (LTO_DELQ W AL))))
       (T (SETQ AL1 AL)))
      (RETURN
       (ADDF
        ((LAMBDA (G162 G163)
           (COND (*PHYSOP-LOADED (PHYSOP-MULTF G162 G163))
                 (T (POLY-MULTF G162 G163))))
         (EXPTF (LIST (CONS (CONS MV 1) 1)) (CDAAR F))
         (SFTO_RENAMEALF (CDAR F) AL1))
        (SFTO_RENAMEALF (CDR F) AL))))) 
(PUT 'SFTO_CAUCHYF 'NUMBER-OF-ARGS 2) 
(DE SFTO_CAUCHYF (F V)
    (PROG (SUMQ AN D ONE)
      (SETQ SUMQ (CONS NIL 1))
      (SETQ AN (CONS (ABSF (CDAR F)) 1))
      (PROG ()
       WHILELABEL
        (COND ((NOT (NOT (OR (ATOM F) (ATOM (CAR F))))) (RETURN NIL)))
        (PROGN
         (SETQ F (CDR F))
         (SETQ D
                 (CONS
                  (ABSF (COND ((OR (ATOM F) (ATOM (CAR F))) F) (T (CDAR F))))
                  1))
         (SETQ SUMQ (ADDSQ SUMQ (MULTSQ D (INVSQ AN)))))
        (GO WHILELABEL))
      (SETQ ONE (CONS 1 1))
      (COND ((SFTO_GREATERQ ONE SUMQ) (RETURN ONE)))
      (RETURN SUMQ))) 
(PUT 'SFTO_LMQ 'NUMBER-OF-ARGS 1) 
(DE SFTO_LMQ (F)
    (PROG (CL C CMIN SCCL1 SCCL2 CC TRP TTRP CTRP BND CMAX D M DD MM)
      (SETQ D 0)
      (SETQ M 0)
      (SETQ DD 0)
      (SETQ MM 0)
      (COND (NIL NIL))
      (COND ((OR (ATOM F) (ATOM (CAR F))) (RETURN 0)))
      (SETQ F (ABSF F))
      (SETQ CL (SFTO_LMQCOEFFS F))
      (SETQ CMAX (CONS NIL 1))
      (SETQ SCCL1 (CDR CL))
      (PROG ()
       WHILELABEL
        (COND ((NOT SCCL1) (RETURN NIL)))
        (PROGN
         (PROG (G164 G165)
           (SETQ G164 (SETQ TRP (PROG1 (CAR SCCL1) (SETQ SCCL1 (CDR SCCL1)))))
           (SETQ G165 G164)
           (SETQ C (CAR G164))
           (SETQ G164 (CDR G164))
           (SETQ D (CAR G164))
           (SETQ G164 (CDR G164))
           (SETQ M (CAR G164))
           (SETQ G164 (CDR G164))
           (RETURN G165))
         (COND
          ((LESSP (CAR C) 0)
           (PROGN
            (SETQ CMIN 'PINF)
            (SETQ SCCL2 CL)
            (PROG ()
             REPEATLABEL
              (PROGN
               (PROG (G166 G167)
                 (SETQ G166
                         (SETQ TTRP
                                 (PROG1 (CAR SCCL2) (SETQ SCCL2 (CDR SCCL2)))))
                 (SETQ G167 G166)
                 (SETQ CC (CAR G166))
                 (SETQ G166 (CDR G166))
                 (SETQ DD (CAR G166))
                 (SETQ G166 (CDR G166))
                 (SETQ MM (CAR G166))
                 (SETQ G166 (CDR G166))
                 (RETURN G167))
               (COND
                ((GREATERP (CAR CC) 0)
                 (PROGN
                  (SETQ BND
                          (SFTO_LMQROOTQ
                           (MULTSQ (CONS (EXPT 2 MM) 1)
                                   (MULTSQ (NEGSQ C) (INVSQ CC)))
                           (DIFFERENCE DD D)))
                  (COND
                   ((OR (EQ CMIN 'PINF) (SFTO_LESSQ BND CMIN))
                    (PROGN (SETQ CMIN BND) (SETQ CTRP TTRP))))))))
              (COND ((NOT (EQ (CAR SCCL2) TRP)) (GO REPEATLABEL))))
            (SETCAR (CDDR CTRP) (PLUS (CADDR CTRP) 1))
            (COND ((SFTO_GREATERQ CMIN CMAX) (SETQ CMAX CMIN)))))))
        (GO WHILELABEL))
      (RETURN CMAX))) 
(PUT 'SFTO_LMQCOEFFS 'NUMBER-OF-ARGS 1) 
(DE SFTO_LMQCOEFFS (F)
    (COND ((OR (ATOM F) (ATOM (CAR F))) (LIST (LIST (CONS F 1) 0 1)))
          (T
           (CONS (LIST (CONS (CDAR F) 1) (CDAAR F) 1)
                 (SFTO_LMQCOEFFS (CDR F)))))) 
(PUT 'SFTO_LMQROOTQ 'NUMBER-OF-ARGS 2) 
(DE SFTO_LMQROOTQ (Q N)
    (PROG (RNUM RDEN)
      (COND (NIL NIL))
      (COND (NIL NIL))
      (COND (NIL NIL))
      (COND ((OR (EQN N 1) (NULL (CAR Q))) (RETURN Q)))
      (SETQ RNUM
              (COND ((EQN (CAR Q) 1) (CAR Q))
                    (T (PLUS (IROOTN (OR (CAR Q) 0) N) 1))))
      (COND ((EQN (CDR Q) 1) (RETURN (CONS RNUM 1))))
      (SETQ RDEN (DIFFERENCE (IROOTN (CDR Q) N) 1))
      (COND ((GREATERP RDEN 1) (SETQ RDEN (DIFFERENCE RDEN 1))))
      (RETURN (MULTSQ (CONS RNUM 1) (INVSQ (CONS RDEN 1)))))) 
(PUT 'SFTO_LMQROOT 'NUMBER-OF-ARGS 2) 
(DE SFTO_LMQROOT (Q N)
    (PROG (W P)
      (SETQ W (OR (CAR (SFTO_CEILQ Q)) 0))
      (SETQ P (PLUS (LENGTH (EXPLODE W)) 1))
      (RETURN (CAR (SFTO_CEILQ (SFTO_ROOTQ Q N P)))))) 
(PUT 'SFTO_MIRROR 'NUMBER-OF-ARGS 1) 
(DE SFTO_MIRROR (F)
    (COND ((OR (ATOM F) (ATOM (CAR F))) F)
          (T
           (SFTO_FSUB1 F
                       (LIST
                        (CONS (CAAAR F)
                              (NEGF (LIST (CONS (CONS (CAAAR F) 1) 1))))))))) 
(PUT 'SFTO_QSUB 'NUMBER-OF-ARGS 2) 
(DE SFTO_QSUB (F AL) (SFTO_QSUB1 F (SORT AL (FUNCTION ORDOPCAR)))) 
(PUT 'SFTO_QSUB1 'NUMBER-OF-ARGS 2) 
(DE SFTO_QSUB1 (F AL)
    (PROG (MV NREDQ NLCQ NHTQ)
      (COND ((OR (ATOM F) (ATOM (CAR F))) (RETURN (CONS F 1))))
      (SETQ MV (CAAAR F))
      (PROG ()
       WHILELABEL
        (COND
         ((NOT (AND AL (NEQ (CAAR AL) MV) (ORDOP (CAAR AL) MV))) (RETURN NIL)))
        (SETQ AL (CDR AL))
        (GO WHILELABEL))
      (COND ((NULL AL) (RETURN (CONS F 1))))
      (SETQ NREDQ (SFTO_QSUB1 (CDR F) AL))
      (COND
       ((EQ (CAAR AL) MV)
        (PROGN
         (SETQ NLCQ (SFTO_QSUB1 (CDAR F) (CDR AL)))
         (SETQ NHTQ (EXPTSQ (CDAR AL) (CDAAR F)))
         (RETURN (ADDSQ (MULTSQ NLCQ NHTQ) NREDQ)))))
      (SETQ NLCQ (SFTO_QSUB1 (CDAR F) AL))
      (SETQ NHTQ (CONS (CONS (CONS (CONS (CAAAR F) (CDAAR F)) 1) NIL) 1))
      (RETURN (ADDSQ (MULTSQ NLCQ NHTQ) NREDQ)))) 
(PUT 'SFTO_FSUB 'NUMBER-OF-ARGS 2) 
(DE SFTO_FSUB (F AL)
    (SFTO_FSUB1 F (SORT AL (FUNCTION (LAMBDA (X Y) (ORDOP (CAR X) (CAR Y))))))) 
(PUT 'SFTO_FSUB1 'NUMBER-OF-ARGS 2) 
(DE SFTO_FSUB1 (F AL)
    (PROG (MV NRED NLC NHT)
      (COND ((OR (ATOM F) (ATOM (CAR F))) (RETURN F)))
      (SETQ MV (CAAAR F))
      (PROG ()
       WHILELABEL
        (COND
         ((NOT (AND AL (NEQ (CAAR AL) MV) (ORDOP (CAAR AL) MV))) (RETURN NIL)))
        (SETQ AL (CDR AL))
        (GO WHILELABEL))
      (COND ((NULL AL) (RETURN F)))
      (SETQ NRED (SFTO_FSUB1 (CDR F) AL))
      (COND
       ((EQ (CAAR AL) MV)
        (PROGN
         (SETQ NLC (SFTO_FSUB1 (CDAR F) (CDR AL)))
         (SETQ NHT (EXPTF (CDAR AL) (CDAAR F)))
         (RETURN
          (ADDF
           (COND (*PHYSOP-LOADED (PHYSOP-MULTF NLC NHT))
                 (T (POLY-MULTF NLC NHT)))
           NRED)))))
      (SETQ NLC (SFTO_FSUB1 (CDAR F) AL))
      (SETQ NHT (CONS (CONS (CONS (CAAAR F) (CDAAR F)) 1) NIL))
      (RETURN
       (ADDF
        (COND (*PHYSOP-LOADED (PHYSOP-MULTF NLC NHT)) (T (POLY-MULTF NLC NHT)))
        NRED)))) 
(PUT 'SFTO_QSUBHOR 'NUMBER-OF-ARGS 3) 
(DE SFTO_QSUBHOR (F X Q)
    (PROG (COEFFL RES)
      (COND ((NOT (SFTO_MVARTEST F X)) (RETURN (CONS F 1))))
      (SETQ COEFFL (COEFFS F))
      (SETQ RES (CONS (CAR COEFFL) 1))
      (PROG (COEFF)
        (SETQ COEFF (CDR COEFFL))
       LAB
        (COND ((NULL COEFF) (RETURN NIL)))
        ((LAMBDA (COEFF) (SETQ RES (ADDSQ (CONS COEFF 1) (MULTSQ RES Q))))
         (CAR COEFF))
        (SETQ COEFF (CDR COEFF))
        (GO LAB))
      (RETURN RES))) 
(PUT 'SFTO_QSUBHOR1 'NUMBER-OF-ARGS 3) 
(DE SFTO_QSUBHOR1 (F X Q)
    (PROG (COEFFL RES N D DD)
      (SETQ N 0)
      (SETQ D 0)
      (SETQ DD 0)
      (COND ((NOT (SFTO_MVARTEST F X)) (RETURN (CONS F 1))))
      (SETQ N (CAR Q))
      (SETQ D (CDR Q))
      (SETQ DD 1)
      (SETQ COEFFL (COEFFS F))
      (SETQ RES (CAR COEFFL))
      (PROG (COEFF)
        (SETQ COEFF (CDR COEFFL))
       LAB
        (COND ((NULL COEFF) (RETURN NIL)))
        ((LAMBDA (COEFF)
           (PROGN
            (SETQ DD (TIMES DD D))
            (SETQ RES
                    (ADDF
                     (COND (*PHYSOP-LOADED (PHYSOP-MULTF COEFF DD))
                           (T (POLY-MULTF COEFF DD)))
                     (COND (*PHYSOP-LOADED (PHYSOP-MULTF RES N))
                           (T (POLY-MULTF RES N)))))))
         (CAR COEFF))
        (SETQ COEFF (CDR COEFF))
        (GO LAB))
      (RETURN (CONS (SFTO_DPRPARTKSF RES) 1)))) 
(PUT 'SFTO_FLOATSUB 'NUMBER-OF-ARGS 2) 
(DE SFTO_FLOATSUB (F SUBL)
    (COND ((OR (ATOM F) (ATOM (CAR F))) (OR F 0.0))
          (T
           (PLUS
            (TIMES (EXPT (CDR (ATSOC (CAAAR F) SUBL)) (CDAAR F))
                   (SFTO_FLOATSUB (CDAR F) SUBL))
            (SFTO_FLOATSUB (CDR F) SUBL))))) 
(PUT 'SFTO_NORM1 'NUMBER-OF-ARGS 1) 
(DE SFTO_NORM1 (F)
    (COND ((OR (ATOM F) (ATOM (CAR F))) (ABSF F))
          (T (ADDF (ABSF (CDAR F)) (SFTO_NORM1 (CDR F)))))) 
(PUT 'SFTO_NORMINF 'NUMBER-OF-ARGS 1) 
(DE SFTO_NORMINF (F)
    (COND ((OR (ATOM F) (ATOM (CAR F))) (ABSF F))
          (T (MAX (ABSF (CDAR F)) (SFTO_NORMINF (CDR F)))))) 
(PUT 'SFTO_STURMCHAIN 'NUMBER-OF-ARGS 2) 
(DE SFTO_STURMCHAIN (F G)
    (PROG (*RATIONAL W RRESL RESL)
      (ON1 'RATIONAL)
      (SETQ RRESL (LIST G F))
      (PROG ()
       WHILELABEL
        (COND ((NOT (NOT (NULL G))) (RETURN NIL)))
        (PROGN
         (SETQ W (REMF F G))
         (SETQ F G)
         (SETQ G (NEGF W))
         (COND (G (SETQ RRESL (CONS G RRESL)))))
        (GO WHILELABEL))
      (PROG (P)
        (SETQ P RRESL)
       LAB
        (COND ((NULL P) (RETURN NIL)))
        ((LAMBDA (P) (SETQ RESL (CONS ((LAMBDA (*EXP) (QUOTF1 P G)) T) RESL)))
         (CAR P))
        (SETQ P (CDR P))
        (GO LAB))
      (OFF1 'RATIONAL)
      (SETQ RESL
              (PROG (P FORALL-RESULT FORALL-ENDPTR)
                (SETQ P RESL)
                (COND ((NULL P) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS
                                 ((LAMBDA (P)
                                    (CONS (CAR (RESIMP (CONS P 1))) RESL))
                                  (CAR P))
                                 NIL)))
               LOOPLABEL
                (SETQ P (CDR P))
                (COND ((NULL P) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        (CONS
                         ((LAMBDA (P) (CONS (CAR (RESIMP (CONS P 1))) RESL))
                          (CAR P))
                         NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (RETURN RESL))) 
(PUT 'SFTO_STURMCOUNT 'NUMBER-OF-ARGS 3) 
(DE SFTO_STURMCOUNT (SC L U)
    (DIFFERENCE (SFTO_VARSIGN SC L) (SFTO_VARSIGN SC U))) 
(PUT 'SFTO_VARSIGN 'NUMBER-OF-ARGS 2) 
(DE SFTO_VARSIGN (SC BOUND)
    (PROG (H SIGN CURSIGN SIGNCHANGES)
      (SETQ H 0)
      (SETQ SIGN 0)
      (SETQ CURSIGN 0)
      (SETQ SIGNCHANGES 0)
      (PROG ()
       WHILELABEL
        (COND ((NOT SC) (RETURN NIL)))
        (PROGN
         (PROG ()
          REPEATLABEL
           (PROGN
            (SETQ H
                    (CAR
                     (SFTO_IQSUB (PROG1 (CAR SC) (SETQ SC (CDR SC))) (CAAAR H)
                      BOUND)))
            (SETQ SIGN (COND ((NULL H) 0) ((MINUSF H) (MINUS 1)) (T 1)))
            NIL)
           (COND ((NOT (OR (NULL SC) (NOT (EQN SIGN 0)))) (GO REPEATLABEL))))
         (COND
          ((LESSP (TIMES SIGN CURSIGN) 0)
           (SETQ SIGNCHANGES (PLUS SIGNCHANGES 1))))
         (SETQ CURSIGN SIGN))
        (GO WHILELABEL))
      (RETURN SIGNCHANGES))) 
(PUT 'SFTO_IQSUB 'NUMBER-OF-ARGS 3) 
(DE SFTO_IQSUB (F X Q)
    (PROG (G HC)
      (SETQ G (CAR Q))
      (COND
       ((OR (ATOM G) (ATOM (CAR G)))
        (RETURN (SFTO_QSUB1 F (LIST (CONS X Q))))))
      (COND ((OR (ATOM F) (ATOM (CAR F))) (RETURN (CONS F 1))))
      (COND (NIL NIL))
      (COND ((AND (EVENP (CDAAR F)) (MINUSF (CDAR G))) (SETQ Q (NEGSQ Q))))
      (COND ((MINUSF (CDAR F)) (SETQ Q (NEGSQ Q))))
      (RETURN Q))) 
(PUT 'SFTO_ABSQ 'NUMBER-OF-ARGS 1) 
(DE SFTO_ABSQ (Q) (CONS (ABSF (CAR Q)) (CDR Q))) 
(PUT 'SFTO_GREATERQ 'NUMBER-OF-ARGS 2) 
(DE SFTO_GREATERQ (Q1 Q2) (MINUSF (CAR (ADDSQ Q2 (NEGSQ Q1))))) 
(PUT 'SFTO_LESSQ 'NUMBER-OF-ARGS 2) 
(DE SFTO_LESSQ (Q1 Q2) (MINUSF (CAR (ADDSQ Q1 (NEGSQ Q2))))) 
(PUT 'SFTO_GEQQ 'NUMBER-OF-ARGS 2) 
(DE SFTO_GEQQ (Q1 Q2)
    ((LAMBDA (W) (OR (NULL W) (MINUSF (CAR W)))) (ADDSQ Q2 (NEGSQ Q1)))) 
(PUT 'SFTO_LEQQ 'NUMBER-OF-ARGS 2) 
(DE SFTO_LEQQ (Q1 Q2)
    ((LAMBDA (W) (OR (NULL W) (MINUSF (CAR W)))) (ADDSQ Q1 (NEGSQ Q2)))) 
(PUT 'SFTO_MAXQ 'NUMBER-OF-ARGS 2) 
(DE SFTO_MAXQ (Q1 Q2) (COND ((SFTO_GREATERQ Q1 Q2) Q1) (T Q2))) 
(PUT 'SFTO_MINQ 'NUMBER-OF-ARGS 2) 
(DE SFTO_MINQ (Q1 Q2) (COND ((SFTO_LESSQ Q1 Q2) Q1) (T Q2))) 
(PUT 'SFTO_MAXQL 'NUMBER-OF-ARGS 1) 
(DE SFTO_MAXQL (L)
    (PROG (M)
      (COND (NIL NIL))
      (SETQ M (CAR L))
      (PROG (Q)
        (SETQ Q (CDR L))
       LAB
        (COND ((NULL Q) (RETURN NIL)))
        ((LAMBDA (Q) (COND ((SFTO_GREATERQ Q M) (SETQ M Q)))) (CAR Q))
        (SETQ Q (CDR Q))
        (GO LAB))
      (RETURN M))) 
(PUT 'SFTO_MINQL 'NUMBER-OF-ARGS 1) 
(DE SFTO_MINQL (L)
    (PROG (M)
      (COND (NIL NIL))
      (SETQ M (CAR L))
      (PROG (Q)
        (SETQ Q (CDR L))
       LAB
        (COND ((NULL Q) (RETURN NIL)))
        ((LAMBDA (Q) (COND ((SFTO_LESSQ Q M) (SETQ M Q)))) (CAR Q))
        (SETQ Q (CDR Q))
        (GO LAB))
      (RETURN M))) 
(PUT 'SFTO_CEILQ 'NUMBER-OF-ARGS 1) 
(DE SFTO_CEILQ (Q)
    (COND ((EQN (CDR Q) 1) Q)
          ((MINUSF (CAR Q)) (CONS (SFTO_INT2SF (QUOTIENT (CAR Q) (CDR Q))) 1))
          (T (CONS (SFTO_INT2SF (PLUS (QUOTIENT (CAR Q) (CDR Q)) 1)) 1)))) 
(PUT 'SFTO_FLOORQ 'NUMBER-OF-ARGS 1) 
(DE SFTO_FLOORQ (Q)
    (COND ((NULL (CAR Q)) Q)
          ((MINUSF (CAR Q))
           (CONS (SFTO_INT2SF (DIFFERENCE (QUOTIENT (CAR Q) (CDR Q)) 1)) 1))
          (T (CONS (SFTO_INT2SF (QUOTIENT (CAR Q) (CDR Q))) 1)))) 
(PUT 'SFTO_TRUNCQ 'NUMBER-OF-ARGS 2) 
(DE SFTO_TRUNCQ (Q D)
    (PROG (SHIFTQ)
      (SETQ SHIFTQ (CONS (EXPT 10 D) 1))
      (RETURN (MULTSQ (SFTO_FLOORQ (MULTSQ Q SHIFTQ)) (INVSQ SHIFTQ))))) 
(PUT 'SFTO_MULTLQ 'NUMBER-OF-ARGS 1) 
(DE SFTO_MULTLQ (SQL)
    (COND ((NULL SQL) (CONS 1 1))
          (T (MULTSQ (CAR SQL) (SFTO_MULTLQ (CDR SQL)))))) 
(PUT 'SFTO_AVGQ 'NUMBER-OF-ARGS 2) 
(DE SFTO_AVGQ (Q1 Q2) (MULTSQ (ADDSQ Q1 Q2) (INVSQ (CONS 2 1)))) 
(PUT 'SFTO_EXPQ 'NUMBER-OF-ARGS 2) 
(DE SFTO_EXPQ (Q N)
    (COND ((EQN N 0) (CONS 1 1)) (T (MULTSQ Q (SFTO_EXPQ Q (DIFFERENCE N 1)))))) 
(PUT 'SFTO_MKPOWQ 'NUMBER-OF-ARGS 2) 
(DE SFTO_MKPOWQ (K POW)
    (COND ((EQN POW 0) (CONS 1 1))
          ((GREATERP POW 0) (CONS (CONS (CONS (CONS K POW) 1) NIL) 1))
          (T (CONS 1 (CONS (CONS (CONS K (MINUS POW)) 1) NIL))))) 
(PUT 'SFTO_ROOTQ 'NUMBER-OF-ARGS 3) 
(DE SFTO_ROOTQ (X N P)
    (PROG (OP W)
      (SETQ OP (PRECISION P))
      (SETQ W
              (SIMP
               (EVALNUM0 (LIST (LIST 'EXPT (PREPSQ X) (LIST 'QUOTIENT 1 N))))))
      (PRECISION OP)
      (RETURN W))) 
(PUT 'SFTO_FSUBQ 'NUMBER-OF-ARGS 2) 
(DE SFTO_FSUBQ (X AL)
    (MULTSQ (CONS (SFTO_FSUB (CAR X) AL) 1)
            (INVSQ (CONS (SFTO_FSUB (CDR X) AL) 1)))) 
(PUT 'SFTO_QSUBQ 'NUMBER-OF-ARGS 2) 
(DE SFTO_QSUBQ (X AL)
    (MULTSQ (SFTO_QSUB (CAR X) AL) (INVSQ (SFTO_QSUB (CDR X) AL)))) 
(PUT 'SFTO_SYMBOLIFY 'NUMBER-OF-ARGS 1) 
(DE SFTO_SYMBOLIFY (X) (SFTO_SYMBOLIFY1 X 'I 0 NIL)) 
(PUT 'SFTO_SYMBOLIFY1 'NUMBER-OF-ARGS 4) 
(DE SFTO_SYMBOLIFY1 (X B C SUBL)
    (PROG (L R RES SYM W)
      (COND ((OR (NULL X) (EQUAL X 1)) (RETURN (LIST X C SUBL))))
      (COND
       ((OR (ATOM X) (ATOM (CAR X)))
        (PROGN
         (SETQ RES 1)
         (PROG (F)
           (SETQ F (ZFACTOR X))
          LAB
           (COND ((NULL F) (RETURN NIL)))
           ((LAMBDA (F)
              (PROGN
               (SETQ W (LTO_CDRASSOC (CAR F) SUBL))
               (COND (W (PROGN (SETQ SYM (CAR W))))
                     (T
                      (PROGN
                       (SETQ C (PLUS C 1))
                       (SETQ SYM (INTERN (MKID B C)))
                       (PROG (W1)
                         (SETQ W1 (CONS SYM (CAR F)))
                         (SETQ SUBL (CONS W1 SUBL))
                         (RETURN W1)))))
               (SETQ RES
                       ((LAMBDA (G169)
                          (COND (*PHYSOP-LOADED (PHYSOP-MULTF RES G169))
                                (T (POLY-MULTF RES G169))))
                        (EXPTF (LIST (CONS (CONS (*A2K SYM) 1) 1)) (CDR F))))))
            (CAR F))
           (SETQ F (CDR F))
           (GO LAB))
         (RETURN (LIST RES C SUBL)))))
      (PROG (G170 G171)
        (SETQ G170 (SFTO_SYMBOLIFY1 (CDAR X) B C SUBL))
        (SETQ G171 G170)
        (SETQ L (CAR G170))
        (SETQ G170 (CDR G170))
        (SETQ C (CAR G170))
        (SETQ G170 (CDR G170))
        (SETQ SUBL (CAR G170))
        (SETQ G170 (CDR G170))
        (RETURN G171))
      (PROG (G172 G173)
        (SETQ G172 (SFTO_SYMBOLIFY1 (CDR X) B C SUBL))
        (SETQ G173 G172)
        (SETQ R (CAR G172))
        (SETQ G172 (CDR G172))
        (SETQ C (CAR G172))
        (SETQ G172 (CDR G172))
        (SETQ SUBL (CAR G172))
        (SETQ G172 (CDR G172))
        (RETURN G173))
      (RETURN
       (LIST
        (ADDF
         ((LAMBDA (G175)
            (COND (*PHYSOP-LOADED (PHYSOP-MULTF L G175))
                  (T (POLY-MULTF L G175))))
          (EXPTF (LIST (CONS (CONS (CAAAR X) 1) 1)) (CDAAR X)))
         R)
        C SUBL)))) 
(ENDMODULE) 