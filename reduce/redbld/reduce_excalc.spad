)co reduce
-- TODO: wedge, ....
)abbrev domain PFORM Pform
++ Author: Kurt Pagani
++ Date Created: Thu Oct 17 13:20:38 CEST 2024
++ License: BSD
++ References:
++ Description:
++
Pform : Exports == Implementation where
  
  SEX ==> SExpression
  STR ==> String
  SYM ==> Symbol
  NNI ==> NonNegativeInteger
  OF  ==> OutputForm
   
  Exports == Join(CoercibleTo OutputForm, ConvertibleTo String, Comparable) with
  
    pform : (Symbol,Union(Symbol,NNI)) -> %
    coerce : % -> OutputForm	
    sym2str : Symbol -> String
    subst : (STR,STR,STR) -> STR
    lispEval : String -> SEX
    convSym :Symbol -> String 
    mkPform : (Symbol,Symbol) -> String
    mkPformNNI : (Symbol,NNI) -> String
    exdegree : % -> SEX  -- later Union(Symbol,NNI)
    name : % -> Symbol
 
  Implementation ==  Symbol add 
  
    Rep := Symbol 
    
    pf_fmt:String:="(pform (list (list 'equal ~A ~A)))"
    deg_fmt:String:="(reval (list 'exdegree '~A))"
    
    pform(s,d) == 
      if d case Symbol then 
        sd:String:=mkPform(s,d)
      if d case NNI then
        sd:String:=mkPformNNI(s,d) 
      slEval(sd)$ReduceBootstrap
      s
      
    sym2str(s:Symbol):String ==
      --not scripted? s => string s
      fs:SExpression:=FORMAT('NIL,"~A",s::OutputForm)$Lisp
      string fs

    -- from my strspt
    subst(a:STR,b:STR,c:STR):STR ==
      pa:=position(b,c,1)
      pa=0 => c
      ns1:=c.(1..pa-1) a 
      ns2:=c.(pa+#b..)
      ns1 subst(a,b,ns2)

    lispEval(s:String):SEX ==
      EVAL(READ_-FROM_-STRING(s)$Lisp)$Lisp 
 
    convSym(s:Symbol):String ==
      not scripted? s => "'" string s
      ls:=scripts(s).sub
      lsx:SEX:=FORMAT('NIL,"~{'~A~^ ~}",ls)$Lisp
      r:=subst("(list 'minus '","'(- ",string lsx)
      "(list '" string(name s) " " r ")"
    
    mkPform(sym,deg) ==
      a:=convSym(sym)
      b:=convSym(deg)
      c:SEX:=FORMAT('NIL,pf_fmt,a,b)$Lisp
      string c

    mkPformNNI(sym,deg) ==
      a:=convSym(sym)
      c:SEX:=FORMAT('NIL,pf_fmt,a,deg)$Lisp
      string c

    exdegree(x) == 
      s:SEX:=FORMAT('NIL,deg_fmt,x@Rep)$Lisp  --todo: expand sym x!!
      r:SEX:=slEval(string s)$ReduceBootstrap

    name(x:%):Symbol == name(x@Rep)$Symbol

-- pform u=k;
--   (pform (list (list 'equal 'u 'k)))
-- pform u(a,b)=k;
--  (pform (list (list 'equal (list 'u 'a 'b) 'k)))
-- pform u(-a,b)=k;
--  (pform (list (list 'equal (list 'u (list 'minus 'a) 'b) 'k)))
-- 

-- X:=pform(X,p)
-- Y:=pform(Y,2)
-- name X -> X
-- name Y -> Y     (name Z -> Z if Z is a symbol, maybe choose another "name"?)
-- exdegree X --> P (SEX)
-- exdegree Y --> 2 (SEX)


