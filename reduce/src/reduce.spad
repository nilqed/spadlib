)abbrev package REDBOOT ReduceBootstrap
++ Author: Kurt Pagani
++ Date Created: Sun Oct 13 13:15:47 CEST 2024
++ License: BSD
++ References:
++   URL: https://reduce-algebra.sourceforge.io/documentation.php
++
++   [1] REDUCE User's Manual [ HTML | PDF ] – a comprehensive guide to 
++       the REDUCE language and the supported packages.
++   [2] Inside Reduce – how to build REDUCE, the structure of the REDUCE 
++       source code, and some low-level programming features; 
++   [3] Symbolic Mode Primer [ HTML | PDF ] – an introduction to 
++       programming in the REDUCE implementation language, RLISP, which 
++       is Standard Lisp with REDUCE (essentially ALGOL 60) syntax;
++   [4] Standard Lisp Report [ HTML | PDF ] – defines Standard Lisp, the 
++       dialect of Lisp assumed by REDUCE;
++   [5] PSL Users Manual [ HTML | PDF ] – documents Portable Standard Lisp, 
++       the original implementation of Standard Lisp;
++   [6] https://github.com/reduce-algebra/reduce-algebra/tree/master
++       folder: /common-lisp/README.md
++   [7] Francis J. Wright: https://sites.google.com/site/fjwcentaur/
++
++ Description:
++  This low-level package serves to bootstrap the venerable REDUCE algebra
++  system from scratch (using the sources in 'packages'). Thanks to Francis 
++  J. Wright (sites.google.com/site/fjwcentaur/) and al. REDUCE is now also
++  available (again?) on Common Lisp by using sl_on_cl.lisp, that means 
++  conversion of Standard Lisp (SL) to Common Lisp (CL).
++
++  After loading this package by quicklisp (quickLoad reduce) the process is 
++  as follows:
++    * you have to run init()$REDBOOT
++    * init() saves the readtable (saveReadtable)
++    * init() calls load_bootstrap_reduce()$Lisp from bootstrap.lisp
++    * init() restores the readtbale (restoreReadtable)
++    * init() defines and sets: boot::*redboot-initialized* T
++    * some cleanup ... ready
++  After this procedure one may use SL and/or load other REDUCE packages.
++  Use packageMap() to see a list of available modules.
++
ReduceBootstrap : Exports == Implementation where

  SEX ==> SExpression
  sys(s) ==> systemCommand(s)$MoreSystemCommands
  lisp1(s)  ==> sys(string(FORMAT('NIL,"lisp ~A",s)$Lisp)) 
  
  Exports ==  with
  
    init : () -> SEX
      ++ \spad{init()} initializes bootstraping process of REDUCE.
      ++ This function has to be called in the first place.
    coerce : % -> OutputForm
      ++ n/a
    loadSLonCL : () -> SEX
      ++ \spad{loadSLonCL()} loads STANDARD-LISP on COMMON-LISP.
    loadBootstrap : () -> SEX
      ++ \spad{loadBootstrap()} loads the CL file bootstrap.lisp.
    getRes0 : () -> SEX
      ++ \spad{getRes0()} reads the content of BOOT:RESULT00 and returns
      ++ its value as a SExpression.
    setRes0 : String -> SEX
      ++ \spad{setRes0(s)} evaluates the standard-lisp command s (a string),
      ++ in the STANDARD-LISP environment and stores the result in the 
      ++ variable BOOT:RESULT00.
    pkgBOOT : () -> SEX
      ++ \spad{pkgBOOT} changes to the package :BOOT.
    pkgSTDLISP : () -> SEX
      ++ \spad{pkgSTDLISP} changes to the package :STANDARD-LISP.
    pkgCLUSER : () -> SEX
      ++ \spad{pkgCLUSER} changes to the package :CL-USER.
    pkg? : () -> SEX
      ++ \spad{pkg?()} shows the current package (i.e. CL:*PACKAGE*).
    saveReadtable : () -> SEX
      ++ \spad{saveReadtable()} saves the current cl::*readtable* into the
      ++ variable BOOT:SAVED_READTABLE.
    restoreReadtable : () -> SEX
      ++ \spad{restoreReadtable()} restores the BOOT:SAVED_READTABLE
      ++ as CL::*READTABLE* (same as BOOT:*READTABLE*).
    setSLreadtable : () -> SEX
      ++ \spad{setSLreadtable()} sets the current cl::*readtable* to 
      ++ STANDARD-LISP:*SL-READTABLE*. This is necessary when dealing
      ++ with floating point arithmetic.
    props : Symbol -> SEX 
      ++ \spad{props(s)} gives the properties of a REDUCE symbol as
      ++ described in [2].
    lispEval :String -> SEX
      ++ \spad{lispEval(s)} reads from string s and evaluates in lisp.
      ++ Actually: (eval (read-from-string s)).
    slEval :String -> SEX
      ++ \spad{slEval(s)} reads from string s and evaluates in package 
      ++ standard lisp and returns to boot package afterwards.
      ++ Examples: slEval "(setk 'x 12)", slEval "(setk 'y 23)",
      ++ slEval "(reval '(plus x y))", slEval "(explode 'abc)"
      ++ Note: Use the switch "on defn" in REDUCE to see the SL code
      ++ translation of the input. That code can be evaluated with slEval
      ++ directly where one may substitute "aeval" by "reval". The first
      ++ one gives as *SQ, *SF (standard forms) while the latter provides a 
      ++ readable (i.e less obscure) SExpression.
    loadPackageSources : (String,String) -> SEX
      ++ \spad{loadPackageSources(redfile,package)} loads the REDUCE source
      ++ file 'redfile.red' from package direcotry 'package'. For dependencies
      ++ see package.map in *reduce*/src.
    homePath : () -> String
      ++ \spad{homePath()} returns the path from where 'redboot' is loaded.
      ++ it is defined by the variable *reduce* in reduce.lisp. If the variable
      ++ is unbound, then reduce.spad was not loaded appropriately by using
      ++ reduce.asd (quicklisp).   
    packageMap : () -> Void      
      ++ \spad{packageMap()} prints the package map from homePath/src/packages.
    initialized? : () -> Boolean
      ++ \spad{initialized?()} checks whether init()$REDBOOT has been run by
      ++ inspecting the variable boot::*redboot-initialized*.
    loadSPAD: String -> SEX
      ++ \spad{loadSPAD s} compiles the file s.spad in the folder *reduce*/src.    

  Implementation == add
  
    lispEval(s:String):SEX ==
      EVAL(READ_-FROM_-STRING(s)$Lisp)$Lisp 
      
    slEval(s:String):SEX ==
      pkgSTDLISP()
      r:=lispEval s
      pkgBOOT()
      return r
  
    pkgBOOT():SEX == lispEval "(cl::in-package :boot)"
    pkgSTDLISP():SEX == lispEval "(cl::in-package :standard-lisp)"
    pkgCLUSER():SEX == lispEval "lisp (cl::in-package :cl-user)"
    pkg?():SEX == lispEval "cl::*package*"
  
    saveReadtable():SEX == 
      lispEval "(cl::setf boot::saved-readtable cl::*readtable*)"    
    restoreReadtable():SEX == 
      lispEval "(cl::setf cl::*readtable* boot::saved-readtable)" 
    setSLreadtable():SEX ==
      lispEval "(cl::setf cl::*readtable* sl::*sl-readtable*)"
      -- necessary when dealing with floats
    
    defRes0():SEX == 
      lispEval "(cl::defvar boot::result00 T)"
    setRes0(s:String):SEX ==
      lispEval string(FORMAT('NIL,"(cl::setf boot::result00 ~A)",s)$Lisp) 
    getRes0():SEX == RESULT00$Lisp
    
    loadSLonCL():SEX ==
      saveReadtable()
      load_sl_on_cl()$Lisp

    loadBootstrap():SEX ==
      saveReadtable()
      load_bootstrap_reduce()$Lisp

    init():SEX ==
      loadBootstrap()
      restoreReadtable()
      defRes0()
      lispEval "(cl::defvar boot::*redboot-initialized* T)"
      lispEval "(cl::in-package :boot)"

    props(s:Symbol):SEX == slEval ("(prop '" string(s) ")") 

    loadPackageSources(r,p) == 
      sys(string FORMAT('NIL,"cd ~A", homePath() "src")$Lisp)
      sl:String:=string FORMAT('NIL,"(load-package-sources '~A '~A)",r,p)$Lisp   
      slEval sl

    homePath() ==
      lispEval "(cl::in-package :boot)"
      string lispEval "(format nil _"~a_"  *reduce*)"      --"
      
    packageMap () ==
      lispEval "(cl::in-package :boot)"
      p:String:= homePath() "src/packages/package.map"
      sys "system cat " p
      void()

    initialized?() ==
      lispEval "(cl::in-package :boot)"
      b:=lispEval "(if (boundp 'boot::*redboot-initialized*) 1 0)"
      r:=integer b
      r=1 => true
      false
      
    loadSPAD(s:String):SEX ==
      compile_spad_in_src_folder(s)$Lisp




--)include stdlsp.spad
--)include pform.spad

