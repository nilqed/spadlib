)abbrev domain PFORM PForm
PForm:Exports == Implementation where
  REDBOOT ==> ReduceBootstrap
  NNI ==> NonNegativeInteger
  SEX ==> SExpression
  SYM ==> Symbol
  Exports == SetCategory with
    pform : (SYM,SYM) -> %
    pform : (SYM,NNI) -> %
    _* : (%,%) -> %
    _+ : (%,%) -> %
    _- : (%,%) -> %    
    exdegree : % -> SEX
    d : % -> %
    spacedim : PositiveInteger -> SEX
    spacedim : SYM -> SEX
    tvector : SYM -> %
    D: (%,List %) -> %
    innerprod : (%,%) -> %
    liedf : (%,%) -> %
    hodge : % -> %
    fdomain : (%,List %) -> %
    mkqsym : Symbol -> String
  Implementation == SExpression add
    Rep:=SEX
    
    mkqsym(s:Symbol):String ==
      if not scripted? s then
        string FORMAT('NIL,"'~A",s)$Lisp
      else
        ns:=name s
        ss:=scripts(s).sub
        string FORMAT('NIL,"(list '~A ~{'~A ~})",ns,ss)$Lisp
        
    pform(frm:SYM, deg:SYM):% ==
      fmt1:="(pform (list (list 'equal ~A ~A)))"
      fmt2:="(reval ~A)"
      cmd1:=string FORMAT('NIL,fmt1,mkqsym frm,mkqsym deg)$Lisp 
      cmd2:=string FORMAT('NIL,fmt2,mkqsym frm)$Lisp
      r1:SEX:=slEval(cmd1)$REDBOOT
      r2:SEX:=slEval(cmd2)$REDBOOT
      
    pform(frm:SYM, deg:NNI):% ==
      fmt1:="(pform (list (list 'equal ~A ~A)))"
      fmt2:="(reval ~A)"
      cmd1:=string FORMAT('NIL,fmt1,mkqsym frm,deg)$Lisp 
      cmd2:=string FORMAT('NIL,fmt2,mkqsym frm)$Lisp
      r1:SEX:=slEval(cmd1)$REDBOOT
      r2:SEX:=slEval(cmd2)$REDBOOT

    (u:% * v:%):% ==
      fmt:="(reval (list 'wedge '~A '~A))"
      cmd:=string FORMAT('NIL,fmt,u,v)$Lisp
      r:SEX:=slEval(cmd)$REDBOOT
      
    (u:% + v:%):% ==
      fmt:="(reval (list 'plus '~A '~A))"
      cmd:=string FORMAT('NIL,fmt,u,v)$Lisp
      r:SEX:=slEval(cmd)$REDBOOT
 
    (u:% - v:%):% ==
      fmt:="(reval (list 'difference '~A '~A))"
      cmd:=string FORMAT('NIL,fmt,u,v)$Lisp
      r:SEX:=slEval(cmd)$REDBOOT

    exdegree(u:%):SEX ==
      fmt:="(reval (list 'exdegree '~A))"
      cmd:=string FORMAT('NIL,fmt,u)$Lisp
      r:SEX:=slEval(cmd)$REDBOOT  
      
      
    d(u:%):% ==
      fmt:="(reval (list 'd '~A))"
      cmd:=string FORMAT('NIL,fmt,u)$Lisp
      r:SEX:=slEval(cmd)$REDBOOT  

    spacedim(n:PositiveInteger):SEX ==
      fmt:="(spacedim (list ~A))"
      cmd:=string FORMAT('NIL,fmt,n)$Lisp
      r:SEX:=slEval(cmd)$REDBOOT  
    
    spacedim(s:SYM):SEX ==
      fmt:="(spacedim (list '~A))"
      cmd:=string FORMAT('NIL,fmt,s)$Lisp
      r:SEX:=slEval(cmd)$REDBOOT  

    tvector(vec:SYM):% ==
      fmt1:="(tvector (list ~A))"
      fmt2:="(reval ~A)"
      cmd1:=string FORMAT('NIL,fmt1,mkqsym vec)$Lisp 
      cmd2:=string FORMAT('NIL,fmt2,mkqsym vec)$Lisp
      r1:SEX:=slEval(cmd1)$REDBOOT
      r2:SEX:=slEval(cmd2)$REDBOOT
      
    D(u:%,v:List %):% ==
      fmt:="(reval (list 'partdf '~A ~{'~A ~}))"
      cmd:=string FORMAT('NIL,fmt,u,v)$Lisp
      r:SEX:=slEval(cmd)$REDBOOT       

    innerprod(vec:%,frm:%):% ==
      fmt:="(reval (list 'innerprod '~A '~A))"
      cmd:=string FORMAT('NIL,fmt,vec,frm)$Lisp
      r:SEX:=slEval(cmd)$REDBOOT
      
    liedf(vec:%,frm:%):% ==
      fmt:="(reval (list 'liedf '~A '~A))"
      cmd:=string FORMAT('NIL,fmt,vec,frm)$Lisp
      r:SEX:=slEval(cmd)$REDBOOT
      
    hodge(u:%):% ==
      fmt:="(reval (list 'hodge '~A))"
      cmd:=string FORMAT('NIL,fmt,u)$Lisp
      r:SEX:=slEval(cmd)$REDBOOT  

    fdomain(op:%,vars:List %):% ==
      fmt:="(fdomain (list (list 'equal '~A (list '~A ~{'~A ~}))))"
      cmd:=string FORMAT('NIL,fmt,op,op,vars)$Lisp
      r:SEX:=slEval(cmd)$REDBOOT       


)if LiterateDoc
--
http://www.reduce-algebra.com/manual/manualse146.html
20.21.15 Summary of Operators and Commands

Table 20.9 summarizes EXCALC commands and the page number they are defined on.
------------------------------------------------------------------------------
^ 	                Exterior Multiplication 	1803
@ 	                Partial Differentiation 	1805
@ 	                Tangent Vector 	1808
# 	                Hodge-* Operator 	1820
_| 	                Inner Product 	1815
|_ 	                Lie Derivative 	1818
coframe 	        Declaration of a coframe 	1830
d 	                Exterior differentiation 	1809
displayframe        Displays the frame 	1837
eps 	            Levi-Civita tensor 	1837
exdegree 	        Calculates the exterior degree of an expression 	1802
fdomain 	        Declaration of implicit dependencies 	1806
forder 	            Ordering command 	1840
frame 	            Declares the frame dual to the coframe 	1834
indexrange 	        Declaration of indices 	1825
index_symmetries 	Declares arbitrary index symmetry properties 	1829
keep 	            Structuring command 	1841
killing_vector 	    Structuring command 	1839
metric 	            Clause of COFRAME to specify a metric 	1830
noether 	        Calculates the Noether current 	1823
nosum 	            Inhibits summation convention 	1829
noxpnd d 	        Inhibits the use of product rule for d 	1810
noxpnd @ 	        Inhibits expansion into partial derivatives 	1814
pform 	            Declaration of exterior forms 	1797
remforder 	        Clears ordering 	1841
renosum 	        Enables summation convention 	1829
riemannconx 	    Calculation of a Riemannian Connection 	1837
signature 	        Clause of coframe to specify a pseudo-Euclidean metric 1831 	
spacedim 	        Command to set the dimension of a space 	1804
tvector 	        Declaration of vectors 	1801
vardf 	            Variational derivative 	1822
xpnd d 	            Enables the use of product rule for d (default)	1812 	
xpnd @ 	            Enables expansion into partial derivatives (default) 	1814
	
Table 20.9: EXCALC Command Summary
--
)endif