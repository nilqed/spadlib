Checking for foreign routines
FRICAS="/home/kfp/apps/lib/fricas/target/x86_64-linux-gnu"
spad-lib="/home/kfp/apps/lib/fricas/target/x86_64-linux-gnu/lib/libspad.so"
foreign routines found
openServer result -2
                       FriCAS Computer Algebra System 
           Version: FriCAS 2024-04-15 built with sbcl 2.2.9.debian
                 Timestamp: Wed Apr 24 04:36:24 PM CEST 2024
-----------------------------------------------------------------------------
   Issue )copyright to view copyright notices.
   Issue )summary for a summary of useful system commands.
   Issue )quit to leave FriCAS and return to shell.
-----------------------------------------------------------------------------
 
   Function declaration sixel : TexFormat -> Void has been added to 
      workspace.
)lisp (setf saved-readtable *readtable*)
 
Value = #<READTABLE {100001AF13}>
)lisp (in-package :cl-user)
 
Value = #<PACKAGE "COMMON-LISP-USER">
)lisp (load "bootstrap")
 
;; loading #P"/home/kfp/Desktop/work/fricas-reduce/redbld/boot.sl"
*** Function `EQCAR' has been redefined


+++ Reading file: clprolo.red
nil nil t create-package evload nil nil nil nil nil nil nil nil nil nil nil nil 

+++ Reading file: packages/support/revision.red
nil 6876 nil 

+++ Reading file: packages/rlisp/rlisp.red
nil rlisp nil 11-Oct-2024 nil REDUCE (6876) ((t (load-package (quote rlisp88)) (
rlisp88_on))) nil nil 

+++ Reading file: packages/rlisp/module.red
nil nil symbolic nil nil nil exports imports module endmodule (exports imports
module) endstat nil nil module rlis formload formload load-package nil nil 
load_package packages_to_load rlis rlis nil nil 

+++ Reading file: packages/rlisp/newtok.red
nil nil nil (where *comma* setq) (or and member memq equal neq eq geq greaterp
leq lessp freeof plus difference times quotient expt cons) (plus difference
minus times quotient recip) nil nil (minus recip) mkprec nil nil newtok newtok1 
newtok2 consescc lstchr nil nil nil nil nil nil nil nil nil nil nil nil nil nil 
nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil 
nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil 
nil nil nil nil nil ** nil nil nil nil 

+++ Reading file: packages/rlisp/rsupport.red
nil nil aconc arrayp atsoc copyd nil errorset* errorset2 flagpcar idlistp listp 
mkprog mkquote mksetq pairvars prin2t nil putc nil smemq ssubst subsetp union 
intersection nil nil neq setdiff aconc* nconc* reversip* rplaca* rplacd* 
lispapply lispeval apply1 apply2 apply3 gettype map-reserved-id map-reserved-ids
 get-print-name assgnpri nil nil nil nil nil 

+++ Reading file: packages/rlisp/slfns.red
nil nil nil ((abs 1) (add1 1) (append 2) (apply 2) (assoc 2) (atom 1) (car 1) (
cdr 1) (caar 1) (cadr 1) (cdar 1) (cddr 1) (caaar 1) (caadr 1) (cadar 1) (caddr
1) (cdaar 1) (cdadr 1) (cddar 1) (cdddr 1) (caaaar 1) (caaadr 1) (caadar 1) (
caaddr 1) (cadaar 1) (cadadr 1) (caddar 1) (cadddr 1) (cdaaar 1) (cdaadr 1) (
cdadar 1) (cdaddr 1) (cddaar 1) (cddadr 1) (cdddar 1) (cddddr 1) (close 1) (
codep 1) (compress 1) (cons 2) (constantp 1) (de 3) (deflist 2) (delete 2) (
difference 2) (digit 1) (divide 2) (dm 3) (eject 0) (eq 2) (eqn 2) (equal 2) (
error 2) (errorset 3) (eval 1) (evlis 1) (expand 2) (explode 1) (expt 2) (fix 1)
(fixp 1) (flag 2) (flagp 2) (float 1) (floatp 1) (fluid 1) (fluidp 1) (function
1) (gensym 0) (get 2) (getd 1) (getv 2) (global 1) (globalp 1) (go 1) (greaterp
2) (idp 1) (intern 1) (length 1) (lessp 2) (linelength 1) (liter 1) (lposn 0) (
map 2) (mapc 2) (mapcan 2) (mapcar 2) (mapcon 2) (maplist 2) (max2 2) (member 2)
(memq 2) (minus 1) (minusp 1) (min2 2) (mkvect 1) (nconc 2) (not 1) (null 1) (
numberp 1) (onep 1) (open 2) (pagelength 1) (pair 2) (pairp 1) (plus2 2) (posn 0
) (print 1) (prin1 1) (prin2 1) (prog2 2) (put 3) (putd 3) (putv 3) (quote 1) (
quotient 2) (rds 1) (read 0) (readch 0) (remainder 2) (remd 1) (remflag 2) (
remob 1) (remprop 2) (return 1) (reverse 1) (rplaca 2) (rplacd 2) (sassoc 3) (
set 2) (setq 2) (stringp 1) (sublis 2) (subst 3) (sub1 1) (terpri 0) (times2 2)
(unfluid 1) (upbv 1) (vectorp 1) (wrs 1) (zerop 1)) (abs add1 append apply assoc
atom car cdr caar cadr cdar cddr caaar caadr cadar caddr cdaar cdadr cddar cdddr
caaaar caaadr caadar caaddr cadaar cadadr caddar cadddr cdaaar cdaadr cdadar
cdaddr cddaar cddadr cdddar cddddr close codep compress cons constantp de
deflist delete difference digit divide dm eject eq eqn equal error errorset eval
evlis expand explode expt fix fixp flag flagp float floatp fluid fluidp function
gensym get getd getv global globalp go greaterp idp intern length lessp
linelength liter lposn map mapc mapcan mapcar mapcon maplist max2 member memq
minus minusp min2 mkvect nconc not null numberp onep open pagelength pair pairp
plus2 posn print prin1 prin2 prog2 put putd putv quote quotient rds read readch
remainder remd remflag remob remprop return reverse rplaca rplacd sassoc set
setq stringp sublis subst sub1 terpri times2 unfluid upbv vectorp wrs zerop) nil
 nil 

+++ Reading file: packages/rlisp/superv.red
nil nil nil t t 0 (fname* outl*) 0 errorp printprompt setcloc* commdemo command1
 command update_prompt begin1 nil nil prepare-for-top-loop nil 
prepare-for-web-top-level process-one-reduce-statement begin1a begin11 
getsetvarlis getsetvars nil close-input-files close-output-files add2buflis 
add2inputbuf add2resultbuf condterpri eofcheck resetparser terminalp dfprint nil
 dfprint1 showtime showtime1 showtime2 showtime3 resettime resettime1 resettime2
 resettime3 sinitl getenv_if_not_empty read-init-file nil nil 

+++ Reading file: packages/rlisp/tok.red
nil nil t nil   	 nil t t nil   nil 1 bytelist2string (lambda (u) (list2string u
)) string2bytelist bytelist2id (lambda (u) (intern (list2string u))) nil (lambda
(s n c) (string-store s n c)) nil nil nil nil list2wideid (lambda (u) (intern (
list2widestring u))) int2wideid nil nil nil id2bytelist (lambda (u) (
string2bytelist (id2string u))) wideid2list (lambda (u) (widestring2list (
id2string u))) wideid2int (lambda (u) (car (wideint2list u))) lengthc 
widelengthc length-without-followers prin2x readch1 tokquote tokquote :dn: 
token-number (0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F) nil __line__ __file__
 seprp token tokbquote tokbquote filenderr ptoken rread1 rrdls rread nil delcp (
lambda (u) (flagp u (quote delchar))) toknump nil nil read_long_form_comment nil
 read_slash_star_comment read_slash_star_comment nil nil read_define read_define
 nil (not_within_if) scan_state (lambda nil (car if_stack)) push_state (lambda (
new_state) (setq if_stack (cons new_state if_stack))) pop_state (lambda nil (
setq if_stack (cdr if_stack))) change_state (lambda (new_state) (setq if_stack (
cons new_state (cdr if_stack)))) scan_skip read_if read_if read_else read_else 
read_elif read_elif read_endif read_endif read_eval read_eval scan nil nil 

+++ Reading file: packages/rlisp/xread.red
nil nil nil nil chknewnam mkvar (lambda (u v) u) remcomma eolcheck xcomment 
xread1 nil nil nil xread expread nil nil nil 

+++ Reading file: packages/rlisp/lpri.red
nil nil nil lpri lpriw lprim lprie printty rerror rederr symerr typerr nil nil 

+++ Reading file: packages/rlisp/parser.red
nil nil nil comm1 ifstat ifstat nil functionstat functionstat lamstat lamstat 
readprogn readprogn nil nil nil readvector readvector nil nil nil endstat 
endstat endstat endstat endstat nil endstat1 endstat1 endstat1 endstat1 endstat1
 endstat endstat endstat endstat nil nil 

+++ Reading file: packages/rlisp/block.red
nil nil nil nil gostat gostat go read_parameter_list collect_decls decl 0 
decstat nil blocktyperr mapovercar extract_types add_initializers add_varinfo 
blockstat mkblock rblock symbvarlst make_prog_declares formblock initprogvars 
formprog formprog1 formblock formprog blockstat nil retstat retstat nil nil 

+++ Reading file: packages/rlisp/form.red
nil nil nil aeval nil formcond formcond1 formcond formlamb formlamb pslmacros 
psl:plus psl:times formprogn formprogn expdrmacro getrmacro applmacro applmacro 
nil all-vars-in formquotecode formquotecode set-global-mode form1 form2 formlis 
check_all_symbols formabstract formabstract argnochk nil argsofopr (lambda (u) (
get u (quote number-of-args))) nil t intexprnp intexprlisp nil formlis formclis 
form macrochk symbid symbid algid algid intid intid convertmode convertmode1 
**a2s **s2a smember smemql **a2s **s2a (lambda (u vars) u) formc intargfn **a2i 
**a2i ieval nil nil **s2i **s2i *s2i identity identity (lambda (u vars) u) 
formbool formboollis bool-eval nil nil nil boolvalue* formc* revalx formrerror (
rerror) formrederr formrederr formreturn formreturn rsverr mksetshare formsetq 
formsetq0 formsetq1 formsetq2 formsetq setcar setcdr (lambda (u v) (setcar u v))
 (lambda (u v) (setcdr u v)) (lambda (u v) (setcar (car u) v)) (lambda (u v) (
setcar (cdr u) v)) (lambda (u v) (setcdr (car u) v)) (lambda (u v) (setcdr (cdr
u) v)) (lambda (u v) (setcar (caar u) v)) (lambda (u v) (setcar (cadr u) v)) (
lambda (u v) (setcar (cdar u) v)) (lambda (u v) (setcar (cddr u) v)) (lambda (u
v) (setcdr (caar u) v)) (lambda (u v) (setcdr (cadr u) v)) (lambda (u v) (setcdr
(cdar u) v)) (lambda (u v) (setcdr (cddr u) v)) (lambda (u v) (setcar (caaar u)
v)) (lambda (u v) (setcar (caadr u) v)) (lambda (u v) (setcar (cadar u) v)) (
lambda (u v) (setcar (caddr u) v)) (lambda (u v) (setcar (cdaar u) v)) (lambda (
u v) (setcar (cdadr u) v)) (lambda (u v) (setcar (cddar u) v)) (lambda (u v) (
setcar (cdddr u) v)) (lambda (u v) (setcdr (caaar u) v)) (lambda (u v) (setcdr (
caadr u) v)) (lambda (u v) (setcdr (cadar u) v)) (lambda (u v) (setcdr (caddr u)
v)) (lambda (u v) (setcdr (cdaar u) v)) (lambda (u v) (setcdr (cdadr u) v)) (
lambda (u v) (setcdr (cddar u) v)) (lambda (u v) (setcdr (cdddr u) v)) (lambda (
l i x) (setcar (pnth l i) x)) set_nth (lambda (v i x) (putv v i x)) (lambda (v i
x) (iputv v i x)) formfunc formfunc rlis flagop rlistat nil formrlis mkarg 
rnform rnform dnform dnform-s dnform-f dnform-l dnform1 dnform dnform-s dnform-f
 dnform-l intform intform nil nil 

+++ Reading file: packages/rlisp/proc.red
nil nil t nil nil nil t (expr fexpr macro) portable-embfn portable-embfn mkprogn
 proc-add-info formproc formproc formde formde pairxvars starts-with 
simplify-filename mkhash clrhash gethash puthash hashcontents nil read_type 
read_typed_name read_namelist valid_as_variable nil read_signature 
make_tuple_type collect_cars collect_cdrs procstat1 procstat listprocify 
readlistproc formlistproc formlistproc listproceval (procedure expr fexpr emb
macro inline smacro listproc) procstat (lisp) nil nil 

+++ Reading file: packages/rlisp/forstat.red
nil nil nil (do collect conc product sum) nil (product sum) (product sum) 
forstat forstat forloop formfor formfor algmodep aminusp: aminusp:1 foreachstat 
foreachstat formforeach formforeach forformat nil unreval nil conc nil nil 

+++ Reading file: packages/rlisp/loops.red
nil nil nil repeatstat repeat repeatstat nil formrepeat formrepeat whilstat 
while whilstat nil formwhile formwhile nil nil 

+++ Reading file: packages/rlisp/statmisc.red
nil nil define (define) nil formwrite rlis formwrite nil rlis formechopr 
formechopr nil nil 0 local-symbol cheaptoevaluate allcheaptoevaluate 
pushpop-locals formpush formpush formpop formpop nil nil 

+++ Reading file: packages/rlisp/smacro.red
nil nil applsmacro applinline log_inlines log_assignment 
log_assignment_list_list log_assignment_list log_freevars log_freevars_list_list
 log_freevars_list no-side-effectp very-no-side-effectp no-side-effect-listp 
very-no-side-effect-listp nil nil one-entryp one-entry-listp delasc subla-q 
applsmacro applsmacro makecarcdr setcar setcdr expand_accessor nil accessors 
rlis nil nil 

+++ Reading file: packages/rlisp/io.red
nil nil nil file-transform infile in in_tex in_non_empty_list in_non_empty_list1
 mkfil* in_list1 in_list1a out out_non_empty_list shut shut_non_empty_list (in
in_tex out shut) nil nil rlisp_printf rlisp_bldmsg nil rlisp_printf rlisp_bldmsg
 rlisp_prinl nil nil 

+++ Reading file: packages/rlisp/infix.red
nil nil nil forminfix forminfix infix precedence (infix precedence) nil nil nil 

+++ Reading file: packages/rlisp/switch.red
nil nil nil add-to-sorted-tree flatten-sorted-tree string-of-list nil  on off 
off1 on1 onoff nil onoff-reset switch (switch) nil rlis rlis nil nil ((t (flag (
list $eol$) (quote delchar))) (nil (remflag (list $eol$) (quote delchar)))) nil 
((t (load-package (quote reduce4)) (%reduce4))) nil nil 

+++ Reading file: packages/rlisp/where.red
nil formwhere formwhere nil nil 

+++ Reading file: packages/rlisp/list.red
nil nil nil list quotelist quotelist (lambda (u) (quote list)) nconc2 xreadlist 
xreadlist nil nil nil nil listeval simpiden getrlist listeval makelist (lambda (
u) (cons (quote list) u)) lengthcdr lengthcdr (lambda (u) (length (cdr u))) 
listpri listpri treesizep (lambda (u n) (zerop (treesizep1 u n))) treesizep1 
listeval0 rlistp (lambda (u) (eqcar u (quote list))) rfirst rfirst parterr 
rsecond rsecond rthird rthird (first second third part) rrest rrest (first
second third rest) rappend rappend rcons rcons rreverse rreverse listmap listmap
 nil listsort listsort nil nil 

+++ Reading file: packages/rlisp/array.red
nil nil nil getel getel1 setel setel1 dimension typechk arrayfn nil add1lis 
mkarray mkarray1 rlis nil formarray formarray arraychk arraychk arrayeval 
arrayeval arraylength arraylength nil nil 

+++ Reading file: packages/rlisp/inter.red
nil nil nil pause pause1 assoccar yesp nil cont (cont pause retry) nil nil nil 
machine_speed nil aftergcsystemhook aftergcsystemhook with-timeout 
with-normalized-timeout nil nil 

+++ Reading file: packages/rlisp/charname.red
nil nil nil nil 

+++ Reading file: packages/rlisp/newtok1.red
nil nil nil nil nil 

+++ Reading file: packages/support/smacros.red
nil 

+++ Reading file: clrend.red
nil clrend nil nil nil carcheck endstat nil ((close-output-files) (quit)) bye (
bye) bye mkfil   	 seprp setpchar printprompt nil nil 8388608 nil begin nil 0 
t initreduce nil (tr untr trst untrst) 
+++ Record new inline definition:
(de prin (x) (prin1 x))
prin nil 
+++ Record new inline definition:
(de printc (x) (progn (prin2 x) (terpri) x))
printc nil ttab 
+++ Record new inline definition:
(de explodec (x) (explode2 x))
explodec ((t (compilation t)) (nil (compilation nil))) nil 
systo_get-resource-directory nil compute-prompt-string nil random_init 
rename-file nil nil lalr_collect_terminals nil nil nil 

+++ Reading file: packages/poly/poly.red
nil poly nil nil nil nil nil nil nil nil nil 
+++ Record new inline definition:
(de add (u v) (cons u v))
add nil nil nil nil 
+++ Record new inline definition:
(de mult (u v) (cons u v))
mult 
+++ Record new inline definition:
(de over (u v) (cons u v))
over 
+++ Record new inline definition:
(de domainp (u) (or (atom u) (atom (car u))))
domainp 
+++ Record new inline definition:
(de !*a2f (u) (!*q2f (simp!* u)))
*a2f *a2k *a2kwoweight *d2q *ff2a 
+++ Record new inline definition:
(de !*f2a (u) (prepf u))
*f2a 
+++ Record new inline definition:
(de !*f2q (u) (cons u 1))
*f2q 
+++ Record new inline definition:
(de !*k2f (u) (list (cons (to u 1) 1)))
*k2f 
+++ Record new inline definition:
(de !*kk2f (u) (list (cons (mksp u 1) 1)))
*kk2f 
+++ Record new inline definition:
(de !*kk2q (u) (cons (list (cons (mksp u 1) 1)) 1))
*kk2q 
+++ Record new inline definition:
(de !*k2q (u) (cons (list (cons (to u 1) 1)) 1))
*k2q 
+++ Record new inline definition:
(de !*n2f (u) (cond ((zerop u) nil) (t u)))
*n2f 
+++ Record new inline definition:
(de !*p2f (u) (list (cons u 1)))
*p2f 
+++ Record new inline definition:
(de !*p2q (u) (cons (list (cons u 1)) 1))
*p2q 
+++ Record new inline definition:
(de !*q2a (u) (!*q2a1 u !*nosq))
*q2a *q2a1 *q2f *q2k 
+++ Record new inline definition:
(de !*t2f (u) (list u))
*t2f 
+++ Record new inline definition:
(de !*t2q (u) (cons (list u) 1))
*t2q nil nil 

+++ Reading file: packages/poly/polrep.red
nil nil nil ((t (rmsubs))) nil 
+++ Record new inline definition:
(de subtrsq (u v) (addsq u (negsq v)))
subtrsq addsq multsq negsq 
+++ Record new inline definition:
(de multpq (u v) (multsq (cons (list (cons u 1)) 1) v))
multpq cancel 
+++ Record new inline definition:
(de peq (u v) (and (eq (car u) (car v)) (eqn (cdr u) (cdr v))))
peq addf addd adddm 
+++ Record new inline definition:
(de noncomp (u) (and !*ncmp (noncomp1 u)))
noncomp noncomp1 noncomlistp 
+++ Record new inline definition:
(de multf (u v) (cond (!*physop!-loaded (physop!-multf u v)) (t (poly!-multf u v
))))
multf poly-multf 
+++ Record new inline definition:
(de noncomfp (u) (and !*ncmp (noncomfp1 u)))
noncomfp noncomfp1 multfnc poly-multfnc multd multdm 
+++ Record new inline definition:
(de multpf (u v) ((lambda (g607013) (cond (!*physop!-loaded (physop!-multf
g607013 v)) (t (poly!-multf g607013 v)))) (list (cons u 1))))
multpf negf degreef *sqlength *sqlength terms nil nil termsf tmsf tmsf* tms nil 
nil nil offexpchk freevarinexptchk mkprod expnd expnd1 canprod sfpf sfp reprod 
cprod1 cprod2 mkspm sub2chk 
+++ Record new inline definition:
(de quotsq (u v) (multsq u (invsq v)))
quotsq quotf* 
+++ Record new inline definition:
(de quotf (u v) ((lambda (!*exp) (quotf1 u v)) t))
quotf quotf1 rnconc quotfd divd divdm quotdd quotk quotf-fail rank lt* remf 
qremf praddf qremd lqremf minusf absf* absf canonsq fieldconv simpgd lnc invsq 
gcdchk nil nil 

+++ Reading file: packages/poly/polydiv.red
nil poly-divide poly-divide nil poly-remainder poly-remainder poly-remainder 
poly-quotient poly-quotient nil nil nil nil pseudo-divide pseudo-divide 
pseudo-remainder pseudo-remainder pseudo-quotient pseudo-quotient 
pseudo-quotient nil poly-divide* poly-divide** pseudo-qremf coeffs-to-form 
coeffs-to-form1 domainp_list nil nil 

+++ Reading file: packages/poly/quotf.red
nil quotfx quotfx1 quotkx quotfdx quotfxerr cutf cutf1 nil nil 

+++ Reading file: packages/poly/gcd.red
nil nil nil comfac degr gcdf* 2 gcdf* gcdf free-powerp gcdf1 gcdf2 gcdfnc 
num-exponents gcdfd gcdfd1 gcddd gcdk addlc delallasc kernord kernord-split 
kernord-sort maxdeg powers powers0 lcm* 2 lcm* lcm remk prim-part comfac-to-poly
 nil nil 

+++ Reading file: packages/poly/exptf.red
nil nil exptsq exptf exptf1 exptf2 nil nil 

+++ Reading file: packages/poly/kernel.red
nil nil nil (3) fkern remklist resetklist kernels kernels1 kernp nil nil 

+++ Reading file: packages/poly/mksp.red
nil nil nil getpower 
+++ Record new inline definition:
(de mksp (u p) (getpower (fkern u) p))
mksp 
+++ Record new inline definition:
(de to (u p) (cons u p))
to mksp* mksfpf mksq nil nil 

+++ Reading file: packages/poly/reord.red
nil nil (nil) reordsq reorder raddf rmultpf reordop kernel-list korder nil 
setkorder updkorder nil nil 

+++ Reading file: packages/poly/dmode.red
nil nil nil initdmode setdmode setdmode1 offmoderr dmodechk dmoderr mkdmoderr 
nil nil 

+++ Reading file: packages/poly/dmodeop.red
nil nil :difference :divide dividef :expt :gcd :minus :minusp :onep :plus 
:quotient :recip :rn2rd :times :zerop fieldp gettransferfn dcombine 
int-equiv-chk :abs :repart :impart nil nil 

+++ Reading file: packages/poly/rational.red
nil nil nil (:rn:) :rn: rational nil *i2rn *rn2ft rnminus: rnminusp: rnplus: 
rntimes: rndifference: rnquotient: rnzerop: rnonep: rnfactor: rnexpt: rnprep: 
rnprin rnequiv rn:root nil rnexpt: mkratnum mkrn *i2rn rnminus: rnminusp: 
rnplus: rntimes: rndifference: rnquotient: rnzerop: rnonep: rnfactor: rnprep: 
rnprin rnequiv rn:root nil nil nil 

+++ Reading file: packages/poly/rnelem.red
nil nil (fix round ceiling floor factorial perm choose) nil nil (perm choose) 
rnfix* rnfixchk rnfloor* rnceiling* rnround* rnilog2* rnfactorial* rnperm* perm 
rnchoose* choose simprn rnirootn* nil nil 

+++ Reading file: packages/poly/gint.red
nil nil nil nil (:gi: :rn:) setcmpxmode intgcdd :gi: complex *i2gi giminusp: 
gizerop: gionep: giplus: gidifference: gitimes: giquotient: gidivide: gigcd: 
gifactor: giprep: gintequiv: giprn: giprn: mkgi :gi:unitconv :gi:unitconv (((
:gi: 0 . 1) :gi: 0 . -1) ((:gi: 0 . -1) :gi: 0 . 1)) unitconv *i2gi giminusp: 
gizerop: gionep: gintequiv: mkdgi mkgi giplus: gidifference: gitimes: 
giquotient: gidivide: giremainder gigcd: fqa gifactor: normalize-lcgi 
contains-oddpower power-sort sqfrp realp fd2f giprep: giprim giprn: 
girationalize: gigcdsq giintgcd conjgd nil nil nil 

+++ Reading file: packages/poly/cpxrn.red
nil nil nil nil nil t nil (:crn: :gi: :rn:) nil :crn: complex-rational nil 
i2crn* crn:plus crn:times crn:differ crn:quotient crn:zerop crn:onep crn:prep 
crn:prin crn:minus crn:factor girationalize: *crn2rn *rn2crn *rd2crn *crn2rd 
*gi2crn mkcrn mkdcrn crnequiv :rn: :crn: crn:minusp mkcrn 
+++ Record new inline definition:
(de crntag (x) (cons (quote !:crn!:) x))
crntag 
+++ Record new inline definition:
(de rntag (x) (cons (quote !:rn!:) x))
rntag 
+++ Record new inline definition:
(de crnrl (x) (cadr x))
crnrl 
+++ Record new inline definition:
(de crnim (x) (cddr x))
crnim crn:minusp crn:simp crn:simp mkdcrn i2crn* *crn2rn *rn2crn *crn2rd *rd2crn
 *gi2crn crn:plus crn:differ crn:times crn:quotient crn:minus crn:zerop crn:onep
 crn:prep crn:factor crnprimp crnprep1 crn:prin crnequiv nil nil nil 

+++ Reading file: packages/poly/compopr.red
nil nil simprepart simprepart repartsq simpimpart simpimpart impartsq 
simpreimpart simpreimpart simpreimpart1 simpconj simpconj cmpx_conjsf cmpx_conjt
 selfconj-expt get_conj conjsq 
+++ Record new inline definition:
(de idomainp nil (get (quote i) (quote idvalfn)))
idomainp splitcomplex expand-imrepart expand-imrepartpow get_conj1 get_conj2 
mkrepart mkimpart take-realpart repartf take-impart impartf nil realvalued 
notrealvalued nil realvaluedp realvaluedlist realvaluedp-sf nil nil nil nil nil 
expt-realvalued expt-realvalued log-realvalued log-realvalued log-realvalued 
sqrt-realvalued sqrt-realvalued asin-realvalued asin-realvalued asin-realvalued 
asec-realvalued asec-realvalued asec-realvalued atanh-realvalued 
atanh-realvalued acoth-realvalued acoth-realvalued acosh-realvalued 
acosh-realvalued asech-realvalued asech-realvalued conjugate nil selfconjugate 
reimsin reimsin reimsinh reimsinh reimcos reimcos reimcosh reimcosh reimexpt 
reimexpt reimsqrt reimsqrt reimtan reimtan reimtanh reimtanh reimcot reimcot 
reimcoth reimcoth reimsec reimsec reimsech reimsech reimcsc reimcsc reimcsch 
reimcsch reimlog reimlog reimlog invfn-args reimasin reimasin reimasin reimasinh
 reimasinh reimacosh reimacosh reimatanh reimatanh reimatan reimatan reimatan 
reimasec reimasec reimacsc reimacsc reimasech reimasech reimacsch reimacsch 
reimacoth reimacoth simp nil nil 

+++ Reading file: packages/poly/modular.red
nil nil nil nil (:mod: :crn: :gi: :rn:) :mod: modular nil nil *i2mod modcnv 
modcnv modminusp: modplus: modtimes: moddifference: modquotient: moddivide: 
modgcd: modzerop: modonep: factormod: factormod: exptmod: modprep: (lambda (x) (
prin2* (prepf x))) :mod:unitconv *modular2f exptmod: :mod:unitconv :mod:units 
*i2mod modcnv modminusp: modplus: modtimes: moddifference: moddivide: modgcd: 
modquotient: modzerop: modonep: factormod: modprep: nil setmod setmod evalmod 
mod-domainvalchk mod-domainvalchk mod-expt-fract mod-error nil nil 

+++ Reading file: packages/poly/facform.red
nil nil nil ((t (rmsubs) (setq *exp nil)) (nil (rmsubs) (setq *exp t))) 
fac-merge factorize facform2list facform2list2 old_factorize factorize-mod-p nil
 pairlist2list 
+++ Record new inline definition:
(de factorf (u) (fctrf u))
factorf fctrf fctrf1 factorize-form-recursion factor-prim-f factor-prim-sqfree-f
 unifactor distribute.multiplicity internal-factorf factor-prim-sqfree-f-1 sqfrf
 square_free nil diff diffp1 nil nil 

+++ Reading file: packages/poly/homog.red
nil homogp subs0 varss rconstnm rconst1 rconst nil nil 

+++ Reading file: packages/poly/tdconv.red
nil setunion searchtm searchpl qsort mapins mkzl sq2sstm sq2sscfpl sq2sspl 
sdlist univsdl2sq mapdel mulvsdl2sq sdl2sq termorder1 listsum termorder xxsort 
lxsort delet lx2xx lastnondomain xx2lx sf2ss ss2sf nil nil 

+++ Reading file: packages/poly/primfac.red
nil nil prsqfrfacf factor-ordered-sqfree-prim-f downpower downpower1 uppower 
uppower1 uppower2 univariatep univariatep1 special-case-factor degreegcd 
factor-coeffs nil nil 

+++ Reading file: packages/poly/specfac.red
nil nil nil coeffs shift-pol quadraticf* quadraticf quadraticf1 rootxf mkrootf 
nrootn* cubicf powsubsf quarticf nil nil 

+++ Reading file: packages/poly/kronf.red
nil linfacf quadfacf trykrf subuf adddm* multdm* dfactors combinationtimes putin
 search4facf tryfactorf linethroughf quadthroughf nil nil 

+++ Reading file: packages/poly/conj.red
nil nil ((t (rmsubs)) (nil (rmsubs))) 
+++ Record new inline definition:
(de subtrf (u v) (addf u (negf v)))
subtrf rationalizesq lowertowerp lowertowerp1 exprsize rationalizef 
conjquadratic conjcubic conj2 conjquartic mkmain nil nil 

+++ Reading file: packages/poly/diff.red
nil nil nil nil nil (dfint allowdfint) nil (commutedf nocommutedf simpnoncomdf) 
nil (expanddf) simpdf d2int simpdf prekernp diffsq difff diffp diffpmatch 
get-all-kernels df-chain-rule dfform_int not_df_p dfn_prop find_sub_df is_sub_df
 dot_df_args merge-ind-vars derad* derad letdf frlp lpos nil nil 

+++ Reading file: packages/poly/polyop.red
nil nil deg totaldeg totaldeg1 tstpolyarg2 numrdeg lcofeval lcofeval lcof lpower
 lterm mainvar sfchk reduct tstpolyarg nil nil nil 

+++ Reading file: packages/poly/decompos.red
nil nil decomposesf decomposesf decomposef1 decomposef2 decomposesfvars 
decomposesfuni0 decomposesfuni decomposefctrf decomposefctrf1 
decomposebacksubstuni decomposedf decomposeint decomposecoeff decomposecoeff1 
decomposetdg decomposedegr compose decomposesfmulti decomposesfmulti1 
decomposelmon decomposenormfac decomposecont decomposesign decomposesfmnorm 
decomposehomog decomposehomog1 decomposegensym nil nil 

+++ Reading file: packages/poly/interpol.red
nil interpol nil nil nil 

+++ Reading file: packages/poly/subs2q.red
nil nil nil nil subs2q subs2f subs2f1 subs2p raddsq mtchp mtchp1 powmtch mchk* 
nil nil 

+++ Reading file: packages/poly/subs3q.red
nil nil nil subs3q subs3f subs3f1 subs3t sizchk mtchk nocp nil nil 

+++ Reading file: packages/poly/subs4q.red
nil subs4q nil nil 

+++ Reading file: packages/poly/horner.red
nil nil hornersq hornerf hornerf1 hornerf nil nil 

+++ Reading file: packages/poly/heugcd.red
nil nil nil htc kontent kontent1 horner-eval-rat horner-eval-rational 
horner-eval-integer horner-eval-reciprocal horner-eval-rat-and-gcdl 
horner-eval-rat-and-gcdl1 heu-quotfl heu-quotfl1 heu-quotf 
+++ Record new inline definition:
(de xceiling (n d) (quotient (plus n (difference d 1)) d))
xceiling 
+++ Record new inline definition:
(de force!-even (x) (cond ((evenp x) x) (t (plus x 1))))
force-even 
+++ Record new inline definition:
(de force!-odd (x) (cond ((evenp x) (plus x 1)) (t x)))
force-odd 
+++ Record new inline definition:
(de next!-even!-value (x) (cond ((equal (cdr x) 1) (cons ((lambda (x) (cond ((
evenp x) x) (t (plus x 1)))) (fix (times (car x) !!ee))) 1)) (t (cons 1 ((lambda
(x) (cond ((evenp x) x) (t (plus x 1)))) (fix (times (cdr x) !!ee)))))))
next-even-value 
+++ Record new inline definition:
(de next!-odd!-value (x) (cond ((equal (cdr x) 1) (cons ((lambda (x) (cond ((
evenp x) (plus x 1)) (t x))) (fix (times (car x) !!ee))) 1)) (t (cons 1 ((lambda
(x) (cond ((evenp x) (plus x 1)) (t x))) (fix (times (cdr x) !!ee)))))))
next-odd-value 
+++ Record new inline definition:
(de first!-value (inp inq lcp lcq tcp tcq) (cond ((lessp lcp tcp) (cond ((lessp
lcq tcq) (cond ((lessp (times inp tcq) (times inq tcp)) (cons 1 (plus 2 (times 2
(quotient (plus inp (difference tcp 1)) tcp))))) (t (cons 1 (plus 2 (times 2 (
quotient (plus inq (difference tcq 1)) tcq))))))) ((lessp (times inp lcq) (times
inq tcp)) (cons 1 (plus 2 (times 2 (quotient (plus inp (difference tcp 1)) tcp))
))) (t (cons (plus 2 (times 2 (quotient (plus inq (difference lcq 1)) lcq))) 1))
)) ((lessp lcq tcq) (cond ((lessp (times inp tcq) (times inq lcp)) (cons (plus 2
(times 2 (quotient (plus inp (difference lcp 1)) lcp))) 1)) (t (cons 1 (plus 2 (
times 2 (quotient (plus inq (difference tcq 1)) tcq))))))) ((lessp (times inp
lcq) (times inq lcp)) (cons (plus 2 (times 2 (quotient (plus inp (difference lcp
1)) lcp))) 1)) (t (cons (plus 2 (times 2 (quotient (plus inq (difference lcq 1))
lcq))) 1))))
first-value 
+++ Record new inline definition:
(de second!-value (inp inq lcp lcq lgcd tcp tcq tgcd) ((lambda (inp inq lcp lcq
tcp tcq) (cond ((lessp lcp tcp) (cond ((lessp lcq tcq) (cond ((lessp (times inp
tcq) (times inq tcp)) (cons 1 ((lambda (x) (cond ((evenp x) x) (t (plus x 1))))
(plus 2 (quotient (plus inp (difference tcp 1)) tcp))))) (t (cons 1 ((lambda (x)
(cond ((evenp x) x) (t (plus x 1)))) (plus 2 (quotient (plus inq (difference tcq
1)) tcq))))))) ((lessp (times inp lcq) (times inq tcp)) (cons 1 ((lambda (x) (
cond ((evenp x) x) (t (plus x 1)))) (plus 2 (quotient (plus inp (difference tcp
1)) tcp))))) (t (cons ((lambda (x) (cond ((evenp x) x) (t (plus x 1)))) (plus 2
(quotient (plus inq (difference lcq 1)) lcq))) 1)))) ((lessp lcq tcq) (cond ((
lessp (times inp tcq) (times inq lcp)) (cons ((lambda (x) (cond ((evenp x) x) (t
(plus x 1)))) (plus 2 (quotient (plus inp (difference lcp 1)) lcp))) 1)) (t (
cons 1 ((lambda (x) (cond ((evenp x) x) (t (plus x 1)))) (plus 2 (quotient (plus
inq (difference tcq 1)) tcq))))))) ((lessp (times inp lcq) (times inq lcp)) (
cons ((lambda (x) (cond ((evenp x) x) (t (plus x 1)))) (plus 2 (quotient (plus
inp (difference lcp 1)) lcp))) 1)) (t (cons ((lambda (x) (cond ((evenp x) x) (t
(plus x 1)))) (plus 2 (quotient (plus inq (difference lcq 1)) lcq))) 1)))) inp
inq (max 2 (quotient lcp lgcd)) (max 2 (quotient lcq lgcd)) (max 2 (quotient tcp
tgcd)) (max 2 (quotient tcq tgcd))))
second-value heu-gcd-list heu-gcdl heu-gcd analyse-polynomial 
analyse-polynomial1 
+++ Record new inline definition:
(de negshiftz (n modulus) ((lambda (nn mmodulus) (cond ((greaterp nn (quotient
mmodulus 2)) (difference nn mmodulus)) (t nn))) n modulus))
negshiftz gen-poly gen-poly-forward gen-poly-backward nil nil 

+++ Reading file: packages/alg/alg.red
nil alg nil (cons nil nil) (eval_mode cardno* fortwidth* high_pow low_pow
root_multiplicities) nil nil 

+++ Reading file: packages/alg/alg-form.red
nil nil forminput forminput formws formws nil nil 

+++ Reading file: packages/alg/intro.red
nil nil nil t t t symbolic t t t t t t t t ((*)) (subfg* *sub2 tstack* fname*
outl*) 0 2000 t 0 t 0 reversip2 t mkid nil multiple-result fillin fillin1 
*** local variable pline* in procedure msgpri not used 
msgpri errach errpri1 errpri2 redmsg typerr nil nil nil (exp factor fort gcd
intstr mcd nat numval rationalize reduced val) nil nil nil 

+++ Reading file: packages/alg/lifted.red
nil 
+++ Record new inline definition:
(de revpr (u) (cons (cdr u) (car u)))
revpr carx nlist mapcons mappend smemqlp 
+++ Record new inline definition:
(de !*k2pf (u) (cons (cons u (cons 1 1)) nil))
*k2pf 
+++ Record new inline definition:
(de negpf (u) (multpfsq u (cons (minus 1) 1)))
negpf 
+++ Record new inline definition:
(de lowerind (u) (list (quote minus) u))
lowerind 
+++ Record new inline definition:
(de get!*fdeg (u) ((lambda (x) (cond (x (car x)) (t nil))) (get u (quote fdegree
))))
get*fdeg 
+++ Record new inline definition:
(de get!*ifdeg (u) ((lambda (x) (cond (x (cdr x)) (t nil))) (assoc (length (cdr
u)) (get (car u) (quote ifdegree)))))
get*ifdeg fancy-level 
+++ Record new inline definition:
(de add!+vector!+to!+list (vector1 vectorlist) (append vectorlist (list vector1)
))
add+vector+to+list adomainp adomainpx revalnuminterval nil nil 

+++ Reading file: packages/alg/farith.red
nil 
*** iplus2 not defined (LOSE flag) 
nil 
*** itimes2 not defined (LOSE flag) 
nil 
*** isub1 not defined (LOSE flag) 
nil 
*** iadd1 not defined (LOSE flag) 
nil nil 
*** iminus not defined (LOSE flag) 
nil 
*** idifference not defined (LOSE flag) 
nil 
*** iquotient not defined (LOSE flag) 
nil 
*** iremainder not defined (LOSE flag) 
nil 
*** igreaterp not defined (LOSE flag) 
nil 
*** ilessp not defined (LOSE flag) 
nil 
*** iminusp not defined (LOSE flag) 
nil 
*** iequal not defined (LOSE flag) 
nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil (idifference
) (iminus) (iminus) nil nil 

+++ Reading file: packages/alg/numsup.red
nil 
*** gcdn not defined (LOSE flag) 
nil nil nil 

+++ Reading file: packages/alg/zfactor.red
nil nil nil nil 10 nil (2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71
73 79 83 89 97 101 103 107 109 113 127 131 137 139 149 151 157 163 167 173 179
181 191 193 197 199 211 223 227 229 233 239 241 251 257 263 269 271 277 281 283
293 307 311 313 317 331 337 347 349 353 359 367 373 379 383 389 397 401 409 419
421 431 433 439 443 449 457 461 463 467 479 487 491 499 503 509 521 523 541 547
557 563 569 571 577 587 593 599 601 607 613 617 619 631 641 643 647 653 659 661
673 677 683 691 701 709 719 727 733 739 743 751 757 761 769 773 787 797 809 811
821 823 827 829 839 853 857 859 863 877 881 883 887 907 911 919 929 937 941 947
953 967 971 977 983 991 997 1009 1013 1019 1021 1031 1033 1039 1049 1051 1061
1063 1069 1087 1091 1093 1097 1103 1109 1117 1123 1129 1151 1153 1163 1171 1181
1187 1193 1201 1213 1217 1223 1229 1231 1237 1249 1259 1277 1279 1283 1289 1291
1297 1301 1303 1307 1319 1321 1327 1361 1367 1373 1381 1399 1409 1423 1427 1429
1433 1439 1447 1451 1453 1459 1471 1481 1483 1487 1489 1493 1499 1511 1523 1531
1543 1549 1553 1559 1567 1571 1579 1583 1597 1601 1607 1609 1613 1619 1621 1627
1637 1657 1663 1667 1669 1693 1697 1699 1709 1721 1723 1733 1741 1747 1753 1759
1777 1783 1787 1789 1801 1811 1823 1831 1847 1861 1867 1871 1873 1877 1879 1889
1901 1907 1913 1931 1933 1949 1951 1973 1979 1987 1993 1997 1999 2003 2011 2017
2027 2029 2039 2053 2063 2069 2081 2083 2087 2089 2099 2111 2113 2129 2131 2137
2141 2143 2153 2161 2179 2203 2207 2213 2221 2237 2239 2243 2251 2267 2269 2273
2281 2287 2293 2297 2309 2311 2333 2339 2341 2347 2351 2357 2371 2377 2381 2383
2389 2393 2399 2411 2417 2423 2437 2441 2447 2459 2467 2473 2477 2503 2521 2531
2539 2543 2549 2551 2557 2579 2591 2593 2609 2617 2621 2633 2647 2657 2659 2663
2671 2677 2683 2687 2689 2693 2699 2707 2711 2713 2719 2729 2731 2741 2749 2753
2767 2777 2789 2791 2797 2801 2803 2819 2833 2837 2843 2851 2857 2861 2879 2887
2897 2903 2909 2917 2927 2939 2953 2957 2963 2969 2971 2999 3001 3011 3019 3023
3037 3041 3049 3061 3067 3079 3083 3089 3109 3119 3121 3137 3163 3167 3169 3181
3187 3191 3203 3209 3217 3221 3229 3251 3253 3257 3259 3271 3299 3301 3307 3313
3319 3323 3329 3331 3343 3347 3359 3361 3371 3373 3389 3391 3407 3413 3433 3449
3457 3461 3463 3467 3469 3491 3499 3511 3517 3527 3529 3533 3539 3541 3547 3557
3559 3571) 3571 12752041 
*** evenp not defined (LOSE flag) 
nil nil add-factor zfactor zfactor1 mcfactor* mcfactor nil nil primep nil 
internal-primep lsd nil logbitp nil integer-length nil nil [1689570158
2171409050 2253016114 563511821 1510225097 2760466720 696652100 1244168913
843202608 137664801 1109722699 344606852 1815101957 188789768 307300512
1694796072 2152476824 2148680854 1091715617 3223389385 9973042 134498560
2187892353 570959280 1084393800 2416191065 809713670 1761645124 134775312
306253220 604029024 140583634 2182808708 17879809 3225722882 345071650 78004236
153130194 5382292 1285689352 1359053312 2760574992 1144035877 55316609
2152867074 545540360 402666064 605110434 25428264 172072961 905987346 690356232
3227615875 269485184 1210187885 3255576152 612976656 1159747616 419439752
281027842 18090088 2150118090 642450432 1620054784] [17490 5756 7143 10476 13223
5143 54949 46324 11327 21776 14 11348 1837 11945 17130 814 24668 27778 29292
12320 27999 24665 217 2136 370 15513 11577 11464 9734 5117 4796 11231 1760 9541
13930 1807 10976 11212 46077 10885 13981 148 415 4031 26689 9236 2257 14300 183
6148 31088 7970 6283 556 2674 6442 3501 17049 20938 44337 7812 4627 21294 6768
5134 40093 4662 774 12178 10453 16975 20017 3405 32346 11745 294 14936 20713
3371 13471 3728 4090 40339 57759 22007 1115 24211 10564 13850 11754 2278 5745
16753 51913 13076 1160 2581 13858 13147 1072 44224 5022 1417 19493 39737 6276
6792 4207 6345 40285 23786 51941 4542 3302 9249 6428 35246 4981 9628 9231 23685
15481 2335 34333 27605 11926 6602 6167 2161 6073 10601 4248 46263 2678 6247 8332
5569 4439 50964 2326 17596 1511 43893 11640 2691 40811 4676 32329 3214 18961
9118 3713 41097 4067 9690 8901 3074 67 3153 985 33378 8698 16533 41199 47465
47912 21939 21286 652 21348 12998 3723 1294 8768 7897 60772 9880 25647 5644 1481
16626 1608 16379 25558 176 5553 17031 9330 6323 2764 5798 4108 6234 51499 19125
1845 22910 9111 5817 55318 2221 7784 13964 46759 3442 14692 6748 6657 7293 1576
330 27166 1625 10388 16052 6421] nil nil primep32 general-miller-rabin 
general-primep jacobi-symbol nil is-perfect-square nil lucas_test nextprime 
nextprime nrootnn nil nil 

+++ Reading file: packages/alg/reval.red
nil nil nil nil 
+++ Record new inline definition:
(de reval (u) (reval1 u t))
reval 
+++ Record new inline definition:
(de aeval (u) (reval1 u nil))
aeval aeval* nil nil ((t (rmsubs))) reval1 simphold simphold nil rmmbreval 
remember rlis recursiveerror car opfneval1 tralg untralg nil (tralg tralgst) 
opfneval nil reval2 getrtype 
*** local variable u in procedure getrtype1 not used 
getrtype1 getrtype2 nil rtypecar (rtypecar) nil (quotient times *sq) 
+++ Record new inline definition:
(de getrtypecar (u) (getrtype (car u)))
getrtypecar getrtypeor eqexpr *eqn2a prepsqyy getelv setelv reval_without_mod 
revlis revop1 mk*sq *sq expchk lengthreval lengthreval yetunknowntypeeval 
eval-yetunknowntypeexpr yetunknowntypeeval nil nil 

+++ Reading file: packages/alg/algbool.red
nil evalequal evalequal quoteequation 
+++ Record new inline definition:
(de quoteequation (u) (quote equation))

*** local variable u in procedure quoteequation not used 
quoteequation evalgreaterp evalgreaterp 
+++ Record new inline definition:
(de evalgeq (u v) (not (evallessp u v)))
evalgeq evalgeq 
+++ Record new inline definition:
(de evallessp (u v) (evalgreaterp v u))
evallessp evallessp 
+++ Record new inline definition:
(de evalleq (u v) (not (evalgreaterp u v)))
evalleq evalleq 
+++ Record new inline definition:
(de evalneq (u v) (not (evalequal u v)))
evalneq evalneq evalnumberp evalnumberp nil ratnump nil nil nil 

+++ Reading file: packages/alg/simp.red
nil nil nil nil nil nil 10000 ((t (rmsubs))) (cons nil nil) 0 (simpcount*
alglist* subfg* *sub2 tstack* fname* outl*) 1000 noncom noncom1 rlis simp* 
rationalizei subs2 
+++ Record new inline definition:
(de add_to_alglist (key val l) (cons (cons key val) l))
add_to_alglist 
+++ Record new inline definition:
(de search_alglist (key l) (prog (r) (setq r (assoc key l)) (cond ((null r) (
return r)) (t (return (cdr r))))))
search_alglist 
+++ Record new inline definition:
(de alglist_contents (l) l)
alglist_contents 
+++ Record new inline definition:
(de delete_from_alglist (key l) (delasc key l))
delete_from_alglist simp opmtchrevop simp_without_resimp getelv setelv getinfix 
*ssave numlis simpatom nil mkop 
+++ Record new inline definition:
(de operatorp (u) (eq (gettype u) (quote operator)))
operatorp 
+++ Record new inline definition:
(de simpcar (u) (simp (car u)))
simpcar simpcar share boundp setifngfl nil nil nil 
+++ Record new inline definition:
(de simpexpon (u) (simpexpon1 u (quote simp!*)))
simpexpon simpexpon1 nil 
+++ Record new inline definition:
(de simpexpt (u) (cond (!*qsum!-simpexpt (qsum!-simpexpt u)) (t (basic!-simpexpt
u))))
simpexpt nil 
*** local variable w in procedure qsum-simpexpt not used 
qsum-simpexpt qsum-simpexpt1 basic-simpexpt simpexpt1 simpexptfctr simpexpt11 
simpexpt2 posnump posnumlistp simpexpt split-sign conv2gid conv2gi2 simpx1 expf 
simprad radfa radfb mkrootlsq mkrootlsq1 mkrootsq mkrootsql check-radf-sign radf
 radf1 nil (2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89
97 101 103 107 109 113 127 131 137 139 149 151 157 163 167 173 179 181 191 193
197 199 211 223 227 229 233 239 241 251 257 263 269 271 277 281 283 293 307 311
313 317 331 337 347 349 353 359 367 373 379 383 389 397 401 409 419 421 431 433
439 443 449 457 461 463 467 479 487 491 499 503 509 521 523 541 547 557 563 569
571 577 587 593 599 601 607 613 617 619 631 641 643 647 653 659 661 673 677 683
691 701 709 719 727 733 739 743 751 757 761 769 773 787 797 809 811 821 823 827
829 839 853 857 859 863 877 881 883 887 907 911 919 929 937 941 947 953 967 971
977 983 991 997 1009 1013 1019 1021 1031 1033 1039 1049 1051 1061 1063 1069 1087
1091 1093 1097 1103 1109 1117 1123 1129 1151 1153 1163 1171 1181 1187 1193 1201
1213 1217 1223 1229 1231 1237 1249 1259 1277 1279 1283 1289 1291 1297 1301 1303
1307 1319 1321 1327 1361 1367 1373 1381 1399 1409 1423 1427 1429 1433 1439 1447
1451 1453 1459 1471 1481 1483 1487 1489 1493 1499 1511 1523 1531 1543 1549 1553
1559 1567 1571 1579 1583 1597 1601 1607 1609 1613 1619 1621 1627 1637 1657 1663
1667 1669 1693 1697 1699 1709 1721 1723 1733 1741 1747 1753 1759 1777 1783 1787
1789 1801 1811 1823 1831 1847 1861 1867 1871 1873 1877 1879 1889 1901 1907 1913
1931 1933 1949 1951 1973 1979 1987 1993 1997 1999 2003 2011 2017 2027 2029 2039
2053 2063 2069 2081 2083 2087 2089 2099 2111 2113 2129 2131 2137 2141 2143 2153
2161 2179 2203 2207 2213 2221 2237 2239 2243 2251 2267 2269 2273 2281 2287 2293
2297 2309 2311 2333 2339 2341 2347 2351 2357 2371 2377 2381 2383 2389 2393 2399
2411 2417 2423 2437 2441 2447 2459 2467 2473 2477 2503 2521 2531 2539 2543 2549
2551 2557 2579 2591 2593 2609 2617 2621 2633 2647 2657 2659 2663 2671 2677 2683
2687 2689 2693 2699 2707 2711 2713 2719 2729 2731 2741 2749 2753 2767 2777 2789
2791 2797 2801 2803 2819 2833 2837 2843 2851 2857 2861 2879 2887 2897 2903 2909
2917 2927 2939 2953 2957 2963 2969 2971 2999 3001 3011 3019 3023 3037 3041 3049
3061 3067 3079 3083 3089 3109 3119 3121 3137 3163 3167 3169 3181 3187 3191 3203
3209 3217 3221 3229 3251 3253 3257 3259 3271 3299 3301 3307 3313 3319 3323 3329
3331 3343 3347 3359 3361 3371 3373 3389 3391 3407 3413 3433 3449 3457 3461 3463
3467 3469 3491 3499 3511 3517 3527 3529 3533 3539 3541 3547 3557 3559 3571) 3571
 12752041 nrootnn radd iroot iroot-ceiling 
+++ Record new inline definition:
(de mkexpt (u n) (cond ((equal n 1) u) (t (list (quote expt) u n))))
mkexpt nrootn nil ((t nil) (nil (rmsubs))) check-argnum repeats simpiden nil 
not_imag_num nil domainvalchk valuechk znumrnil znumr opfchk! intconv simpcr 
simprd simplist mconv dmconv0 dmconv1 mconv1 drnconv simpabs simpabs1 sign-abs 
constant_exprp constant_expr_listp mkabsf0 mkabsf1 mkabsfd positive-sfp 
positive-powp split-comfac-part split-comfac simpabs simpdiff simpdiff simpminus
 simpminus simpplus simpplus ckpreci# timesip ckprec2# nil ?a2bf ckprec3# 
simpquot simpquot simprecip simprecip simpset simpset unset nil unset1 
outer-simpsqrt simpsqrt xsimp simptimes simptimes resimp resimp1 simp*sq simp*sq
 simplambda simplambda nil (lambda :mod: :crn: :gi: :rn:) lambda lambda 
*** local variable x in procedure always_nil not used 
always_nil 
*** local variable x in procedure not_arithmetic not used 
not_arithmetic preplambda prinlambda lambdap always_nil always_nil always_nil 
always_nil preplambda prinlambda not_arithmetic not_arithmetic not_arithmetic 
not_arithmetic not_arithmetic not_arithmetic not_arithmetic not_arithmetic 
not_arithmetic not_arithmetic not_arithmetic not_arithmetic nil nil nil 

+++ Reading file: packages/alg/exptchk.red
nil nil nil ((t (rmsubs)) (nil (rmsubs))) exptchksq exptchk exptchk0 expttermp 
expttermp1 exptunwind rm_neg_pow mergex mergey intcoeff meldx meldx0 meldx1 
comm_kernels comm_kernels1 nil nil 

+++ Reading file: packages/alg/simplog.red
nil nil nil nil nil 
+++ Record new inline definition:
(de get!-log!-base (u) (cond ((eq (car u) (quote log10)) 10) (t nil)))
get-log-base simplog simplogb simplog simplog simplogb nil ((nil (rmsubs)) (t (
rmsubs))) ((nil (rmsubs)) (t (rmsubs))) 
+++ Record new inline definition:
(de mk!-log!-arg (arg base) (cond ((or (null base) (eq base (quote e))) (list (
quote log) arg)) ((equal base 10) (list (quote log10) arg)) (t (list (quote logb
) arg base))))
mk-log-arg simplogi simplogbi one_complexlist multsq* simplogsq simplogbsq 
simplogb2 simplogn simplogbn mergeminus formlog formlogterm formlog2 nil nil 

+++ Reading file: packages/alg/logsort.red
nil nil nil nil clogsq* logsort comblog clogsq clogf clogf1 clogf2 logarg 
coefgcd nil nil 

+++ Reading file: packages/alg/sub.red
nil nil subeval subeval0 subeval1 subeval subsq subs2* subf noncomexpf subf1 
wtchk subsublis subsubf listsub listsub subsubf subsubf nil nil 

+++ Reading file: packages/alg/order.red
nil nil nil ordad ordn ord2 ordp ordpl ordpv ordpv1 ordop ordpp ordpa nil nil 

+++ Reading file: packages/alg/forall.red
nil nil nil nil nil (let match clear saveas such) nil nil forallstat forall 
arbstat arbstat newvar formforall def rlis (forall) (forall) nil formlet1 
requote requote1 *s2arg formlet formclear formmatch formclear formclear1 formlet
 formmatch let let0 let00 let1 revalruletst let2 let3 letscalar letexprn nil 
clearrules nil rule-list rule* rule nil tildepri tildepri nil nil nil 
equalreplaceby equalreplaceby nil nil formreplaceby formreplaceby nil nil 
formwhen formwhen nil evalwhereexp evalwhereexp nil evalletsub evalletsub2 
set_rules restore_rules restore_props resimpcar validrule validrule1 
remove-free-vars* remove-free-vars remove-free-vars-l get-free-form term-split 
tpowadd frvarsof simp0 nil let-prepf match match00 clear clear1 typelet setk 
setk0 setk1 put-avalue sq_member sf_member mvar_member arglist_member put-kvalue
 klistt kernlp xadd updoldrules xadd* powlisp rsubla nil nil 

+++ Reading file: packages/alg/eqn.red
nil nil nil equalreval equalreval quoteequation eqnerr eqnerr evaleqn evaleqn 
evaleqn1 lhs rhs lhs-rhs nil eqnsub eqnsub eqnlength eqnlength nil nil 

+++ Reading file: packages/alg/rmsubs.red
nil nil nil (t) rmsubs nil nil 

+++ Reading file: packages/alg/algdcl.red
nil nil formopr formopr operator nil remopr nil den num nil nil formsaveas 
formsaveas saveas nil nil nil 

+++ Reading file: packages/alg/opmtch.red
nil nil 5 nil nil nil nil nil emtch 
+++ Record new inline definition:
(de assoc_lookup (u table) (cond ((null table) nil) (t (gethash u table))))
assoc_lookup 
+++ Record new inline definition:
(de assoc_add (u q table) (progn (cond ((null table) (setq table (mkhash 200 3
2.0)))) (puthash u table (cons u q)) table))
assoc_add 
+++ Assignment to parameter of inline: (setq table (mkhash 200 3 2.0))
+++ Macro was: (assoc_add (u q table) (progn (cond ((null table) (setq table (
mkhash 200 3 2.0)))) (puthash u table (cons u q)) table))
opmtch mcharg mcharg1 reform-minus reform-minus2 mchcomb mchcomb2 comb mcharg2 
msappend updtemplate reval-without mchk mchkopt mchkopt1 (0 0) (1 1) ((
rule_error fraction with optional numerator) 1) ((rule_error
exponential with optional base) 1) rule_error nil mchkminus mkbin mtp mchsarg 
noncomfree noncomperm noncomdel noncomdel1 noncomp* nil nil nil nil 

+++ Reading file: packages/alg/prep.red
nil nil prepsqxx negnumberchk prepsqx prepsq sqform oldprepf prepf oldprepf1 
prepf1 prepf1_reversed prepf1a prepf1a_reversed prepd prepd1 exchk exchk1 exchk2
 assoc2 replus replus1 unplus retimes retimes1 sqchk prepcadr prepexpt prepcadr 
prepexpt prephold nil prephold nil nil 

+++ Reading file: packages/alg/extout.red
nil nil nil nil factor factor1 remfac nil order nil up down formop multop 
+++ Record new inline definition:
(de lcx (u) (cdr (carx u (quote lcx))))
lcx quotof quotofd quotodd lowest-terms dcombine* ckrn ckrn1 gck2 cdarx negf* 
prepsq* prepsq*0 prepsq*1 addfactors rmplus prepsq*2 ckrn* mkkl quotfm nil nil 

+++ Reading file: packages/alg/depend.red
nil nil depend nodepend nil depend1 depends ldepends dependsl freeof nil nil 
depend0 nil nil 

+++ Reading file: packages/alg/str.red
nil nil nil ans nil nil structr nil structr1 structf structk subchk1 subchk2 
structvar nil nil 

+++ Reading file: packages/alg/coeff.red
nil nil nil nil nil coeffeval coeffeval coeff1 coeffn nil nil nil nil 

+++ Reading file: packages/alg/weight.red
nil nil nil weight wtlevel nil nil nil nil 

+++ Reading file: packages/alg/linop.red
nil nil linear nil formlnr formseparate expt-separate expt-separate1 formlntms 
formlnquot formlnrecip mktimes reval* nil nil 

+++ Reading file: packages/alg/elem.red
nil nil nil (sqrt) mksqrt nil sign-of simp-sign1 simp-sign2 simp-sign 
+++ Record new inline definition:
(de sq!-is!-sign (u) ((lambda (nu) (and (equal (cdr u) 1) (or (equal nu 1) (
equal nu (minus 1)) (equal nu 0)))) (car u)))
sq-is-sign simp-sign-times simp-sign-quot simp-sign-plus simp-sign-expt 
simp-sign-sqrt nil rd-sign nil nil simp-sign (list (replaceby (sign (sinh (~ x))
) (when (sign x) (or (numberp (sign x)) (realvaluedp x)))) (replaceby (sign (
cosh (~ x))) (when 1 (realvaluedp x))) (replaceby (sign (tanh (~ x))) (when (
sign x) (or (numberp (sign x)) (realvaluedp x)))) (replaceby (expt (abs (~ x)) 2
) (when (expt x 2) (or (symbolic (not *precise)) (realvaluedp x))))) 
*** tanh declared operator 

*** cosh declared operator 

*** sinh declared operator 
nil nil nil nil nil nil nil nil nil nil nil (acos asin atan acosh asinh atanh
acot cos sin tan sec sech csc csch cot acot coth acoth cosh sinh tanh asec acsc
asech acsch acosd asind atand acotd cosd sind tand secd cscd cotd acotd asecd
acscd atan2d) nil nil nil nil (sec sed sech csc cscd csch cot cotd coth) 2 nil 
nil nil nil nil nil nil nil t knowledge_about nil trigquot nil nil nil nil nil 
nil nil nil nil (list (replaceby (acos 1) 0) (replaceby (acos (quotient (plus (
sqrt 6) (sqrt 2)) 4)) (quotient pi 12)) (replaceby (acos (quotient (sqrt 3) 2))
(quotient pi 6)) (replaceby (acos (quotient (sqrt 2) 2)) (quotient pi 4)) (
replaceby (acos (quotient 1 2)) (quotient pi 3)) (replaceby (acos (quotient (
plus (sqrt 6) (minus (sqrt 2))) 4)) (quotient (times 5 pi) 12)) (replaceby (acos
0) (quotient pi 2)) (replaceby (acos (quotient (plus (minus (sqrt 6)) (sqrt 2))
4)) (quotient (times 7 pi) 12)) (replaceby (acos (quotient (plus (minus (sqrt 6)
) (minus (sqrt 2))) 4)) (quotient (times 11 pi) 12))) nil nil (list (replaceby (
atan (quotient (plus (sqrt 3) (minus 1)) (plus (sqrt 3) 1))) (quotient pi 12)) (
replaceby (atan (quotient 1 (sqrt 3))) (quotient pi 6)) (replaceby (atan 1) (
quotient pi 4)) (replaceby (atan (sqrt 3)) (quotient pi 3)) (replaceby (atan (
quotient (plus (sqrt 3) 1) (plus (sqrt 3) (minus 1)))) (quotient (times 5 pi) 12
))) nil nil nil *bar rlis complex_conjugates (*sq ((((pi . 1) . 1)) . 1) t) 0 
nil nil simpiden nil simp-atan2 simp-atan2 simpatan2r nil nil nil nil nil nil 
nil nil nil nil nil 
*** exp declared operator 
nil nil nil (list (replaceby (sin (atan (~ u))) (quotient u (sqrt (plus 1 (expt
u 2))))) (replaceby (cos (atan (~ u))) (quotient 1 (sqrt (plus 1 (expt u 2)))))
(replaceby (sin (times 2 (atan (~ u)))) (times 2 (quotient u (plus 1 (expt u 2))
))) (replaceby (cos (times 2 (atan (~ u)))) (quotient (difference 1 (expt u 2))
(plus 1 (expt u 2)))) (replaceby (sin (times (~ n) (atan (~ u)))) (when (plus (
times (sin (times (difference n 2) (atan u))) (quotient (difference 1 (expt u 2)
) (plus 1 (expt u 2)))) (times (cos (times (difference n 2) (atan u))) 2 (
quotient u (plus 1 (expt u 2))))) (and (fixp n) (greaterp n 2)))) (replaceby (
cos (times (~ n) (atan (~ u)))) (when (difference (times (cos (times (difference
n 2) (atan u))) (quotient (difference 1 (expt u 2)) (plus 1 (expt u 2)))) (times
(sin (times (difference n 2) (atan u))) 2 (quotient u (plus 1 (expt u 2))))) (
and (fixp n) (greaterp n 2)))) (replaceby (sin (acos (~ u))) (sqrt (difference 1
(expt u 2)))) (replaceby (cos (asin (~ u))) (sqrt (difference 1 (expt u 2)))) (
replaceby (sin (times 2 (acos (~ u)))) (times 2 u (sqrt (difference 1 (expt u 2)
)))) (replaceby (cos (times 2 (acos (~ u)))) (difference (times 2 (expt u 2)) 1)
) (replaceby (sin (times 2 (asin (~ u)))) (times 2 u (sqrt (difference 1 (expt u
2))))) (replaceby (cos (times 2 (asin (~ u)))) (difference 1 (times 2 (expt u 2)
))) (replaceby (sin (times (~ n) (acos (~ u)))) (when (plus (times (sin (times (
difference n 2) (acos u))) (difference (times 2 (expt u 2)) 1)) (times (cos (
times (difference n 2) (acos u))) 2 u (sqrt (difference 1 (expt u 2))))) (and (
fixp n) (greaterp n 2)))) (replaceby (cos (times (~ n) (acos (~ u)))) (when (
difference (times (cos (times (difference n 2) (acos u))) (difference (times 2 (
expt u 2)) 1)) (times (sin (times (difference n 2) (acos u))) 2 u (sqrt (
difference 1 (expt u 2))))) (and (fixp n) (greaterp n 2)))) (replaceby (sin (
times (~ n) (asin (~ u)))) (when (plus (times (sin (times (difference n 2) (asin
u))) (difference 1 (times 2 (expt u 2)))) (times (cos (times (difference n 2) (
asin u))) 2 u (sqrt (difference 1 (expt u 2))))) (and (fixp n) (greaterp n 2))))
(replaceby (cos (times (~ n) (asin (~ u)))) (when (difference (times (cos (times
(difference n 2) (asin u))) (difference 1 (times 2 (expt u 2)))) (times (sin (
times (difference n 2) (asin u))) 2 u (sqrt (difference 1 (expt u 2))))) (and (
fixp n) (greaterp n 2))))) nil (list (replaceby (sin (quotient (atan (~ x)) 2))
(sin (atan (quotient (difference (sqrt (plus 1 (expt x 2))) 1) x)))) (replaceby
(cos (quotient (atan (~ x)) 2)) (cos (atan (quotient (difference (sqrt (plus 1 (
expt x 2))) 1) x))))) nil (list (replaceby (sinh (atanh (~ u))) (quotient u (
sqrt (difference 1 (expt u 2))))) (replaceby (cosh (atanh (~ u))) (quotient 1 (
sqrt (difference 1 (expt u 2))))) (replaceby (sinh (times 2 (atanh (~ u)))) (
times 2 (quotient u (difference 1 (expt u 2))))) (replaceby (cosh (times 2 (
atanh (~ u)))) (quotient (plus 1 (expt u 2)) (difference 1 (expt u 2)))) (
replaceby (sinh (times (~ n) (atanh (~ u)))) (when (plus (times (sinh (times (
difference n 2) (atanh u))) (quotient (plus 1 (expt u 2)) (difference 1 (expt u
2)))) (times (cosh (times (difference n 2) (atanh u))) 2 (quotient u (difference
1 (expt u 2))))) (and (fixp n) (greaterp n 2)))) (replaceby (cosh (times (~ n) (
atanh (~ u)))) (when (plus (times (cosh (times (difference n 2) (atanh u))) (
quotient (plus 1 (expt u 2)) (difference 1 (expt u 2)))) (times (sinh (times (
difference n 2) (atanh u))) 2 (quotient u (difference 1 (expt u 2))))) (and (
fixp n) (greaterp n 2)))) (replaceby (sinh (acosh (~ u))) (times (sqrt (
difference u 1)) (sqrt (plus u 1)))) (replaceby (cosh (asinh (~ u))) (sqrt (plus
1 (expt u 2)))) (replaceby (sinh (times 2 (acosh (~ u)))) (times 2 u (sqrt (
difference u 1)) (sqrt (plus u 1)))) (replaceby (cosh (times 2 (acosh (~ u)))) (
difference (times 2 (expt u 2)) 1)) (replaceby (sinh (times 2 (asinh (~ u)))) (
times 2 u (sqrt (plus 1 (expt u 2))))) (replaceby (cosh (times 2 (asinh (~ u))))
(plus 1 (times 2 (expt u 2)))) (replaceby (sinh (times (~ n) (acosh (~ u)))) (
when (plus (times (sinh (times (difference n 2) (acosh u))) (difference (times 2
(expt u 2)) 1)) (times (cosh (times (difference n 2) (acosh u))) 2 u (sqrt (
difference u 1)) (sqrt (plus u 1)))) (and (fixp n) (greaterp n 2)))) (replaceby
(cosh (times (~ n) (acosh (~ u)))) (when (plus (times (cosh (times (difference n
2) (acosh u))) (difference (times 2 (expt u 2)) 1)) (times (sinh (times (
difference n 2) (acosh u))) 2 u (sqrt (difference u 1)) (sqrt (plus u 1)))) (and
(fixp n) (greaterp n 2)))) (replaceby (sinh (times (~ n) (asinh (~ u)))) (when (
plus (times (sinh (times (difference n 2) (asinh u))) (plus 1 (times 2 (expt u 2
)))) (times (cosh (times (difference n 2) (asinh u))) 2 u (sqrt (plus 1 (expt u
2))))) (and (fixp n) (greaterp n 2)))) (replaceby (cosh (times (~ n) (asinh (~ u
)))) (when (plus (times (cosh (times (difference n 2) (asinh u))) (plus 1 (times
2 (expt u 2)))) (times (sinh (times (difference n 2) (asinh u))) 2 u (sqrt (plus
1 (expt u 2))))) (and (fixp n) (greaterp n 2)))) (replaceby (atanh (~ x)) (when
(times (acosh (quotient (plus 1 (expt x 2)) (difference 1 (expt x 2)))) (
quotient (sign x) 2)) (and (symbolic (not *complex)) (neq (expt x 2) 1) (freeof
(acosh (quotient (plus 1 (expt x 2)) (difference 1 (expt x 2)))) acosh))))) nil 
(list (replaceby (sin (times i (quotient (~ (~ x)) (~ (~ y))))) (when (times i (
sinh (quotient x y))) (equal (impart y) 0))) (replaceby (cos (times i (quotient
(~ (~ x)) (~ (~ y))))) (when (cosh (quotient x y)) (equal (impart y) 0))) (
replaceby (sinh (times i (quotient (~ (~ x)) (~ (~ y))))) (when (times i (sin (
quotient x y))) (equal (impart y) 0))) (replaceby (cosh (times i (quotient (~ (~
x)) (~ (~ y))))) (when (cos (quotient x y)) (equal (impart y) 0))) (replaceby (
asin (times i (quotient (~ (~ x)) (~ (~ y))))) (when (times i (asinh (quotient x
y))) (equal (impart y) 0))) (replaceby (atan (times i (quotient (~ (~ x)) (~ (~
y))))) (when (times i (atanh (quotient x y))) (and (equal (impart y) 0) (not (
and (or (equal x 1) (equal x (minus 1))) (equal y 1)))))) (replaceby (asinh (
times i (quotient (~ (~ x)) (~ (~ y))))) (when (times i (asin (quotient x y))) (
equal (impart y) 0))) (replaceby (atanh (times i (quotient (~ (~ x)) (~ (~ y))))
) (when (times i (atan (quotient x y))) (equal (impart y) 0)))) nil nil nil nil 
nil nil 

+++ Reading file: packages/alg/showrule.red
nil nil nil showrules showruleskvalue showonerule showrulesopmtch showrulesdfn 
showrulesdfn1 showrulesdfn1* mkrule strip~ separate~ showrulesdfn2 
showrules*match showrulespowlis* showrulespowlis1* showrulesasymplis* 
showrulespowlis*opr showrulespowlis1*opr showrulesasymplis*opr selectletvars 
simpletsymbolic needs-lisp-tag needs-lisp-tag1 nil ((evalequal . equal) (
evalgreaterp . greaterp) (evallessp . lessp) (evalgeq . geq) (evalleq . leq) (
evalneq . neq) (evalnumberp . numberp)) isboolfn arbvars nil nil nil 

+++ Reading file: packages/alg/nestrad.red
nil nil unnest-sqrt-sqrt* unnest-sqrt-sqrt chkabs nil nil (list (replaceby (expt
(plus (~ a) (times (~ b) (expt (~ c) (quotient 1 2)))) (quotient 1 2)) (when **w
(setq **w (unnest-sqrt-sqrt a b c)))) (replaceby (expt (plus (~ a) (expt (~ c) (
quotient 1 2))) (quotient 1 2)) (when **w (setq **w (unnest-sqrt-sqrt a 1 c)))))
 nil nil nil 

+++ Reading file: packages/alg/maxmin.red
nil simpmax simpmax simpmin simpmin nil 
+++ Record new inline definition:
(de maxmin_difflist (u v) (prog (uu forall!-result forall!-endptr) (setq uu u) (
cond ((null uu) (return nil))) (setq forall!-result (setq forall!-endptr (cons (
(lambda (uu) (reval1 (list (quote difference) uu v) t)) (car uu)) nil)))
looplabel (setq uu (cdr uu)) (cond ((null uu) (return forall!-result))) (rplacd
forall!-endptr (cons ((lambda (uu) (reval1 (list (quote difference) uu v) t)) (
car uu)) nil)) (setq forall!-endptr (cdr forall!-endptr)) (go looplabel)))
maxmin_difflist s_simpmaxmin *trim flattenmaxmin nil nil 

+++ Reading file: packages/alg/nssimp.red
nil nil nssimp dsimp dsimptimes addns getelx nil nil 

+++ Reading file: packages/alg/part.red
nil nil revalpart parterr2 revalpart nil revalsetpart revalsetp1 ssl rtypepart 
rtypepart revalsetpart arglength nil nil partlengthreval partlengthreval unhold 
nil nil 

+++ Reading file: packages/alg/map.red
nil map ~map map-eval getrtypecadr getrtypecadr getrtypecadr map-eval ~map 
map-eval1 map-eval2 map-frvarsof formselect quote-select-bool select-eval 
freequote formselect select-eval 2 nil nil 

+++ Reading file: packages/alg/spcfnint.red
nil nil nil nil nil nil nil nil nil nil nil nil nil compute:khinchin nil nil nil
 nil nil rd_euler* cr_euler* rd_catalan* cr_catalan* nil nil (list (replaceby (
bernoulli (~ n)) (when 1 (and (numberp n) (equal n 0)))) (replaceby (bernoulli (
~ n)) (when (minus (quotient 1 2)) (and (numberp n) (equal n 1)))) (replaceby (
bernoulli (~ n)) (when 0 (and (numberp n) (equal (impart n) 0) (equal n (floor n
)) (neq (quotient n 2) (floor (quotient n 2))) (greaterp n 0)))) (replaceby (
bernoulli (~ n)) (when (bernoulli*calc n) (and (numberp n) (equal (impart n) 0)
(equal n (floor n)) (greaterp n 0))))) nil nil nil nil nil nil nil (list (
replaceby (gamma (~ x)) (when 1 (and (numberp x) (equal x 1)))) (replaceby (
gamma (~ x)) (when (sqrt pi) (and (numberp x) (equal x (quotient 1 2))))) (
replaceby (gamma (~ x)) (when (factorial (difference x 1)) (and (numberp x) (
equal (impart x) 0) (equal x (floor x)) (greaterp x 0)))) (replaceby (gamma (~ x
)) (when (times (gamma (difference x 1)) (difference x 1)) (and (numberp x) (not
(symbolic *rounded)) (equal (impart x) 0) (equal (times 64 x) (floor (times 64 x
))) (greaterp x 1) (lessp x 50)))) (replaceby (gamma (~ x)) (when (quotient pi (
times (sin (times pi x)) (gamma (minus x)) (minus x))) (and (numberp x) (lessp x
0) (not (and (fixp x) (lessp x 1)))))) (replaceby (gamma (~ x)) (when (do*gamma
x) (and (numberp x) (not (and (fixp x) (lessp x 1))) (symbolic *rounded)))) (
replaceby (df (gamma (~ x)) x) (times (gamma x) (psi x))) (replaceby (df (
m_gamma (~ a) (~ x)) (~ x)) (times (expt x (difference a 1)) (exp (minus x))))) 
nil nil nil (list (replaceby (beta (~ z) (~ w)) (when (quotient (times (gamma z)
(gamma w)) (gamma (plus z w))) (or (and (numberp z) (numberp w) (equal (impart z
) 0) (equal (impart w) 0) (not (or (and (equal z (floor z)) (lessp z 1)) (and (
equal w (floor w)) (lessp w 1)) (and (equal (plus z w) (floor (plus z w))) (
lessp (plus z w) 1))))) (and (numberp z) (numberp w) (or (neq (impart z) 0) (neq
(impart w) 0))) (not (and (numberp z) (numberp w)))))) (replaceby (beta (~ z) (~
w)) (when 0 (and (numberp z) (numberp w) (equal (impart z) 0) (equal (impart w)
0) (not (or (and (equal z (floor z)) (lessp z 1)) (and (equal w (floor w)) (
lessp w 1)))) (equal (plus z w) (floor (plus z w))) (lessp (plus z w) 1))))) nil
 nil nil (list (replaceby (df (pochhammer (~ z) (~ k)) (~ z)) (times (pochhammer
(~ z) (~ k)) (difference (psi (plus z k)) (psi z)))) (replaceby (pochhammer (~ z
) (~ k)) (when (prog (i forall-result) (setq i 0) (setq forall-result 1) lab1 (
cond ((aminusp: (list (quote difference) (aeval* (list (quote difference) (quote
k) 1)) i)) (return forall-result))) (setq forall-result (aeval* (list (quote
times) (aeval* (list (quote plus) (quote z) i)) forall-result))) (setq i ((
lambda (forall-result) (aeval* (list (quote plus) forall-result 1))) i)) (go
lab1)) (and (fixp k) (lessp k 20) (greaterp k 0)))) (replaceby (pochhammer (~ z)
(~ k)) (when 1 (and (numberp k) (equal k 0)))) (replaceby (pochhammer (~ z) (~ k
)) (when (quotient (factorial (plus z (difference k 1))) (factorial (difference
z 1))) (and (fixp z) (greaterp z 0) (or (and (fixp k) (greaterp k 0)) (not (
numberp k)))))) (replaceby (pochhammer (~ z) (~ k)) (when (times (expt (minus 1)
k) (quotient (factorial (minus z)) (factorial (difference (minus z) k)))) (and (
fixp z) (lessp z 0) (fixp k) (lessp (plus z k) 0)))) (replaceby (pochhammer (~ z
) (difference (~ k) 1)) (when (times 2 (quotient (pochhammer (quotient 1 2) k) (
difference (times 2 k) 1))) (and (numberp z) (equal z (quotient 1 2))))) (
replaceby (pochhammer (~ a) (~ k)) (when (quotient (factorial (times 2 k)) (
times (expt 4 k) (factorial k))) (and (numberp a) (equal a (quotient 1 2))))) (
replaceby (pochhammer (~ n) (~ k)) (when (do*pochhammer n k) (and (numberp n) (
numberp k) (equal (impart n) 0) (equal (impart k) 0) (equal n (floor n)) (equal
k (floor k)) (greaterp n (minus 1)) (greaterp k 0)))) (replaceby (pochhammer (~
a) (~ k)) (when (do*pochhammer a k) (and (symbolic *rounded) (numberp k) (
numberp a) (equal (impart a) 0) (equal (impart k) 0) (or (neq a (floor a)) (
greaterp a 0)) (equal k (floor k)) (greaterp k 0)))) (replaceby (pochhammer (~ n
) (~ k)) (when (times (expt (minus 1) k) (quotient (factorial (minus n)) (
factorial (difference (minus n) k)))) (and (numberp n) (numberp k) (equal (
impart n) 0) (equal n (floor n)) (lessp n 1) (geq (difference (minus n) k) 0))))
(replaceby (pochhammer (~ a) (~ k)) (when (quotient (pochhammer (difference (
times 2 a) 1) (times 2 k)) (times (expt 4 k) (pochhammer (quotient (difference (
times 2 a) 1) 2) k))) (and (numberp a) (equal (impart a) 0) (equal (plus a (
quotient 1 2)) (floor (plus a (quotient 1 2)))) (greaterp a 0)))) (replaceby (
pochhammer (~ a) (~ k)) (when (times (expt (minus 1) (plus (minus a) (quotient 1
2))) (pochhammer (difference (difference 1 a) (plus (minus a) (quotient 1 2))) (
plus (minus a) (quotient 1 2))) (pochhammer (plus a (minus a) (quotient 1 2)) (
difference k (plus (minus a) (quotient 1 2))))) (and (numberp a) (equal (impart
a) 0) (equal (plus a (quotient 1 2)) (floor (plus a (quotient 1 2)))) (lessp a 0
))))) (list (replaceby (times (pochhammer (~ a) (~ k)) (pochhammer (~ b) (~ k)))
(when (quotient (pochhammer (times 2 a) (times 2 k)) (expt 4 k)) (equal (
difference b a) (quotient 1 2)))) (replaceby (pochhammer (~ a) (~ k)) (when (
times (expt (minus 1) (plus (minus a) (quotient 1 2))) (pochhammer (difference (
difference 1 a) (plus (minus a) (quotient 1 2))) (plus (minus a) (quotient 1 2))
) (pochhammer (plus a (minus a) (quotient 1 2)) (difference k (plus (minus a) (
quotient 1 2))))) (and (numberp a) (equal (impart a) 0) (equal (plus a (quotient
1 2)) (floor (plus a (quotient 1 2)))) (lessp a 0)))) (replaceby (times (
pochhammer (~ z) (~ k)) (pochhammer (~ cz) (~ k))) (when (do*poch*conj*calc z k)
(and (numberp z) (numberp cz) (numberp k) (not (equal (impart z) 0)) (equal z (
conj cz)) (equal (impart k) 0) (equal k (floor k)) (geq k 0)))) (replaceby (
times (pochhammer (~ a) (~ k)) (pochhammer (~ aa) (~ k))) (when (quotient (
factorial (times 3 k)) (times (factorial k) (expt 27 k))) (and (numberp a) (
equal a (quotient 1 3)) (numberp aa) (equal aa (quotient 2 3))))) (replaceby (
times (pochhammer (~ a) (~ k)) (pochhammer (~ aa) (~ k))) (when (quotient (
factorial (plus 1 (times 3 k))) (times (expt 27 k) (factorial k))) (and (numberp
a) (equal a (quotient 2 3)) (numberp aa) (equal aa (quotient 4 3))))) (replaceby
(times (pochhammer (~ b) (~ k)) (pochhammer (~ c) (~ k))) (when (quotient (
pochhammer (times 3 b) (times 3 k)) (times (expt 27 k) (pochhammer (plus b (
quotient 2 3)) k))) (and (numberp b) (numberp c) (equal (difference c b) (
quotient 1 3)) (equal (difference b (quotient 1 3)) (floor (difference b (
quotient 1 3)))) (not (equal (difference b (quotient 1 3)) 0))))) (replaceby (
times (pochhammer (~ a) (~ k)) (pochhammer (~ aa) (~ k)) (pochhammer (~ aaa) (~
k))) (when (quotient (factorial (times 4 k)) (times (factorial k) (expt 64 k)))
(and (numberp a) (numberp aa) (numberp aaa) (equal a (quotient 1 4)) (equal aa (
quotient 1 2)) (equal aaa (quotient 3 4))))) (replaceby (times (pochhammer (~ a)
(~ k)) (pochhammer (~ aa) (~ k)) (pochhammer (~ aaa) (~ k)) (pochhammer (~ aaaa)
(~ k))) (when (quotient (factorial (times 5 k)) (times (factorial k) (expt 3125
k))) (and (numberp a) (numberp aa) (numberp aaa) (numberp aaaa) (equal a (
quotient 1 5)) (equal aa (quotient 2 5)) (equal aaa (quotient 3 5)) (equal aaaa
(quotient 4 5))))) (replaceby (times (pochhammer (~ a) (~ k)) (pochhammer (~ aa)
(~ k)) (pochhammer (~ aaa) (~ k)) (pochhammer (~ aaaa) (~ k))) (when (times 5 (
plus (quotient 1 5) k) (quotient (factorial (times 5 k)) (times (factorial k) (
expt 3125 k)))) (and (numberp a) (numberp aa) (numberp aaa) (numberp aaaa) (
equal a (quotient 2 5)) (equal aa (quotient 3 5)) (equal aaa (quotient 4 5)) (
equal aaaa (quotient 6 5))))) (replaceby (times (pochhammer (~ a) (~ k)) (
pochhammer (~ aa) (~ k)) (pochhammer (~ aaa) (~ k)) (pochhammer (~ aaaa) (~ k)))
(when (quotient (times 25 (plus (quotient 1 5) k) (plus (quotient 2 5) k) (
factorial (times 5 k))) (times (factorial k) 2 (expt 3125 k))) (and (numberp a)
(numberp aa) (numberp aaa) (numberp aaaa) (equal a (quotient 3 5)) (equal aa (
quotient 4 5)) (equal aaa (quotient 6 5)) (equal aaaa (quotient 7 5))))) (
replaceby (times (pochhammer (~ a) (~ k)) (pochhammer (~ aa) (~ k)) (pochhammer
(~ aaa) (~ k)) (pochhammer (~ aaaa) (~ k))) (when (quotient (times 125 (plus (
quotient 1 5) k) (plus (quotient 2 5) k) (plus (quotient 3 5) k) (factorial (
times 5 k))) (times (factorial k) 6 (expt 3125 k))) (and (numberp a) (numberp aa
) (numberp aaa) (numberp aaaa) (equal a (quotient 4 5)) (equal aa (quotient 6 5)
) (equal aaa (quotient 7 5)) (equal aaaa (quotient 8 5))))) (replaceby (times (
pochhammer (~ a) (~ k)) (pochhammer (~ aa) (~ k)) (pochhammer (~ aaa) (~ k)) (
pochhammer (~ aaaa) (~ k))) (when (quotient (times 625 (plus (quotient 1 5) k) (
plus (quotient 2 5) k) (plus (quotient 3 5) k) (plus (quotient 4 5) k) (
factorial (times 5 k))) (times (factorial k) 24 (expt 3125 k))) (and (numberp a)
(numberp aa) (numberp aaa) (numberp aaaa) (equal a (quotient 6 5)) (equal aa (
quotient 7 5)) (equal aaa (quotient 8 5)) (equal aaaa (quotient 9 5))))) (
replaceby (slash (pochhammer (~ a) (~ k)) (pochhammer (~ b) (~ k))) (when (
quotient (plus a (difference k 1)) (difference a 1)) (equal (difference a b) 1))
) (replaceby (slash (pochhammer (~ a) (~ k)) (pochhammer (~ b) (~ k))) (when (
quotient (difference b 1) (plus b (difference k 1))) (equal (difference b a) 1))
)) nil sfint:function:error nil nil nil nil nil nil nil nil nil nil nil nil nil 
(list (replaceby (psi (~ n) (~ z)) (polygamma n z)) (replaceby (psi (~ z)) (when
(psi:error z) (and (equal (repart z) (floor (repart z))) (equal (impart z) 0) (
lessp z 1)))) (replaceby (psi 1) (minus euler_gamma)) (replaceby (psi (quotient
1 2)) (difference (minus euler_gamma) (times 2 (log 2)))) (replaceby (psi (~ z))
(when (quotient (plus (psi (quotient z 2)) (psi (quotient (plus z 1) 2)) (times
2 (log 2))) 2) (and (numberp z) (equal (impart z) 0) (equal (quotient z 2) (
floor (quotient z 2))) (greaterp z 0)))) (replaceby (psi (~ z)) (when (plus (psi
(difference z 1)) (quotient 1 (difference z 1))) (and (numberp z) (equal (impart
z) 0) (greaterp z 1)))) (replaceby (psi (~ z)) (when (plus (psi (difference 1 z)
) (times pi (cot (times pi (difference 1 z))))) (and (numberp z) (equal (impart
z) 0) (or (and (lessp z 0) (not (fixp z))) (and (greaterp z (quotient 1 2)) (
lessp z 1)))))) (replaceby (df (psi (~ z)) z) (polygamma 1 z))) nil (list (
replaceby (psi (plus (~ x) (~ n))) (when (plus (psi (plus x (difference n 1))) (
quotient 1 (plus x (difference n 1)))) (and (numberp n) (geq n 1)))) (replaceby
(psi (plus (~ x) (~ n))) (when (difference (psi (plus x n 1)) (quotient 1 (plus
x n))) (and (numberp n) (lessp n 0)))) (replaceby (polygamma (~ m) (plus (~ x) (
~ n))) (when (plus (polygamma m (plus x (difference n 1))) (times (expt (minus 1
) m) (quotient (factorial m) (expt (plus x (difference n 1)) (plus m 1))))) (and
(numberp n) (fixp m) (geq n 1)))) (replaceby (polygamma (~ m) (plus (~ x) (~ n))
) (when (difference (polygamma m (plus x n 1)) (times (expt (minus 1) m) (
quotient (factorial m) (expt (plus x n) (plus m 1))))) (and (numberp n) (fixp m)
(lessp n 0)))) (replaceby (psi (quotient (plus (~ x) (~ n)) (~ d))) (when (plus
(psi (quotient (plus x (difference n d)) d)) (quotient d (plus x (difference n d
)))) (and (numberp (quotient n d)) (geq (quotient n d) 1)))) (replaceby (psi (
quotient (plus (~ x) (~ n)) (~ d))) (when (difference (psi (quotient (plus x n d
) d)) (quotient d (plus x n))) (and (numberp (quotient n d)) (lessp (quotient n
d) 0)))) (replaceby (polygamma (~ m) (quotient (plus (~ x) (~ n)) (~ d))) (when
(plus (polygamma m (quotient (plus x (difference n d)) d)) (times (expt (minus 1
) m) (factorial m) (quotient (expt d (plus m 1)) (expt (plus x (difference n d))
(plus m 1))))) (and (fixp m) (numberp (quotient n d)) (geq (quotient n d) 1))))
(replaceby (polygamma (~ m) (quotient (plus (~ x) (~ n)) (~ d))) (when (
difference (polygamma m (quotient (plus x n d) d)) (times (expt (minus 1) m) (
factorial m) (quotient (expt d (plus m 1)) (expt (plus x n) (plus m 1))))) (and
(fixp m) (numberp (quotient n d)) (lessp (quotient n d) 0))))) nil rdpsi* crpsi*
 nil (list (replaceby (polygamma (~ n) (~ x)) (when (polygamma:error n x) (and (
numberp n) (or (not (fixp n)) (lessp n (minus 1)))))) (replaceby (polygamma 0 (~
x)) (psi x)) (replaceby (polygamma (~ n) (~ x)) (when (polygamma:error n x) (and
(numberp x) (equal (impart x) 0) (equal x (floor x)) (lessp x 1)))) (replaceby (
polygamma (~ n) (~ x)) (when (do*trigamma*halves x) (and (numberp n) (equal n 1)
(numberp x) (equal (impart x) 0) (and (not (equal x (floor x))) (equal (times 2
x) (floor (times 2 x)))) (greaterp x 1)))) (replaceby (polygamma (~ n) (~ x)) (
when (times (expt (minus 1) n) (factorial n) (plus (minus (zeta (plus n 1))) (
polygamma_aux x n))) (and (fixp x) (geq x 1) (not (symbolic *rounded))))) (
replaceby (polygamma (~ n) (~ x)) (when (times (expt (minus 1) n) (factorial n)
(plus (minus (times 2 (expt 2 n) (zeta (plus n 1)))) (times 2 (expt 2 n)) (zeta
(plus n 1)))) (and (numberp x) (equal x (quotient 3 2)) (not (symbolic *rounded)
)))) (replaceby (polygamma (~ n) (~ x)) (when (do*polygamma n x) (and (numberp x
) (symbolic *rounded) (not (and (fixp x) (leq x 0))) (numberp n) (equal (impart
n) 0) (equal n (floor n))))) (replaceby (df (polygamma (~ n) (~ x)) (~ x)) (
polygamma (plus n 1) x))) nil nil (list (replaceby (zeta (~ x)) (when (minus (
quotient 1 2)) (and (numberp x) (equal x 0)))) (replaceby (zeta (~ x)) (when (
quotient (expt pi 2) 6) (and (numberp x) (equal x 2)))) (replaceby (zeta (~ x))
(when (quotient (expt pi 4) 90) (and (numberp x) (equal x 4)))) (replaceby (zeta
(~ x)) (when infinity (and (numberp x) (equal x 1)))) (replaceby (zeta (~ x)) (
when 0 (and (numberp x) (equal (impart x) 0) (lessp x 0) (equal (quotient x 2) (
floor (quotient x 2)))))) (replaceby (zeta (~ x)) (when (times (quotient (expt (
times 2 pi) x) (times 2 (factorial x))) (abs (bernoulli*calc x))) (and (numberp
x) (equal (impart x) 0) (greaterp x 0) (equal (quotient x 2) (floor (quotient x
2))) (lessp x 31)))) (replaceby (zeta (~ x)) (when (minus (quotient (
bernoulli*calc (difference 1 x)) (difference 1 x))) (and (numberp x) (equal (
impart x) 0) (lessp x 0) (equal x (floor x)) (greaterp x (minus 31))))) (
replaceby (zeta (~ x)) (when (times (quotient (expt (times 2 pi) x) (times 2 (
factorial x))) (abs (bernoulli*calc x))) (and (numberp x) (equal (impart x) 0) (
greaterp x 0) (equal (quotient x 2) (floor (quotient x 2))) (lessp x 201) (
symbolic *rounded)))) (replaceby (zeta (~ x)) (when (minus (quotient (
bernoulli*calc (difference 1 x)) (difference 1 x))) (and (numberp x) (equal (
impart x) 0) (lessp x 0) (equal x (floor x)) (greaterp x (minus 201)) (symbolic
*rounded)))) (replaceby (zeta (~ x)) (when (times (expt 2 x) (expt pi (
difference x 1)) (sin (times pi (quotient x 2))) (gamma (difference 1 x)) (zeta
(difference 1 x))) (and (numberp x) (equal (impart x) 0) (lessp x 0) (or (neq x
(floor x)) (lessp x (minus 200))) (symbolic *rounded)))) (replaceby (zeta (~ x))
(when (do*zeta*pos*intcalc (fix x)) (and (symbolic *rounded) (numberp x) (equal
(impart x) 0) (greaterp x 1) (equal x (floor x)) (or (leq x 15) (greaterp (
precision 0) 100) (lessp (times 2 x) (precision 0)))))) (replaceby (zeta (~ x))
(when (do*zeta x) (and (numberp x) (equal (impart x) 0) (symbolic *rounded)))) (
replaceby (df (zeta (~ x)) x) (when (minus (times (quotient 1 2) (log (times 2
pi)))) (and (numberp x) (equal x 0))))) nil nil nil nil nil nil 

+++ Reading file: packages/rtools/rtools.red
nil rtools nil nil nil 

+++ Reading file: packages/rtools/general.red
nil nil 0 atomlis nil makearbcomplex 
*** nth not defined (LOSE flag) 
nil 
*** pnth not defined (LOSE flag) 
nil permp permutations 
+++ Record new inline definition:
(de posintegerp (u) (and (fixp u) (greaterp u 0)))
posintegerp remove repasc repascq spaces 
*** subla not defined (LOSE flag) 
nil xnp nil [nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil] 
nil 
+++ Record new inline definition:
(de !*num2id (u) (cond ((and (leq u 15) (geq u 0)) (getv ints!-as!-symbols!* u))
(t (intern (list2string (explode u))))))
*num2id alistp 
+++ Record new inline definition:
(de greaterpcar (u v) (greaterp (car u) (car v)))
greaterpcar 
+++ Record new inline definition:
(de lesspcar (u v) (lessp (car u) (car v)))
lesspcar 
+++ Record new inline definition:
(de greaterpcdr (a b) (greaterp (cdr a) (cdr b)))
greaterpcdr 
+++ Record new inline definition:
(de lesspcdr (u v) (lessp (cdr u) (cdr v)))
lesspcdr 
+++ Record new inline definition:
(de identity!-function (x) x)
identity-function 
+++ Record new inline definition:
(de ordpcar (u v) (ordp (car u) (car v)))
ordpcar 
+++ Record new inline definition:
(de ordpcadr (u v) (ordp (cadr u) (cadr v)))
ordpcadr 
+++ Record new inline definition:
(de ordopcadr (u v) (ordop (cadr u) (cadr v)))
ordopcadr 
+++ Record new inline definition:
(de arg1of2 (u v) u)

*** local variable v in procedure arg1of2 not used 
arg1of2 
+++ Record new inline definition:
(de arg2of2 (u v) v)

*** local variable u in procedure arg2of2 not used 
arg2of2 fpmaxbits floatp1 bfloatp1 hexfloat hexbfloat hex nil nil split64 hex64 
hex64t leafcount nil nil 
*** mkhash called with 2 instead of 3 arguments 
treesize keeptopfew firstfew symbol-value findspaceusers hashsize nil nil (3) 
hashsizes nil nil nil 

+++ Reading file: packages/rtools/rprintf.red
nil nil nil p_princ p_prin nil t nil nil nil (0) p_prinl0 p_prinl1 p_printref 
p_prinl2 rlisp_printl rlisp_printcl rlisp_princl rlisp_prinl portable_print 
portable_printc portable_princ portable_prin p_minus p_diff2minus p_prefix 
prin_with_margin princ_with_margin print_with_margin printc_with_margin 
print_with_margin_sub bldmsg_internal p_posn nil f p_prinhex p_prinoctal 
printf_internal nil nil 

+++ Reading file: packages/rtools/random.red
nil nil nil nil [nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil] 
100000000 1.0e-8 nil random_new_seed next-random-number random nil nil nil 

+++ Reading file: packages/rtools/genmod.red
nil nil nil set-general-modulus general-modular-plus general-modular-difference 
general-modular-number general-modular-times general-modular-reciprocal 
general-modular-quotient general-modular-minus general-reciprocal-by-gcd 
reverse-num nil [nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
nil] 8 4 12 2 10 6 14 1 9 5 13 3 11 7 15 reverse-num1 nil (reverse-num) 1 
simpiden rnreverse-num* simpreverse-num simpreverse-num general-modular-expt nil
 nil 

+++ Reading file: packages/rtools/smallmod.red
nil nil nil set-modulus set-small-modulus 
+++ Record new inline definition:
(de modular!-plus (a b) (prog (result) (setq result (iplus2 a b)) (cond ((not (
ilessp result current!-modulus)) (setq result (idifference result
current!-modulus)))) (return result)))
modular-plus 
+++ Record new inline definition:
(de modular!-difference (a b) (prog (result) (setq result (idifference a b)) (
cond ((iminusp result) (setq result (iplus2 result current!-modulus)))) (return
result)))
modular-difference modular-number 
+++ Record new inline definition:
(de modular!-times (a b) (remainder (times a b) current!-modulus))
modular-times modular-reciprocal reciprocal-by-gcd safe-modular-reciprocal 
safe-reciprocal-by-gcd 
+++ Record new inline definition:
(de modular!-quotient (a b) (remainder (times a (modular!-reciprocal b))
current!-modulus))
modular-quotient 
+++ Record new inline definition:
(de modular!-minus (a) (cond ((equal a 0) a) (t (idifference current!-modulus a)
)))
modular-minus modular-expt nil nil nil 

+++ Reading file: packages/rtools/sort.red
nil stable-sortip sort 
+++ Record new inline definition:
(de stable!-sort (l pred) (sort l pred))
stable-sort idsort idcompare idcomp1 
*** SMACRO/INLINE greaterpcar redefined 
greaterpcar 
*** SMACRO/INLINE greaterpcdr redefined 
greaterpcdr lesspcadr greaterpcadr lesspcaddr greaterpcaddr lesspcdadr lessppair
 lesspdeg ordopcar orderfactors sort-factors nil nil 

+++ Reading file: packages/rtools/simplertrace.red
nil ~~saved_getd ~~saved_putd s:argcount s:traced-version 
*** local variable *pwrds in procedure s:trace not used 
s:trace simple-trace nil nil 

+++ Reading file: packages/arith/arith.red
nil arith nil nil nil nil nil nil 
+++ Record new inline definition:
(de mt!: (u) (cadr u))
mt: 
+++ Record new inline definition:
(de ep!: (u) (cddr u))
ep: 
+++ Record new inline definition:
(de make!:ibf (mt ep) (cons (quote !:rd!:) (cons mt ep)))
make:ibf 
+++ Record new inline definition:
(de i2bf!: (u) (cons (quote !:rd!:) (cons u 0)))
i2bf: 
+++ Record new inline definition:
(de make!:rd (u) (cons (quote !:rd!:) u))
make:rd 
+++ Record new inline definition:
(de rdp (x) (eqcar x (quote !:rd!:)))
rdp 
+++ Record new inline definition:
(de float!-bfp (x) (atom (cdr x)))
float-bfp 
+++ Record new inline definition:
(de rd2fl (x) (cdr x))
rd2fl 
+++ Record new inline definition:
(de fl2rd (x) (cons (quote !:rd!:) x))
fl2rd 
+++ Record new inline definition:
(de bfp!: (x) (and (eqcar x (quote !:rd!:)) (not (atom (cdr x)))))
bfp: 
+++ Record new inline definition:
(de retag (u) (cond ((atom u) u) (t (cons (quote !:rd!:) u))))
retag 
+++ Record new inline definition:
(de rndpwr (j) (normbf (round!:mt j !:bprec!:)))
rndpwr msd: ashift 
+++ Record new inline definition:
(de lshift (m d) (ashift m d))
lshift 
+++ Record new inline definition:
(de shift (m d) (cond ((and (minusp m) (minusp d)) (lnot (ashift (lnot m) d))) (
t (ashift m d))))
shift 
+++ Record new inline definition:
(de oddintp (n) (not (evenp n)))
oddintp 
+++ Record new inline definition:
(de preci!: (nmbr) (msd!: (abs (cadr nmbr))))
preci: 
+++ Record new inline definition:
(de divbf (u v) (normbf (divide!: u v !:bprec!:)))
divbf 
+++ Record new inline definition:
(de timbf (u v) (normbf (round!:mt (times!: u v) !:bprec!:)))
timbf 
+++ Record new inline definition:
(de bfminusp (u) (cond ((atom u) (minusp u)) (t (minusp!: u))))
bfminusp special_bfminusp 
+++ Record new inline definition:
(de bfzp (u) (cond ((atom u) (zerop u)) (t (equal (cadr u) 0))))
bfzp 
+++ Record new inline definition:
(de bfnzp (u) (not (cond ((atom u) (zerop u)) (t (equal (cadr u) 0)))))
bfnzp 
+++ Record new inline definition:
(de bfloat (x) (cond ((floatp x) (fl2bf x)) (t (normbf (cond ((not (atom x)) x)
((fixp x) (cons (quote !:rd!:) (cons x 0))) (t (read!:num x)))))))
bfloat 
+++ Record new inline definition:
(de rdfl2rdbf (x) (fl2bf (cdr x)))
rdfl2rdbf 
+++ Record new inline definition:
(de rd!:forcebf (x) (cond ((atom (cdr x)) (fl2bf (cdr x))) (t x)))
rd:forcebf 
+++ Record new inline definition:
(de crrl (x) (cadr x))
crrl 
+++ Record new inline definition:
(de crim (x) (cddr x))
crim 
+++ Record new inline definition:
(de make!:cr (re im) (cons (quote !:cr!:) (cons re im)))
make:cr 
+++ Record new inline definition:
(de crp (x) (eqcar x (quote !:cr!:)))
crp 
+++ Record new inline definition:
(de tagrl (x) (cons (quote !:rd!:) (cadr x)))
tagrl 
+++ Record new inline definition:
(de tagim (x) (cons (quote !:rd!:) (cddr x)))
tagim 
+++ Record new inline definition:
(de gfrl (u) (car u))
gfrl 
+++ Record new inline definition:
(de gfim (u) (cdr u))
gfim 
+++ Record new inline definition:
(de mkgf (rl im) (cons rl im))
mkgf 
+++ Record new inline definition:
(de gfzerop (u) (cond ((not (atom (car u))) (and (equal (cadr (car u)) 0) (equal
(cadr (cdr u)) 0))) (t (equal u (quote (0.0 . 0.0))))))
gfzerop nil nil (:rd: 0 . 0) (:rd: 1 . -1) (:rd: 1 . 0) (:rd: 3 . -1) (:rd: 2 .
0) (:rd: 3 . 0) (:rd: 5 . 0) (:rd: 5 . 1) (:rd: 15 . 2) (:rd: 45 . 2) (:rd: 1 .
-2) (:rd: 1 . -4) (:rd: 215 . -9) dn:simp dn:simp dn:prin dn:prin nil nil 

+++ Reading file: packages/arith/smlbflot.red
nil nil nil nil nil nil nil nil 10 5 bflerrmsg bfzerop: fl2bf bfprin: 
divide-by-power-of-ten multiply-by-power-of-ten nil round:dec round:dec1 bfprin0
 bfprin0x bfexpl0 bfexpl0x fpprec nil bfexplode0 bfexplode0x bfprin:lst 
smallcompress smallsplit scientific_notation nil order: 
+++ Record new inline definition:
(de decprec!: (nmbr k) (cons (quote !:rd!:) (cons (ashift (cadr nmbr) (minus k))
(plus (cddr nmbr) k))))
decprec: 
+++ Record new inline definition:
(de incprec!: (nmbr k) (cons (quote !:rd!:) (cons (ashift (cadr nmbr) k) (
difference (cddr nmbr) k))))
incprec: conv:mt round:mt round:ep round:last cut:mt cut:ep bftrim: 
decimal2internal read:num abs: minus: plus: difference: times: divide: max2: 
max: min2: min: greaterp: equal: lessp: leq: minusp: make:ratnum ratnump: 
+++ Record new inline definition:
(de numr!: (rnmbr) (cadr rnmbr))
numr: 
+++ Record new inline definition:
(de denm!: (rnmbr) (cddr rnmbr))
denm: conv:r2bf nil nil 

+++ Reading file: packages/arith/bfauxil.red
nil nil nil nil nil nil nil normbf bfdivide bftimes plubf bfplus difbf bfdiffer 
invbf bfinverse bfminus bflessp grpbf !shbinflp vv!*1e10 nil bfsqrt realrat nil 
fl2int nil cflot conv:bf2i bf2flr gf2fl gf2bf r2bf r2fl gfplus gffplus gbfplus 
gfdiffer gffdiff gbfdiff gftimes gfftimes gbftimes gfquotient gffquot gbfquot 
gfminus gfrotate gfdot gffdot gbfdot gfrsq gffrsq gbfrsq gffmult gffsqrt gbfmult
 gbfsqrt 
+++ Record new inline definition:
(de rl2gfc (x) (cons x (cond ((atom x) 0.0) (t bfz!*))))
rl2gfc gfsqrt sgn exptbf icbrt fix2 ilog2 isqrt qroundup irootn irootn-power2 
irootn1 2 nil nil 

+++ Reading file: packages/arith/paraset.red
nil nil nil nil nil find!nfpd find!nbfpd find!maxbflexp find!minnorm infinityp 
!mfefix 15 53 1022 nil 1.0e-8 1.0e+15 9.00719925474e+15 53 
+++ Record new inline definition:
(de fp!-infinite (x) (and (or (greaterp x 9.999999999999999e+299) (lessp x (
minus 9.999999999999999e+299))) (eqn (quotient 1.0 x) 0.0)))
fp-infinite 
+++ Record new inline definition:
(de fp!-nan (x) (not (eqn x x)))
fp-nan 
+++ Record new inline definition:
(de fp!-finite (x) (eqn (difference x x) 0.0))
fp-finite 
+++ Record new inline definition:
(de fp!-subnorm (x) (and (lessp x !!minnorm) (greaterp x !!minnegnorm)))
fp-subnorm nil nil 

+++ Reading file: packages/arith/math.red
nil nil nil nil Math package mod 1.7, 1 May 93 terrlst nil nil sqrt cbrt hypot 
floor ceiling round rounddec nil nil nil 1.41421356237 0.414213562373 log 
sclogx-1 0.69314718056 186.509392533 nil nil nil nil atan atand 6.28318530718 
1.0471975512 0.0174532925199 57.2957795131 nil nil sin sind tan tand nil 
10000000 nil !scalsintan !scalsintand !sints !sinhts nil exp nil 2.71828182846 
nil 2 iexpt expt fsplit f_multiply fexpt fexpt1 rexpt ft2rn1 ft2rn2 cos cot sec 
csc acot asin acos acsc asec cosd cotd secd cscd acotd asind acosd acscd asecd 
sinh cosh tanh coth asinh acosh atanh acoth sech csch asech acsch ln log10 logb 
atan2 atan2d factorial nfactorial fac-part nil nil 

+++ Reading file: packages/arith/rounded.red
nil nil nil nil nil nil nil nil nil nil nil 12 9.999999999999998e-15 logfp 
roundconstants nil nil t ((t (roundbfon)) (nil (roundbfoff))) roundbfon 
roundbfoff (:rd: lambda :mod: :crn: :gi: :rn:) :rd: rounded nil i2rd* rd:minusp 
rd:plus rd:times rd:difference rd:quotient rd:zerop rd:onep rd:prep rd:prin 
rd:minus rd:root *rd2rn *rn2rd round* mkround print-precision print_precision 
precision0 precision0 precision 3.32192809489 decprec2internal precision1 nil 
nil *rd2rn rd2rn1 bf2rn1 *rn2rd 6 nil 5.6843418860799994e-14 3.23117426779e-27 
precmsg rd:simp rd:simp rndbfon i2rd* chkint* (:rd: 1 . -800) chkrn* bf2flck 
convchk convprec* convprec rd:minusp convprc2 rdzchk rd:plus rd:difference 
rd:times rd:quotient rdqoterr nil nil t safe-fp-minus nil nil nil nil nil 
2.97713141471e+138 1.34078079299e+154 6.0383398797099994e+169 8.98846567431e+307
 2.22507385851e-308 -2.22507385851e-308 2.97713141471e+138 1.34078079299e+154 
6.0383398797099994e+169 8.98846567431e+307 2.22507385851e-308 
-2.22507385851e-308 safe-fp-plus safe-fp-times safe-fp-quot rd:zerop rd:minus 
rd:onep rd:root rd:prep rdprep1 rd:prin rd:explode nil evalf0 evalf0 evalnum0 
evalnum0 hexfloat1 hexfloat hexfloat nil nil 

+++ Reading file: packages/arith/comprd.red
nil nil nil nil nil nil nil (:cr: :rd: lambda :mod: :crn: :gi: :rn:) nil :cr: 
complex-rounded nil i2cr* cr:plus cr:times cr:differ cr:quotient cr:zerop 
cr:onep cr:prep cr:prin cr:minus cr:minusp *cr2rn *rn2cr *rd2cr *cr2rd *cr2crn 
*crn2cr *gi2cr mkcr mkdcrn :rd: :cr: crnorm* cr:repart cr:impart cr:minusp 
striptag mkcr gf2cr: crprcd crprcd2 cr:simp cr:simp nil cr:repart cr:impart 
i2cr* trimcrrl trimcr cr2rderr *cr2rn *rn2cr *cr2crn *crn2cr *cr2rd *rd2cr 
*gi2cr bfrsq crzchk cr:plus cr:differ cr:times cr:quotient safe-crfp-plus 
safe-crfp-diff safe-crfp-times safe-crfp-quot cr:minus cr:zerop cr:onep cr:prep 
crprep1 crprimp cr:prin nil crone* crhalf* cri* cri/2 cr2i* nil nil 

+++ Reading file: packages/arith/rdelem.red
nil nil nil nil nil 0.0174532925199 57.2957795131 nil (exp expt log sin cos tan
asin acos atan sqrt sinh cosh sec csc cot tanh coth sech csch asinh acosh acot
asec acsc atanh acoth asech acsch logb log10 ln atan2 hypot deg2rad rad2deg
deg2dms rad2dms dms2deg dms2rad norm arg argd e pi) (sind cosd asind acosd tand
cotd atand acotd secd cscd asecd acscd atan2d) nil nil (dms2deg* dms2rad*) (
atan2 hypot atan2d logb) nil nil nil rdexp* rdsqrt* rdexpt* rdlog* rdatan2* 
rdatan2d* atan2* rde* rdpi* pi/2* deg2rad* rad2deg* deg2rad rad2deg deg2rad: 
rad2deg: rdsin* rdsind* rdcos* rdcosd* rdtan* rdtand* rdasin* rdasind* rdacos* 
rdacosd* rdatan* rdatand* rdsinh* rdcosh* sinh* cosh* rdsec* rdsecd* rdcsc* 
rdcscd* rdcot* rdcotd* rdtanh* rdcoth* rdsech* rdcsch* rdasinh* rdacosh* asinh* 
acosh* rdacot* rdacotd* rdasec* rdasecd* rdacsc* rdacscd* rdatanh* atanh* 
rdacoth* rdasech* rdacsch* rdlogb* rdlog10* logb* rdhypot* hypot* simpdms 
round2a* dms2rad* dms2deg* dms2deg dms2deg: rad2dms rad2dms* deg2dms* mklist3* 
deg2dms deg2dms: rdnorm* rdarg* rdargd* nil rdone* rdtwo* rdhalf* rdzero* texpt:
 quotient: texpt:any integerp: nil nil 

+++ Reading file: packages/arith/crelem.red
nil nil nil nil (expt sin cos tan asin acos atan cot acot sec asec csc acsc sinh
cosh asinh acosh tanh coth atanh acoth sech csch asech acsch atan2 arg sqrt norm
argd log log10 exp logb e pi) (sind cosd tand asind acosd atand cotd acotd secd
cscd acscd asecd argd) cre* crpi* crexpt* crnorm* crarg* crargd* crsqrt* crr2d* 
crd2r* crsin* crsind* crcos* crcosd* crtan* crtand* crcot* crcotd* cratan2* 
crlog* crlog10* crlogb* timesi* crsec* crsecd* crcsc* crcscd* crsinh* crcosh* 
crtanh* crcoth* crsech* crcsch* crexp* invfnargs crasin* crasind* cracos* 
cracosd* cratan* cratand* cracot* cracotd* crasec* crasecd* cracsc* cracscd* 
crasinh* cracosh* cratanh* cracoth* crasech* cracsch* nil nil 

+++ Reading file: packages/arith/bfelem.red
nil nil nil nil nil nil allfixp read:lnum exp* log* sin* cos* tan* asin* acos* 
atan* sqrt* pi* e* :pi :bigpi :e :e0625 :log2 :log3 :log5 :log10 :logpi :sqrt2 
:sqrt3 :sqrt5 :sqrt10 :sqrtpi :sqrte :cbrt2 :cbrt3 :cbrt5 :cbrt10 :cbrtpi :cbrte
 get:const save:const set:const (693 :rd:
32275789658570886958156186740185430035207321153362338386082868836372441170262918772578584747851174923149878504151407927049194948238790383959946719335828357694428215050317306695934166355248914491511797113061591
. -691) (696 :rd:
223414559943812204541299691543817774952446626078955845183474074928994140646542202630297581777052042918617043584281846658404080952838738755044958604987321549025362902884163241093707622384220567344910829214455753
. -694) (345 :rd:
38147133879018916226726161754238056000235647349641966973643839209814212240981324997881509318028130379359
. -344) (344 :rd:
24839564051432105757030187307432255962232015093166539115572437354016218101313667760974422926251785557331
. -344) (346 :rd:
78739555111562328162466601559210101903369880761600796068692519487892757296836330825859826335560157422575
. -345) (343 :rd:
14418920408943590291895376801231811103435110839037170382760291138100527377344006226693362638634878438263
. -342) (347 :rd:
165030491374412933849223389024719000751944916898630441293227203812836655221379385335495746961582598620767
. -345) (346 :rd:
82044887777439745201490860134149724327740508022373333934496464660706775280894235524870788720107408621657
. -345) (345 :rd:
50679638250266908861395072713544592150266848458327253776136968282930880401586871730484368125324019459069
. -344) (347 :rd:
248278508123981609440413003268423058724784449908208567741775698889111072126561909541155538505338450234411
. -346) (347 :rd:
160263087864233938564171191044014407532380117773343723184267574989151211701991419780657973200450208209937
. -345) (351 :rd:
3626339718486249843935062318460017099107964674038984464624974694918453710375278122937439447990585581769517
. -349) (346 :rd:
127035014186189798996721691704828281211780805781345795619730198926133233346870142241668189685941500845293
. -345) (343 :rd:
14770859189469281038386275396043606714604333497923750655344249075728152412325839111562307376508616809399
. -342) (346 :rd:
90300849505957794917936684197096299653509935569780592611890608283374605465644997058723193304239168600451
. -345) (346 :rd:
103368668544134889415261896114643512957939173776229308377580129710844166070396271815119166661316221761795
. -345) (346 :rd:
122557108346228652131261462517363494874090099635843090514908752924083688145951822513240265180899973398035
. -345) (347 :rd:
154412280619660125997582582468881795918497944332658086037182090027508214848053363871814051517862045334163
. -345) (347 :rd:
209939966694540002189872523367163064276025630375546307290789337782432628385230387394034908651444438482047
. -346) (346 :rd:
100026098918546677906326139569715406271344101179735395193974120497220242360267604189519654265327644817783
. -345) sqrt: cbrt: exp: log: sin: cos: tan: asin: acos: atan: nil nil 

+++ Reading file: packages/support/entry.red
nil nil entry safe-putd 
+++ Record new inline definition:
(de mkfunction (u) (list (quote function) u))
mkfunction do-autoload defautoload defautoload_operator autoload_operator* 
defautoload_value autoload_value* autoload_value* compile 
*** Autoload stub for faslout not defined 
fully-macroexpand nil ((t (crefon)) (nil (and (getd (quote crefoff)) (crefoff)))
) crefon nil nil cedit display rlis editdef rlis package-remake nil rlis ezgcdf 
factorize-primitive-polynomial pfactor simpnprimitive simpnprimitive rlis nil 
nil nil resetreduce endstat nil nil nil nil nil index mass mshell vecdim vector 
rlis rlis rlis rlis rlis nil nil ((t (load-package (quote cvit)))) nil nil 
simpint simpint nil nil nil ((t (load-package (quote algint)))) nil nil 
new_defint new_indefint defint0 new_laplace new_laplace new_hankel new_hankel 
new_y_transform new_y_transform new_k_transform new_k_transform new_struveh 
new_struveh new_fourier_sin new_fourier_sin new_fourier_cos new_fourier_cos 
print_conditions nil nil ((t (put (quote mat) (quote lnrsolvefn) (quote
clnrsolve)) (put (quote mat) (quote inversefn) (quote matinv))) (nil (put (quote
mat) (quote lnrsolvefn) (quote lnrsolve)) (put (quote mat) (quote inversefn) (
quote matinverse)))) detq matp matrix rlis nil formmat formmat matstat matstat 
generateident lnrsolve simpresultant resultant simpresultant nullspace-eval 
nullspace-eval readmatproc readmatproc nil cont-fract simpiden cont-fract 
cont-fract cf:expr cf:conv cf:coef-list cf:conv-list cf:transform cf:unit-num 
cf:unit-den cf:remove-fracs cf:remove-const cf:even-odd cf:cf:euler cf:expr 
cf:conv cf:coef-list cf:conv-list cf:transform cf:unit-num cf:unit-den 
cf:remove-fracs cf:remove-const cf:even-odd cf:euler nil nil nil nil nil nil nil
 nil nil nil nil nil nil nil nil nil nil nil nil odesolve-eval odesolve-eval 
simpiden nil  ..  nil nil nil rdsolveeval rdsolveeval rungekuttaeval 
rungekuttaeval boundseval boundsevalrd boundseval boundsevalrd bounds-rd 
rdmineval rdmineval chebysheveval (lambda (u) (chebysheveval u (quote fit))) (
lambda (u) (chebysheveval u (quote eval))) (lambda (u) (chebysheveval u (quote
int))) (lambda (u) (chebysheveval u (quote df))) intrdeval intrdeval fiteval 
fiteval economise_series economise_series multipoint_pade nil (lambda (u) (prog
(*msg) (load-package (quote gnuplot)) (ploteval u))) (lambda (u) (prog (*msg) (
load-package (quote gnuplot)) (gnuploteval u))) nil nil endstat endstat nil 
rprint nil nil solveeval solve0 solveeval nil simpiden ((nil (load-package (
quote solve)))) ((nil (load-package (quote solve)))) ((nil (load-package (quote
solve)))) simp-arbcomplex (arbcomplex) nil nil ineqseval* ineqseval* msolve 
modroots0 msolvesys msolve #<INTERPRETED-FUNCTION NIL {10021E015B}> nil 
i_solve-eval r_solve-eval i_solve-eval r_solve-eval nil nil roots gfnewt gfroot 
root_val firstroot rlrootno realroots isolater nearestroot sturm0 multroot1 nil 
sturm0 multroot1 nil nil simplimit nil nil simplaplace simplaplace simpinvlap 
simpinvlap nil nil pf nil nil simpcompact simpcompact simpchangevar 
simpchangevar simpdfp simpdfp generic_function rlis dfp_commute rlis frobenius 
companion diag jordan jordansymbolic jordanblock submatrix ratjordan smithex_int
 smithex nil randpoly rand randpoly nil rand nil nil simp-sum simp-sum0 simp-sum
 simp-prod simp-prod nil nil gosper-eval gosper-eval extended_gosper-eval 
extended_gosper-eval sumrecursion-eval sumrecursion-eval 
extended_sumrecursion-eval sumrecursion-eval extended_hyperrecursion-eval 
extended_hyperrecursion-eval hyperrecursion-eval hyperrecursion-eval hyperterm 
hypersum-eval hypersum-eval sumtohyper simplify_gamma simplify_gamma2 
simplify_gamman simplify_combinatorial nil (summ zb_f zb_sigma) ztrans (lambda (
x) (autoload_operator* (quote invztrans) (quote ztrans) x)) nil nil simptaylor 
simptaylor implicit_taylor inverse_taylor nil nil simpps simpps simppstaylor 
simppstaylor simppsexplim simppsexplim simppssum simppssum trigsimp* trigsimp* 
trigfactorize triggcd nil nil compute:dilog compute:lerch_phi nil 
compute:khinchin1 bernoulli*calc euler:aux rd_euler* cr_euler* rd_catalan* 
cr_catalan* (lambda (x) (autoload_operator* (quote besselj) (quote (specfn
specbess)) x)) (lambda (x) (autoload_operator* (quote bessely) (quote (specfn
specbess)) x)) (lambda (x) (autoload_operator* (quote besseli) (quote (specfn
specbess)) x)) (lambda (x) (autoload_operator* (quote besselk) (quote (specfn
specbess)) x)) (lambda (x) (autoload_operator* (quote hankel1) (quote (specfn
specbess)) x)) (lambda (x) (autoload_operator* (quote hankel2) (quote specbess)
x)) (lambda (x) (autoload_operator* (quote kummerm) (quote specbess) x)) (lambda
(x) (autoload_operator* (quote kummeru) (quote specbess) x)) (lambda (x) (
autoload_operator* (quote struveh) (quote specbess) x)) (lambda (x) (
autoload_operator* (quote struvel) (quote specbess) x)) (lambda (x) (
autoload_operator* (quote lommel1) (quote specbess) x)) (lambda (x) (
autoload_operator* (quote lommel2) (quote specbess) x)) (lambda (x) (
autoload_operator* (quote whittakerm) (quote specbess) x)) (lambda (x) (
autoload_operator* (quote whittakerw) (quote specbess) x)) (lambda (x) (
autoload_operator* (quote airy_ai) (quote specbess) x)) (lambda (x) (
autoload_operator* (quote airy_bi) (quote specbess) x)) (lambda (x) (
autoload_operator* (quote airy_aiprime) (quote specbess) x)) (lambda (x) (
autoload_operator* (quote airy_biprime) (quote specbess) x)) (lambda (x) (
autoload_operator* (quote binomial) (quote specfn) x)) nil compute:int:functions
 sf*eval nil do*gamma do*pochhammer polygamma_aux rdpsi* crpsi* do*polygamma 
do*trigamma*halves do*zeta do*zeta*pos*intcalc igamma:eval ibeta:eval nil 
solidharmonicy sphericalharmonicy nil nil fibonacci fibonaccip nil motzkin 
monomial_base trigonometric_base bernstein_base legendre_base laguerre_base 
hermite_base chebyshev_base_t chebyshev_base_u gegenbauer_base nil nil nil nil 
simpledeeval simpledeeval simp-fps simp-fps simpiden nil nil nil nil nil nil nil
 nil nil (qpochhammer qbrackets qfac qfactorial qbinomial) qpsihyperterm 
qphihyperterm nil qgosper qgosper qsumrecursion qsumrecursion qsimplify 
qsimplify down_qratio up_qratio nil (lambda (x) (autoload_operator* (quote
jacobiam) (quote ellipfn) x)) (lambda (x) (autoload_operator* (quote jacobisn) (
quote ellipfn) x)) (lambda (x) (autoload_operator* (quote jacobicn) (quote
ellipfn) x)) (lambda (x) (autoload_operator* (quote jacobidn) (quote ellipfn) x)
) (lambda (x) (autoload_operator* (quote jacobins) (quote ellipfn) x)) (lambda (
x) (autoload_operator* (quote jacobinc) (quote ellipfn) x)) (lambda (x) (
autoload_operator* (quote jacobind) (quote ellipfn) x)) (lambda (x) (
autoload_operator* (quote jacobisc) (quote ellipfn) x)) (lambda (x) (
autoload_operator* (quote jacobisd) (quote ellipfn) x)) (lambda (x) (
autoload_operator* (quote jacobics) (quote ellipfn) x)) (lambda (x) (
autoload_operator* (quote jacobids) (quote ellipfn) x)) (lambda (x) (
autoload_operator* (quote jacobicd) (quote ellipfn) x)) (lambda (x) (
autoload_operator* (quote jacobidc) (quote ellipfn) x)) (lambda (x) (
autoload_operator* (quote jacobie) (quote ellipfn) x)) (lambda (x) (
autoload_operator* (quote elliptice) (quote ellipfn) x)) (lambda (x) (
autoload_operator* (quote ellipticd) (quote ellipfn) x)) (lambda (x) (
autoload_operator* (quote elliptice') (quote ellipfn) x)) (lambda (x) (
autoload_operator* (quote ellipticf) (quote ellipfn) x)) (lambda (x) (
autoload_operator* (quote elliptick) (quote ellipfn) x)) (lambda (x) (
autoload_operator* (quote elliptick') (quote ellipfn) x)) (lambda (x) (
autoload_operator* (quote elliptictheta1) (quote ellipfn) x)) (lambda (x) (
autoload_operator* (quote elliptictheta2) (quote ellipfn) x)) (lambda (x) (
autoload_operator* (quote elliptictheta3) (quote ellipfn) x)) (lambda (x) (
autoload_operator* (quote elliptictheta4) (quote ellipfn) x)) (lambda (x) (
autoload_operator* (quote arcsn) (quote ellipfn) x)) (lambda (x) (
autoload_operator* (quote arccn) (quote ellipfn) x)) (lambda (x) (
autoload_operator* (quote arcdn) (quote ellipfn) x)) (lambda (x) (
autoload_operator* (quote arcns) (quote ellipfn) x)) (lambda (x) (
autoload_operator* (quote arcnc) (quote ellipfn) x)) (lambda (x) (
autoload_operator* (quote arcnd) (quote ellipfn) x)) (lambda (x) (
autoload_operator* (quote arcsc) (quote ellipfn) x)) (lambda (x) (
autoload_operator* (quote arcsd) (quote ellipfn) x)) (lambda (x) (
autoload_operator* (quote arccs) (quote ellipfn) x)) (lambda (x) (
autoload_operator* (quote arcds) (quote ellipfn) x)) (lambda (x) (
autoload_operator* (quote arccd) (quote ellipfn) x)) (lambda (x) (
autoload_operator* (quote arcdc) (quote ellipfn) x)) (lambda (x) (
autoload_operator* (quote weierstrass) (quote ellipfn) x)) (lambda (x) (
autoload_operator* (quote weierstrass1) (quote ellipfn) x)) (lambda (x) (
autoload_operator* (quote weierstrasszeta) (quote ellipfn) x)) (lambda (x) (
autoload_operator* (quote weierstrasszeta1) (quote ellipfn) x)) (lambda (x) (
autoload_operator* (quote weierstrass_sigma) (quote ellipfn) x)) (lambda (x) (
autoload_operator* (quote weierstrass_sigma1) (quote ellipfn) x)) (lambda (x) (
autoload_operator* (quote weierstrass_sigma2) (quote ellipfn) x)) (lambda (x) (
autoload_operator* (quote weierstrass_sigma3) (quote ellipfn) x)) (lambda (x) (
autoload_operator* (quote hypergeometric) (quote (specfn specfn2)) x)) (lambda (
x) (autoload_operator* (quote meijerg) (quote (specfn specfn2)) x)) (lambda (x)
(autoload_operator* (quote lambert_w) (quote (specfn specbess)) x)) residue 
poleorder nil nil nil nil ((t (load-package (quote arnum)) (setdmode (quote
arnum t)))) defpoly nil split-field-eval split-field-eval nil nil ratint convert
 convert_log logtoatan nil simpiden nil nil nil nil nil nil nil rtr* rtr unrtr 
rtrst unrtrst nil (rtr rtrst unrtr unrtrst) nil rtrout nil trrl trrlid rlis rlis
 untrrl untrrlid rlis rlis pg_gauss-sym nil meminfo systo_datestamp 
*** Autoload stub for systo_get-resource-directory not defined 
nil systo_trunk ioto_cplu ioto_cterpri ioto_form2str ioto_prin2 ioto_prin2t 
ioto_realtime ioto_smaprin ioto_sxread ioto_tprin2 ioto_tprin2t lto_0listp 
lto_upcase lto_alinsert lto_almerge lto_alphap lto_alunion lto_appendn 
lto_apply2nthip lto_at2str lto_cartprod lto_cassoc lto_catsoc lto_delnthip 
lto_delq lto_delqip lto_downcase lto_drop lto_eatsoc lto_fastgensym lto_hinsert 
lto_hmember lto_idconcat lto_idconcat2 lto_init lto_insert lto_insertq lto_last 
lto_lengthp lto_list2set lto_list2vector lto_lpvarl lto_max lto_maxkl 
lto_mergesort lto_min lto_nconcn lto_partition lto_powerset lto_remove lto_rmpos
 lto_sconcat lto_sconcat2 lto_setequalq lto_setminus lto_sgnchg lto_string2id 
lto_stringdescriptionlist lto_stringparagraph lto_stringsplit lto_sublistp 
lto_subset lto_subsetq lto_unionn lto_zip sfto_allcoeffs sfto_avgq 
sfto_dcontentf sfto_decdegf sfto_dgcdf sfto_dprpartf sfto_dprpartksf 
sfto_exteucd sfto_fctrf sfto_floatsub sfto_fsub sfto_fsub1 sfto_gcdf* 
sfto_greaterq sfto_idvarf sfto_int2sf sfto_kernelp sfto_kmemberf sfto_lcmn 
sfto_lcx sfto_lessq sfto_linwpp sfto_lmq sfto_lmultf sfto_lreorder sfto_mkpowq 
sfto_monfp sfto_mvartest sfto_mvarx sfto_pdecf sfto_qsub sfto_qsub1 sfto_qsubhor
 sfto_qsubhor1 sfto_redx sfto_renamealf sfto_renamef sfto_reorder sfto_resf 
sfto_sf2int sfto_sf2monl sfto_sf2monlip sfto_sqfdecf sfto_sqfpartf sfto_sqfpartz
 sfto_sqrtf sfto_truncq sfto_tsqsumf sfto_ucontentf sfto_varisnump sfto_vardeg 
sfto_varf sfto_varp sfto_zdeqn nil fastresultant revision copyright 
rl_provideservicestat rl_provideservicestat rl_typestat rl_typestat 
rl_builtinstat rl_builtinstat rl_servicestat rl_servicestat rl_blackboxstat 
rl_blackboxstat rl_servicewrapper rl_exc rl_excp rl_exception rl_exceptionp nil 
rl_set$ rl_set$ rl_set rl_copyc nil nil qhull qhull_qhull gurobi_newmodel nil 
backup_reduce_flags nil setcrackflags liepde einfachst nil nil nil nil nil nil 
nil nil ((t (assert_onoff)) (nil (assert_onoff))) assert_onoff 
assert_declarestat assert_declarestat assert_structstat assert_structstat 
assert_procstat assert_procstat assert_install rlis assert_uninstall rlis nil 
assert_install_all nil assert_uninstall_all assert_install1 sqp nil nil 
lex_cleanup lalr_construct_parser yyparse nil ((t (load-package (quote ranum)) (
setdmode (quote ranum) t))) ra_x ra_y nil smt_smt smt_smt nil smt_mainloop nil 
mrv_limit mrv_limit nil nil nil nil nil nil nil f5_groebner f5_groebner 
f5dumpassumptions torder torder nil sparse rlis nil nil 

+++ Reading file: remake.red
nil nil nil olderfaslp package-remake nil nil inline_defs_file 
load_saved_inlines save_inlines package-remake2 update-fasl2 upd-fasl1 
module2-to-file nil nil 
Time to build bootstrap REDUCE: 36.102 secs
Heap left: 4044504976 bytes
Value = T
)lisp (load "test")
 
;; loading #P"/home/kfp/Desktop/work/fricas-reduce/redbld/fasl.sbcl/module.fasl"
*** Function `EXPORTS' has been redefined
*** Function `IMPORTS' has been redefined
*** Function `MODULE' has been redefined
*** Function `ENDMODULE' has been redefined
*** Function `FORMLOAD' has been redefined
*** Function `LOAD-PACKAGE' has been redefined
*** Function `LOAD_PACKAGE' has been redefined
*** Function `PACKAGES_TO_LOAD' has been redefined
;; loading #P"/home/kfp/Desktop/work/fricas-reduce/redbld/fasl.sbcl/clprolo.fasl"
*** Function `CREATE-PACKAGE' has been redefined
*** Function `EVLOAD' has been redefined
;; loading #P"/home/kfp/Desktop/work/fricas-reduce/redbld/fasl.sbcl/mathpr.fasl"
;; loading #P"/home/kfp/Desktop/work/fricas-reduce/redbld/fasl.sbcl/mprint.fasl"
*** Function `ASSGNPRI' has been redefined
;; loading #P"/home/kfp/Desktop/work/fricas-reduce/redbld/fasl.sbcl/sqprint.fasl"
;; loading #P"/home/kfp/Desktop/work/fricas-reduce/redbld/fasl.sbcl/ratprin.fasl"
;; loading #P"/home/kfp/Desktop/work/fricas-reduce/redbld/fasl.sbcl/dfprin.fasl"
;; loading #P"/home/kfp/Desktop/work/fricas-reduce/redbld/fasl.sbcl/fortpri.fasl"
Value = T
)lisp (in-package :boot)
 
Value = #<PACKAGE "BOOT">
)lisp (setf *readtable* saved-readtable)
 
Value = #<READTABLE {100001AF13}>

-- after calling (sl::standard-lisp) we have to reset the readtable:
-- )lisp (setf *readtable* saved-readtable)
-- each time!


macro sys(cmd) == systemCommand(cmd)$MoreSystemCommands
 
                                                                   Type: Void

macro standardLisp == sys "lisp (sl::standard-lisp)"
 
                                                                   Type: Void

macro backToFricas == 
  sys "lisp (cl::in-package :boot)"
  sys "lisp (setf *readtable* saved-readtable)"
 
                                                                   Type: Void
  
-- nosman -eval ")r test_fricas.input" 

standardLisp
 
Value = #<COMMON-LISP:PACKAGE "STANDARD-LISP">
                                                                   Type: Void
)lisp (load-package 'excalc)
 

*** .*. redefined 

*** × redefined 

*** ^ redefined 
Value = NIL
)lisp (pform (list (list 'equal 'x 0)))
 
Value = NIL
)lisp (aeval (list 'd 'x))
 
Value = (*SQ (((((D X) . 1) . 1)) . 1) T)
)lisp (aeval (list 'd (list 'd 'x)))
 
Value = 0
)lisp (setk 'z (aeval 123))
 
Value = 123
)lisp (setk 'w (aeval (list 'expt 'z 'z)))
 
Value = 114374367934617190099880295228066276746218078451850229775887975052369504785666896446606568365201542169649974727730628842345343196581134895919942820874449837212099476648958359023796078549041949007807220625356526926729664064846685758382803707100766740220839267

backToFricas
 
Value = #<PACKAGE "BOOT">
Value = #<READTABLE {100001AF13}>
                                                                   Type: Void

y:=D(log x,x)
 

         1
   (11)  -
         x
                                                    Type: Expression(Integer)

standardLisp
 
Value = #<COMMON-LISP:PACKAGE "STANDARD-LISP">
                                                                   Type: Void
)lisp (aeval 'w)
 
Value = 114374367934617190099880295228066276746218078451850229775887975052369504785666896446606568365201542169649974727730628842345343196581134895919942820874449837212099476648958359023796078549041949007807220625356526926729664064846685758382803707100766740220839267
)lisp (aeval 'z)
 
Value = 123
)lisp (aeval 'x)
 
Value = (*SQ ((((X . 1) . 1)) . 1) T)

backToFricas
 
Value = #<PACKAGE "BOOT">
Value = #<READTABLE {100001AF13}>
                                                                   Type: Void
(14) -> (14) -> (14) -> (14) -> 