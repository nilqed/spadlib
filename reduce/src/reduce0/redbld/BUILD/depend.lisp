(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'DEPEND)) 
(FLUID '(ALGLIST* DEPL* FRLIS*)) 
(PUT 'DEPEND 'NUMBER-OF-ARGS 1) 
(PUT 'DEPEND 'DEFINED-ON-LINE '37) 
(PUT 'DEPEND 'DEFINED-IN-FILE 'ALG/DEPEND.RED) 
(PUT 'DEPEND 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE DEPEND (U) (DEPEND0 U T)) 
(PUT 'NODEPEND 'NUMBER-OF-ARGS 1) 
(PUT 'NODEPEND 'DEFINED-ON-LINE '40) 
(PUT 'NODEPEND 'DEFINED-IN-FILE 'ALG/DEPEND.RED) 
(PUT 'NODEPEND 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE NODEPEND (U) (PROGN (RMSUBS) (DEPEND0 U NIL))) 
(RLISTAT '(DEPEND NODEPEND)) 
(PUT 'DEPEND1 'NUMBER-OF-ARGS 3) 
(PUT 'DEPEND1 'DEFINED-ON-LINE '53) 
(PUT 'DEPEND1 'DEFINED-IN-FILE 'ALG/DEPEND.RED) 
(PUT 'DEPEND1 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE DEPEND1 (U V BOOL)
    (PROG (Y Z)
      (SETQ U (*A2K U))
      (SETQ V (*A2K V))
      (COND ((EQ U V) (RETURN NIL)))
      (SETQ Y (ASSOC U DEPL*))
      (COND
       (Y
        (COND
         (BOOL (SETQ DEPL* (REPASC (CAR Y) (UNION (LIST V) (CDR Y)) DEPL*)))
         ((SETQ Z (DELETE V (CDR Y))) (SETQ DEPL* (REPASC (CAR Y) Z DEPL*)))
         (T (SETQ DEPL* (DELETE Y DEPL*)))))
       ((NULL BOOL) (LPRIM (LIST U "has no prior dependence on" V)))
       (T (SETQ DEPL* (CONS (LIST U V) DEPL*)))))) 
(PUT 'DEPENDS 'NUMBER-OF-ARGS 2) 
(PUT 'DEPENDS 'DEFINED-ON-LINE '71) 
(PUT 'DEPENDS 'DEFINED-IN-FILE 'ALG/DEPEND.RED) 
(PUT 'DEPENDS 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE DEPENDS (U V)
    (COND ((OR (NULL U) (NUMBERP U) (NUMBERP V)) NIL) ((EQUAL U V) U)
          ((AND (ATOM U) (MEMQ U FRLIS*)) T)
          (((LAMBDA (X) (AND X (LDEPENDS (CDR X) V))) (ASSOC U DEPL*)) T)
          ((AND (NOT (ATOM U)) (IDP (CAR U)) (GET (CAR U) 'DNAME))
           ((LAMBDA (DEPENDS-FN)
              (COND (DEPENDS-FN (APPLY2 DEPENDS-FN U V)) (T NIL)))
            (GET (CAR U) 'DOMAIN-DEPENDS-FN)))
          ((AND (NOT (ATOM U)) (OR (LDEPENDS (CDR U) V) (DEPENDS (CAR U) V)))
           T)
          ((OR (ATOM V) (AND (IDP (CAR V)) (GET (CAR V) 'DNAME))) NIL) (T NIL))) 
(PUT 'LDEPENDS 'NUMBER-OF-ARGS 2) 
(PUT 'LDEPENDS 'DEFINED-ON-LINE '87) 
(PUT 'LDEPENDS 'DEFINED-IN-FILE 'ALG/DEPEND.RED) 
(PUT 'LDEPENDS 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE LDEPENDS (U V)
    (COND ((NULL U) NIL) ((ATOM U) (DEPENDS U V))
          (T (OR (DEPENDS (CAR U) V) (LDEPENDS (CDR U) V))))) 
(PUT 'DEPENDSL 'NUMBER-OF-ARGS 2) 
(PUT 'DEPENDSL 'DEFINED-ON-LINE '93) 
(PUT 'DEPENDSL 'DEFINED-IN-FILE 'ALG/DEPEND.RED) 
(PUT 'DEPENDSL 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE DEPENDSL (U V) (AND V (OR (DEPENDS U (CAR V)) (DEPENDSL U (CDR V))))) 
(PUT 'FREEOF 'NUMBER-OF-ARGS 2) 
(PUT 'FREEOF 'DEFINED-ON-LINE '96) 
(PUT 'FREEOF 'DEFINED-IN-FILE 'ALG/DEPEND.RED) 
(PUT 'FREEOF 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE FREEOF (U V) (NOT (OR (SMEMBER V U) (MEMBER V (ASSOC U DEPL*))))) 
(FLAG '(FREEOF) 'OPFN) 
(FLAG '(FREEOF) 'BOOLEAN) 
(PUT 'DEPEND0 'NUMBER-OF-ARGS 2) 
(PUT 'DEPEND0 'DEFINED-ON-LINE '118) 
(PUT 'DEPEND0 'DEFINED-IN-FILE 'ALG/DEPEND.RED) 
(PUT 'DEPEND0 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE DEPEND0 (U BOOL)
    (PROGN
     (SETQ ALGLIST* (CONS NIL NIL))
     (PROG ()
      WHILELABEL
       (COND ((NOT U) (RETURN NIL)))
       (PROG (V)
         (SETQ V (CDR U))
         (PROG ()
          WHILELABEL
           (COND ((NOT (AND V (NOT (EQCAR (CAR V) 'LIST)))) (RETURN NIL)))
           (SETQ V (CDR V))
           (GO WHILELABEL))
         (PROG (Y)
           (SETQ Y (COND ((EQCAR (CAR U) 'LIST) (CDAR U)) (T (LIST (CAR U)))))
          LAB
           (COND ((NULL Y) (RETURN NIL)))
           ((LAMBDA (Y)
              (PROG (X)
                (SETQ X U)
                (PROG ()
                 WHILELABEL
                  (COND ((NOT (NOT (EQ (SETQ X (CDR X)) V))) (RETURN NIL)))
                  (DEPEND1 Y (CAR X) BOOL)
                  (GO WHILELABEL))
                (COND
                 ((IDP Y)
                  (PROGN
                   (SETQ Y
                           (INTERN
                            (LIST2STRING
                             (APPEND (STRING2BYTELIST (ID2STRING Y))
                                     (STRING2BYTELIST (ID2STRING '_))))))
                   (SETQ X U)
                   (PROG ()
                    WHILELABEL
                     (COND ((NOT (NOT (EQ (SETQ X (CDR X)) V))) (RETURN NIL)))
                     (DEPEND1 Y (CAR X) BOOL)
                     (GO WHILELABEL)))))))
            (CAR Y))
           (SETQ Y (CDR Y))
           (GO LAB))
         (SETQ U V))
       (GO WHILELABEL)))) 
(ENDMODULE) 