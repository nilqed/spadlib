(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'REFORM)) 
(FLUID '(*TRINT CMAP CVAL LOGLIST ULIST)) 
(EXPORTS (LIST 'LOGSTOSQ 'SUBSTINULIST)) 
(IMPORTS (LIST 'PREPSQ 'MKSP 'NTH 'MULTSQ 'ADDSQ 'DOMAINP 'INVSQ 'PLUSDF)) 
(PUT 'SUBSTINULIST 'NUMBER-OF-ARGS 1) 
(PUT 'SUBSTINULIST 'DEFINED-ON-LINE '36) 
(PUT 'SUBSTINULIST 'DEFINED-IN-FILE 'INT/REFORM.RED) 
(PUT 'SUBSTINULIST 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SUBSTINULIST (ULST)
    (COND ((NULL ULST) NIL)
          (T
           (PROG (TEMP LCU)
             (SETQ LCU (CDAR ULST))
             (SETQ TEMP (EVALUATEUCONST (CAR LCU)))
             (COND ((NULL (CAR TEMP)) (SETQ TEMP NIL))
                   (T
                    (SETQ TEMP
                            (CONS
                             (CONS (CAAR ULST)
                                   (*MULTSQ TEMP (*INVSQ (CONS (CDR LCU) 1))))
                             NIL))))
             (RETURN (PLUSDF TEMP (SUBSTINULIST (CDR ULST)))))))) 
(PUT 'EVALUATEUCONST 'NUMBER-OF-ARGS 1) 
(PUT 'EVALUATEUCONST 'DEFINED-ON-LINE '49) 
(PUT 'EVALUATEUCONST 'DEFINED-IN-FILE 'INT/REFORM.RED) 
(PUT 'EVALUATEUCONST 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE EVALUATEUCONST (COEFFT)
    (COND
     ((OR (NULL COEFFT) (OR (ATOM COEFFT) (ATOM (CAR COEFFT))))
      (CONS COEFFT 1))
     (T
      (PROG (TEMP)
        (COND
         ((NULL (SETQ TEMP (ASSOC (CAAAR COEFFT) CMAP)))
          (SETQ TEMP (CONS (LIST (CONS (CAAR COEFFT) 1)) 1)))
         (T (SETQ TEMP (GETV CVAL (CDR TEMP)))))
        (SETQ TEMP (*MULTSQ TEMP (EVALUATEUCONST (CDAR COEFFT))))
        (RETURN (*ADDSQ TEMP (EVALUATEUCONST (CDR COEFFT)))))))) 
(PUT 'LOGSTOSQ 'NUMBER-OF-ARGS 0) 
(PUT 'LOGSTOSQ 'DEFINED-ON-LINE '61) 
(PUT 'LOGSTOSQ 'DEFINED-IN-FILE 'INT/REFORM.RED) 
(PUT 'LOGSTOSQ 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE LOGSTOSQ NIL
    (PROG (LGLST LOGSQ I TEMP)
      (SETQ I 1)
      (SETQ LGLST LOGLIST)
      (SETQ LOGSQ (CONS NIL 1))
     LOOP
      (COND ((NULL LGLST) (RETURN LOGSQ)))
      (SETQ TEMP (CDDR (CAR LGLST)))
      (COND
       ((NOT (EQUAL (CAAR LGLST) 'IDEN))
        (PROGN
         (SETQ TEMP (PREPSQ TEMP))
         (SETQ TEMP (LIST (CAAR LGLST) TEMP))
         (SETQ TEMP (CONS (CONS (CONS (GETPOWER (FKERN TEMP) 1) 1) NIL) 1)))))
      (SETQ TEMP (*MULTSQ TEMP (GETV CVAL I)))
      (SETQ LOGSQ (*ADDSQ TEMP LOGSQ))
      (SETQ LGLST (CDR LGLST))
      (SETQ I (PLUS I 1))
      (GO LOOP))) 
(ENDMODULE) 