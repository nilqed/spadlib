(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'FACMOD)) 
(FLUID
 '(CURRENT-MODULUS DPOLY DWORK1 DWORK2 KNOWN-FACTORS LINEAR-FACTORS
   M-IMAGE-VARIABLE MODULAR-INFO NULL-SPACE-BASIS NUMBER-NEEDED POLY-MOD-P
   POLY-VECTOR SAFE-FLAG SPLIT-LIST WORK-VECTOR1 WORK-VECTOR2)) 
(SETQ SAFE-FLAG (CARCHECK 0)) 
(CARCHECK 0) 
(PUT 'GET-FACTOR-COUNT-MOD-P 'NUMBER-OF-ARGS 4) 
(PUT 'GET-FACTOR-COUNT-MOD-P 'DEFINED-ON-LINE '57) 
(PUT 'GET-FACTOR-COUNT-MOD-P 'DEFINED-IN-FILE 'FACTOR/FACMOD.RED) 
(PUT 'GET-FACTOR-COUNT-MOD-P 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE GET-FACTOR-COUNT-MOD-P (N POLY-MOD-P P X-IS-FACTOR)
    (PROG (OLD-M F-COUNT)
      (SETQ OLD-M (SET-MODULUS P))
      (SETQ F-COUNT (MODULAR-FACTOR-COUNT))
      (SETQ SPLIT-LIST
              (CONS
               (CONS
                (COND (X-IS-FACTOR (IPLUS2 (CAR F-COUNT) 1)) (T (CAR F-COUNT)))
                N)
               SPLIT-LIST))
      (PUTV MODULAR-INFO N (CDR F-COUNT))
      (SET-MODULUS OLD-M))) 
(PUT 'MODULAR-FACTOR-COUNT 'NUMBER-OF-ARGS 0) 
(PUT 'MODULAR-FACTOR-COUNT 'DEFINED-ON-LINE '75) 
(PUT 'MODULAR-FACTOR-COUNT 'DEFINED-IN-FILE 'FACTOR/FACMOD.RED) 
(PUT 'MODULAR-FACTOR-COUNT 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE MODULAR-FACTOR-COUNT NIL
    (PROG (POLY-VECTOR WVEC1 WVEC2 X-TO-P N W LIN-F-COUNT NULL-SPACE-BASIS)
      (SETQ KNOWN-FACTORS NIL)
      (SETQ DPOLY (CDAAR POLY-MOD-P))
      (SETQ WVEC1 (MKVECT (ITIMES2 2 DPOLY)))
      (SETQ WVEC2 (MKVECT (ITIMES2 2 DPOLY)))
      (SETQ X-TO-P (MKVECT DPOLY))
      (SETQ POLY-VECTOR (MKVECT DPOLY))
      (PROG (I)
        (SETQ I 0)
       LAB
        (COND ((MINUSP (DIFFERENCE DPOLY I)) (RETURN NIL)))
        (PUTV POLY-VECTOR I 0)
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (POLY-TO-VECTOR POLY-MOD-P)
      (SETQ W (COUNT-LINEAR-FACTORS-MOD-P WVEC1 WVEC2 X-TO-P))
      (SETQ LIN-F-COUNT (CAR W))
      (COND
       ((ILESSP DPOLY 4)
        (RETURN
         (CONS (COND ((EQUAL DPOLY 0) LIN-F-COUNT) (T (IPLUS2 LIN-F-COUNT 1)))
               (LIST (CONS LIN-F-COUNT (CADR W)) (CONS DPOLY POLY-VECTOR)
                     NIL)))))
      (SETQ NULL-SPACE-BASIS (USE-BERLEKAMP X-TO-P (CADDR W) WVEC1))
      (SETQ N (IPLUS2 (IPLUS2 LIN-F-COUNT (LENGTH NULL-SPACE-BASIS)) 1))
      (RETURN
       (CONS N
             (LIST (CONS LIN-F-COUNT (CADR W)) (CONS DPOLY POLY-VECTOR)
                   NULL-SPACE-BASIS))))) 
(PUT 'COUNT-LINEAR-FACTORS-MOD-P 'NUMBER-OF-ARGS 3) 
(PUT 'COUNT-LINEAR-FACTORS-MOD-P 'DEFINED-ON-LINE '112) 
(PUT 'COUNT-LINEAR-FACTORS-MOD-P 'DEFINED-IN-FILE 'FACTOR/FACMOD.RED) 
(PUT 'COUNT-LINEAR-FACTORS-MOD-P 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE COUNT-LINEAR-FACTORS-MOD-P (WVEC1 WVEC2 X-TO-P)
    (PROG (DX-TO-P LIN-F-COUNT LINEAR-FACTORS)
      (PROG (I)
        (SETQ I 0)
       LAB
        (COND ((MINUSP (DIFFERENCE DPOLY I)) (RETURN NIL)))
        (PUTV WVEC2 I (GETV POLY-VECTOR I))
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (SETQ DX-TO-P (MAKE-X-TO-P CURRENT-MODULUS WVEC1 X-TO-P))
      (PROG (I)
        (SETQ I 0)
       LAB
        (COND ((MINUSP (DIFFERENCE DX-TO-P I)) (RETURN NIL)))
        (PUTV WVEC1 I (GETV X-TO-P I))
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (COND
       ((ILESSP DX-TO-P 1)
        (PROGN
         (COND ((ILESSP DX-TO-P 0) (PUTV WVEC1 0 0)))
         (PUTV WVEC1 1
               (COND ((EQUAL 1 0) 1) (T (IDIFFERENCE CURRENT-MODULUS 1))))
         (SETQ DX-TO-P 1)))
       (T
        (PROGN
         (PUTV WVEC1 1
               (PROG (RESULT)
                 (SETQ RESULT (IDIFFERENCE (GETV WVEC1 1) 1))
                 (COND
                  ((IMINUSP RESULT)
                   (SETQ RESULT (IPLUS2 RESULT CURRENT-MODULUS))))
                 (RETURN RESULT)))
         (COND
          ((AND (EQUAL DX-TO-P 1) (EQUAL (GETV WVEC1 1) 0))
           (COND ((EQUAL (GETV WVEC1 0) 0) (SETQ DX-TO-P (MINUS 1)))
                 (T (SETQ DX-TO-P 0))))))))
      (COND
       ((ILESSP DX-TO-P 0) (SETQ LIN-F-COUNT (COPY-VECTOR WVEC2 DPOLY WVEC1)))
       (T (SETQ LIN-F-COUNT (GCD-IN-VECTOR WVEC1 DX-TO-P WVEC2 DPOLY))))
      (SETQ LINEAR-FACTORS (MKVECT LIN-F-COUNT))
      (PROG (I)
        (SETQ I 0)
       LAB
        (COND ((MINUSP (DIFFERENCE LIN-F-COUNT I)) (RETURN NIL)))
        (PUTV LINEAR-FACTORS I (GETV WVEC1 I))
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (SETQ DPOLY
              (QUOTFAIL-IN-VECTOR POLY-VECTOR DPOLY LINEAR-FACTORS
               LIN-F-COUNT))
      (RETURN (LIST LIN-F-COUNT LINEAR-FACTORS DX-TO-P)))) 
(PUT 'MAKE-X-TO-P 'NUMBER-OF-ARGS 3) 
(PUT 'MAKE-X-TO-P 'DEFINED-ON-LINE '140) 
(PUT 'MAKE-X-TO-P 'DEFINED-IN-FILE 'FACTOR/FACMOD.RED) 
(PUT 'MAKE-X-TO-P 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE MAKE-X-TO-P (P WVEC1 X-TO-P)
    (PROG (DX-TO-P DW1)
      (COND
       ((ILESSP P DPOLY)
        (PROGN
         (PROG (I)
           (SETQ I 0)
          LAB
           (COND ((MINUSP (DIFFERENCE (IDIFFERENCE P 1) I)) (RETURN NIL)))
           (PUTV X-TO-P I 0)
           (SETQ I (PLUS2 I 1))
           (GO LAB))
         (PUTV X-TO-P P 1)
         (RETURN P))))
      (SETQ DX-TO-P (MAKE-X-TO-P (QUOTIENT P 2) WVEC1 X-TO-P))
      (SETQ DW1 (TIMES-IN-VECTOR X-TO-P DX-TO-P X-TO-P DX-TO-P WVEC1))
      (SETQ DW1 (REMAINDER-IN-VECTOR WVEC1 DW1 POLY-VECTOR DPOLY))
      (COND
       ((NOT (EQUAL (IREMAINDER P 2) 0))
        (PROGN
         (PROG (I)
           (SETQ I DW1)
          LAB
           (COND ((MINUSP (TIMES (MINUS 1) (DIFFERENCE 0 I))) (RETURN NIL)))
           (PUTV WVEC1 (IPLUS2 I 1) (GETV WVEC1 I))
           (SETQ I (PLUS2 I (MINUS 1)))
           (GO LAB))
         (PUTV WVEC1 0 0)
         (SETQ DW1
                 (REMAINDER-IN-VECTOR WVEC1 (IPLUS2 DW1 1) POLY-VECTOR
                  DPOLY)))))
      (PROG (I)
        (SETQ I 0)
       LAB
        (COND ((MINUSP (DIFFERENCE DW1 I)) (RETURN NIL)))
        (PUTV X-TO-P I (GETV WVEC1 I))
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (RETURN DW1))) 
(PUT 'FIND-LINEAR-FACTORS-MOD-P 'NUMBER-OF-ARGS 2) 
(PUT 'FIND-LINEAR-FACTORS-MOD-P 'DEFINED-ON-LINE '157) 
(PUT 'FIND-LINEAR-FACTORS-MOD-P 'DEFINED-IN-FILE 'FACTOR/FACMOD.RED) 
(PUT 'FIND-LINEAR-FACTORS-MOD-P 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE FIND-LINEAR-FACTORS-MOD-P (P N)
    (PROG (ROOT VAR W VEC1)
      (COND ((ILESSP N 1) (RETURN NIL)))
      (SETQ VEC1 (MKVECT 1))
      (PUTV VEC1 1 1)
      (SETQ ROOT 0)
      (PROG ()
       WHILELABEL
        (COND
         ((NOT (AND (IGREATERP N 1) (NOT (IGREATERP ROOT CURRENT-MODULUS))))
          (RETURN NIL)))
        (PROGN
         (SETQ W (EVALUATE-IN-VECTOR P N ROOT))
         (COND
          ((EQUAL W 0)
           (PROGN
            (COND
             ((EQUAL VAR NIL)
              (SETQ VAR (CONS (GETPOWER (FKERN M-IMAGE-VARIABLE) 1) 1))))
            (SETQ W
                    ((LAMBDA (G607)
                       (COND ((NULL (CDR VAR)) G607)
                             (T (CONS (CONS (CAR VAR) (CDR VAR)) G607))))
                     ((LAMBDA (U) (COND ((ZEROP U) NIL) (T U)))
                      (COND ((EQUAL ROOT 0) ROOT)
                            (T (IDIFFERENCE CURRENT-MODULUS ROOT))))))
            (SETQ KNOWN-FACTORS (CONS W KNOWN-FACTORS))
            (PUTV VEC1 0
                  (COND ((EQUAL ROOT 0) ROOT)
                        (T (IDIFFERENCE CURRENT-MODULUS ROOT))))
            (SETQ N (QUOTFAIL-IN-VECTOR P N VEC1 1)))))
         (SETQ ROOT (IPLUS2 ROOT 1)))
        (GO WHILELABEL))
      (SETQ KNOWN-FACTORS
              (CONS (VECTOR-TO-POLY P N M-IMAGE-VARIABLE) KNOWN-FACTORS)))) 
(PUT 'USE-BERLEKAMP 'NUMBER-OF-ARGS 3) 
(PUT 'USE-BERLEKAMP 'DEFINED-ON-LINE '188) 
(PUT 'USE-BERLEKAMP 'DEFINED-IN-FILE 'FACTOR/FACMOD.RED) 
(PUT 'USE-BERLEKAMP 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE USE-BERLEKAMP (X-TO-P DX-TO-P WVEC1)
    (PROG (BERL-M BERL-M-SIZE W DCURRENT CURRENT-POWER)
      (SETQ BERL-M-SIZE (IDIFFERENCE DPOLY 1))
      (SETQ BERL-M (MKVECT BERL-M-SIZE))
      (PROG (I)
        (SETQ I 0)
       LAB
        (COND ((MINUSP (DIFFERENCE BERL-M-SIZE I)) (RETURN NIL)))
        (PROGN
         (SETQ W (MKVECT BERL-M-SIZE))
         (PROG (J)
           (SETQ J 0)
          LAB
           (COND ((MINUSP (DIFFERENCE BERL-M-SIZE J)) (RETURN NIL)))
           (PUTV W J 0)
           (SETQ J (PLUS2 J 1))
           (GO LAB))
         (PUTV BERL-M I W))
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (SETQ DX-TO-P (REMAINDER-IN-VECTOR X-TO-P DX-TO-P POLY-VECTOR DPOLY))
      (SETQ DCURRENT 0)
      (SETQ CURRENT-POWER (MKVECT BERL-M-SIZE))
      (PUTV CURRENT-POWER 0 1)
      (PROG (I)
        (SETQ I 1)
       LAB
        (COND ((MINUSP (DIFFERENCE BERL-M-SIZE I)) (RETURN NIL)))
        (PROGN
         (COND
          ((IGREATERP CURRENT-MODULUS DPOLY)
           (SETQ DCURRENT
                   (TIMES-IN-VECTOR CURRENT-POWER DCURRENT X-TO-P DX-TO-P
                    WVEC1)))
          (T
           (PROGN
            (PROG (I)
              (SETQ I 0)
             LAB
              (COND
               ((MINUSP (DIFFERENCE (IDIFFERENCE CURRENT-MODULUS 1) I))
                (RETURN NIL)))
              (PUTV WVEC1 I 0)
              (SETQ I (PLUS2 I 1))
              (GO LAB))
            (PROG (I)
              (SETQ I 0)
             LAB
              (COND ((MINUSP (DIFFERENCE DCURRENT I)) (RETURN NIL)))
              (PUTV WVEC1 (IPLUS2 CURRENT-MODULUS I) (GETV CURRENT-POWER I))
              (SETQ I (PLUS2 I 1))
              (GO LAB))
            (SETQ DCURRENT (IPLUS2 DCURRENT CURRENT-MODULUS)))))
         (SETQ DCURRENT (REMAINDER-IN-VECTOR WVEC1 DCURRENT POLY-VECTOR DPOLY))
         (PROG (J)
           (SETQ J 0)
          LAB
           (COND ((MINUSP (DIFFERENCE DCURRENT J)) (RETURN NIL)))
           (PUTV (GETV BERL-M J) I (PUTV CURRENT-POWER J (GETV WVEC1 J)))
           (SETQ J (PLUS2 J 1))
           (GO LAB))
         (PUTV (GETV BERL-M I) I
               (PROG (RESULT)
                 (SETQ RESULT (IDIFFERENCE (GETV (GETV BERL-M I) I) 1))
                 (COND
                  ((IMINUSP RESULT)
                   (SETQ RESULT (IPLUS2 RESULT CURRENT-MODULUS))))
                 (RETURN RESULT))))
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (SETQ W (FIND-NULL-SPACE BERL-M BERL-M-SIZE))
      (RETURN W))) 
(PUT 'FIND-NULL-SPACE 'NUMBER-OF-ARGS 2) 
(PUT 'FIND-NULL-SPACE 'DEFINED-ON-LINE '244) 
(PUT 'FIND-NULL-SPACE 'DEFINED-IN-FILE 'FACTOR/FACMOD.RED) 
(PUT 'FIND-NULL-SPACE 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE FIND-NULL-SPACE (BERL-M BERL-M-SIZE)
    (PROG (NULL-SPACE-BASIS)
      (PROG (I)
        (SETQ I 1)
       LAB
        (COND ((MINUSP (DIFFERENCE BERL-M-SIZE I)) (RETURN NIL)))
        (SETQ NULL-SPACE-BASIS
                (CLEAR-COLUMN I NULL-SPACE-BASIS BERL-M BERL-M-SIZE))
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (RETURN (TIDY-UP-NULL-VECTORS NULL-SPACE-BASIS BERL-M BERL-M-SIZE)))) 
(PUT 'PRINT-M 'NUMBER-OF-ARGS 3) 
(PUT 'PRINT-M 'DEFINED-ON-LINE '257) 
(PUT 'PRINT-M 'DEFINED-IN-FILE 'FACTOR/FACMOD.RED) 
(PUT 'PRINT-M 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE PRINT-M (M BERL-M BERL-M-SIZE)
    (PROGN
     (PRIN2T M)
     (PROG (I)
       (SETQ I 0)
      LAB
       (COND ((MINUSP (DIFFERENCE BERL-M-SIZE I)) (RETURN NIL)))
       (PROGN
        (PROG (J)
          (SETQ J 0)
         LAB
          (COND ((MINUSP (DIFFERENCE BERL-M-SIZE J)) (RETURN NIL)))
          (PROGN
           (PRIN2 (GETV (GETV BERL-M I) J))
           (TTAB (IPLUS2 (ITIMES2 4 J) 4)))
          (SETQ J (PLUS2 J 1))
          (GO LAB))
        (TERPRI))
       (SETQ I (PLUS2 I 1))
       (GO LAB)))) 
(PUT 'CLEAR-COLUMN 'NUMBER-OF-ARGS 4) 
(PUT 'CLEAR-COLUMN 'DEFINED-ON-LINE '267) 
(PUT 'CLEAR-COLUMN 'DEFINED-IN-FILE 'FACTOR/FACMOD.RED) 
(PUT 'CLEAR-COLUMN 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE CLEAR-COLUMN (I NULL-SPACE-BASIS BERL-M BERL-M-SIZE)
    (PROG (II W)
      (SETQ II 0)
     SEARCH-FOR-PIVOT
      (COND
       ((OR (EQUAL (GETV (GETV BERL-M II) I) 0)
            (AND (ILESSP II I) (NOT (EQUAL (GETV (GETV BERL-M II) II) 0))))
        (COND
         ((IGREATERP (SETQ II (IPLUS2 II 1)) BERL-M-SIZE)
          (RETURN (CONS I NULL-SPACE-BASIS)))
         (T (GO SEARCH-FOR-PIVOT)))))
      (SETQ W (GETV BERL-M II))
      (PUTV BERL-M II (GETV BERL-M I))
      (PUTV BERL-M I W)
      (SETQ W
              ((LAMBDA (A)
                 (COND ((EQUAL A 0) A) (T (IDIFFERENCE CURRENT-MODULUS A))))
               (MODULAR-RECIPROCAL (GETV (GETV BERL-M I) I))))
      (PROG (ROW)
        (SETQ ROW 0)
       LAB
        (COND ((MINUSP (DIFFERENCE BERL-M-SIZE ROW)) (RETURN NIL)))
        (COND
         ((NEQ ROW I)
          (PROG (R)
            (SETQ R (GETV (GETV BERL-M ROW) I))
            (COND
             ((NOT (EQUAL R 0))
              (PROGN
               (SETQ R (REMAINDER (TIMES R W) CURRENT-MODULUS))
               (PROG (COL)
                 (SETQ COL I)
                LAB
                 (COND ((MINUSP (DIFFERENCE BERL-M-SIZE COL)) (RETURN NIL)))
                 (PUTV (GETV BERL-M ROW) COL
                       (PROG (RESULT)
                         (SETQ RESULT
                                 (IPLUS2 (GETV (GETV BERL-M ROW) COL)
                                         (REMAINDER
                                          (TIMES R (GETV (GETV BERL-M I) COL))
                                          CURRENT-MODULUS)))
                         (COND
                          ((NOT (ILESSP RESULT CURRENT-MODULUS))
                           (SETQ RESULT (IDIFFERENCE RESULT CURRENT-MODULUS))))
                         (RETURN RESULT)))
                 (SETQ COL (PLUS2 COL 1))
                 (GO LAB))))))))
        (SETQ ROW (PLUS2 ROW 1))
        (GO LAB))
      (PROG (COL)
        (SETQ COL I)
       LAB
        (COND ((MINUSP (DIFFERENCE BERL-M-SIZE COL)) (RETURN NIL)))
        (PUTV (GETV BERL-M I) COL
              (REMAINDER (TIMES (GETV (GETV BERL-M I) COL) W) CURRENT-MODULUS))
        (SETQ COL (PLUS2 COL 1))
        (GO LAB))
      (RETURN NULL-SPACE-BASIS))) 
(PUT 'TIDY-UP-NULL-VECTORS 'NUMBER-OF-ARGS 3) 
(PUT 'TIDY-UP-NULL-VECTORS 'DEFINED-ON-LINE '312) 
(PUT 'TIDY-UP-NULL-VECTORS 'DEFINED-IN-FILE 'FACTOR/FACMOD.RED) 
(PUT 'TIDY-UP-NULL-VECTORS 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE TIDY-UP-NULL-VECTORS (NULL-SPACE-BASIS BERL-M BERL-M-SIZE)
    (PROG (ROW-TO-USE)
      (SETQ ROW-TO-USE (IPLUS2 BERL-M-SIZE 1))
      (SETQ NULL-SPACE-BASIS
              (PROG (NULL-VECTOR FORALL-RESULT FORALL-ENDPTR)
                (SETQ NULL-VECTOR NULL-SPACE-BASIS)
                (COND ((NULL NULL-VECTOR) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS
                                 ((LAMBDA (NULL-VECTOR)
                                    (BUILD-NULL-VECTOR NULL-VECTOR
                                     (GETV BERL-M
                                           (SETQ ROW-TO-USE
                                                   (IDIFFERENCE ROW-TO-USE 1)))
                                     BERL-M))
                                  (CAR NULL-VECTOR))
                                 NIL)))
               LOOPLABEL
                (SETQ NULL-VECTOR (CDR NULL-VECTOR))
                (COND ((NULL NULL-VECTOR) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        (CONS
                         ((LAMBDA (NULL-VECTOR)
                            (BUILD-NULL-VECTOR NULL-VECTOR
                             (GETV BERL-M
                                   (SETQ ROW-TO-USE
                                           (IDIFFERENCE ROW-TO-USE 1)))
                             BERL-M))
                          (CAR NULL-VECTOR))
                         NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (SETQ BERL-M NIL)
      (RETURN NULL-SPACE-BASIS))) 
(PUT 'BUILD-NULL-VECTOR 'NUMBER-OF-ARGS 3) 
(PUT 'BUILD-NULL-VECTOR 'DEFINED-ON-LINE '327) 
(PUT 'BUILD-NULL-VECTOR 'DEFINED-IN-FILE 'FACTOR/FACMOD.RED) 
(PUT 'BUILD-NULL-VECTOR 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE BUILD-NULL-VECTOR (N VEC1 BERL-M)
    (PROG ()
      (PROG (I)
        (SETQ I 1)
       LAB
        (COND ((MINUSP (DIFFERENCE (IDIFFERENCE N 1) I)) (RETURN NIL)))
        (PUTV VEC1 I (GETV (GETV BERL-M I) N))
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (PUTV VEC1 N 1)
      (RETURN (CONS VEC1 N)))) 
(PUT 'GET-FACTORS-MOD-P 'NUMBER-OF-ARGS 2) 
(PUT 'GET-FACTORS-MOD-P 'DEFINED-ON-LINE '350) 
(PUT 'GET-FACTORS-MOD-P 'DEFINED-IN-FILE 'FACTOR/FACMOD.RED) 
(PUT 'GET-FACTORS-MOD-P 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE GET-FACTORS-MOD-P (N P)
    (PROG (NTH-MODULAR-INFO OLD-M)
      (SETQ NTH-MODULAR-INFO (GETV MODULAR-INFO N))
      (SETQ OLD-M (SET-MODULUS P))
      (PUTV MODULAR-INFO N (CONVERT-NULL-VECTORS-TO-FACTORS NTH-MODULAR-INFO))
      (SET-MODULUS OLD-M))) 
(PUT 'CONVERT-NULL-VECTORS-TO-FACTORS 'NUMBER-OF-ARGS 1) 
(PUT 'CONVERT-NULL-VECTORS-TO-FACTORS 'DEFINED-ON-LINE '364) 
(PUT 'CONVERT-NULL-VECTORS-TO-FACTORS 'DEFINED-IN-FILE 'FACTOR/FACMOD.RED) 
(PUT 'CONVERT-NULL-VECTORS-TO-FACTORS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE CONVERT-NULL-VECTORS-TO-FACTORS (M-INFO)
    (PROG (NUMBER-NEEDED FACTORS WORK-VECTOR1 DWORK1 WORK-VECTOR2 DWORK2)
      (SETQ KNOWN-FACTORS NIL)
      (FIND-LINEAR-FACTORS-MOD-P (CDAR M-INFO) (CAAR M-INFO))
      (SETQ DPOLY (CAADR M-INFO))
      (SETQ POLY-VECTOR (CDADR M-INFO))
      (SETQ NULL-SPACE-BASIS (CADDR M-INFO))
      (COND ((EQUAL DPOLY 0) (RETURN KNOWN-FACTORS)))
      (COND
       ((NULL NULL-SPACE-BASIS)
        (RETURN
         (SETQ KNOWN-FACTORS
                 (CONS (VECTOR-TO-POLY POLY-VECTOR DPOLY M-IMAGE-VARIABLE)
                       KNOWN-FACTORS)))))
      (SETQ NUMBER-NEEDED (LENGTH NULL-SPACE-BASIS))
      (SETQ WORK-VECTOR1 (MKVECT DPOLY))
      (SETQ WORK-VECTOR2 (MKVECT DPOLY))
      (SETQ FACTORS (LIST (CONS POLY-VECTOR DPOLY)))
     TRY-NEXT-NULL
      (COND
       ((EQUAL NULL-SPACE-BASIS NIL)
        (ERRORF "ran out of null vectors too early")))
      (SETQ FACTORS
              (TRY-ALL-CONSTANTS FACTORS (CAAR NULL-SPACE-BASIS)
               (CDAR NULL-SPACE-BASIS)))
      (COND
       ((EQUAL NUMBER-NEEDED 0)
        (RETURN
         (SETQ KNOWN-FACTORS (APPEND-NEW-FACTORS FACTORS KNOWN-FACTORS)))))
      (SETQ NULL-SPACE-BASIS (CDR NULL-SPACE-BASIS))
      (GO TRY-NEXT-NULL))) 
(PUT 'TRY-ALL-CONSTANTS 'NUMBER-OF-ARGS 3) 
(PUT 'TRY-ALL-CONSTANTS 'DEFINED-ON-LINE '404) 
(PUT 'TRY-ALL-CONSTANTS 'DEFINED-IN-FILE 'FACTOR/FACMOD.RED) 
(PUT 'TRY-ALL-CONSTANTS 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE TRY-ALL-CONSTANTS (LIST-OF-POLYS V DV)
    (PROG (A B AA S)
      (SETQ AA NIL)
      (SETQ B LIST-OF-POLYS)
      (SETQ S 0)
     TRY-NEXT-CONSTANT
      (PUTV V 0 S)
      (SETQ A (SPLIT-FURTHER B V DV))
      (SETQ B (CDR A))
      (SETQ A (CAR A))
      (SETQ AA (NCONC A AA))
      (COND ((EQUAL B NIL) (RETURN AA)))
      (COND ((EQUAL NUMBER-NEEDED 0) (RETURN (NCONC B AA))))
      (SETQ S (IPLUS2 S 1))
      (COND ((ILESSP S CURRENT-MODULUS) (GO TRY-NEXT-CONSTANT)))
      (RETURN (NCONC B AA)))) 
(PUT 'SPLIT-FURTHER 'NUMBER-OF-ARGS 3) 
(PUT 'SPLIT-FURTHER 'DEFINED-ON-LINE '432) 
(PUT 'SPLIT-FURTHER 'DEFINED-IN-FILE 'FACTOR/FACMOD.RED) 
(PUT 'SPLIT-FURTHER 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE SPLIT-FURTHER (LIST-OF-POLYS V DV)
    (COND ((NULL LIST-OF-POLYS) (CONS NIL NIL))
          (T
           (PROG (A B GG Q)
             (SETQ A (SPLIT-FURTHER (CDR LIST-OF-POLYS) V DV))
             (SETQ B (CDR A))
             (SETQ A (CAR A))
             (COND ((EQUAL NUMBER-NEEDED 0) (GO NO-SPLIT)))
             (SETQ DWORK1 (COPY-VECTOR V DV WORK-VECTOR1))
             (SETQ DWORK2
                     (COPY-VECTOR (CAAR LIST-OF-POLYS) (CDAR LIST-OF-POLYS)
                      WORK-VECTOR2))
             (SETQ DWORK1
                     (GCD-IN-VECTOR WORK-VECTOR1 DWORK1 WORK-VECTOR2 DWORK2))
             (COND
              ((OR (EQUAL DWORK1 0) (EQUAL DWORK1 (CDAR LIST-OF-POLYS)))
               (GO NO-SPLIT)))
             (SETQ DWORK2
                     (COPY-VECTOR (CAAR LIST-OF-POLYS) (CDAR LIST-OF-POLYS)
                      WORK-VECTOR2))
             (SETQ DWORK2
                     (QUOTFAIL-IN-VECTOR WORK-VECTOR2 DWORK2 WORK-VECTOR1
                      DWORK1))
             (SETQ GG (MKVECT DWORK1))
             (COPY-VECTOR WORK-VECTOR1 DWORK1 GG)
             (SETQ A (CONS (CONS GG DWORK1) A))
             (COPY-VECTOR WORK-VECTOR2 DWORK2 (SETQ Q (MKVECT DWORK2)))
             (SETQ B (CONS (CONS Q DWORK2) B))
             (SETQ NUMBER-NEEDED (IDIFFERENCE NUMBER-NEEDED 1))
             (RETURN (CONS A B))
            NO-SPLIT
             (RETURN (CONS A (CONS (CAR LIST-OF-POLYS) B))))))) 
(PUT 'APPEND-NEW-FACTORS 'NUMBER-OF-ARGS 2) 
(PUT 'APPEND-NEW-FACTORS 'DEFINED-ON-LINE '468) 
(PUT 'APPEND-NEW-FACTORS 'DEFINED-IN-FILE 'FACTOR/FACMOD.RED) 
(PUT 'APPEND-NEW-FACTORS 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE APPEND-NEW-FACTORS (A B)
    (COND ((NULL A) B)
          (T
           (CONS (VECTOR-TO-POLY (CAAR A) (CDAR A) M-IMAGE-VARIABLE)
                 (APPEND-NEW-FACTORS (CDR A) B))))) 
(CARCHECK SAFE-FLAG) 
(ENDMODULE) 