(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'YYPARSE)) 
(FLUID '(PARSER_ACTION_TABLE PARSER_GOTO_TABLE)) 
(GLOBAL '(LEX_INITIAL_NEXT_CODE)) 
(FLUID '(REDUCTION_FN REDUCTION_LHS REDUCTION_RHS_N NEXT_INPUT)) 
(FLUID '(NONTERMINAL_CODES)) 
(FLUID '(TERMINAL_CODES)) 
(PUT 'SET_PARSER 'NUMBER-OF-ARGS 1) 
(PUT 'SET_PARSER 'DEFINED-ON-LINE '112) 
(PUT 'SET_PARSER 'DEFINED-IN-FILE 'LALR/YYPARSE.RED) 
(PUT 'SET_PARSER 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SET_PARSER (PARSER)
    (PROG (W)
      (LEX_RESTORE_CONTEXT (CAR PARSER))
      (SETQ PARSER_ACTION_TABLE (CAR (SETQ PARSER (CDR PARSER))))
      (SETQ W (CAR (SETQ PARSER (CDR PARSER))))
      (SETQ REDUCTION_FN (CAR W))
      (SETQ REDUCTION_RHS_N (CAR (SETQ W (CDR W))))
      (SETQ REDUCTION_LHS (CAR (SETQ W (CDR W))))
      (SETQ PARSER_GOTO_TABLE (CAR (SETQ PARSER (CDR PARSER))))
      (SETQ NONTERMINAL_CODES (CAR (SETQ PARSER (CDR PARSER))))
      (SETQ TERMINAL_CODES (CAR (SETQ PARSER (CDR PARSER))))
      (RETURN NIL))) 
(PUT 'GET_GOTO 'NUMBER-OF-ARGS 2) 
(PUT 'GET_GOTO 'DEFINED-ON-LINE '127) 
(PUT 'GET_GOTO 'DEFINED-IN-FILE 'LALR/YYPARSE.RED) 
(PUT 'GET_GOTO 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE GET_GOTO (SRC_STATE NONTERMINAL)
    (PROG (TABLE_COLUMN_AND_DEFAULT TABLE_COLUMN RESULT)
      (SETQ TABLE_COLUMN_AND_DEFAULT (GETV PARSER_GOTO_TABLE NONTERMINAL))
      (SETQ TABLE_COLUMN (CAR TABLE_COLUMN_AND_DEFAULT))
      (SETQ RESULT (CDR TABLE_COLUMN_AND_DEFAULT))
      (PROG ()
       WHILELABEL
        (COND ((NOT TABLE_COLUMN) (RETURN NIL)))
        (COND
         ((EQUAL (CAAR TABLE_COLUMN) SRC_STATE)
          (PROGN (SETQ RESULT (CDAR TABLE_COLUMN)) (SETQ TABLE_COLUMN NIL)))
         (T (SETQ TABLE_COLUMN (CDR TABLE_COLUMN))))
        (GO WHILELABEL))
      (RETURN RESULT))) 
(PUT 'GET_ACTION_WITHOUT_LOOKAHEAD 'NUMBER-OF-ARGS 1) 
(PUT 'GET_ACTION_WITHOUT_LOOKAHEAD 'DEFINED-ON-LINE '142) 
(PUT 'GET_ACTION_WITHOUT_LOOKAHEAD 'DEFINED-IN-FILE 'LALR/YYPARSE.RED) 
(PUT 'GET_ACTION_WITHOUT_LOOKAHEAD 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE GET_ACTION_WITHOUT_LOOKAHEAD (STATE)
    (PROG (TABLE_ROW_AND_DEFAULT)
      (SETQ TABLE_ROW_AND_DEFAULT (GETV PARSER_ACTION_TABLE STATE))
      (COND
       ((EQUAL (CAR TABLE_ROW_AND_DEFAULT) NIL)
        (RETURN (CDR TABLE_ROW_AND_DEFAULT)))
       (T (RETURN NIL))))) 
(PUT 'GET_ACTION 'NUMBER-OF-ARGS 2) 
(PUT 'GET_ACTION 'DEFINED-ON-LINE '152) 
(PUT 'GET_ACTION 'DEFINED-IN-FILE 'LALR/YYPARSE.RED) 
(PUT 'GET_ACTION 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE GET_ACTION (STATE TERMINAL)
    (PROG (TABLE_ROW_AND_DEFAULT TABLE_ROW RESULT)
      (SETQ TABLE_ROW_AND_DEFAULT (GETV PARSER_ACTION_TABLE STATE))
      (SETQ TABLE_ROW (CAR TABLE_ROW_AND_DEFAULT))
      (SETQ RESULT (CDR TABLE_ROW_AND_DEFAULT))
      (PROG ()
       WHILELABEL
        (COND ((NOT TABLE_ROW) (RETURN NIL)))
        (COND
         ((EQUAL (CAAR TABLE_ROW) TERMINAL)
          (PROGN (SETQ RESULT (CDAR TABLE_ROW)) (SETQ TABLE_ROW NIL)))
         (T (SETQ TABLE_ROW (CDR TABLE_ROW))))
        (GO WHILELABEL))
      (RETURN RESULT))) 
(PUT 'YYPARSE 'NUMBER-OF-ARGS 1) 
(PUT 'YYPARSE 'DEFINED-ON-LINE '167) 
(PUT 'YYPARSE 'DEFINED-IN-FILE 'LALR/YYPARSE.RED) 
(PUT 'YYPARSE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE YYPARSE (PARSER)
    (PROG (PARSER_ACTION_TABLE PARSER_GOTO_TABLE REDUCTION_FN REDUCTION_LHS
           REDUCTION_RHS_N TERMINAL_CODES NONTERMINAL_CODES SYM_STACK
           STATE_STACK NEXT_INPUT W)
      (SET_PARSER PARSER)
      (SETQ STATE_STACK (LIST 0))
      (LEX_INIT)
      (SETQ NEXT_INPUT (MINUS 1))
      (PROG ()
       WHILELABEL
        (COND
         ((NOT
           (PROGN
            (SETQ W (GET_ACTION_WITHOUT_LOOKAHEAD (CAR STATE_STACK)))
            (COND
             ((NULL W)
              (PROGN
               (COND ((LESSP NEXT_INPUT 0) (SETQ NEXT_INPUT (YYLEX))))
               (SETQ W (GET_ACTION (CAR STATE_STACK) NEXT_INPUT)))))
            (AND (NEQ W 0) (NEQ W NIL))))
          (RETURN NIL)))
        (PROGN
         (COND
          ((GREATERP W 0)
           (PROGN
            (COND ((LESSP NEXT_INPUT 0) (SETQ NEXT_INPUT (YYLEX))))
            (COND
             ((LESSP NEXT_INPUT LEX_INITIAL_NEXT_CODE)
              (SETQ SYM_STACK (CONS YYLVAL SYM_STACK)))
             (T
              (SETQ SYM_STACK
                      (CONS (CDRASSOC NEXT_INPUT TERMINAL_CODES) SYM_STACK))))
            (SETQ STATE_STACK (CONS W STATE_STACK))
            (SETQ NEXT_INPUT (MINUS 1))
            (COND
             (*LALR_VERBOSE
              (PROGN
               (PRINC "Shift token ")
               (PRIN1 (CAR SYM_STACK))
               (PRINC " onto stack, ")
               (PRINC "and shift to state ")
               (PRINT (CAR STATE_STACK)))))))
          (T
           (PROG (LHS RHS_N FN)
             (SETQ W (MINUS W))
             (SETQ FN (GETV REDUCTION_FN W))
             (SETQ RHS_N (GETV8 REDUCTION_RHS_N W))
             (SETQ LHS (GETV16 REDUCTION_LHS W))
             (SETQ W NIL)
             (PROG (I)
               (SETQ I 1)
              LAB
               (COND ((MINUSP (DIFFERENCE RHS_N I)) (RETURN NIL)))
               (PROGN
                (SETQ W (CONS (CAR SYM_STACK) W))
                (SETQ SYM_STACK (CDR SYM_STACK))
                (SETQ STATE_STACK (CDR STATE_STACK)))
               (SETQ I (PLUS2 I 1))
               (GO LAB))
             (COND (FN (SETQ W (APPLY FN W)))
                   ((EQUAL RHS_N 1) (SETQ W (CAR W))))
             (SETQ SYM_STACK (CONS W SYM_STACK))
             (SETQ STATE_STACK
                     (CONS (GET_GOTO (CAR STATE_STACK) LHS) STATE_STACK))
             (COND
              (*LALR_VERBOSE
               (PROGN
                (PRINC "On lookahead ")
                (PRIN1 NEXT_INPUT)
                (PRINC ", reduce ")
                (PRIN1 RHS_N)
                (PRINC " symbols to nonterminal ")
                (LALR_PRIN_NONTERMINAL LHS)
                (PRINC ", and goto state ")
                (PRINT (CAR STATE_STACK)))))))))
        (GO WHILELABEL))
      (COND
       ((EQUAL W NIL)
        (PROGN
         (TERPRI)
         (SETQ W
                 (APPEND (EXPLODE2 "Item ")
                         (APPEND (EXPLODE NEXT_INPUT)
                                 (APPEND (EXPLODE2 " ('")
                                         (APPEND (EXPLODE2 YYLVAL)
                                                 (EXPLODE2
                                                  "') unexpected."))))))
         (YYERROR (LIST2STRING W))
         (PRINC "states: ")
         (PRINT STATE_STACK)
         (PRINC "symbols: ")
         (PRINT SYM_STACK)
         (PRINC "next token: ")
         (PRINT NEXT_INPUT))))
      (COND
       (*LALR_VERBOSE
        (PROGN
         (COND ((NOT (ZEROP (POSN))) (TERPRI)))
         (PRINC "Seems to have finished... "))))
      (RETURN (CAR SYM_STACK)))) 
(ENDMODULE) 