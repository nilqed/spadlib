(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'RAARITH)) 
(PUT 'RA_REFINE$ 'NUMBER-OF-ARGS 1) 
(DE RA_REFINE$ (U)
    (PROG (X N)
      (SETQ N 0)
      (SETQ X (CAR (SIMP (CAR U))))
      (SETQ N (COND ((CDR U) (REVAL1 (CADR U) T)) (T 1)))
      (RETURN (MK*SQ (CONS (RA_REFINE X N) 1))))) 
(PUT 'REFINE 'PSOPFN 'RA_REFINE$) 
(PUT 'RA_REFINE0 'NUMBER-OF-ARGS 2) 
(DE RA_REFINE0 (X N)
    (PROG (F IV L U)
      (SETQ F (RA_F X))
      (SETQ IV (RA_IV X))
      (PROG (G130)
        (SETQ G130 (RA_REFINE1 F (RIV_L IV) (RIV_U IV) N))
        (SETQ L (CAR G130))
        (SETQ U (CDR G130))
        (RETURN G130))
      (RETURN (RA_QMK F L U)))) 
(DE RA_REFINE (A1 A2) (RA_WRAPPER 'RA_REFINE0 (LIST A1 A2))) 
(PUT 'RA_REFINE 'NUMBER-OF-ARGS 2) 
(PUT 'RA_REFINE1 'NUMBER-OF-ARGS 4) 
(DE RA_REFINE1 (F L U N)
    (PROG (C)
      (PROG (J)
        (SETQ J 1)
       LAB
        (COND ((MINUSP (DIFFERENCE N J)) (RETURN NIL)))
        (PROGN
         (SETQ C (SFTO_AVGQ L U))
         (COND
          ((NULL (CAR (SFTO_QSUB1 F (LIST (CONS 'X C)))))
           (SETQ L (SFTO_AVGQ L C)))
          ((EQN (RA_BUDANCOUNT F L C) 1) (SETQ U C))
          (T (PROGN (COND (NIL NIL)) (SETQ L C)))))
        (SETQ J (PLUS2 J 1))
        (GO LAB))
      (RETURN (CONS L U)))) 
(PUT 'RA_NORMALIZE0 'NUMBER-OF-ARGS 1) 
(DE RA_NORMALIZE0 (X)
    (PROG (F L U)
      (COND ((NULL X) (RETURN X)))
      (SETQ F (RA_F X))
      (SETQ L (RA_L X))
      (SETQ U (RA_U X))
      (COND (NIL NIL))
      (COND (NIL NIL))
      (COND
       ((OR (NULL (CAR U)) (MINUSF (CAR U)) (NULL (CAR L))
            (MINUSF (NEGF (CAR L))))
        (RETURN X)))
      (COND
       ((NULL (SFTO_ABSSUMMAND F))
        (RETURN
         (RA_MK (LIST (CONS (CONS 'X 1) 1))
                (RIV_MK (CONS (MINUS 1) 1) (CONS 1 1))))))
      (COND
       ((EQN (RA_BUDANCOUNT F L (CONS NIL 1)) 1)
        (RETURN (RA_QMK F L (CONS NIL 1)))))
      (COND (NIL NIL))
      (RETURN (RA_QMK F (CONS NIL 1) U)))) 
(DE RA_NORMALIZE (A1) (RA_WRAPPER 'RA_NORMALIZE0 (LIST A1))) 
(PUT 'RA_NORMALIZE 'NUMBER-OF-ARGS 1) 
(PUT 'RA_DIFF 'NUMBER-OF-ARGS 1) 
(DE RA_DIFF (F) (CAR (DIFFF F 'X))) 
(PUT 'RA_PLUS0 'NUMBER-OF-ARGS 2) 
(DE RA_PLUS0 (X Y)
    (PROG (FF GG H LX UX LY UY L U)
      (COND ((NULL X) (RETURN Y)))
      (COND ((NULL Y) (RETURN X)))
      (SETQ FF (RA_PLUSTRANSFORM (RA_F X)))
      (SETQ GG (SFTO_RENAMEF (RA_F Y) 'X 'W))
      (SETQ H (RA_RESF0 FF GG 'W))
      (SETQ LX (RIV_L (RA_IV X)))
      (SETQ UX (RIV_U (RA_IV X)))
      (SETQ LY (RIV_L (RA_IV Y)))
      (SETQ UY (RIV_U (RA_IV Y)))
      (SETQ L (ADDSQ LX LY))
      (SETQ U (ADDSQ UX UY))
      (PROG ()
       WHILELABEL
        (COND ((NOT (NOT (EQN (RA_BUDANCOUNT H L U) 1))) (RETURN NIL)))
        (PROGN
         (PROG (G131)
           (SETQ G131 (RA_REFINE1 (RA_F X) LX UX 1))
           (SETQ LX (CAR G131))
           (SETQ UX (CDR G131))
           (RETURN G131))
         (PROG (G132)
           (SETQ G132 (RA_REFINE1 (RA_F Y) LY UY 1))
           (SETQ LY (CAR G132))
           (SETQ UY (CDR G132))
           (RETURN G132))
         (SETQ L (ADDSQ LX LY))
         (SETQ U (ADDSQ UX UY)))
        (GO WHILELABEL))
      (RETURN (RA_SIMPL0 (RA_NORMALIZE0 (RA_QMK H L U)))))) 
(DE RA_PLUS (A1 A2) (RA_WRAPPER 'RA_PLUS0 (LIST A1 A2))) 
(PUT 'RA_PLUS 'NUMBER-OF-ARGS 2) 
(PUT 'RA_PLUSTRANSFORM 'NUMBER-OF-ARGS 1) 
(DE RA_PLUSTRANSFORM (F)
    (SFTO_FSUB1 F
                (LIST
                 (CONS 'X
                       (ADDF (LIST (CONS (CONS 'X 1) 1))
                             (NEGF (LIST (CONS (CONS 'W 1) 1)))))))) 
(PUT 'RA_DIFFERENCE1 'NUMBER-OF-ARGS 2) 
(DE RA_DIFFERENCE1 (X Y) (RA_PLUS0 X (RA_MINUS0 Y))) 
(DE RA_DIFFERENCE (A1 A2) (RA_WRAPPER 'RA_DIFFERENCE0 (LIST A1 A2))) 
(PUT 'RA_DIFFERENCE 'NUMBER-OF-ARGS 2) 
(PUT 'RA_MINUS0 'NUMBER-OF-ARGS 1) 
(DE RA_MINUS0 (X)
    (COND ((RA_ZEROP X) X)
          (T (RA_SIMPL0 (RA_MK (RA_MIRROR (RA_F X)) (RIV_MINUS (RA_IV X))))))) 
(DE RA_MINUS (A1) (RA_WRAPPER 'RA_MINUS0 (LIST A1))) 
(PUT 'RA_MINUS 'NUMBER-OF-ARGS 1) 
(PUT 'RA_MINUSP0 'NUMBER-OF-ARGS 1) 
(DE RA_MINUSP0 (X)
    (PROG (L)
      (COND ((NULL X) (RETURN NIL)))
      (SETQ L (RA_L X))
      (RETURN (SFTO_LESSQ L (CONS NIL NIL))))) 
(DE RA_MINUSP (A1) (RA_WRAPPER 'RA_MINUSP0 (LIST A1))) 
(PUT 'RA_MINUSP 'NUMBER-OF-ARGS 1) 
(PUT 'RA_TIMES0 'NUMBER-OF-ARGS 2) 
(DE RA_TIMES0 (X Y)
    (PROG (FF GG H LX UX LY UY LL L U)
      (COND ((OR (NULL X) (NULL Y)) (RETURN NIL)))
      (SETQ FF (RA_TIMESTRANSFORM (RA_F X)))
      (SETQ GG (SFTO_RENAMEF (RA_F Y) 'X 'W))
      (SETQ H (RA_RESF0 FF GG 'W))
      (SETQ LX (RIV_L (RA_IV X)))
      (SETQ UX (RIV_U (RA_IV X)))
      (SETQ LY (RIV_L (RA_IV Y)))
      (SETQ UY (RIV_U (RA_IV Y)))
      (SETQ LL
              (LIST (MULTSQ LX LY) (MULTSQ LX UY) (MULTSQ UX LY)
                    (MULTSQ UX UY)))
      (SETQ L (SFTO_MINQL LL))
      (SETQ U (SFTO_MAXQL LL))
      (PROG ()
       WHILELABEL
        (COND ((NOT (NOT (EQN (RA_BUDANCOUNT H L U) 1))) (RETURN NIL)))
        (PROGN
         (PROG (G133)
           (SETQ G133 (RA_REFINE1 (RA_F X) LX UX 1))
           (SETQ LX (CAR G133))
           (SETQ UX (CDR G133))
           (RETURN G133))
         (PROG (G134)
           (SETQ G134 (RA_REFINE1 (RA_F Y) LY UY 1))
           (SETQ LY (CAR G134))
           (SETQ UY (CDR G134))
           (RETURN G134))
         (SETQ LL
                 (LIST (MULTSQ LX LY) (MULTSQ LX UY) (MULTSQ UX LY)
                       (MULTSQ UX UY)))
         (SETQ L (SFTO_MINQL LL))
         (SETQ U (SFTO_MAXQL LL)))
        (GO WHILELABEL))
      (RETURN (RA_SIMPL0 (RA_NORMALIZE0 (RA_QMK H L U)))))) 
(DE RA_TIMES (A1 A2) (RA_WRAPPER 'RA_TIMES0 (LIST A1 A2))) 
(PUT 'RA_TIMES 'NUMBER-OF-ARGS 2) 
(PUT 'RA_TIMESTRANSFORM 'NUMBER-OF-ARGS 1) 
(DE RA_TIMESTRANSFORM (F)
    (CAR
     (SFTO_QSUB1
      ((LAMBDA (G136)
         (COND (*PHYSOP-LOADED (PHYSOP-MULTF F G136)) (T (POLY-MULTF F G136))))
       (CONS (CONS (CONS 'W (CDAAR F)) 1) NIL))
      (LIST
       (CONS 'X
             (CONS (LIST (CONS (CONS 'X 1) 1)) (LIST (CONS (CONS 'W 1) 1)))))))) 
(PUT 'RA_QUOTIENT0 'NUMBER-OF-ARGS 2) 
(DE RA_QUOTIENT0 (X Y) (RA_TIMES0 X (RA_INVERSE0 Y))) 
(DE RA_QUOTIENT (A1 A2) (RA_WRAPPER 'RA_QUOTIENT0 (LIST A1 A2))) 
(PUT 'RA_QUOTIENT 'NUMBER-OF-ARGS 2) 
(PUT 'RA_INVERSE0 'NUMBER-OF-ARGS 1) 
(DE RA_INVERSE0 (X)
    (PROG (F L U NEWL NEWU)
      (SETQ F (RA_F X))
      (SETQ L (RIV_L (RA_IV X)))
      (SETQ U (RIV_U (RA_IV X)))
      (SETQ NEWL
              (COND ((CAR U) (CONS (CDR U) (CAR U)))
                    (T (NEGSQ (SFTO_LMQ (RA_MIRROR F))))))
      (SETQ NEWU (COND ((CAR L) (CONS (CDR L) (CAR L))) (T (SFTO_LMQ F))))
      (RETURN (RA_SIMPL0 (RA_QMK (RA_INVTRANSFORM F) NEWL NEWU))))) 
(DE RA_INVERSE (A1) (RA_WRAPPER 'RA_INVERSE0 (LIST A1))) 
(PUT 'RA_INVERSE 'NUMBER-OF-ARGS 1) 
(PUT 'RA_INVTRANSFORM 'NUMBER-OF-ARGS 1) 
(DE RA_INVTRANSFORM (F)
    (CAR
     (SFTO_QSUB1
      ((LAMBDA (G138)
         (COND (*PHYSOP-LOADED (PHYSOP-MULTF F G138)) (T (POLY-MULTF F G138))))
       (CONS (CONS (CONS 'X (CDAAR F)) 1) NIL))
      (LIST (CONS 'X (CONS 1 (LIST (CONS (CONS 'X 1) 1)))))))) 
(PUT 'RA_RESF0 'NUMBER-OF-ARGS 3) 
(DE RA_RESF0 (F G X) (SFTO_DPRPARTF (SFTO_SQFPARTF (SFTO_RESF F G X)))) 
(PUT 'RA_SIMPL0 'NUMBER-OF-ARGS 1) 
(DE RA_SIMPL0 (X)
    (PROG (W)
      (COND ((NOT *RASIMPL) (RETURN X)))
      (SETQ X (RA_SIFAC0 X))
      (SETQ W (RA_INTEQUIV X))
      (COND ((FIXP W) (RETURN (RA_I2RA W))))
      (RETURN X))) 
(DE RA_SIMPL (A1) (RA_WRAPPER 'RA_SIMPL0 (LIST A1))) 
(PUT 'RA_SIMPL 'NUMBER-OF-ARGS 1) 
(PUT 'RA_SIFAC0 'NUMBER-OF-ARGS 1) 
(DE RA_SIFAC0 (X)
    (PROG (FACL F L U C)
      (COND ((NOT *RASIFAC) (RETURN X)))
      (SETQ L (RIV_L (RA_IV X)))
      (SETQ U (RIV_U (RA_IV X)))
      (SETQ FACL
              (PROG (PR FORALL-RESULT FORALL-ENDPTR)
                (SETQ PR (CDR (FCTRF (RA_F X))))
                (COND ((NULL PR) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS ((LAMBDA (PR) (CAR PR)) (CAR PR)) NIL)))
               LOOPLABEL
                (SETQ PR (CDR PR))
                (COND ((NULL PR) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        (CONS ((LAMBDA (PR) (CAR PR)) (CAR PR)) NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (SETQ C T)
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND C FACL)) (RETURN NIL)))
        (PROGN
         (SETQ F (PROG1 (CAR FACL) (SETQ FACL (CDR FACL))))
         (COND ((EQN (RA_BUDANCOUNT F L U) 1) (SETQ C NIL))))
        (GO WHILELABEL))
      (COND (NIL NIL))
      (RETURN (RA_QMK F L U)))) 
(DE RA_SIFAC (A1) (RA_WRAPPER 'RA_SIFAC0 (LIST A1))) 
(PUT 'RA_SIFAC 'NUMBER-OF-ARGS 1) 
(ENDMODULE) 