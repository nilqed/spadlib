(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'CL)) 
(REVISION 'CL "$Id: cl.red 6085 2021-10-06 06:32:09Z thomas-sturm $") 
(COPYRIGHT 'CL "(c) 1995-2021 A. Dolzmann, T. Sturm") 
(CREATE-PACKAGE
 '(CL CLSUB CLSIMPL CLSIMPLBASIC CLSIMPLAT CLSIMPLATENV CLSUSI CLBNF CLNF CLQE
   CLTAB CLMISC CLRESOLV CLDFGFORMAT CLSMT2FORMAT CLQENODE CLQECONT CLQEENV
   CLQESTATE CLQENEW)
 NIL) 
(COMPILETIME (LOAD-PACKAGE 'REDLOG)) 
(EXPORTS
 (LIST 'CL_ATFP 'CL_CXFP 'CL_ATFLP 'CL_NCFLP 'CL_DNFP 'CL_CNFP 'CL_BNFP
       'CL_SIMPL 'CL_SIMPLBASIC 'CL_SIMPLIFYTHEORY 'CL_ORDP 'CL_SMCPKNOWL
       'CL_SMRMKNOWL 'CL_SMUPDKNOWL 'CL_SMMKATL 'CL_SIADDATL 'CL_SUSIMKATL
       'CL_SUSICPKNOWL 'CL_SUSIUPDKNOWL 'CL_DNF 'CL_CNF 'CL_BNF-CARTPROD
       'CL_BNFSIMPL 'CL_SACATLP 'CL_SACAT 'CL_EXPAND-EXTBOOL 'CL_NNF 'CL_NNFNOT
       'CL_PNF 'CL_RENAME-VARS 'CL_FVARL 'CL_FVARL1 'CL_BVARL 'CL_BVARL1
       'CL_VARL 'CL_VARL1 'CL_APNF 'CL_FREEVP 'CL_TNF 'CL_GQE 'CL_GQEA 'CL_QE
       'CL_QEA 'CL_QEIPO 'CL_QEWS 'CL_TRYGAUSS 'CL_SPECELIM 'CL_TAB 'CL_ATAB
       'CL_ITAB 'CL_GENTHEO 'CL_APPLY2ATS 'CL_APPLY2ATS1 'CL_APPLY2ATS2
       'CL_ATNUM 'CL_F2ML 'CL_ATML 'CL_ATML1 'CL_ATL 'CL_ATL1 'CL_IDENTIFYONOFF
       'CL_IFACML 'CL_IFACML1 'CL_IFACL 'CL_IFACL1 'CL_IFACDEGL 'CL_MATRIX
       'CL_CLOSURE 'CL_ALL 'CL_EX 'CL_FLIP 'CL_CFLIP 'CL_SUBFOF 'CL_TERMML
       'CL_TERMML1 'CL_TERML 'CL_TERML1 'CL_STRUCT 'CL_IFSTRUCT 'CL_SUREP
       'CL_SPLT)) 
(FLUID '(CL_PAL* CL_LPS* CL_THEO*)) 
(FLUID '(*RLSPGS)) 
(FLUID
 '(*RLQEAPRECISE *RLQEBACKSUB *RLQEDFS *RLQEDYN *RLQEFB *RLQEFILTERBOUNDS
   *RLQEFULLANS *RLQEGENCT *RLQEGSD *RLQEHEU *RLQEIDENTIFY *RLQELOG *RLQEPNF
   *RLQEPRECISE *RLQEQSC *RLQESQSC *RLQESR *RLQESTDANS *RLQESTDANSINT
   *RLQESTDANSQ *RLQESTDANSVB *RLQESUBF *RLQEVARSEL *RLQEVARSELTRY *RLQEVB
   *RLQEVBOLD)) 
(FLUID '(*RLQEANS *RLQEGEN *RLQELOCAL)) 
(FLUID
 '(*RLIDENTIFY *RLSIATADV *RLSIEXPL *RLSIEXPLA *RLSIFAC *RLSIFACO *RLSIPD
   *RLSITSQSPL)) 
(SWITCH (LIST 'CLQENEW)) 
(OFF1 'CLQENEW) 
(FLAG '(QFFORMULA) 'ASSERT_DYNTYPE) 
(PUT 'QFFORMULAL 'ASSERT_DYNTYPECHK 'LISTP) 
(FLAG '(QFFORMULAL) 'ASSERT_DYNTYPE) 
(PUT 'THEORY 'ASSERT_DYNTYPECHK 'LISTP) 
(FLAG '(THEORY) 'ASSERT_DYNTYPE) 
(PUT 'THEORYFORMULAPAIR 'ASSERT_DYNTYPECHK 'PAIRP) 
(FLAG '(THEORYFORMULAPAIR) 'ASSERT_DYNTYPE) 
(PUT 'KERNELL 'ASSERT_DYNTYPECHK 'LISTP) 
(FLAG '(KERNELL) 'ASSERT_DYNTYPE) 
(PUT 'QUANTIFIER 'ASSERT_DYNTYPECHK 'IDP) 
(FLAG '(QUANTIFIER) 'ASSERT_DYNTYPE) 
(PUT 'ATFORMULA 'ASSERT_DYNTYPECHK 'CL_ATFP) 
(FLAG '(ATFORMULA) 'ASSERT_DYNTYPE) 
(PUT 'CL_ATFP 'NUMBER-OF-ARGS 1) 
(PUT 'CL_ATFP 'DEFINED-ON-LINE '81) 
(PUT 'CL_ATFP 'DEFINED-IN-FILE 'REDLOG/CL/CL.RED) 
(PUT 'CL_ATFP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE CL_ATFP (X)
    (NOT
     ((LAMBDA (X)
        (OR (OR (EQ X 'TRUE) (EQ X 'FALSE))
            (OR (OR (OR (EQ X 'OR) (EQ X 'AND)) (EQ X 'NOT))
                (OR (EQ X 'IMPL) (EQ X 'REPL) (EQ X 'EQUIV)))
            (OR (EQ X 'EX) (EQ X 'ALL)) (OR (EQ X 'BEX) (EQ X 'BALL))))
      (COND ((ATOM X) X) (T (CAR X)))))) 
(PUT 'CL_CXFP 'NUMBER-OF-ARGS 1) 
(PUT 'CL_CXFP 'DEFINED-ON-LINE '86) 
(PUT 'CL_CXFP 'DEFINED-IN-FILE 'REDLOG/CL/CL.RED) 
(PUT 'CL_CXFP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE CL_CXFP (X)
    ((LAMBDA (X)
       (OR (OR (EQ X 'TRUE) (EQ X 'FALSE))
           (OR (OR (OR (EQ X 'OR) (EQ X 'AND)) (EQ X 'NOT))
               (OR (EQ X 'IMPL) (EQ X 'REPL) (EQ X 'EQUIV)))
           (OR (EQ X 'EX) (EQ X 'ALL)) (OR (EQ X 'BEX) (EQ X 'BALL))))
     (COND ((ATOM X) X) (T (CAR X))))) 
(PUT 'CL_ATFLP 'NUMBER-OF-ARGS 1) 
(PUT 'CL_ATFLP 'DEFINED-ON-LINE '91) 
(PUT 'CL_ATFLP 'DEFINED-IN-FILE 'REDLOG/CL/CL.RED) 
(PUT 'CL_ATFLP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE CL_ATFLP (FL) (OR (NULL FL) (AND (CL_ATFP (CAR FL)) (CL_ATFLP (CDR FL))))) 
(PUT 'CL_NCFLP 'NUMBER-OF-ARGS 1) 
(PUT 'CL_NCFLP 'DEFINED-ON-LINE '97) 
(PUT 'CL_NCFLP 'DEFINED-IN-FILE 'REDLOG/CL/CL.RED) 
(PUT 'CL_NCFLP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE CL_NCFLP (FL)
    (OR (NULL FL)
        (AND
         (OR (CL_ATFP (CAR FL)) (OR (EQ (CAR FL) 'TRUE) (EQ (CAR FL) 'FALSE)))
         (CL_NCFLP (CDR FL))))) 
(PUT 'CL_DNFP 'NUMBER-OF-ARGS 1) 
(PUT 'CL_DNFP 'DEFINED-ON-LINE '103) 
(PUT 'CL_DNFP 'DEFINED-IN-FILE 'REDLOG/CL/CL.RED) 
(PUT 'CL_DNFP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE CL_DNFP (F)
    (OR (OR (EQ F 'TRUE) (EQ F 'FALSE)) (CL_ATFP F)
        (AND (EQ (COND ((ATOM F) F) (T (CAR F))) 'AND) (CL_NCFLP (CDR F)))
        (AND (EQ (COND ((ATOM F) F) (T (CAR F))) 'OR) (CL_DNFP1 (CDR F))))) 
(PUT 'CL_DNFP1 'NUMBER-OF-ARGS 1) 
(PUT 'CL_DNFP1 'DEFINED-ON-LINE '110) 
(PUT 'CL_DNFP1 'DEFINED-IN-FILE 'REDLOG/CL/CL.RED) 
(PUT 'CL_DNFP1 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE CL_DNFP1 (FL)
    (OR (NULL FL)
        (AND
         (OR (OR (EQ (CAR FL) 'TRUE) (EQ (CAR FL) 'FALSE)) (CL_ATFP (CAR FL))
             (AND
              (EQ (COND ((ATOM (CAR FL)) (CAR FL)) (T (CAR (CAR FL)))) 'AND)
              (CL_NCFLP (CDR (CAR FL)))))
         (CL_DNFP1 (CDR FL))))) 
(PUT 'CL_CNFP 'NUMBER-OF-ARGS 1) 
(PUT 'CL_CNFP 'DEFINED-ON-LINE '117) 
(PUT 'CL_CNFP 'DEFINED-IN-FILE 'REDLOG/CL/CL.RED) 
(PUT 'CL_CNFP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE CL_CNFP (F)
    (OR (OR (EQ F 'TRUE) (EQ F 'FALSE)) (CL_ATFP F)
        (AND (EQ (COND ((ATOM F) F) (T (CAR F))) 'OR) (CL_NCFLP (CDR F)))
        (AND (EQ (COND ((ATOM F) F) (T (CAR F))) 'AND) (CL_CNFP1 (CDR F))))) 
(PUT 'CL_CNFP1 'NUMBER-OF-ARGS 1) 
(PUT 'CL_CNFP1 'DEFINED-ON-LINE '124) 
(PUT 'CL_CNFP1 'DEFINED-IN-FILE 'REDLOG/CL/CL.RED) 
(PUT 'CL_CNFP1 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE CL_CNFP1 (FL)
    (OR (NULL FL)
        (AND
         (OR (OR (EQ (CAR FL) 'TRUE) (EQ (CAR FL) 'FALSE)) (CL_ATFP (CAR FL))
             (AND (EQ (COND ((ATOM (CAR FL)) (CAR FL)) (T (CAR (CAR FL)))) 'OR)
                  (CL_NCFLP (CDR (CAR FL)))))
         (CL_CNFP1 (CDR FL))))) 
(PUT 'CL_BNFP 'NUMBER-OF-ARGS 1) 
(PUT 'CL_BNFP 'DEFINED-ON-LINE '132) 
(PUT 'CL_BNFP 'DEFINED-IN-FILE 'REDLOG/CL/CL.RED) 
(PUT 'CL_BNFP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE CL_BNFP (F)
    (OR (OR (EQ F 'TRUE) (EQ F 'FALSE)) (CL_ATFP F) (CL_NCFLP (CDR F))
        (AND (EQ (COND ((ATOM F) F) (T (CAR F))) 'AND) (CL_CNFP1 (CDR F)))
        (AND (EQ (COND ((ATOM F) F) (T (CAR F))) 'OR) (CL_DNFP1 (CDR F))))) 
(ENDMODULE) 