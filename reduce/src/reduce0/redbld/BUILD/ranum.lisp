(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'RANUM)) 
(REVISION 'RANUM "$Id: ranum.red 3964 2017-03-19 20:24:32Z thomas-sturm $") 
(COPYRIGHT 'RANUM "(c) 2014 T. Sturm") 
(CREATE-PACKAGE '(RANUM RAARITH RARCOUNT RAIV) NIL) 
(PUT 'RA 'ASSERT_DYNTYPECHK 'RAP) 
(FLAG '(RA) 'ASSERT_DYNTYPE) 
(PUT 'RAP 'NUMBER-OF-ARGS 1) 
(PUT 'RAP 'DEFINED-ON-LINE '62) 
(PUT 'RAP 'DEFINED-IN-FILE 'RANUM/RANUM.RED) 
(PUT 'RAP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RAP (S) (OR (NULL S) (EQCAR S '|:RA:|))) 
(PUT 'IV 'ASSERT_DYNTYPECHK 'IVP) 
(FLAG '(IV) 'ASSERT_DYNTYPE) 
(PUT 'IVP 'NUMBER-OF-ARGS 1) 
(PUT 'IVP 'DEFINED-ON-LINE '67) 
(PUT 'IVP 'DEFINED-IN-FILE 'RANUM/RANUM.RED) 
(PUT 'IVP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE IVP (S) (EQCAR S 'IV)) 
(GLOBAL '(DOMAINLIST*)) 
(GLOBAL '(EMSG*)) 
(FLUID '(DMODE*)) 
(FLUID '(*BACKTRACE)) 
(FLUID '(*MSG)) 
(SWITCH (LIST 'RANUM)) 
(SWITCH (LIST 'RASIMPL)) 
(SWITCH (LIST 'RASIFAC)) 
(SWITCH (LIST 'RAHIDEPOLY)) 
(SWITCH (LIST 'RARAT)) 
(ON1 'RASIMPL) 
(ON1 'RASIFAC) 
(SETQ DOMAINLIST* (UNION '(|:RA:|) DOMAINLIST*)) 
(PUT 'RANUM 'TAG '|:RA:|) 
(FLAG '(|:RA:|) 'FIELD) 
(PUT '|:RA:| 'DNAME 'RANUM) 
(PUT '|:RA:| 'ZEROP 'RA_ZEROP) 
(PUT '|:RA:| 'ONEP 'RA_ONEP) 
(PUT '|:RA:| 'MINUSP 'RA_MINUSP) 
(PUT '|:RA:| 'I2D 'RA_I2RA) 
(PUT '|:RA:| 'PLUS 'RA_PLUS) 
(PUT '|:RA:| 'MINUS 'RA_MINUS) 
(PUT '|:RA:| 'DIFFERENCE 'RA_DIFFERENCE) 
(PUT '|:RA:| 'TIMES 'RA_TIMES) 
(PUT '|:RA:| 'QUOTIENT 'RA_QUOTIENT) 
(PUT '|:RA:| 'INTEQUIVFN 'RA_INTEQUIV) 
(PUT 'RA 'SIMPFN 'RA_SIMP) 
(PUT '|:RA:| 'PREPFN (FUNCTION (LAMBDA (X) X))) 
(PUT '|:RA:| 'SIMPFN (FUNCTION (LAMBDA (X) (CONS (CONS '|:RA:| X) 1)))) 
(PUT '|:RA:| 'PRIFN 'RA_PRINT) 
(PUT '|:RN:| '|:RA:| 'RA_RN2RA) 
(PUT 'RA_WRAP 'DEFINED-ON-LINE '117) 
(PUT 'RA_WRAP 'DEFINED-IN-FILE 'RANUM/RANUM.RED) 
(PUT 'RA_WRAP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DM RA_WRAP (ARGL)
    (PROG (INAME ONAME N ARGS PRGN)
      (SETQ INAME (CADR ARGL))
      (SETQ ONAME (CADDR ARGL))
      (SETQ N
              (OR (GET INAME 'NUMBER-OF-ARGS)
                  (COND ((CDDDR ARGL) (CADDDR ARGL)))))
      (COND
       ((NULL N)
        (REDERR
         (LIST (CAR ARGL) (CDR ARGL) "cannot determine the arity of" INAME))))
      (SETQ ARGS
              (PROG (I FORALL-RESULT FORALL-ENDPTR)
                (SETQ I 1)
                (COND ((MINUSP (DIFFERENCE N I)) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR (CONS (MKID 'A I) NIL)))
               LOOPLABEL
                (SETQ I (PLUS2 I 1))
                (COND ((MINUSP (DIFFERENCE N I)) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR (CONS (MKID 'A I) NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (SETQ PRGN (CONS (LIST 'PUT (MKQUOTE ONAME) ''NUMBER-OF-ARGS N) PRGN))
      (SETQ PRGN
              (CONS
               (LIST 'DE ONAME ARGS
                     (LIST 'RA_WRAPPER (MKQUOTE INAME) (CONS 'LIST ARGS)))
               PRGN))
      (RETURN (CONS 'PROGN PRGN)))) 
(PUT 'RA_WRAPPER 'NUMBER-OF-ARGS 2) 
(DE RA_WRAPPER (F ARGL)
    (PROG (W OLDMODE)
      (SETQ OLDMODE (GET DMODE* 'DNAME))
      (SETQ W
              (ERRORSET
               (LIST 'RA_WRAPPER1 (MKQUOTE F) (MKQUOTE ARGL) (MKQUOTE OLDMODE))
               T *BACKTRACE))
      (COND
       ((ERRORP W)
        (PROGN
         (LPRIM (LIST "caught error - restoring domain mode" OLDMODE))
         (COND (OLDMODE (ON1 OLDMODE)))
         (ERROR1))))
      (RETURN (CAR W)))) 
(PUT 'RA_WRAPPER1 'NUMBER-OF-ARGS 3) 
(DE RA_WRAPPER1 (F ARGL OLDMODE)
    (PROG (W)
      (COND (OLDMODE (OFF1 OLDMODE)))
      (SETQ W (APPLY F ARGL))
      (COND (OLDMODE (ON1 OLDMODE)))
      (RETURN W))) 
(PUT 'RA_WRAPPERTEST0 'NUMBER-OF-ARGS 2) 
(DE RA_WRAPPERTEST0 (X Y)
    (PROGN (COND ((EQUAL X 7) (REDERR (LIST "x=7")))) (PLUS X Y))) 
(DE RA_WRAPPERTEST (A1 A2) (RA_WRAPPER 'RA_WRAPPERTEST0 (LIST A1 A2))) 
(PUT 'RA_WRAPPERTEST 'NUMBER-OF-ARGS 2) 
(PUT 'RA_PREP 'NUMBER-OF-ARGS 1) 
(DE RA_PREP (X)
    (LIST 'RA (PREPF (RA_F X)) (PREPSQ (RIV_L (RA_IV X)))
          (PREPSQ (RIV_U (RA_IV X))))) 
(PUT 'RA 'PRIFN (FUNCTION (LAMBDA (U) (RA_PRINT (CAR (RA_SIMP U)))))) 
(DE RA_X NIL 'X) 
(PUT 'RA_X 'NUMBER-OF-ARGS 0) 
(PUT 'RA_X 'DEFINED-ON-LINE '163) 
(PUT 'RA_X 'DEFINED-IN-FILE 'RANUM/RANUM.RED) 
(PUT 'RA_X 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(PUTC 'RA_X 'INLINE '(LAMBDA () 'X)) 
(DE RA_Y NIL 'W) 
(PUT 'RA_Y 'NUMBER-OF-ARGS 0) 
(PUT 'RA_Y 'DEFINED-ON-LINE '166) 
(PUT 'RA_Y 'DEFINED-IN-FILE 'RANUM/RANUM.RED) 
(PUT 'RA_Y 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(PUTC 'RA_Y 'INLINE '(LAMBDA () 'W)) 
(DE RA_ZERO NIL
    (RA_MK (LIST (CONS (CONS 'X 1) 1)) (RIV_MK (CONS (MINUS 1) 1) (CONS 1 1)))) 
(PUT 'RA_ZERO 'NUMBER-OF-ARGS 0) 
(PUT 'RA_ZERO 'DEFINED-ON-LINE '171) 
(PUT 'RA_ZERO 'DEFINED-IN-FILE 'RANUM/RANUM.RED) 
(PUT 'RA_ZERO 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(PUTC 'RA_ZERO 'INLINE
      '(LAMBDA ()
         (RA_MK (LIST (CONS (CONS 'X 1) 1))
          (RIV_MK (CONS (MINUS 1) 1) (CONS 1 1))))) 
(PUT 'RA_MK 'NUMBER-OF-ARGS 2) 
(DE RA_MK (F I) (LIST '|:RA:| F I)) 
(PUT 'RA_QMK 'NUMBER-OF-ARGS 3) 
(DE RA_QMK (F L U) (LIST '|:RA:| F (RIV_MK L U))) 
(PUT 'RA_F 'NUMBER-OF-ARGS 1) 
(DE RA_F (X) (CADR X)) 
(PUT 'RA_IV 'NUMBER-OF-ARGS 1) 
(DE RA_IV (X) (CADDR X)) 
(PUT 'RA_L 'NUMBER-OF-ARGS 1) 
(DE RA_L (X) (RIV_L (RA_IV X))) 
(PUT 'RA_U 'NUMBER-OF-ARGS 1) 
(DE RA_U (X) (RIV_U (RA_IV X))) 
(PUT 'RA_PRINT 'NUMBER-OF-ARGS 1) 
(DE RA_PRINT (X)
    (COND
     ((NOT *NAT)
      (PROGN
       (PRIN2* "ranum(")
       (MAPRIN (PREPF (RA_F X)))
       (PRIN2* ", ")
       (MAPRIN (PREPSQ (RIV_L (RA_IV X))))
       (PRIN2* ", ")
       (MAPRIN (PREPSQ (RIV_U (RA_IV X))))
       (PRIN2* ")")))
     (*RAHIDEPOLY (MAPRIN (RA_IV X)))
     (T
      (PROGN
       (PRIN2* "(")
       (MAPRIN (PREPF (RA_F X)))
       (PRIN2* ", ")
       (MAPRIN (RA_IV X))
       (PRIN2* ")"))))) 
(PUT 'RA_SIMP0 'NUMBER-OF-ARGS 1) 
(DE RA_SIMP0 (U)
    (PROG (F L W)
      (SETQ U (CDR U))
      (SETQ F (CAR (SIMP (CAR U))))
      (SETQ F (SFTO_DPRPARTF (SFTO_SQFPARTF F)))
      (SETQ L (SIMP (CADR U)))
      (SETQ U (SIMP (CADDR U)))
      (SETQ W (RA_QMK F L U))
      (RETURN (CONS (RA_SIMPL0 (RA_NORMALIZE0 W)) 1)))) 
(DE RA_SIMP (A1) (RA_WRAPPER 'RA_SIMP0 (LIST A1))) 
(PUT 'RA_SIMP 'NUMBER-OF-ARGS 1) 
(PUT 'RA_RA0 'NUMBER-OF-ARGS 1) 
(DE RA_RA0 (U)
    (PROG (BC F L)
      (SETQ F (CAR (SIMP (CAR U))))
      (SETQ F (SFTO_DPRPARTF (SFTO_SQFPARTF F)))
      (SETQ L (SIMP (CADR U)))
      (SETQ U (SIMP (CADDR U)))
      (COND
       ((NULL (CAR (SFTO_QSUB1 F (LIST (CONS 'X L)))))
        (REDERR
         (LIST
          "polynomial has a zero at the lower bound of the specified interval"))))
      (COND
       ((NULL (CAR (SFTO_QSUB1 F (LIST (CONS 'X U)))))
        (REDERR
         (LIST
          "polynomial has a zero at the upper bound of the specified interval"))))
      (SETQ BC (RA_BUDANCOUNT F L U))
      (COND ((EQN BC 1) (RETURN (RA_SIMPL0 (RA_NORMALIZE0 (RA_QMK F L U))))))
      (COND
       ((EQN BC 0)
        (REDERR (LIST "polynomial has no zero on specified interval"))))
      (REDERR
       (LIST "polynomial has more than one zero on specified interval")))) 
(DE RA_RA (A1) (RA_WRAPPER 'RA_RA0 (LIST A1))) 
(PUT 'RA_RA 'NUMBER-OF-ARGS 1) 
(PUT 'RA 'PSOPFN 'RA_RA) 
(PUT 'RA_ZEROP 'NUMBER-OF-ARGS 1) 
(DE RA_ZEROP (X) (NULL (CDR (RA_F X)))) 
(PUT 'RA_ONEP0 'NUMBER-OF-ARGS 1) 
(DE RA_ONEP0 (X)
    (AND (RIV_CONTAINS (RA_IV X) (CONS 1 1))
         (OR (AND (EQN (CDR (RA_F X)) (MINUS 1)) (EQN (CDAR (RA_F X)) 1))
             (NULL (SFTO_FSUB1 (RA_F X) (LIST (CONS 'X 1))))))) 
(DE RA_ONEP (A1) (RA_WRAPPER 'RA_ONEP0 (LIST A1))) 
(PUT 'RA_ONEP 'NUMBER-OF-ARGS 1) 
(PUT 'RA_INTEQUIV0 'NUMBER-OF-ARGS 1) 
(DE RA_INTEQUIV0 (X)
    (PROG (F L U Z)
      (COND ((RA_ZEROP X) (RETURN 0)))
      (SETQ F (RA_F X))
      (COND ((AND (EQN (CDAAR F) 1) (EQN (CDAR F) 1)) (RETURN (NEGF (CDR F)))))
      (SETQ L (RIV_L (RA_IV X)))
      (SETQ U (RIV_U (RA_IV X)))
      (PROG ()
       WHILELABEL
        (COND
         ((NOT (SFTO_GREATERQ (ADDSQ U (NEGSQ L)) (CONS 1 1))) (RETURN NIL)))
        (PROG (G127)
          (SETQ G127 (RA_REFINE1 F L U 1))
          (SETQ L (CAR G127))
          (SETQ U (CDR G127))
          (RETURN G127))
        (GO WHILELABEL))
      (SETQ Z (ADDF (CAR (SFTO_FLOORQ L)) 1))
      (COND
       ((AND (SFTO_LESSQ (CONS Z 1) U)
             (NULL (SFTO_FSUB1 F (LIST (CONS 'X Z)))))
        (RETURN (OR Z 0))))
      (RETURN X))) 
(DE RA_INTEQUIV (A1) (RA_WRAPPER 'RA_INTEQUIV0 (LIST A1))) 
(PUT 'RA_INTEQUIV 'NUMBER-OF-ARGS 1) 
(PUT 'RA_I2RA0 'NUMBER-OF-ARGS 1) 
(DE RA_I2RA0 (Z)
    (PROG (F L U)
      (COND
       ((EQN Z 0)
        (RETURN
         (RA_MK (LIST (CONS (CONS 'X 1) 1))
          (RIV_MK (CONS (MINUS 1) 1) (CONS 1 1))))))
      (SETQ F (ADDF (LIST (CONS (CONS 'X 1) 1)) (NEGF Z)))
      (SETQ L (CONS (SFTO_INT2SF (DIFFERENCE Z 1)) 1))
      (SETQ U (CONS (SFTO_INT2SF (PLUS Z 1)) 1))
      (RETURN (RA_NORMALIZE0 (RA_QMK F L U))))) 
(DE RA_I2RA (A1) (RA_WRAPPER 'RA_I2RA0 (LIST A1))) 
(PUT 'RA_I2RA 'NUMBER-OF-ARGS 1) 
(PUT 'RA_RN2RA0 'NUMBER-OF-ARGS 1) 
(DE RA_RN2RA0 (RN)
    (PROG (F L U)
      (COND
       ((|RNZEROP:| RN)
        (RETURN
         (RA_MK (LIST (CONS (CONS 'X 1) 1))
          (RIV_MK (CONS (MINUS 1) 1) (CONS 1 1))))))
      (SETQ F
              (ADDF
               ((LAMBDA (G128)
                  (COND (*PHYSOP-LOADED (PHYSOP-MULTF G128 (CDDR RN)))
                        (T (POLY-MULTF G128 (CDDR RN)))))
                (LIST (CONS (CONS 'X 1) 1)))
               (NEGF (CADR RN))))
      (SETQ L (CONS (SFTO_INT2SF (DIFFERENCE (CADR RN) 1)) (CDDR RN)))
      (SETQ U (CONS (SFTO_INT2SF (PLUS (CADR RN) 1)) (CDDR RN)))
      (RETURN (RA_NORMALIZE0 (RA_QMK F L U))))) 
(DE RA_RN2RA (A1) (RA_WRAPPER 'RA_RN2RA0 (LIST A1))) 
(PUT 'RA_RN2RA 'NUMBER-OF-ARGS 1) 
(INITDMODE 'RANUM) 
(ENDMODULE) 