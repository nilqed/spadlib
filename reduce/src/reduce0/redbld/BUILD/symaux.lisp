(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'SYMAUX)) 
(CREATE-PACKAGE '(SYMAUX SYMATVEC SYMCHECK SYMCHREP SYMHANDL SYMPATCH SYMWORK)
                '(CONTRIB SYMMETRY)) 
(LOAD-PACKAGE 'MATRIX) 
(AEVAL (OPERATOR (LIST 'PARTDF))) 
(MKOP 'PARTDF) 
(INFIX (LIST 'PARTDF)) 
(AEVAL (PRECEDENCE (LIST 'PARTDF 'TIMES))) 
(PUT 'GIVE_GROUPS 'NUMBER-OF-ARGS 1) 
(PUT 'GIVE_GROUPS 'DEFINED-ON-LINE '45) 
(PUT 'GIVE_GROUPS 'DEFINED-IN-FILE 'SYMMETRY/SYMAUX.RED) 
(PUT 'GIVE_GROUPS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE GIVE_GROUPS (U) (PROG () (RETURN (MK+OUTER+LIST (GET*AVAILABLE*GROUPS))))) 
(PUT 'AVAILABLEGROUPS 'PSOPFN 'GIVE_GROUPS) 
(PUT 'PRINT_GROUP 'NUMBER-OF-ARGS 1) 
(PUT 'PRINT_GROUP 'DEFINED-ON-LINE '54) 
(PUT 'PRINT_GROUP 'DEFINED-IN-FILE 'SYMMETRY/SYMAUX.RED) 
(PUT 'PRINT_GROUP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PRINT_GROUP (GROUPNAME)
    (PROG (G)
      (COND ((GREATERP (LENGTH GROUPNAME) 1) (REDERR "too many arguments")))
      (COND
       ((LESSP (LENGTH GROUPNAME) 1) (REDERR "group as argument missing")))
      (SETQ G (REVAL1 (CAR GROUPNAME) T))
      (COND ((AVAILABLE*P G) (RETURN (|ALG:PRINT:GROUP| G)))))) 
(PUT 'PRINTGROUP 'PSOPFN 'PRINT_GROUP) 
(PUT 'PRINT_GENERATORS 'NUMBER-OF-ARGS 1) 
(PUT 'PRINT_GENERATORS 'DEFINED-ON-LINE '67) 
(PUT 'PRINT_GENERATORS 'DEFINED-IN-FILE 'SYMMETRY/SYMAUX.RED) 
(PUT 'PRINT_GENERATORS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PRINT_GENERATORS (GROUPNAME)
    (PROG (G)
      (COND ((GREATERP (LENGTH GROUPNAME) 1) (REDERR "too many arguments")))
      (COND
       ((LESSP (LENGTH GROUPNAME) 1) (REDERR "group as argument missing")))
      (SETQ G (REVAL1 (CAR GROUPNAME) T))
      (COND ((AVAILABLE*P G) (RETURN (|ALG:GENERATORS| G)))))) 
(PUT 'GENERATORS 'PSOPFN 'PRINT_GENERATORS) 
(PUT 'CHARACTER_TABLE 'NUMBER-OF-ARGS 1) 
(PUT 'CHARACTER_TABLE 'DEFINED-ON-LINE '81) 
(PUT 'CHARACTER_TABLE 'DEFINED-IN-FILE 'SYMMETRY/SYMAUX.RED) 
(PUT 'CHARACTER_TABLE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE CHARACTER_TABLE (GROUPNAME)
    (PROG (G)
      (COND ((GREATERP (LENGTH GROUPNAME) 1) (REDERR "too many arguments")))
      (SETQ G (REVAL1 (CAR GROUPNAME) T))
      (COND ((AVAILABLE*P G) (RETURN (|ALG:CHARACTERS| G)))))) 
(PUT 'CHARACTERTABLE 'PSOPFN 'CHARACTER_TABLE) 
(PUT 'CHARACTER_NR 'NUMBER-OF-ARGS 1) 
(PUT 'CHARACTER_NR 'DEFINED-ON-LINE '93) 
(PUT 'CHARACTER_NR 'DEFINED-IN-FILE 'SYMMETRY/SYMAUX.RED) 
(PUT 'CHARACTER_NR 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE CHARACTER_NR (GROUPNAME)
    (PROG (GROUP NR CHAR1)
      (COND ((GREATERP (LENGTH GROUPNAME) 2) (REDERR "too many arguments")))
      (COND ((LESSP (LENGTH GROUPNAME) 2) (REDERR "group or number missing")))
      (SETQ GROUP (REVAL1 (CAR GROUPNAME) T))
      (SETQ NR (REVAL1 (CADR GROUPNAME) T))
      (COND
       ((NOT (AVAILABLE*P GROUP))
        (REDERR "no information upon group available")))
      (COND
       ((NOT (|IRR:NR:P| NR GROUP)) (REDERR "no character with this number")))
      (COND (*COMPLEX (SETQ CHAR1 (GET*COMPLEX*CHARACTER GROUP NR)))
            (T (SETQ CHAR1 (GET*REAL*CHARACTER GROUP NR))))
      (RETURN (|ALG:PRINT:CHARACTER| CHAR1)))) 
(PUT 'CHARACTERNR 'PSOPFN 'CHARACTER_NR) 
(PUT 'IRREDUCIBLE_REP_TABLE 'NUMBER-OF-ARGS 1) 
(PUT 'IRREDUCIBLE_REP_TABLE 'DEFINED-ON-LINE '113) 
(PUT 'IRREDUCIBLE_REP_TABLE 'DEFINED-IN-FILE 'SYMMETRY/SYMAUX.RED) 
(PUT 'IRREDUCIBLE_REP_TABLE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE IRREDUCIBLE_REP_TABLE (GROUPNAME)
    (PROG (G)
      (COND ((GREATERP (LENGTH GROUPNAME) 1) (REDERR "too many arguments")))
      (COND ((LESSP (LENGTH GROUPNAME) 1) (REDERR "group missing")))
      (SETQ G (REVAL1 (CAR GROUPNAME) T))
      (COND ((AVAILABLE*P G) (RETURN (|ALG:IRR:REPS| G)))))) 
(PUT 'IRREDUCIBLEREPTABLE 'PSOPFN 'IRREDUCIBLE_REP_TABLE) 
(PUT 'IRREDUCIBLE_REP_NR 'NUMBER-OF-ARGS 1) 
(PUT 'IRREDUCIBLE_REP_NR 'DEFINED-ON-LINE '126) 
(PUT 'IRREDUCIBLE_REP_NR 'DEFINED-IN-FILE 'SYMMETRY/SYMAUX.RED) 
(PUT 'IRREDUCIBLE_REP_NR 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE IRREDUCIBLE_REP_NR (GROUPNAME)
    (PROG (G NR)
      (COND ((GREATERP (LENGTH GROUPNAME) 2) (REDERR "too many arguments")))
      (COND ((LESSP (LENGTH GROUPNAME) 2) (REDERR "group or number missing")))
      (SETQ G (REVAL1 (CAR GROUPNAME) T))
      (COND
       ((NOT (AVAILABLE*P G)) (REDERR "no information upon group available")))
      (SETQ NR (REVAL1 (CADR GROUPNAME) T))
      (COND
       ((NOT (|IRR:NR:P| NR G))
        (REDERR "no irreducible representation with this number")))
      (COND
       (*COMPLEX (RETURN (|ALG:PRINT:REP| (GET*COMPLEX*IRREDUCIBLE*REP G NR))))
       (T (RETURN (|ALG:PRINT:REP| (GET*REAL*IRREDUCIBLE*REP G NR))))))) 
(PUT 'IRREDUCIBLEREPNR 'PSOPFN 'IRREDUCIBLE_REP_NR) 
(PUT 'CANONICAL_DECOMPOSITION 'NUMBER-OF-ARGS 1) 
(PUT 'CANONICAL_DECOMPOSITION 'DEFINED-ON-LINE '147) 
(PUT 'CANONICAL_DECOMPOSITION 'DEFINED-IN-FILE 'SYMMETRY/SYMAUX.RED) 
(PUT 'CANONICAL_DECOMPOSITION 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE CANONICAL_DECOMPOSITION (REPRESENTATION)
    (PROG (REPR)
      (COND
       ((GREATERP (LENGTH REPRESENTATION) 1) (REDERR "too many arguments")))
      (SETQ REPR (REVAL1 (CAR REPRESENTATION) T))
      (COND
       ((|REPRESENTATION:P| REPR)
        (RETURN (|ALG:CAN:DECOMP| (MK_INTERNAL REPR))))))) 
(PUT 'CANONICALDECOMPOSITION 'PSOPFN 'CANONICAL_DECOMPOSITION) 
(PUT 'SYM_CHARACTER 'NUMBER-OF-ARGS 1) 
(PUT 'SYM_CHARACTER 'DEFINED-ON-LINE '159) 
(PUT 'SYM_CHARACTER 'DEFINED-IN-FILE 'SYMMETRY/SYMAUX.RED) 
(PUT 'SYM_CHARACTER 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SYM_CHARACTER (REPRESENTATION)
    (PROG (REPR)
      (COND
       ((GREATERP (LENGTH REPRESENTATION) 1) (REDERR "too many arguments")))
      (COND
       ((LESSP (LENGTH REPRESENTATION) 1)
        (REDERR "representation list missing")))
      (SETQ REPR (REVAL1 (CAR REPRESENTATION) T))
      (COND
       ((|REPRESENTATION:P| REPR)
        (RETURN (|ALG:PRINT:CHARACTER| (MK_CHARACTER (MK_INTERNAL REPR)))))
       (T (REDERR "that's no representation"))))) 
(PUT 'CHARACTER 'PSOPFN 'SYM_CHARACTER) 
(PUT 'SYMMETRY_ADAPTED_BASIS 'NUMBER-OF-ARGS 1) 
(PUT 'SYMMETRY_ADAPTED_BASIS 'DEFINED-ON-LINE '175) 
(PUT 'SYMMETRY_ADAPTED_BASIS 'DEFINED-IN-FILE 'SYMMETRY/SYMAUX.RED) 
(PUT 'SYMMETRY_ADAPTED_BASIS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SYMMETRY_ADAPTED_BASIS (ARG)
    (PROG (REPR NR RES)
      (COND ((GREATERP (LENGTH ARG) 2) (REDERR "too many arguments")))
      (COND ((LESSP (LENGTH ARG) 2) (REDERR "group or number missing")))
      (SETQ REPR (REVAL1 (CAR ARG) T))
      (SETQ NR (REVAL1 (CADR ARG) T))
      (COND ((|REPRESENTATION:P| REPR) (SETQ REPR (MK_INTERNAL REPR)))
            (T (REDERR "that's no representation")))
      (COND
       ((|IRR:NR:P| NR (GET_GROUP_IN REPR))
        (PROGN
         (COND
          ((NOT (NULL (MK_MULTIPLICITY REPR NR)))
           (SETQ RES (MK+OUTER+MAT (MK_PART_SYM_ALL REPR NR))))
          (T (SETQ RES NIL)))
         NIL))
       (T (REDERR "wrong number of an irreducible representation")))
      (RETURN RES))) 
(PUT 'SYMMETRYBASIS 'PSOPFN 'SYMMETRY_ADAPTED_BASIS) 
(PUT 'SYMMETRY_ADAPTED_BASIS_PART 'NUMBER-OF-ARGS 1) 
(PUT 'SYMMETRY_ADAPTED_BASIS_PART 'DEFINED-ON-LINE '201) 
(PUT 'SYMMETRY_ADAPTED_BASIS_PART 'DEFINED-IN-FILE 'SYMMETRY/SYMAUX.RED) 
(PUT 'SYMMETRY_ADAPTED_BASIS_PART 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SYMMETRY_ADAPTED_BASIS_PART (ARG)
    (PROG (REPR NR RES)
      (COND ((GREATERP (LENGTH ARG) 2) (REDERR "too many arguments")))
      (COND ((LESSP (LENGTH ARG) 2) (REDERR "group or number missing")))
      (SETQ REPR (REVAL1 (CAR ARG) T))
      (SETQ NR (REVAL1 (CADR ARG) T))
      (COND ((|REPRESENTATION:P| REPR) (SETQ REPR (MK_INTERNAL REPR)))
            (T (REDERR "that's no representation")))
      (COND
       ((|IRR:NR:P| NR (GET_GROUP_IN REPR))
        (PROGN
         (COND
          ((NOT (NULL (MK_MULTIPLICITY REPR NR)))
           (SETQ RES (MK+OUTER+MAT (MK_PART_SYM1 REPR NR))))
          (T (SETQ RES NIL)))
         NIL))
       (T (REDERR "wrong number of an irreducible representation")))
      (RETURN RES))) 
(PUT 'SYMMETRYBASISPART 'PSOPFN 'SYMMETRY_ADAPTED_BASIS_PART) 
(PUT 'SYMMETRY_BASES 'NUMBER-OF-ARGS 1) 
(PUT 'SYMMETRY_BASES 'DEFINED-ON-LINE '227) 
(PUT 'SYMMETRY_BASES 'DEFINED-IN-FILE 'SYMMETRY/SYMAUX.RED) 
(PUT 'SYMMETRY_BASES 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SYMMETRY_BASES (REPRESENTATION)
    (PROG (REPR RES)
      (COND
       ((GREATERP (LENGTH REPRESENTATION) 1) (REDERR "too many arguments")))
      (COND
       ((LESSP (LENGTH REPRESENTATION) 1) (REDERR "representation missing")))
      (SETQ REPR (REVAL1 (CAR REPRESENTATION) T))
      (COND
       ((|REPRESENTATION:P| REPR)
        (PROGN
         (SETQ RES (MK+OUTER+MAT (MK_SYM_BASIS (MK_INTERNAL REPR))))
         NIL))
       (T (REDERR "that's no representation")))
      (RETURN RES))) 
(PUT 'ALLSYMMETRYBASES 'PSOPFN 'SYMMETRY_BASES) 
(PUT 'SYM_DIAGONALIZE 'NUMBER-OF-ARGS 1) 
(PUT 'SYM_DIAGONALIZE 'DEFINED-ON-LINE '244) 
(PUT 'SYM_DIAGONALIZE 'DEFINED-IN-FILE 'SYMMETRY/SYMAUX.RED) 
(PUT 'SYM_DIAGONALIZE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SYM_DIAGONALIZE (ARG)
    (PROG (REPR MATRIX1)
      (COND ((GREATERP (LENGTH ARG) 2) (REDERR "too many arguments")))
      (COND
       ((LESSP (LENGTH ARG) 2) (REDERR "representation or matrix missing")))
      (SETQ REPR (REVAL1 (CADR ARG) T))
      (SETQ MATRIX1 (REVAL1 (CAR ARG) T))
      (COND ((ALG+MATRIX+P MATRIX1) (SETQ MATRIX1 (MK+INNER+MAT MATRIX1)))
            (T (REDERR "first argument must be a matrix")))
      (COND ((|REPRESENTATION:P| REPR) (SETQ REPR (MK_INTERNAL REPR)))
            (T (REDERR "that's no representation")))
      (COND
       ((|SYMMETRY:P| MATRIX1 REPR)
        (RETURN (MK+OUTER+MAT (MK_DIAGONAL MATRIX1 REPR))))
       (T (REDERR "matrix has not the symmetry of this representation"))))) 
(PUT 'DIAGONALIZE 'PSOPFN 'SYM_DIAGONALIZE) 
(PUT 'SET_GENERATORS_GROUP 'NUMBER-OF-ARGS 1) 
(PUT 'SET_GENERATORS_GROUP 'DEFINED-ON-LINE '273) 
(PUT 'SET_GENERATORS_GROUP 'DEFINED-IN-FILE 'SYMMETRY/SYMAUX.RED) 
(PUT 'SET_GENERATORS_GROUP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SET_GENERATORS_GROUP (ARG)
    (PROG (GROUP GENERATORS RELATIONS REL)
      (COND ((GREATERP (LENGTH ARG) 3) (REDERR "too many arguments")))
      (COND
       ((LESSP (LENGTH ARG) 2)
        (REDERR "group identifier or generator list missing")))
      (SETQ GROUP (REVAL1 (CAR ARG) T))
      (SETQ GENERATORS (REVAL1 (CADR ARG) T))
      (COND ((EQUAL (LENGTH ARG) 3) (SETQ RELATIONS (REVAL1 (CADDR ARG) T)))
            (T (SETQ RELATIONS NIL)))
      (COND
       ((NOT (IDP GROUP))
        (REDERR "first argument must be a group identifier")))
      (SETQ GENERATORS (MK+INNER+LIST GENERATORS))
      (COND
       ((NOT (|IDENTIFIER:LIST:P| GENERATORS))
        (REDERR "second argument must be a list of generator identifiers"))
       (T (SET*GENERATORS GROUP GENERATORS)))
      (SETQ RELATIONS (MK_RELATION_LIST RELATIONS))
      (PROG (REL)
        (SETQ REL RELATIONS)
       LAB
        (COND ((NULL REL) (RETURN NIL)))
        ((LAMBDA (REL)
           (COND
            ((NOT (|RELATION:LIST:P| GROUP REL))
             (REDERR "equations in generators are demanded"))))
         (CAR REL))
        (SETQ REL (CDR REL))
        (GO LAB))
      (SET*RELATIONS GROUP RELATIONS)
      (WRITEPRI "setgenerators finished" 'ONLY))) 
(PUT 'SETGENERATORS 'PSOPFN 'SET_GENERATORS_GROUP) 
(PUT 'SET_ELEMENTS 'NUMBER-OF-ARGS 1) 
(PUT 'SET_ELEMENTS 'DEFINED-ON-LINE '301) 
(PUT 'SET_ELEMENTS 'DEFINED-IN-FILE 'SYMMETRY/SYMAUX.RED) 
(PUT 'SET_ELEMENTS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SET_ELEMENTS (ARG)
    (PROG (ELEMREPS REPLIST ELEMS GROUP)
      (COND ((GREATERP (LENGTH ARG) 2) (REDERR "too many arguments")))
      (COND
       ((LESSP (LENGTH ARG) 2)
        (REDERR "missing group or list with group elements with generators ")))
      (SETQ GROUP (REVAL1 (CAR ARG) T))
      (COND
       ((NOT (IDP GROUP))
        (REDERR "first argument must be a group identifier")))
      (SETQ ELEMREPS (REVAL1 (CADR ARG) T))
      (SETQ ELEMREPS (MK_RELATION_LIST ELEMREPS))
      (PROG (REPLIST)
        (SETQ REPLIST ELEMREPS)
       LAB
        (COND ((NULL REPLIST) (RETURN NIL)))
        ((LAMBDA (REPLIST)
           (COND
            ((NOT (|GENERATOR:LIST:P| GROUP (CADR REPLIST)))
             (REDERR "group elements should be represented in generators"))))
         (CAR REPLIST))
        (SETQ REPLIST (CDR REPLIST))
        (GO LAB))
      (PROG (REPLIST)
        (SETQ REPLIST ELEMREPS)
       LAB
        (COND ((NULL REPLIST) (RETURN NIL)))
        ((LAMBDA (REPLIST)
           (COND
            ((NOT (AND (EQUAL (LENGTH (CAR REPLIST)) 1) (IDP (CAAR REPLIST))))
             (REDERR "first must be one group element"))))
         (CAR REPLIST))
        (SETQ REPLIST (CDR REPLIST))
        (GO LAB))
      (SETQ ELEMS
              (PROG (REPLIST FORALL-RESULT FORALL-ENDPTR)
                (SETQ REPLIST ELEMREPS)
                (COND ((NULL REPLIST) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS
                                 ((LAMBDA (REPLIST) (CAAR REPLIST))
                                  (CAR REPLIST))
                                 NIL)))
               LOOPLABEL
                (SETQ REPLIST (CDR REPLIST))
                (COND ((NULL REPLIST) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        (CONS ((LAMBDA (REPLIST) (CAAR REPLIST)) (CAR REPLIST))
                              NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (SETQ ELEMS (APPEND (LIST 'ID) ELEMS))
      (SET*ELEMS*GROUP GROUP ELEMS)
      (SET*ELEMASGEN GROUP ELEMREPS)
      (WRITEPRI "setelements finished" 'ONLY))) 
(PUT 'SETELEMENTS 'PSOPFN 'SET_ELEMENTS) 
(PUT 'SET_GROUP_TABLE 'NUMBER-OF-ARGS 1) 
(PUT 'SET_GROUP_TABLE 'DEFINED-ON-LINE '330) 
(PUT 'SET_GROUP_TABLE 'DEFINED-IN-FILE 'SYMMETRY/SYMAUX.RED) 
(PUT 'SET_GROUP_TABLE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SET_GROUP_TABLE (ARG)
    (PROG (TABLE GROUP Z S)
      (COND ((GREATERP (LENGTH ARG) 2) (REDERR "too many arguments")))
      (COND
       ((LESSP (LENGTH ARG) 2)
        (REDERR "missing group or group table as a matrix ")))
      (SETQ GROUP (REVAL1 (CAR ARG) T))
      (COND
       ((NOT (IDP GROUP))
        (REDERR "first argument must be a group identifier")))
      (SETQ TABLE (REVAL1 (CADR ARG) T))
      (COND ((ALG+MATRIX+P TABLE) (SETQ TABLE (MK+INNER+MAT TABLE))))
      (SETQ TABLE
              (PROG (Z FORALL-RESULT FORALL-ENDPTR)
                (SETQ Z TABLE)
                (COND ((NULL Z) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS
                                 ((LAMBDA (Z)
                                    (PROG (S FORALL-RESULT FORALL-ENDPTR)
                                      (SETQ S Z)
                                      (COND ((NULL S) (RETURN NIL)))
                                      (SETQ FORALL-RESULT
                                              (SETQ FORALL-ENDPTR
                                                      (CONS
                                                       ((LAMBDA (S) (PREPSQ S))
                                                        (CAR S))
                                                       NIL)))
                                     LOOPLABEL
                                      (SETQ S (CDR S))
                                      (COND ((NULL S) (RETURN FORALL-RESULT)))
                                      (RPLACD FORALL-ENDPTR
                                              (CONS
                                               ((LAMBDA (S) (PREPSQ S))
                                                (CAR S))
                                               NIL))
                                      (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                                      (GO LOOPLABEL)))
                                  (CAR Z))
                                 NIL)))
               LOOPLABEL
                (SETQ Z (CDR Z))
                (COND ((NULL Z) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        (CONS
                         ((LAMBDA (Z)
                            (PROG (S FORALL-RESULT FORALL-ENDPTR)
                              (SETQ S Z)
                              (COND ((NULL S) (RETURN NIL)))
                              (SETQ FORALL-RESULT
                                      (SETQ FORALL-ENDPTR
                                              (CONS
                                               ((LAMBDA (S) (PREPSQ S))
                                                (CAR S))
                                               NIL)))
                             LOOPLABEL
                              (SETQ S (CDR S))
                              (COND ((NULL S) (RETURN FORALL-RESULT)))
                              (RPLACD FORALL-ENDPTR
                                      (CONS ((LAMBDA (S) (PREPSQ S)) (CAR S))
                                            NIL))
                              (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                              (GO LOOPLABEL)))
                          (CAR Z))
                         NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (COND
       ((|GROUP:TABLE:P| GROUP TABLE)
        (PROGN
         (SET*GROUPTABLE GROUP TABLE)
         (SET*INVERSE GROUP (MK*INVERSE*LIST TABLE))
         (SET*GROUP GROUP (MK*EQUICLASSES TABLE))
         (SET*STORING GROUP)
         NIL))
       (T (REDERR "table is not a group table")))
      (WRITEPRI "setgrouptable finished" 'ONLY))) 
(PUT 'SETGROUPTABLE 'PSOPFN 'SET_GROUP_TABLE) 
(PUT 'SET_REAL_REP 'NUMBER-OF-ARGS 1) 
(PUT 'SET_REAL_REP 'DEFINED-ON-LINE '357) 
(PUT 'SET_REAL_REP 'DEFINED-IN-FILE 'SYMMETRY/SYMAUX.RED) 
(PUT 'SET_REAL_REP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SET_REAL_REP (ARG)
    (PROG (REPLIST TYPE)
      (COND ((GREATERP (LENGTH ARG) 2) (REDERR "too many arguments")))
      (COND ((LESSP (LENGTH ARG) 2) (REDERR "representation or type missing")))
      (SETQ REPLIST (REVAL1 (CAR ARG) T))
      (SETQ TYPE (REVAL1 (CADR ARG) T))
      (COND
       ((AND (NOT (EQUAL TYPE 'REALTYPE)) (NOT (EQUAL TYPE 'COMPLEXTYPE)))
        (REDERR "only real or complex types possible")))
      (COND
       ((EQUAL (GET*ORDER (GET_GROUP_OUT REPLIST)) 0)
        (REDERR "elements of the groups must be set first")))
      (COND
       ((|REPRESENTATION:P| REPLIST) (SETQ REPLIST (MK_INTERNAL REPLIST))))
      (SET*REPRESENTATION (GET_GROUP_IN REPLIST)
       (APPEND (LIST TYPE) (CDR REPLIST)) 'REAL)
      (WRITEPRI "Rsetrepresentation finished" 'ONLY))) 
(PUT 'RSETREPRESENTATION 'PSOPFN 'SET_REAL_REP) 
(PUT 'SET_COMPLEX_REP 'NUMBER-OF-ARGS 1) 
(PUT 'SET_COMPLEX_REP 'DEFINED-ON-LINE '379) 
(PUT 'SET_COMPLEX_REP 'DEFINED-IN-FILE 'SYMMETRY/SYMAUX.RED) 
(PUT 'SET_COMPLEX_REP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SET_COMPLEX_REP (ARG)
    (PROG (REPLIST)
      (COND ((GREATERP (LENGTH ARG) 1) (REDERR "too many arguments")))
      (COND ((LESSP (LENGTH ARG) 1) (REDERR "representation missing")))
      (SETQ REPLIST (REVAL1 (CAR ARG) T))
      (COND
       ((EQUAL (GET*ORDER (GET_GROUP_OUT REPLIST)) 0)
        (REDERR "elements of the groups must be set first")))
      (COND
       ((|REPRESENTATION:P| REPLIST) (SETQ REPLIST (MK_INTERNAL REPLIST))))
      (SET*REPRESENTATION (GET_GROUP_IN REPLIST) (CDR REPLIST) 'COMPLEX)
      (WRITEPRI "Csetrepresentation finished" 'ONLY))) 
(PUT 'CSETREPRESENTATION 'PSOPFN 'SET_COMPLEX_REP) 
(PUT 'MK_AVAILABLE 'NUMBER-OF-ARGS 1) 
(PUT 'MK_AVAILABLE 'DEFINED-ON-LINE '397) 
(PUT 'MK_AVAILABLE 'DEFINED-IN-FILE 'SYMMETRY/SYMAUX.RED) 
(PUT 'MK_AVAILABLE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MK_AVAILABLE (ARG)
    (PROG (GROUP)
      (COND ((GREATERP (LENGTH ARG) 1) (REDERR "too many arguments")))
      (COND ((LESSP (LENGTH ARG) 1) (REDERR "group identifier missing")))
      (SETQ GROUP (REVAL1 (CAR ARG) T))
      (COND ((|CHECK:COMPLETE:REP:P| GROUP) (SET*AVAILABLE GROUP)))
      (WRITEPRI "setavailable finished" 'ONLY))) 
(PUT 'SETAVAILABLE 'PSOPFN 'MK_AVAILABLE) 
(PUT 'UPDATE_NEW_GROUP 'NUMBER-OF-ARGS 1) 
(PUT 'UPDATE_NEW_GROUP 'DEFINED-ON-LINE '412) 
(PUT 'UPDATE_NEW_GROUP 'DEFINED-IN-FILE 'SYMMETRY/SYMAUX.RED) 
(PUT 'UPDATE_NEW_GROUP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE UPDATE_NEW_GROUP (ARG)
    (PROG (GROUP)
      (COND ((GREATERP (LENGTH ARG) 2) (REDERR "too many arguments")))
      (COND ((LESSP (LENGTH ARG) 2) (REDERR "group or filename missing")))
      (SETQ GROUP (REVAL1 (CAR ARG) T))
      (COND
       ((AVAILABLE*P GROUP) (|WRITE:TO:FILE| GROUP (REVAL1 (CADR ARG) T))))
      (WRITEPRI "storegroup finished" 'ONLY))) 
(PUT 'STOREGROUP 'PSOPFN 'UPDATE_NEW_GROUP) 
(PUT 'LOADGROUPS 'NUMBER-OF-ARGS 1) 
(PUT 'LOADGROUPS 'DEFINED-ON-LINE '426) 
(PUT 'LOADGROUPS 'DEFINED-IN-FILE 'SYMMETRY/SYMAUX.RED) 
(PUT 'LOADGROUPS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE LOADGROUPS (FNAME)
    (PROG () (IN (LIST FNAME)) (PROGN (PRIN2 "group loaded") NIL))) 
(ENDMODULE) 