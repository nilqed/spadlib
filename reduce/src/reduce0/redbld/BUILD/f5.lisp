(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'F5)) 
(REVISION 'F5 "$Id: f5.red 6359 2022-07-29 06:13:09Z thomas-sturm $") 
(COPYRIGHT 'F5 "(c) 2022 A. Demin, T. Sturm, MPI Informatics, Germany") 
(CREATE-PACKAGE '(F5 F5CORE F5LP F5POLY F5PARAM F5STAT) NIL) 
(FLUID '(*BACKTRACE)) 
(FLUID '(GLOBAL-DIPVARS*)) 
(FLUID '(VDPSORTMODE*)) 
(SWITCH (LIST (LIST 'EQUAL 'F5FRACTIONFREE 'OFF))) 
(SWITCH (LIST (LIST 'EQUAL 'F5INTERREDUCE 'OFF))) 
(SWITCH (LIST (LIST 'EQUAL 'F5STATISTICS 'OFF))) 
(SWITCH (LIST (LIST 'EQUAL 'F5SUGAR 'ON))) 
(SWITCH (LIST (LIST 'EQUAL 'F5USEF5C 'OFF))) 
(SWITCH (LIST (LIST 'EQUAL 'F5PARAMETRIC 'OFF))) 
(SWITCH (LIST (LIST 'EQUAL 'F5PARAMETRICNORMALIZE 'OFF))) 
(LOAD-PACKAGE 'ASSERT) 
(OFF1 'ASSERT) 
(OFF1 'ASSERT_PROCEDURES) 
(OFF1 'ASSERT_INLINE_PROCEDURES) 
(OFF1 'ASSERTINSTALL) 
(OFF1 'EVALASSERT) 
(LOAD-PACKAGE 'RLTOOLS) 
(PUT 'F5 'PSOPFN 'F5_GROEBNER) 
(FLAG '(F5DUMPASSUMPTIONS) 'OPFN) 
(PUT 'F5DUMPASSUMPTIONS 'NUMBER-OF-ARGS 0) 
(DE F5DUMPASSUMPTIONS NIL (CONS 'LIST (PARAM_DUMPASSUMPTIONS))) 
(PUT 'F5_ISPOLYNOMIAL 'NUMBER-OF-ARGS 1) 
(PUT 'F5_ISPOLYNOMIAL 'DEFINED-ON-LINE '201) 
(PUT 'F5_ISPOLYNOMIAL 'DEFINED-IN-FILE 'F5/F5.RED) 
(PUT 'F5_ISPOLYNOMIAL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE F5_ISPOLYNOMIAL (X) (EQCAR X 'P)) 
(PUT 'F5_ISCOEFF 'NUMBER-OF-ARGS 1) 
(PUT 'F5_ISCOEFF 'DEFINED-ON-LINE '202) 
(PUT 'F5_ISCOEFF 'DEFINED-IN-FILE 'F5/F5.RED) 
(PUT 'F5_ISCOEFF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE F5_ISCOEFF (X) (OR (SQP X) (INTEGERP X))) 
(PUT 'POLYNOMIAL 'ASSERT_DYNTYPECHK 'F5_ISPOLYNOMIAL) 
(FLAG '(POLYNOMIAL) 'ASSERT_DYNTYPE) 
(PUT 'TERMS 'ASSERT_DYNTYPECHK 'LISTP) 
(FLAG '(TERMS) 'ASSERT_DYNTYPE) 
(PUT 'TERM 'ASSERT_DYNTYPECHK 'LISTP) 
(FLAG '(TERM) 'ASSERT_DYNTYPE) 
(PUT 'COEFFS 'ASSERT_DYNTYPECHK 'LISTP) 
(FLAG '(COEFFS) 'ASSERT_DYNTYPE) 
(PUT 'COEFF 'ASSERT_DYNTYPECHK 'F5_ISCOEFF) 
(FLAG '(COEFF) 'ASSERT_DYNTYPE) 
(PUT 'F5_ISLABELEDPOLYNOMIAL 'NUMBER-OF-ARGS 1) 
(PUT 'F5_ISLABELEDPOLYNOMIAL 'DEFINED-ON-LINE '211) 
(PUT 'F5_ISLABELEDPOLYNOMIAL 'DEFINED-IN-FILE 'F5/F5.RED) 
(PUT 'F5_ISLABELEDPOLYNOMIAL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE F5_ISLABELEDPOLYNOMIAL (X) (EQCAR X 'LP)) 
(PUT 'F5_ISSIGNATURE 'NUMBER-OF-ARGS 1) 
(PUT 'F5_ISSIGNATURE 'DEFINED-ON-LINE '212) 
(PUT 'F5_ISSIGNATURE 'DEFINED-IN-FILE 'F5/F5.RED) 
(PUT 'F5_ISSIGNATURE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE F5_ISSIGNATURE (X) (EQCAR X 'SGN)) 
(PUT 'LABELEDPOLYNOMIAL 'ASSERT_DYNTYPECHK 'F5_ISLABELEDPOLYNOMIAL) 
(FLAG '(LABELEDPOLYNOMIAL) 'ASSERT_DYNTYPE) 
(PUT 'SIGNATURE 'ASSERT_DYNTYPECHK 'F5_ISSIGNATURE) 
(FLAG '(SIGNATURE) 'ASSERT_DYNTYPE) 
(PUT 'F5_ISPRIMETRACKER 'NUMBER-OF-ARGS 1) 
(PUT 'F5_ISPRIMETRACKER 'DEFINED-ON-LINE '217) 
(PUT 'F5_ISPRIMETRACKER 'DEFINED-IN-FILE 'F5/F5.RED) 
(PUT 'F5_ISPRIMETRACKER 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE F5_ISPRIMETRACKER (X) (EQCAR X 'PT)) 
(PUT 'PRIMETRACKER 'ASSERT_DYNTYPECHK 'F5_ISPRIMETRACKER) 
(FLAG '(PRIMETRACKER) 'ASSERT_DYNTYPE) 
(PUT 'F5_ISBASISTRACKER 'NUMBER-OF-ARGS 1) 
(PUT 'F5_ISBASISTRACKER 'DEFINED-ON-LINE '221) 
(PUT 'F5_ISBASISTRACKER 'DEFINED-IN-FILE 'F5/F5.RED) 
(PUT 'F5_ISBASISTRACKER 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE F5_ISBASISTRACKER (X) (EQCAR X 'BT)) 
(PUT 'F5_ISCRITICALPAIR 'NUMBER-OF-ARGS 1) 
(PUT 'F5_ISCRITICALPAIR 'DEFINED-ON-LINE '222) 
(PUT 'F5_ISCRITICALPAIR 'DEFINED-IN-FILE 'F5/F5.RED) 
(PUT 'F5_ISCRITICALPAIR 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE F5_ISCRITICALPAIR (X) (OR (NULL X) (EQCAR X 'CP))) 
(PUT 'F5_ISREWRITERULE 'NUMBER-OF-ARGS 1) 
(PUT 'F5_ISREWRITERULE 'DEFINED-ON-LINE '223) 
(PUT 'F5_ISREWRITERULE 'DEFINED-IN-FILE 'F5/F5.RED) 
(PUT 'F5_ISREWRITERULE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE F5_ISREWRITERULE (X) (EQCAR X 'RR)) 
(PUT 'BASISTRACKER 'ASSERT_DYNTYPECHK 'F5_ISBASISTRACKER) 
(FLAG '(BASISTRACKER) 'ASSERT_DYNTYPE) 
(PUT 'CRITICALPAIR 'ASSERT_DYNTYPECHK 'F5_ISCRITICALPAIR) 
(FLAG '(CRITICALPAIR) 'ASSERT_DYNTYPE) 
(PUT 'REWRITERULE 'ASSERT_DYNTYPECHK 'F5_ISREWRITERULE) 
(FLAG '(REWRITERULE) 'ASSERT_DYNTYPE) 
(PUT 'F5_GROEBNER 'NUMBER-OF-ARGS 1) 
(DE F5_GROEBNER (U)
    (PROG (INPUTBASIS F VARS ORD FSQ VARSNUM VARSDEN SAVETORDER W)
      (COND ((OR (NULL U) (NOT (LISTP U))) (F5_ARGUMENTERROR)))
      (SETQ INPUTBASIS (REVAL1 (PROG1 (CAR U) (SETQ U (CDR U))) T))
      (COND
       ((OR (NOT (LISTP INPUTBASIS))
            (NOT
             (EQ (PROG1 (CAR INPUTBASIS) (SETQ INPUTBASIS (CDR INPUTBASIS)))
                 'LIST))
            (NULL INPUTBASIS))
        (F5_ARGUMENTERROR)))
      (SETQ SAVETORDER
              (COND
               ((NOT (NULL U))
                (PROGN
                 (SETQ VARS (REVAL1 (PROG1 (CAR U) (SETQ U (CDR U))) T))
                 (COND
                  ((OR (NOT (LISTP VARS))
                       (NOT
                        (EQ (PROG1 (CAR VARS) (SETQ VARS (CDR VARS))) 'LIST)))
                   (F5_ARGUMENTERROR)))
                 (PROG (VAR)
                   (SETQ VAR VARS)
                  LAB
                   (COND ((NULL VAR) (RETURN NIL)))
                   ((LAMBDA (VAR)
                      (COND ((NOT (SFTO_KERNELP VAR)) (F5_ARGUMENTERROR))))
                    (CAR VAR))
                   (SETQ VAR (CDR VAR))
                   (GO LAB))
                 (SETQ ORD (PROG1 (CAR U) (SETQ U (CDR U))))
                 (POLY_INITRING (LIST VARS ORD))))
               ((NOT (NULL (CDR GLOBAL-DIPVARS*))) (PROGN (POLY_INITRING NIL)))
               (T
                (PROGN
                 (PROG (F)
                   (SETQ F INPUTBASIS)
                  LAB
                   (COND ((NULL F) (RETURN NIL)))
                   ((LAMBDA (F)
                      (PROGN
                       (SETQ FSQ (SIMP F))
                       (SETQ VARSNUM (UNION VARSNUM (KERNELS (CAR FSQ))))
                       (SETQ VARSDEN (UNION VARSDEN (KERNELS (CDR FSQ))))))
                    (CAR F))
                   (SETQ F (CDR F))
                   (GO LAB))
                 (COND
                  (VARSDEN
                   (LPRIM (LIST VARSDEN "implicitly declared as parameters"))))
                 (SETQ VARS (LTO_SETMINUS VARSNUM VARSDEN))
                 (SETQ VARS (SORT VARS 'ORDP))
                 (POLY_INITRING (LIST VARS))))))
      (SETQ W
              (ERRORSET (LIST 'F5_GROEBNERP (MKQUOTE INPUTBASIS)) T
                        *BACKTRACE))
      (TORDER (CDR SAVETORDER))
      (COND ((ERRORP W) (RETURN NIL)))
      (RETURN (CONS 'LIST (CAR W))))) 
(PUT 'F5_GROEBNERP 'NUMBER-OF-ARGS 1) 
(DE F5_GROEBNERP (INPUTBASISLP)
    (PROG (BASIS)
      (SETQ BASIS
              (F5_GROEBNERPOLY
               (PROG (F FORALL-RESULT FORALL-ENDPTR)
                 (SETQ F INPUTBASISLP)
                 (COND ((NULL F) (RETURN NIL)))
                 (SETQ FORALL-RESULT
                         (SETQ FORALL-ENDPTR
                                 (CONS
                                  ((LAMBDA (F) (POLY_SQ2POLY (SIMP F)))
                                   (CAR F))
                                  NIL)))
                LOOPLABEL
                 (SETQ F (CDR F))
                 (COND ((NULL F) (RETURN FORALL-RESULT)))
                 (RPLACD FORALL-ENDPTR
                         (CONS ((LAMBDA (F) (POLY_SQ2POLY (SIMP F))) (CAR F))
                               NIL))
                 (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                 (GO LOOPLABEL))))
      (RETURN
       (PROG (F FORALL-RESULT FORALL-ENDPTR)
         (SETQ F BASIS)
         (COND ((NULL F) (RETURN NIL)))
         (SETQ FORALL-RESULT
                 (SETQ FORALL-ENDPTR
                         (CONS ((LAMBDA (F) (POLY_POLY2LP F)) (CAR F)) NIL)))
        LOOPLABEL
         (SETQ F (CDR F))
         (COND ((NULL F) (RETURN FORALL-RESULT)))
         (RPLACD FORALL-ENDPTR
                 (CONS ((LAMBDA (F) (POLY_POLY2LP F)) (CAR F)) NIL))
         (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
         (GO LOOPLABEL))))) 
(PUT 'F5_GROEBNERF 'NUMBER-OF-ARGS 1) 
(DE F5_GROEBNERF (INPUTBASISSF)
    (PROG (BASIS)
      (SETQ BASIS
              (F5_GROEBNERQ
               (PROG (F FORALL-RESULT FORALL-ENDPTR)
                 (SETQ F INPUTBASISSF)
                 (COND ((NULL F) (RETURN NIL)))
                 (SETQ FORALL-RESULT
                         (SETQ FORALL-ENDPTR
                                 (CONS ((LAMBDA (F) (CONS F 1)) (CAR F)) NIL)))
                LOOPLABEL
                 (SETQ F (CDR F))
                 (COND ((NULL F) (RETURN FORALL-RESULT)))
                 (RPLACD FORALL-ENDPTR
                         (CONS ((LAMBDA (F) (CONS F 1)) (CAR F)) NIL))
                 (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                 (GO LOOPLABEL))))
      (RETURN
       (PROG (F FORALL-RESULT FORALL-ENDPTR)
         (SETQ F BASIS)
         (COND ((NULL F) (RETURN NIL)))
         (SETQ FORALL-RESULT
                 (SETQ FORALL-ENDPTR
                         (CONS ((LAMBDA (F) (CAR F)) (CAR F)) NIL)))
        LOOPLABEL
         (SETQ F (CDR F))
         (COND ((NULL F) (RETURN FORALL-RESULT)))
         (RPLACD FORALL-ENDPTR (CONS ((LAMBDA (F) (CAR F)) (CAR F)) NIL))
         (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
         (GO LOOPLABEL))))) 
(PUT 'F5_GROEBNERQ 'NUMBER-OF-ARGS 1) 
(DE F5_GROEBNERQ (INPUTBASISSQ)
    (PROG (BASIS)
      (SETQ BASIS
              (F5_GROEBNERPOLY
               (PROG (F FORALL-RESULT FORALL-ENDPTR)
                 (SETQ F INPUTBASISSQ)
                 (COND ((NULL F) (RETURN NIL)))
                 (SETQ FORALL-RESULT
                         (SETQ FORALL-ENDPTR
                                 (CONS ((LAMBDA (F) (POLY_SQ2POLY F)) (CAR F))
                                       NIL)))
                LOOPLABEL
                 (SETQ F (CDR F))
                 (COND ((NULL F) (RETURN FORALL-RESULT)))
                 (RPLACD FORALL-ENDPTR
                         (CONS ((LAMBDA (F) (POLY_SQ2POLY F)) (CAR F)) NIL))
                 (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                 (GO LOOPLABEL))))
      (RETURN
       (PROG (F FORALL-RESULT FORALL-ENDPTR)
         (SETQ F BASIS)
         (COND ((NULL F) (RETURN NIL)))
         (SETQ FORALL-RESULT
                 (SETQ FORALL-ENDPTR
                         (CONS ((LAMBDA (F) (POLY_POLY2SQ F)) (CAR F)) NIL)))
        LOOPLABEL
         (SETQ F (CDR F))
         (COND ((NULL F) (RETURN FORALL-RESULT)))
         (RPLACD FORALL-ENDPTR
                 (CONS ((LAMBDA (F) (POLY_POLY2SQ F)) (CAR F)) NIL))
         (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
         (GO LOOPLABEL))))) 
(PUT 'F5_GROEBNERPOLY 'NUMBER-OF-ARGS 1) 
(DE F5_GROEBNERPOLY (INPUTBASIS)
    (PROG (INPUTMODULE OUTPUTMODULE PROPERIDEAL W P)
      (SETQ W INPUTBASIS)
      (SETQ INPUTBASIS NIL)
      (SETQ PROPERIDEAL T)
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND PROPERIDEAL W)) (RETURN NIL)))
        (PROGN
         (SETQ P (PROG1 (CAR W) (SETQ W (CDR W))))
         (COND
          ((NOT (POLY_ISZERO? P))
           (PROGN
            (PROGN (SETQ INPUTBASIS (CONS P INPUTBASIS)) P)
            (COND ((POLY_ISCONST? P) (SETQ PROPERIDEAL NIL)))))))
        (GO WHILELABEL))
      (COND ((NOT PROPERIDEAL) (RETURN (LIST (POLY_ONE)))))
      (COND ((NULL INPUTBASIS) (RETURN (LIST (POLY_ZERO)))))
      (COND (*F5PARAMETRIC (PROGN (PARAM_CLEARASSUMPTIONS))))
      (SETQ INPUTMODULE (CORE_CONSTRUCTMODULE INPUTBASIS))
      (SETQ OUTPUTMODULE (CORE_GROEBNER1 INPUTMODULE))
      (RETURN
       (PROG (P FORALL-RESULT FORALL-ENDPTR)
         (SETQ P OUTPUTMODULE)
         (COND ((NULL P) (RETURN NIL)))
         (SETQ FORALL-RESULT
                 (SETQ FORALL-ENDPTR
                         (CONS ((LAMBDA (P) (LP_EVAL P)) (CAR P)) NIL)))
        LOOPLABEL
         (SETQ P (CDR P))
         (COND ((NULL P) (RETURN FORALL-RESULT)))
         (RPLACD FORALL-ENDPTR (CONS ((LAMBDA (P) (LP_EVAL P)) (CAR P)) NIL))
         (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
         (GO LOOPLABEL))))) 
(PUT 'F5_ARGUMENTERROR 'NUMBER-OF-ARGS 0) 
(DE F5_ARGUMENTERROR NIL
    (REDERR "usage: f5(polynomials: List, vars: List, order: Any). For example,

          > f5({x*y + 1, y*z + 1}, {x, y, z}, lex);

          Or, using torder:

          > torder({x, y, z}, lex);
          > f5({x*y + 1, y*z + 1});
          ")) 
(ENDMODULE) 