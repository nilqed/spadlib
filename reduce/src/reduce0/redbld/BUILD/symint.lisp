(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'SYMINT)) 
(FLUID '(*FAILHARD *INTDFFOUND)) 
(SWITCH (LIST 'COMMUTEINT)) 
(DEFLIST '((COMMUTEINT ((T (RMSUBS))))) 'SIMPFG) 
(SWITCH (LIST 'PARTIALINT 'PARTIALINTDF 'PARTIALINTINT)) 
(DEFLIST
 '((PARTIALINT
    ((T (ON '(PARTIALINTDF PARTIALINTINT)))
     (NIL (OFF '(PARTIALINTDF PARTIALINTINT)))))
   (PARTIALINTDF ((T (RMSUBS)))) (PARTIALINTINT ((T (RMSUBS)))))
 'SIMPFG) 
(SWITCH (LIST 'XPARTIALINT 'XPARTIALINTDF 'XPARTIALINTINT)) 
(DEFLIST
 '((XPARTIALINT
    ((T (ON '(XPARTIALINTDF XPARTIALINTINT)))
     (NIL (OFF '(XPARTIALINTDF XPARTIALINTINT)))))
   (XPARTIALINTDF ((T (RMSUBS)))) (XPARTIALINTINT ((T (RMSUBS)))))
 'SIMPFG) 
(PUT 'SYMINT 'NUMBER-OF-ARGS 1) 
(PUT 'SYMINT 'DEFINED-ON-LINE '88) 
(PUT 'SYMINT 'DEFINED-IN-FILE 'INT/SYMINT.RED) 
(PUT 'SYMINT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SYMINT (U)
    (PROG (V Y X)
      (SETQ Y (CADR U))
      (SETQ X (CADDR U))
      (COND ((SETQ V (NESTEDINTDF Y X NIL)) (RETURN (MKSQ V 1))))
      (COND (*FAILHARD (RERROR 'INT 4 "FAILHARD switch set")))
      (COND
       ((AND (OR *PARTIALINTDF *PARTIALINTINT) (SETQ V (PARTIALINT Y X)))
        (RETURN (MKSQ V 1))))
      (COND
       ((AND (OR *XPARTIALINTDF *XPARTIALINTINT) (SETQ V (XPARTIALINT Y X)))
        (RETURN (MKSQ V 1))))
      (RETURN (MKSQ U 1)))) 
(PUT 'NESTEDINTDF 'NUMBER-OF-ARGS 3) 
(PUT 'NESTEDINTDF 'DEFINED-ON-LINE '129) 
(PUT 'NESTEDINTDF 'DEFINED-IN-FILE 'INT/SYMINT.RED) 
(PUT 'NESTEDINTDF 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE NESTEDINTDF (Y X *RECURSIVE)
    (AND (NOT (ATOM Y))
         (PROG (FN NESTED)
           (RETURN
            (COND
             ((EQ (SETQ FN (CAR Y)) 'DF)
              (COND ((SETQ NESTED (INTDF Y X)) NESTED)
                    ((SETQ NESTED (NESTEDINTDF (CADR Y) X T))
                     (CONS FN (CONS NESTED (CDDR Y))))
                    (T NIL)))
             (*FAILHARD NIL)
             ((EQ FN 'INT)
              (COND ((EQ X (CADDR Y)) NIL)
                    ((SETQ NESTED (NESTEDINTDF (CADR Y) X T))
                     (CONS FN (CONS NESTED (CDDR Y))))
                    ((AND *COMMUTEINT (ORDP X (CADDR Y)))
                     (LIST 'INT (LIST 'INT (CADR Y) X) (CADDR Y)))
                    (T NIL)))
             ((AND *RECURSIVE *COMMUTEINT
                   (NOT (EQCAR (SETQ NESTED (REVAL1 (LIST 'INT Y X) T)) 'INT)))
              NESTED)))))) 
(PUT 'INTDF 'NUMBER-OF-ARGS 2) 
(PUT 'INTDF 'DEFINED-ON-LINE '174) 
(PUT 'INTDF 'DEFINED-IN-FILE 'INT/SYMINT.RED) 
(PUT 'INTDF 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE INTDF (Y X)
    (PROG (*INTDFFOUND)
      (SETQ X (INTDFVARS (CDDR Y) X))
      (COND
       (*INTDFFOUND
        (RETURN (COND (X (CONS 'DF (CONS (CADR Y) X))) (T (CADR Y)))))))) 
(PUT 'INTDFVARS 'NUMBER-OF-ARGS 2) 
(PUT 'INTDFVARS 'DEFINED-ON-LINE '183) 
(PUT 'INTDFVARS 'DEFINED-IN-FILE 'INT/SYMINT.RED) 
(PUT 'INTDFVARS 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE INTDFVARS (Y X)
    (COND
     (Y
      (COND
       ((EQ (CAR Y) X)
        (PROG (N)
          (SETQ *INTDFFOUND T)
          (RETURN
           (COND
            ((AND (SETQ Y (CDR Y)) (FIXP (SETQ N (CAR Y))))
             (PROGN
              (SETQ Y (CDR Y))
              (COND ((GREATERP N 2) (SETQ Y (CONS (DIFFERENCE N 1) Y))))
              (CONS X Y)))
            (T Y)))))
       (T (CONS (CAR Y) (INTDFVARS (CDR Y) X))))))) 
(PUT 'PARTIALINT 'NUMBER-OF-ARGS 2) 
(PUT 'PARTIALINT 'DEFINED-ON-LINE '198) 
(PUT 'PARTIALINT 'DEFINED-IN-FILE 'INT/SYMINT.RED) 
(PUT 'PARTIALINT 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE PARTIALINT (Y X)
    (AND (NOT (ATOM Y))
         (PROG (DENLIST FACLIST FACS DF_OR_INT RESULT)
           (COND
            ((EQ (CAR Y) 'QUOTIENT)
             (PROGN
              (SETQ DENLIST (CDDR Y))
              (COND ((ATOM (SETQ Y (CADR Y))) (RETURN NIL))))))
           (COND ((EQ (CAR Y) 'TIMES) (SETQ Y (CDR Y)))
                 ((OR DENLIST *PARTIALINTINT) (SETQ Y (CONS Y NIL)))
                 (T (RETURN NIL)))
           (SETQ FACLIST Y)
          CONTINUE
           (PROG ()
            WHILELABEL
             (COND
              ((NOT
                (AND FACLIST
                     (OR (ATOM (SETQ DF_OR_INT (CAR FACLIST)))
                         (NOT
                          (AND (MEMQ (CAR DF_OR_INT) '(DF INT))
                               (MEMQ X (CDDR DF_OR_INT)))))))
               (RETURN NIL)))
             (SETQ FACLIST (CDR FACLIST))
             (GO WHILELABEL))
           (COND ((NULL FACLIST) (RETURN NIL)))
           (SETQ FACS (DELETE DF_OR_INT Y))
           (SETQ FACS
                   (COND ((NULL FACS) 1) ((CDR FACS) (CONS 'TIMES FACS))
                         (T (CAR FACS))))
           (COND (DENLIST (SETQ FACS (CONS 'QUOTIENT (CONS FACS DENLIST)))))
           (COND
            ((EQ (CAR DF_OR_INT) 'DF)
             (COND
              ((AND *PARTIALINTDF
                    (SETQ RESULT (PARTIALINTDF FACS DF_OR_INT X)))
               (RETURN RESULT))))
            (T
             (COND
              ((AND *PARTIALINTINT
                    (SETQ RESULT (PARTIALINTINT DF_OR_INT FACS X)))
               (RETURN RESULT)))))
           (SETQ FACLIST (CDR FACLIST))
           (GO CONTINUE)))) 
(PUT 'PARTIALINTDF 'NUMBER-OF-ARGS 3) 
(PUT 'PARTIALINTDF 'DEFINED-ON-LINE '244) 
(PUT 'PARTIALINTDF 'DEFINED-IN-FILE 'INT/SYMINT.RED) 
(PUT 'PARTIALINTDF 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE PARTIALINTDF (U DF_V X)
    (PROG (V)
      (SETQ V (INTDF DF_V X))
      (COND ((SMEMQ 'DF (SETQ DF_V (REVAL1 (LIST 'DF U X) T))) (RETURN NIL)))
      (RETURN
       (REVAL1
        (LIST 'DIFFERENCE (LIST 'TIMES U V) (LIST 'INT (LIST 'TIMES DF_V V) X))
        T)))) 
(PUT 'PARTIALINTINT 'NUMBER-OF-ARGS 3) 
(PUT 'PARTIALINTINT 'DEFINED-ON-LINE '257) 
(PUT 'PARTIALINTINT 'DEFINED-IN-FILE 'INT/SYMINT.RED) 
(PUT 'PARTIALINTINT 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE PARTIALINTINT (INT_U V X)
    (PROG (U)
      (SETQ U (CADR INT_U))
      (COND ((EQCAR (SETQ V (REVAL1 (LIST 'INT V X) T)) 'INT) (RETURN NIL)))
      (RETURN
       (REVAL1
        (LIST 'DIFFERENCE (LIST 'TIMES INT_U V)
              (LIST 'INT (LIST 'TIMES U V) X))
        T)))) 
(PUT 'XPARTIALINT 'NUMBER-OF-ARGS 2) 
(PUT 'XPARTIALINT 'DEFINED-ON-LINE '272) 
(PUT 'XPARTIALINT 'DEFINED-IN-FILE 'INT/SYMINT.RED) 
(PUT 'XPARTIALINT 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE XPARTIALINT (Y X)
    (AND (NOT (ATOM Y))
         (PROG (DENLIST FACLIST FACS INT RESULT)
           (COND
            ((EQ (CAR Y) 'QUOTIENT)
             (PROGN
              (SETQ DENLIST (CDDR Y))
              (COND ((ATOM (SETQ Y (CADR Y))) (RETURN NIL))))))
           (COND ((EQ (CAR Y) 'TIMES) (SETQ Y (CDR Y)))
                 (DENLIST (SETQ Y (CONS Y NIL))) (T (RETURN NIL)))
           (SETQ FACLIST Y)
          CONTINUE
           (PROG ()
            WHILELABEL
             (COND
              ((NOT
                (AND FACLIST
                     (OR (NOT (EQCAR (SETQ INT (CAR FACLIST)) 'INT))
                         (EQ X (CADDR INT)))))
               (RETURN NIL)))
             (SETQ FACLIST (CDR FACLIST))
             (GO WHILELABEL))
           (COND ((NULL FACLIST) (RETURN NIL)))
           (SETQ FACS (DELETE INT Y))
           (SETQ FACS
                   (COND ((NULL FACS) 1) ((CDR FACS) (CONS 'TIMES FACS))
                         (T (CAR FACS))))
           (COND (DENLIST (SETQ FACS (CONS 'QUOTIENT (CONS FACS DENLIST)))))
           (COND ((EQUAL FACS 1) (RETURN NIL)))
           (COND
            ((SETQ RESULT
                     (OR (AND *XPARTIALINTDF (XPARTIALINTDF INT FACS X))
                         (AND *XPARTIALINTINT (XPARTIALINTINT INT FACS X))))
             (RETURN RESULT)))
           (SETQ FACLIST (CDR FACLIST))
           (GO CONTINUE)))) 
(PUT 'XPARTIALINTDF 'NUMBER-OF-ARGS 3) 
(PUT 'XPARTIALINTDF 'DEFINED-ON-LINE '314) 
(PUT 'XPARTIALINTDF 'DEFINED-IN-FILE 'INT/SYMINT.RED) 
(PUT 'XPARTIALINTDF 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE XPARTIALINTDF (INT_U V X)
    (PROG (DF_V Z)
      (COND ((SMEMQ 'DF (SETQ DF_V (REVAL1 (LIST 'DF V X) T))) (RETURN NIL)))
      (SETQ Z (CADDR INT_U))
      (SETQ INT_U (REVAL1 (LIST 'INT (CADR INT_U) X) T))
      (COND ((EQCAR INT_U 'INT) (RETURN NIL)))
      (SETQ INT_U (REVAL1 (LIST 'INT INT_U Z) T))
      (RETURN
       (REVAL1
        (LIST 'DIFFERENCE (LIST 'TIMES INT_U V)
              (LIST 'INT (LIST 'TIMES INT_U DF_V) X))
        T)))) 
(PUT 'XPARTIALINTINT 'NUMBER-OF-ARGS 3) 
(PUT 'XPARTIALINTINT 'DEFINED-ON-LINE '331) 
(PUT 'XPARTIALINTINT 'DEFINED-IN-FILE 'INT/SYMINT.RED) 
(PUT 'XPARTIALINTINT 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE XPARTIALINTINT (INT_U V X)
    (PROG (U)
      (SETQ U (CADR INT_U))
      (COND ((EQCAR (SETQ V (REVAL1 (LIST 'INT V X) T)) 'INT) (RETURN NIL)))
      (COND ((SMEMQ 'DF (SETQ U (REVAL1 (LIST 'DF U X) T))) (RETURN NIL)))
      (COND
       ((EQCAR (SETQ U (REVAL1 (LIST 'INT U (CADDR INT_U)) T)) 'INT)
        (RETURN NIL)))
      (RETURN
       (REVAL1
        (LIST 'DIFFERENCE (LIST 'TIMES INT_U V)
              (LIST 'INT (LIST 'TIMES U V) X))
        T)))) 
(ENDMODULE) 