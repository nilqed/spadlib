(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'GENMOD)) 
(FLUID '(*BALANCED_MOD CURRENT-MODULUS MODULUS/2)) 
(GLOBAL '(LARGEST-SMALL-MODULUS)) 
(PUT 'SET-GENERAL-MODULUS 'NUMBER-OF-ARGS 1) 
(PUT 'SET-GENERAL-MODULUS 'DEFINED-ON-LINE '40) 
(PUT 'SET-GENERAL-MODULUS 'DEFINED-IN-FILE 'RTOOLS/GENMOD.RED) 
(PUT 'SET-GENERAL-MODULUS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SET-GENERAL-MODULUS (P)
    (COND ((OR (NOT (NUMBERP P)) (EQUAL P 0)) CURRENT-MODULUS)
          (T
           (PROG (PREVIOUS-MODULUS)
             (SETQ PREVIOUS-MODULUS CURRENT-MODULUS)
             (SETQ CURRENT-MODULUS P)
             (SETQ MODULUS/2 (QUOTIENT P 2))
             (COND ((LEQ P LARGEST-SMALL-MODULUS) (SET-SMALL-MODULUS P)))
             (RETURN PREVIOUS-MODULUS))))) 
(PUT 'GENERAL-MODULAR-PLUS 'NUMBER-OF-ARGS 2) 
(PUT 'GENERAL-MODULAR-PLUS 'DEFINED-ON-LINE '52) 
(PUT 'GENERAL-MODULAR-PLUS 'DEFINED-IN-FILE 'RTOOLS/GENMOD.RED) 
(PUT 'GENERAL-MODULAR-PLUS 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE GENERAL-MODULAR-PLUS (A B)
    (PROG (RESULT)
      (SETQ RESULT (PLUS A B))
      (COND
       ((GEQ RESULT CURRENT-MODULUS)
        (SETQ RESULT (DIFFERENCE RESULT CURRENT-MODULUS))))
      (RETURN RESULT))) 
(PUT 'GENERAL-MODULAR-DIFFERENCE 'NUMBER-OF-ARGS 2) 
(PUT 'GENERAL-MODULAR-DIFFERENCE 'DEFINED-ON-LINE '59) 
(PUT 'GENERAL-MODULAR-DIFFERENCE 'DEFINED-IN-FILE 'RTOOLS/GENMOD.RED) 
(PUT 'GENERAL-MODULAR-DIFFERENCE 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE GENERAL-MODULAR-DIFFERENCE (A B)
    (PROG (RESULT)
      (SETQ RESULT (DIFFERENCE A B))
      (COND ((LESSP RESULT 0) (SETQ RESULT (PLUS RESULT CURRENT-MODULUS))))
      (RETURN RESULT))) 
(PUT 'GENERAL-MODULAR-NUMBER 'NUMBER-OF-ARGS 1) 
(PUT 'GENERAL-MODULAR-NUMBER 'DEFINED-ON-LINE '66) 
(PUT 'GENERAL-MODULAR-NUMBER 'DEFINED-IN-FILE 'RTOOLS/GENMOD.RED) 
(PUT 'GENERAL-MODULAR-NUMBER 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE GENERAL-MODULAR-NUMBER (A)
    (PROG ()
      (SETQ A (REMAINDER A CURRENT-MODULUS))
      (COND ((LESSP A 0) (SETQ A (PLUS A CURRENT-MODULUS))))
      (RETURN A))) 
(PUT 'GENERAL-MODULAR-TIMES 'NUMBER-OF-ARGS 2) 
(PUT 'GENERAL-MODULAR-TIMES 'DEFINED-ON-LINE '73) 
(PUT 'GENERAL-MODULAR-TIMES 'DEFINED-IN-FILE 'RTOOLS/GENMOD.RED) 
(PUT 'GENERAL-MODULAR-TIMES 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE GENERAL-MODULAR-TIMES (A B)
    (PROG (RESULT)
      (SETQ RESULT (REMAINDER (TIMES A B) CURRENT-MODULUS))
      (COND ((LESSP RESULT 0) (SETQ RESULT (PLUS RESULT CURRENT-MODULUS))))
      (RETURN RESULT))) 
(PUT 'GENERAL-MODULAR-RECIPROCAL 'NUMBER-OF-ARGS 1) 
(PUT 'GENERAL-MODULAR-RECIPROCAL 'DEFINED-ON-LINE '81) 
(PUT 'GENERAL-MODULAR-RECIPROCAL 'DEFINED-IN-FILE 'RTOOLS/GENMOD.RED) 
(PUT 'GENERAL-MODULAR-RECIPROCAL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE GENERAL-MODULAR-RECIPROCAL (A)
    (COND
     ((AND *BALANCED_MOD (LESSP A 0))
      (GENERAL-RECIPROCAL-BY-GCD CURRENT-MODULUS (PLUS A CURRENT-MODULUS) 0 1))
     (T (GENERAL-RECIPROCAL-BY-GCD CURRENT-MODULUS A 0 1)))) 
(PUT 'GENERAL-MODULAR-QUOTIENT 'NUMBER-OF-ARGS 2) 
(PUT 'GENERAL-MODULAR-QUOTIENT 'DEFINED-ON-LINE '88) 
(PUT 'GENERAL-MODULAR-QUOTIENT 'DEFINED-IN-FILE 'RTOOLS/GENMOD.RED) 
(PUT 'GENERAL-MODULAR-QUOTIENT 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE GENERAL-MODULAR-QUOTIENT (A B)
    (GENERAL-MODULAR-TIMES A (GENERAL-MODULAR-RECIPROCAL B))) 
(PUT 'GENERAL-MODULAR-MINUS 'NUMBER-OF-ARGS 1) 
(PUT 'GENERAL-MODULAR-MINUS 'DEFINED-ON-LINE '91) 
(PUT 'GENERAL-MODULAR-MINUS 'DEFINED-IN-FILE 'RTOOLS/GENMOD.RED) 
(PUT 'GENERAL-MODULAR-MINUS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE GENERAL-MODULAR-MINUS (A)
    (COND ((EQUAL A 0) A) (T (DIFFERENCE CURRENT-MODULUS A)))) 
(PUT 'GENERAL-RECIPROCAL-BY-GCD 'NUMBER-OF-ARGS 4) 
(PUT 'GENERAL-RECIPROCAL-BY-GCD 'DEFINED-ON-LINE '113) 
(PUT 'GENERAL-RECIPROCAL-BY-GCD 'DEFINED-IN-FILE 'RTOOLS/GENMOD.RED) 
(PUT 'GENERAL-RECIPROCAL-BY-GCD 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE GENERAL-RECIPROCAL-BY-GCD (A B X Y)
    (PROG (W TMP)
     TOP
      (COND ((EQUAL B 0) (RETURN (RERROR 'ALG 8 "Invalid modular division")))
            ((EQUAL B 1)
             (RETURN (COND ((LESSP Y 0) (PLUS Y CURRENT-MODULUS)) (T Y)))))
      (SETQ W (QUOTIENT A B))
      (SETQ TMP A)
      (SETQ A B)
      (SETQ B (DIFFERENCE TMP (TIMES B W)))
      (SETQ TMP X)
      (SETQ X Y)
      (SETQ Y (DIFFERENCE TMP (TIMES Y W)))
      (GO TOP))) 
(PUT 'REVERSE-NUM 'NUMBER-OF-ARGS 1) 
(PUT 'REVERSE-NUM 'DEFINED-ON-LINE '142) 
(PUT 'REVERSE-NUM 'DEFINED-IN-FILE 'RTOOLS/GENMOD.RED) 
(PUT 'REVERSE-NUM 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REVERSE-NUM (N)
    (COND ((EQUAL N 0) N)
          ((LESSP N 0)
           (MINUS (REVERSE-NUM1 (MINUS N) (PLUS (ILOG2 (MINUS N)) 1))))
          (T (REVERSE-NUM1 N (PLUS (ILOG2 N) 1))))) 
(GLOBAL '(REVERSE-NUM-TABLE*)) 
(SETQ REVERSE-NUM-TABLE* (MKVECT 16)) 
(PUTV REVERSE-NUM-TABLE* 1 8) 
(PUTV REVERSE-NUM-TABLE* 2 4) 
(PUTV REVERSE-NUM-TABLE* 3 12) 
(PUTV REVERSE-NUM-TABLE* 4 2) 
(PUTV REVERSE-NUM-TABLE* 5 10) 
(PUTV REVERSE-NUM-TABLE* 6 6) 
(PUTV REVERSE-NUM-TABLE* 7 14) 
(PUTV REVERSE-NUM-TABLE* 8 1) 
(PUTV REVERSE-NUM-TABLE* 9 9) 
(PUTV REVERSE-NUM-TABLE* 10 5) 
(PUTV REVERSE-NUM-TABLE* 11 13) 
(PUTV REVERSE-NUM-TABLE* 12 3) 
(PUTV REVERSE-NUM-TABLE* 13 11) 
(PUTV REVERSE-NUM-TABLE* 14 7) 
(PUTV REVERSE-NUM-TABLE* 15 15) 
(PUT 'REVERSE-NUM1 'NUMBER-OF-ARGS 2) 
(PUT 'REVERSE-NUM1 'DEFINED-ON-LINE '166) 
(PUT 'REVERSE-NUM1 'DEFINED-IN-FILE 'RTOOLS/GENMOD.RED) 
(PUT 'REVERSE-NUM1 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE REVERSE-NUM1 (N BITS)
    (COND ((EQUAL N 0) 0) ((EQUAL BITS 1) N)
          ((EQUAL BITS 2) (GETV REVERSE-NUM-TABLE* (TIMES 4 N)))
          ((EQUAL BITS 3) (GETV REVERSE-NUM-TABLE* (TIMES 2 N)))
          ((EQUAL BITS 4) (GETV REVERSE-NUM-TABLE* N))
          (T
           (PROG (SHIFT QR)
             (SETQ SHIFT (EXPT 2 (QUOTIENT BITS 2)))
             (SETQ QR (DIVIDE N SHIFT))
             (COND ((NOT (EVENP BITS)) (SETQ SHIFT (TIMES SHIFT 2))))
             (RETURN
              (PLUS (TIMES (REVERSE-NUM1 (CDR QR) (QUOTIENT BITS 2)) SHIFT)
                    (REVERSE-NUM1 (CAR QR) (QUOTIENT (PLUS BITS 1) 2)))))))) 
(FLAG '(REVERSE-NUM) 'INTEGER) 
(DEFLIST '((REVERSE-NUM RNREVERSE-NUM*)) '|:RN:|) 
(PUT 'REVERSE-NUM 'NUMBER-OF-ARGS 1) 
(PUT 'REVERSE-NUM 'SIMPFN 'SIMPIDEN) 
(PUT 'RNREVERSE-NUM* 'NUMBER-OF-ARGS 1) 
(PUT 'RNREVERSE-NUM* 'DEFINED-ON-LINE '192) 
(PUT 'RNREVERSE-NUM* 'DEFINED-IN-FILE 'RTOOLS/GENMOD.RED) 
(PUT 'RNREVERSE-NUM* 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RNREVERSE-NUM* (X)
    ((LAMBDA (Y)
       (COND ((FIXP Y) (REVERSE-NUM Y))
             (T (LIST (CONS (GETPOWER (FKERN (LIST 'REVERSE-NUM Y)) 1) 1)))))
     (RNFIXCHK X))) 
(PUT 'REVERSE-NUM 'SIMPFN 'SIMPREVERSE-NUM) 
(PUT 'SIMPREVERSE-NUM 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPREVERSE-NUM 'DEFINED-ON-LINE '201) 
(PUT 'SIMPREVERSE-NUM 'DEFINED-IN-FILE 'RTOOLS/GENMOD.RED) 
(PUT 'SIMPREVERSE-NUM 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPREVERSE-NUM (U)
    (PROG (ARG)
      (COND ((NEQ (LENGTH U) 1) (TYPERR U "integer")))
      (SETQ ARG (SIMP (CAR U)))
      (COND
       ((OR (NEQ (CDR ARG) 1) (NOT (FIXP (CAR ARG))))
        (REDERR "reverse!-num: argument should be an integer")))
      (RETURN (CONS (REVERSE-NUM (CAR ARG)) 1)))) 
(PUT 'GENERAL-MODULAR-EXPT 'NUMBER-OF-ARGS 2) 
(PUT 'GENERAL-MODULAR-EXPT 'DEFINED-ON-LINE '216) 
(PUT 'GENERAL-MODULAR-EXPT 'DEFINED-IN-FILE 'RTOOLS/GENMOD.RED) 
(PUT 'GENERAL-MODULAR-EXPT 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE GENERAL-MODULAR-EXPT (A N)
    (COND
     ((EQUAL A 0) (COND ((EQUAL N 0) (RERROR 'ALG 101 "0^0 formed")) (T 0)))
     ((EQUAL N 0) 1) ((EQUAL N 1) A)
     ((AND (GEQ N (DIFFERENCE CURRENT-MODULUS 1)) (PRIMEP CURRENT-MODULUS))
      (GENERAL-MODULAR-EXPT A (REMAINDER N (DIFFERENCE CURRENT-MODULUS 1))))
     (T
      (PROG (X REVN)
        (PROG ()
         WHILELABEL
          (COND ((NOT (EVENP N)) (RETURN NIL)))
          (PROGN (SETQ N (QUOTIENT N 2)) (SETQ A (GENERAL-MODULAR-TIMES A A)))
          (GO WHILELABEL))
        (SETQ REVN (REVERSE-NUM N))
        (SETQ X 1)
        (PROG ()
         WHILELABEL
          (COND ((NOT (GREATERP REVN 0)) (RETURN NIL)))
          (PROGN
           (SETQ X (GENERAL-MODULAR-TIMES X X))
           (COND ((NOT (EVENP REVN)) (SETQ X (GENERAL-MODULAR-TIMES X A))))
           (SETQ REVN (QUOTIENT REVN 2)))
          (GO WHILELABEL))
        (RETURN X))))) 
(ENDMODULE) 