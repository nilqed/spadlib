(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'CFUTIL)) 
(PUT 'FIX-NEGATIVE 'NUMBER-OF-ARGS 1) 
(PUT 'FIX-NEGATIVE 'DEFINED-ON-LINE '36) 
(PUT 'FIX-NEGATIVE 'DEFINED-IN-FILE 'RATAPRX/CFUTIL.RED) 
(PUT 'FIX-NEGATIVE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FIX-NEGATIVE (N)
    (COND ((NUMBERP N) (COND ((LESSP N 0) (CONS (MINUS N) T)) (T (LIST N))))
          ((EQCAR N 'MINUS) (CONS (CADR N) T)) (T (LIST N)))) 
(PUT 'PRINT-CONTFRACT 'NUMBER-OF-ARGS 1) 
(PUT 'PRINT-CONTFRACT 'DEFINED-ON-LINE '41) 
(PUT 'PRINT-CONTFRACT 'DEFINED-IN-FILE 'RATAPRX/CFUTIL.RED) 
(PUT 'PRINT-CONTFRACT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PRINT-CONTFRACT (X)
    (COND
     ((OR (NULL *NAT) (ATOM X) (LESSP (LENGTH X) 4)
          (NOT (EQCAR (CADDDR X) 'LIST)))
      'FAILED)
     (T (PROGN (MAPRIN (REFORM-CONTFRACT X)) T)))) 
(PUT 'CONTFRAC 'PRIFN 'PRINT-CONTFRACT) 
(PUT 'REFORM-CONTFRACT 'NUMBER-OF-ARGS 1) 
(PUT 'REFORM-CONTFRACT 'DEFINED-ON-LINE '49) 
(PUT 'REFORM-CONTFRACT 'DEFINED-IN-FILE 'RATAPRX/CFUTIL.RED) 
(PUT 'REFORM-CONTFRACT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REFORM-CONTFRACT (X)
    (PROG (XX XXX ORIGEX CONV COEFLIST N)
      (SETQ ORIGEX (CADR X))
      (SETQ CONV (CADDR X))
      (COND ((EQUAL CONV ORIGEX) (SETQ CONV "exact")))
      (SETQ COEFLIST (CADDDR X))
      (SETQ XX (REVERSE (CDDR COEFLIST)))
      (COND
       ((GREATERP (LENGTH XX) 12)
        (RETURN (LIST 'LIST ORIGEX CONV (CADDDR X)))))
      (COND
       (XX
        (PROGN
         (SETQ N (FIX-NEGATIVE (CADR (CAR XX))))
         (SETQ XXX (LIST 'QUOTIENT (CAR N) (CADDR (CAR XX))))
         (PROG (TT)
           (SETQ TT (REST XX))
          LAB
           (COND ((NULL TT) (RETURN NIL)))
           ((LAMBDA (TT)
              (PROGN
               (SETQ XXX
                       (LIST 'PLUS (CADDR TT)
                             (COND ((CDR N) (LIST 'MINUS XXX)) (T XXX))))
               (SETQ N (FIX-NEGATIVE (CADR TT)))
               (SETQ XXX (LIST 'QUOTIENT (CAR N) XXX))))
            (CAR TT))
           (SETQ TT (CDR TT))
           (GO LAB))
         (COND
          ((EQUAL (CADR COEFLIST) 0)
           (RETURN
            (LIST 'LIST ORIGEX CONV
                  (COND ((CDR N) (LIST 'MINUS XXX)) (T XXX)))))
          (T
           (RETURN
            (LIST 'LIST ORIGEX CONV
                  (LIST 'PLUS (CADR COEFLIST)
                        (COND ((CDR N) (LIST 'MINUS XXX)) (T XXX)))))))
         NIL))
       (T (RETURN (LIST 'LIST ORIGEX CONV (CADR COEFLIST))))))) 
(PUT 'CONTFRAC 'FANCY-REFORM 'REFORM-CONTFRACT) 
(PUT '|CF:EXPR| 'NUMBER-OF-ARGS 1) 
(PUT '|CF:EXPR| 'DEFINED-ON-LINE '86) 
(PUT '|CF:EXPR| 'DEFINED-IN-FILE 'RATAPRX/CFUTIL.RED) 
(PUT '|CF:EXPR| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |CF:EXPR| (U)
    (PROGN
     (SETQ U (REVAL1 (CAR U) T))
     (COND ((EQCAR U 'CONTFRAC) (CADR U))
           (T (TYPERR U "continued fraction: cf_expression"))))) 
(PUT 'CF_EXPRESSION 'PSOPFN '|CF:EXPR|) 
(PUT '|CF:CONV| 'NUMBER-OF-ARGS 1) 
(PUT '|CF:CONV| 'DEFINED-ON-LINE '95) 
(PUT '|CF:CONV| 'DEFINED-IN-FILE 'RATAPRX/CFUTIL.RED) 
(PUT '|CF:CONV| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |CF:CONV| (U)
    (PROGN
     (SETQ U (REVAL1 (CAR U) T))
     (COND ((EQCAR U 'CONTFRAC) (REVAL1 (CADDR U) NIL))
           (T (TYPERR U "continued fraction: cf_convergent"))))) 
(PUT 'CF_CONVERGENT 'PSOPFN '|CF:CONV|) 
(PUT '|CF:COEF-LIST| 'NUMBER-OF-ARGS 1) 
(PUT '|CF:COEF-LIST| 'DEFINED-ON-LINE '105) 
(PUT '|CF:COEF-LIST| 'DEFINED-IN-FILE 'RATAPRX/CFUTIL.RED) 
(PUT '|CF:COEF-LIST| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |CF:COEF-LIST| (U)
    (PROGN
     (SETQ U (REVAL1 (CAR U) T))
     (COND ((EQCAR U 'CONTFRAC) (CADDDR U))
           (T (TYPERR U "continued fraction: cf_continuents"))))) 
(PUT 'CF_CONTINUENTS 'PSOPFN '|CF:COEF-LIST|) 
(PUT '|CF:CONV-LIST| 'NUMBER-OF-ARGS 1) 
(PUT '|CF:CONV-LIST| 'DEFINED-ON-LINE '114) 
(PUT '|CF:CONV-LIST| 'DEFINED-IN-FILE 'RATAPRX/CFUTIL.RED) 
(PUT '|CF:CONV-LIST| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |CF:CONV-LIST| (U)
    (PROGN
     (SETQ U (REVAL1 (CAR U) T))
     (COND
      ((EQCAR U 'CONTFRAC)
       (CONS 'LIST (REVERSIP (|CF:CONVLIST1| (CDR (CADDDR U))))))
      (T (TYPERR U "continued fraction: cf_convergents"))))) 
(PUT '|CF:CONVLIST1| 'NUMBER-OF-ARGS 1) 
(PUT '|CF:CONVLIST1| 'DEFINED-ON-LINE '122) 
(PUT '|CF:CONVLIST1| 'DEFINED-IN-FILE 'RATAPRX/CFUTIL.RED) 
(PUT '|CF:CONVLIST1| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |CF:CONVLIST1| (COEFLIST)
    (PROG (A L G GG GGG H HH HHH X Y *GCD *EZGCD)
      (SETQ *GCD T)
      (SETQ *EZGCD T)
      (SETQ A (SIMP* (CAR COEFLIST)))
      (SETQ L (LIST (PREPSQ A)))
      (SETQ COEFLIST (CDR COEFLIST))
      (COND ((NULL COEFLIST) (RETURN L)))
      (SETQ GG A)
      (SETQ HH (CONS 1 1))
      (SETQ G (CONS 1 1))
      (SETQ H (CONS NIL 1))
      (PROG (COEF)
        (SETQ COEF COEFLIST)
       LAB
        (COND ((NULL COEF) (RETURN NIL)))
        ((LAMBDA (COEF)
           (PROGN
            (SETQ X (SIMP* (CADR COEF)))
            (SETQ Y (SIMP* (CADDR COEF)))
            (SETQ GGG (ADDSQ (MULTSQ Y GG) (MULTSQ X G)))
            (SETQ HHH (ADDSQ (MULTSQ Y HH) (MULTSQ X H)))
            (SETQ G GG)
            (SETQ GG GGG)
            (SETQ H HH)
            (SETQ HH HHH)
            (SETQ L (CONS (PREPSQ (MULTSQ GG (INVSQ HH))) L))
            NIL))
         (CAR COEF))
        (SETQ COEF (CDR COEF))
        (GO LAB))
      (RETURN L))) 
(PUT 'CF_CONVERGENTS 'PSOPFN '|CF:CONV-LIST|) 
(PUT 'CF_TRANSFORM 'PSOPFN '|CF:TRANSFORM|) 
(PUT '|CF:TRANSFORM| 'NUMBER-OF-ARGS 1) 
(PUT '|CF:TRANSFORM| 'DEFINED-ON-LINE '146) 
(PUT '|CF:TRANSFORM| 'DEFINED-IN-FILE 'RATAPRX/CFUTIL.RED) 
(PUT '|CF:TRANSFORM| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |CF:TRANSFORM| (U)
    (PROG (L COEFLIST NEWLIST C D A B *GCD *EZGCD)
      (COND
       ((NEQ (LENGTH U) 2)
        (REDERR "cf_transform: exactly two arguments are required.")))
      (SETQ L (CADR U))
      (SETQ U (REVAL1 (CAR U) T))
      (COND
       ((NOT (EQCAR U 'CONTFRAC))
        (TYPERR U "continued fraction: cf_transform")))
      (COND
       ((NOT (EQCAR L 'LIST))
        (REDERR "cf_transform: second argument must be a list.")))
      (SETQ L (CDR L))
      (SETQ COEFLIST (CDR (CADDDR U)))
      (SETQ NEWLIST (LIST (CAR COEFLIST)))
      (SETQ COEFLIST (CDR COEFLIST))
      (SETQ *GCD T)
      (SETQ *EZGCD T)
      (SETQ D (CONS 1 1))
      (PROG (PR)
        (SETQ PR (CDR COEFLIST))
       LAB
        (COND ((NULL PR) (RETURN NIL)))
        ((LAMBDA (PR)
           (PROGN
            (COND (L (SETQ C (SIMP* (CAR L)))) (T (SETQ C (CONS 1 1))))
            (SETQ A (MULTSQ (SIMP* (CADR PR)) (MULTSQ D C)))
            (SETQ B (MULTSQ (SIMP* (CADDR PR)) C))
            (SETQ NEWLIST (CONS (LIST 'LIST (PREPSQ A) (PREPSQ B)) NEWLIST))
            (COND (L (SETQ L (CDR L))))
            (SETQ D C)
            NIL))
         (CAR PR))
        (SETQ PR (CDR PR))
        (GO LAB))
      (SETQ NEWLIST (CONS 'LIST (REVERSIP NEWLIST)))
      (RETURN (LIST 'CONTFRAC (CADR U) (CADDR U) NEWLIST)))) 
(PUT '|CF:UNIT-NUM| 'NUMBER-OF-ARGS 1) 
(PUT '|CF:UNIT-NUM| 'DEFINED-ON-LINE '183) 
(PUT '|CF:UNIT-NUM| 'DEFINED-IN-FILE 'RATAPRX/CFUTIL.RED) 
(PUT '|CF:UNIT-NUM| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |CF:UNIT-NUM| (U)
    (PROG (COEFLIST NEWLIST C A B *GCD *EZGCD)
      (SETQ U (REVAL1 (CAR U) T))
      (COND
       ((NOT (EQCAR U 'CONTFRAC))
        (TYPERR U "continued fraction: cf_unit_num")))
      (SETQ COEFLIST (CDR (CADDDR U)))
      (SETQ NEWLIST (LIST (CAR COEFLIST)))
      (SETQ *GCD T)
      (SETQ *EZGCD T)
      (SETQ C (CONS 1 1))
      (PROG (PR)
        (SETQ PR (CDR COEFLIST))
       LAB
        (COND ((NULL PR) (RETURN NIL)))
        ((LAMBDA (PR)
           (PROGN
            (SETQ A (SIMP* (CADR PR)))
            (SETQ C (INVSQ (MULTSQ C A)))
            (SETQ B (MULTSQ (SIMP* (CADDR PR)) C))
            (SETQ NEWLIST (CONS (LIST 'LIST 1 (PREPSQ B)) NEWLIST))
            NIL))
         (CAR PR))
        (SETQ PR (CDR PR))
        (GO LAB))
      (SETQ NEWLIST (CONS 'LIST (REVERSIP NEWLIST)))
      (RETURN (LIST 'CONTFRAC (CADR U) (CADDR U) NEWLIST)))) 
(PUT '|CF:UNIT-DEN| 'NUMBER-OF-ARGS 1) 
(PUT '|CF:UNIT-DEN| 'DEFINED-ON-LINE '204) 
(PUT '|CF:UNIT-DEN| 'DEFINED-IN-FILE 'RATAPRX/CFUTIL.RED) 
(PUT '|CF:UNIT-DEN| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |CF:UNIT-DEN| (U)
    (PROG (COEFLIST NEWLIST D C A B *GCD *EZGCD)
      (SETQ U (REVAL1 (CAR U) T))
      (COND
       ((NOT (EQCAR U 'CONTFRAC))
        (TYPERR U "continued fraction: cf_unit_den")))
      (SETQ COEFLIST (CDR (CADDDR U)))
      (SETQ NEWLIST (LIST (CAR COEFLIST)))
      (SETQ *GCD T)
      (SETQ *EZGCD T)
      (SETQ D (CONS 1 1))
      (PROG (PR)
        (SETQ PR (CDR COEFLIST))
       LAB
        (COND ((NULL PR) (RETURN NIL)))
        ((LAMBDA (PR)
           (PROGN
            (SETQ B (SIMP* (CADDR PR)))
            (SETQ C (MULTSQ D B))
            (SETQ A (MULTSQ (SIMP* (CADR PR)) (INVSQ C)))
            (SETQ NEWLIST (CONS (LIST 'LIST (PREPSQ A) 1) NEWLIST))
            (SETQ D B)
            NIL))
         (CAR PR))
        (SETQ PR (CDR PR))
        (GO LAB))
      (SETQ NEWLIST (CONS 'LIST (REVERSIP NEWLIST)))
      (RETURN (LIST 'CONTFRAC (CADR U) (CADDR U) NEWLIST)))) 
(PUT 'CF_UNIT_NUMERATORS 'PSOPFN '|CF:UNIT-NUM|) 
(PUT 'CF_UNIT_DENOMINATORS 'PSOPFN '|CF:UNIT-DEN|) 
(PUT '|CF:REMOVE-FRACS| 'NUMBER-OF-ARGS 1) 
(PUT '|CF:REMOVE-FRACS| 'DEFINED-ON-LINE '229) 
(PUT '|CF:REMOVE-FRACS| 'DEFINED-IN-FILE 'RATAPRX/CFUTIL.RED) 
(PUT '|CF:REMOVE-FRACS| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |CF:REMOVE-FRACS| (U)
    (PROG (COEFLIST NEWLIST NUMPRS A B C)
      (SETQ U (REVAL1 (CAR U) T))
      (COND
       ((NOT (EQCAR U 'CONTFRAC))
        (TYPERR U "continued fraction: cf_remove_fractions")))
      (SETQ COEFLIST (CDR (CADDDR U)))
      (SETQ NEWLIST (LIST (CAR COEFLIST)))
      (SETQ COEFLIST (CDR COEFLIST))
      (SETQ NUMPRS (LENGTH COEFLIST))
      (SETQ C (CONS 1 1))
      (PROG (N)
        (SETQ N 1)
       LAB
        (COND ((MINUSP (DIFFERENCE NUMPRS N)) (RETURN NIL)))
        (PROGN
         (SETQ A (SIMP* (CADAR COEFLIST)))
         (SETQ B (SIMP* (CADDAR COEFLIST)))
         (SETQ A (MULTSQ C A))
         (SETQ C
                 (MULTSQ
                  (CONS
                   (COND (*PHYSOP-LOADED (PHYSOP-MULTF (CDR A) (CDR B)))
                         (T (POLY-MULTF (CDR A) (CDR B))))
                   1)
                  (INVSQ (CONS (GCDF (CDR A) (CDR B)) 1))))
         (SETQ A (MULTSQ A C))
         (SETQ B (MULTSQ B C))
         (SETQ NEWLIST (CONS (LIST 'LIST (PREPSQ A) (PREPSQ B)) NEWLIST))
         (SETQ COEFLIST (CDR COEFLIST))
         NIL)
        (SETQ N (PLUS2 N 1))
        (GO LAB))
      (SETQ NEWLIST (CONS 'LIST (REVERSIP NEWLIST)))
      (RETURN (LIST 'CONTFRAC (CADR U) (CADDR U) NEWLIST)))) 
(PUT 'CF_REMOVE_FRACTIONS 'PSOPFN '|CF:REMOVE-FRACS|) 
(PUT 'CF_REMOVE_CONSTANT 'PSOPFN '|CF:REMOVE-CONST|) 
(PUT '|CF:REMOVE-CONST| 'NUMBER-OF-ARGS 1) 
(PUT '|CF:REMOVE-CONST| 'DEFINED-ON-LINE '263) 
(PUT '|CF:REMOVE-CONST| 'DEFINED-IN-FILE 'RATAPRX/CFUTIL.RED) 
(PUT '|CF:REMOVE-CONST| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |CF:REMOVE-CONST| (U)
    (PROG (COEFLIST NEWLIST A B C D CC AA A0)
      (SETQ U (REVAL1 (CAR U) T))
      (COND
       ((NOT (EQCAR U 'CONTFRAC))
        (TYPERR U "continued fraction: cf_remove_constant")))
      (SETQ COEFLIST (CDR (CADDDR U)))
      (SETQ A0 (CAR COEFLIST))
      (COND ((EQUAL A0 0) (RETURN U)))
      (SETQ A0 (SIMP* A0))
      (SETQ NEWLIST (LIST 0))
      (SETQ COEFLIST (CDR COEFLIST))
      (COND
       ((NULL COEFLIST)
        (PROGN
         (SETQ NEWLIST (CONS (LIST 'LIST (PREPSQ A0) 1) NEWLIST))
         (RETURN
          (LIST 'CONTFRAC (CADR U) (CADDR U) (CONS 'LIST (REVERSIP NEWLIST))))
         NIL)))
      (SETQ A (SIMP* (CADAR COEFLIST)))
      (SETQ B (SIMP* (CADDAR COEFLIST)))
      (SETQ CC (ADDSQ (MULTSQ A0 B) A))
      (SETQ NEWLIST (CONS (LIST 'LIST (PREPSQ CC) (PREPSQ B)) NEWLIST))
      (SETQ COEFLIST (CDR COEFLIST))
      (COND
       ((NULL COEFLIST)
        (RETURN
         (LIST 'CONTFRAC (CADR U) (CADDR U) (CONS 'LIST (REVERSIP NEWLIST))))))
      (SETQ AA A)
      (SETQ A (SIMP* (CADAR COEFLIST)))
      (SETQ B (SIMP* (CADDAR COEFLIST)))
      (SETQ C (MULTSQ A AA))
      (SETQ D (ADDSQ (MULTSQ A0 A) (MULTSQ CC B)))
      (SETQ NEWLIST (CONS (LIST 'LIST (PREPSQ C) (PREPSQ D)) NEWLIST))
      (SETQ COEFLIST (CDR COEFLIST))
      (COND
       ((NULL COEFLIST)
        (RETURN
         (LIST 'CONTFRAC (CADR U) (CADDR U) (CONS 'LIST (REVERSIP NEWLIST))))))
      (SETQ A (SIMP* (CADAR COEFLIST)))
      (SETQ B (CADDAR COEFLIST))
      (SETQ C (MULTSQ CC A))
      (SETQ NEWLIST (CONS (LIST 'LIST (PREPSQ C) B) NEWLIST))
      (SETQ NEWLIST (APPEND (CONS 'LIST (REVERSIP NEWLIST)) (CDR COEFLIST)))
      (RETURN (LIST 'CONTFRAC (CADR U) (CADDR U) NEWLIST)))) 
(PUT '|CF:EVEN-ODD| 'NUMBER-OF-ARGS 1) 
(PUT '|CF:EVEN-ODD| 'DEFINED-ON-LINE '311) 
(PUT '|CF:EVEN-ODD| 'DEFINED-IN-FILE 'RATAPRX/CFUTIL.RED) 
(PUT '|CF:EVEN-ODD| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |CF:EVEN-ODD| (U)
    (PROG (COEFLIST ODDLIST EVENLIST NUMTERMS CONV M A AA AAA B BB BBB C D CC
           C1 C2)
      (SETQ U (REVAL1 (CAR U) T))
      (COND
       ((NOT (EQCAR U 'CONTFRAC))
        (TYPERR U "continued fraction: cf_even_odd")))
      (SETQ COEFLIST (CDR (CADDDR U)))
      (SETQ NUMTERMS (LENGTH COEFLIST))
      (SETQ M NUMTERMS)
      (SETQ EVENLIST (LIST (CAR COEFLIST)))
      (SETQ ODDLIST (LIST (CAR COEFLIST)))
      (SETQ COEFLIST (CDR COEFLIST))
      (SETQ M (DIFFERENCE M 1))
      (COND ((EQUAL M 0) (GO DONE)))
      (SETQ AA (SIMP* (CADAR COEFLIST)))
      (SETQ BB (SIMP* (CADDAR COEFLIST)))
      (SETQ CC
              (MULTSQ
               (CONS
                (COND (*PHYSOP-LOADED (PHYSOP-MULTF (CDR AA) (CDR BB)))
                      (T (POLY-MULTF (CDR AA) (CDR BB))))
                1)
               (INVSQ (CONS (GCDF (CDR AA) (CDR BB)) 1))))
      (SETQ C (MULTSQ CC AA))
      (SETQ D (MULTSQ CC BB))
      (SETQ C1 CC)
      (SETQ ODDLIST (CONS (LIST 'LIST (PREPSQ C) (PREPSQ D)) ODDLIST))
      (SETQ COEFLIST (CDR COEFLIST))
      (SETQ M (DIFFERENCE M 1))
      (COND ((EQUAL M 0) (GO DONE)))
      (SETQ A (SIMP* (CADAR COEFLIST)))
      (SETQ B (SIMP* (CADDAR COEFLIST)))
      (SETQ C (MULTSQ AA B))
      (SETQ D (ADDSQ (MULTSQ B BB) A))
      (SETQ CC
              (MULTSQ
               (CONS
                (COND (*PHYSOP-LOADED (PHYSOP-MULTF (CDR C) (CDR D)))
                      (T (POLY-MULTF (CDR C) (CDR D))))
                1)
               (INVSQ (CONS (GCDF (CDR C) (CDR D)) 1))))
      (SETQ C (MULTSQ CC C))
      (SETQ D (MULTSQ CC D))
      (SETQ C2 CC)
      (SETQ EVENLIST (CONS (LIST 'LIST (PREPSQ C) (PREPSQ D)) EVENLIST))
      (SETQ COEFLIST (CDR COEFLIST))
      (SETQ M (DIFFERENCE M 1))
      (COND ((EQUAL M 0) (GO DONE)))
      (SETQ AA A)
      (SETQ BB B)
      (SETQ A (SIMP* (CADAR COEFLIST)))
      (SETQ B (SIMP* (CADDAR COEFLIST)))
      (SETQ C (MULTSQ C1 (MULTSQ AA B)))
      (SETQ D (ADDSQ (MULTSQ B BB) A))
      (SETQ CC
              (MULTSQ
               (CONS
                (COND (*PHYSOP-LOADED (PHYSOP-MULTF (CDR C) (CDR D)))
                      (T (POLY-MULTF (CDR C) (CDR D))))
                1)
               (INVSQ (CONS (GCDF (CDR C) (CDR D)) 1))))
      (SETQ C (MULTSQ CC C))
      (SETQ D (MULTSQ CC D))
      (SETQ C1 CC)
      (SETQ ODDLIST (CONS (LIST 'LIST (PREPSQ C) (PREPSQ D)) ODDLIST))
      (SETQ M (DIFFERENCE M 1))
      (SETQ CC C2)
      (PROG (N)
        (SETQ N 1)
       LAB
        (COND ((MINUSP (DIFFERENCE M N)) (RETURN NIL)))
        (PROGN
         (SETQ COEFLIST (CDR COEFLIST))
         (SETQ AAA AA)
         (SETQ AA A)
         (SETQ BBB BB)
         (SETQ BB B)
         (SETQ A (SIMP* (CADAR COEFLIST)))
         (SETQ B (SIMP* (CADDAR COEFLIST)))
         (SETQ C
                 (NEGSQ
                  (MULTSQ CC (MULTSQ (MULTSQ B (MULTSQ AA AAA)) (INVSQ BBB)))))
         (SETQ D
                 (MULTSQ
                  (ADDSQ (MULTSQ B (MULTSQ BB BBB))
                         (ADDSQ (MULTSQ A BBB) (MULTSQ AA B)))
                  (INVSQ BBB)))
         (SETQ CC
                 (MULTSQ
                  (CONS
                   (COND (*PHYSOP-LOADED (PHYSOP-MULTF (CDR C) (CDR D)))
                         (T (POLY-MULTF (CDR C) (CDR D))))
                   1)
                  (INVSQ (CONS (GCDF (CDR C) (CDR D)) 1))))
         (SETQ C (MULTSQ CC C))
         (SETQ D (MULTSQ CC D))
         (COND
          ((EVENP N)
           (PROGN
            (SETQ C1 CC)
            (SETQ ODDLIST (CONS (LIST 'LIST (PREPSQ C) (PREPSQ D)) ODDLIST))
            (SETQ CC C2)
            NIL))
          (T
           (PROGN
            (SETQ C2 CC)
            (SETQ EVENLIST (CONS (LIST 'LIST (PREPSQ C) (PREPSQ D)) EVENLIST))
            (SETQ CC C1)
            NIL)))
         NIL)
        (SETQ N (PLUS2 N 1))
        (GO LAB))
     DONE
      (SETQ ODDLIST (CONS 'LIST (REVERSIP ODDLIST)))
      (SETQ EVENLIST (CONS 'LIST (REVERSIP EVENLIST)))
      (COND
       ((EVENP NUMTERMS)
        (PROGN
         (SETQ CONV (CAR (|CF:CONVLIST1| (CDR EVENLIST))))
         (SETQ EVENLIST (LIST 'CONTFRAC (CADR U) CONV EVENLIST))
         (SETQ ODDLIST (LIST 'CONTFRAC (CADR U) (CADDR U) ODDLIST))
         NIL))
       (T
        (PROGN
         (SETQ CONV (CAR (|CF:CONVLIST1| (CDR ODDLIST))))
         (SETQ ODDLIST (LIST 'CONTFRAC (CADR U) CONV ODDLIST))
         (SETQ EVENLIST (LIST 'CONTFRAC (CADR U) (CADDR U) EVENLIST)))))
      (SETQ ODDLIST (|CF:REMOVE-CONST| (LIST ODDLIST)))
      (RETURN (LIST 'LIST EVENLIST ODDLIST)))) 
(PUT 'CF_EVEN_ODD 'PSOPFN '|CF:EVEN-ODD|) 
(PUT 'CF_EULER 'PSOPFN '|CF:EULER|) 
(PUT '|CF:EULER| 'NUMBER-OF-ARGS 1) 
(PUT '|CF:EULER| 'DEFINED-ON-LINE '412) 
(PUT '|CF:EULER| 'DEFINED-IN-FILE 'RATAPRX/CFUTIL.RED) 
(PUT '|CF:EULER| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |CF:EULER| (U)
    (PROG (V X N)
      (COND
       ((LESSP (LENGTH U) 2)
        (REDERR
         "cf_euler: 2 or 3 args needed -- expression, variable, [integer]")))
      (SETQ X (CADR U))
      (COND
       ((OR (NOT (IDP X)) (FLAGP X 'CONSTANT))
        (REDERR "cf_euler: second arg must be a variable")))
      (COND
       ((CDDR U)
        (PROGN
         (SETQ N (IEVAL (CADDR U)))
         (COND
          ((LEQ N 0)
           (REDERR "cf!:euler: third argument must be a positive integer")))
         NIL))
       (T (SETQ N 6)))
      (SETQ V (|CF:EULER1| (CAR U) X N))
      (RETURN
       (CONS 'CONTFRAC
             (LIST (CAR U) (CAR (|CF:CONVLIST1| V)) (CONS 'LIST V)))))) 
(FLUID '(|PS:ORDER-LIMIT|)) 
(PUT '|CF:EULER1| 'NUMBER-OF-ARGS 3) 
(PUT '|CF:EULER1| 'DEFINED-ON-LINE '435) 
(PUT '|CF:EULER1| 'DEFINED-IN-FILE 'RATAPRX/CFUTIL.RED) 
(PUT '|CF:EULER1| 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE |CF:EULER1| (U X N)
    (PROG (COEFLIST PS NEXTTERM LASTTERM A B C D J K)
      (SETQ PS (CAR (SIMPPS1 U X 0)))
      (SETQ J (|PS:FIND-ORDER| PS))
      (SETQ COEFLIST (LIST 0))
      (SETQ NEXTTERM (|PS:GET-TERM| PS J))
      (COND
       ((GEQ J 0)
        (PROGN
         (COND
          ((GREATERP J 0)
           (SETQ NEXTTERM
                   (MULTSQ (CONS (LIST (CONS (CONS X J) 1)) 1) NEXTTERM))))
         (SETQ A NEXTTERM)
         (SETQ D (CONS 1 1))
         NIL))
       (T
        (PROGN
         (SETQ D (CONS (LIST (CONS (CONS X (MINUS J)) 1)) 1))
         (SETQ A NEXTTERM)
         (SETQ NEXTTERM (MULTSQ (INVSQ D) NEXTTERM))
         NIL)))
      (SETQ B D)
      (SETQ COEFLIST (CONS (LIST 'LIST (PREPSQ A) (PREPSQ B)) COEFLIST))
      (SETQ C D)
      (PROG (I)
        (SETQ I 2)
       LAB
        (COND ((MINUSP (DIFFERENCE N I)) (RETURN NIL)))
        (PROGN
         (SETQ LASTTERM NEXTTERM)
         (SETQ K 0)
         (PROG ()
          REPEATLABEL
           (PROGN
            (SETQ J (PLUS J 1))
            (SETQ K (PLUS K 1))
            (SETQ NEXTTERM (|PS:EVALUATE| PS J))
            NIL)
           (COND
            ((NOT (OR (NEQ NEXTTERM (CONS NIL 1)) (EQUAL K |PS:ORDER-LIMIT|)))
             (GO REPEATLABEL))))
         (COND
          ((EQUAL NEXTTERM (CONS NIL 1))
           (PROGN
            (PRINT
             "ps_euler: power series is very sparse  -- terminating early")
            (GO DONE)
            NIL))
          ((GEQ J 0)
           (PROGN
            (SETQ D (CONS 1 1))
            (COND
             ((GREATERP J 0)
              (SETQ NEXTTERM
                      (MULTSQ (CONS (LIST (CONS (CONS X J) 1)) 1) NEXTTERM))))
            NIL))
          (T
           (PROGN
            (SETQ D (CONS (LIST (CONS (CONS X (MINUS J)) 1)) 1))
            (SETQ NEXTTERM (MULTSQ (INVSQ D) NEXTTERM))
            NIL)))
         (SETQ A (MULTSQ NEXTTERM (INVSQ LASTTERM)))
         (COND ((GEQ J 0) (SETQ B (ADDSQ (CONS 1 1) A)))
               (T (PROGN (SETQ A (MULTSQ A D)) (SETQ B (ADDSQ D A)) NIL)))
         (SETQ COEFLIST
                 (CONS (LIST 'LIST (PREPSQ (NEGSQ (MULTSQ C A))) (PREPSQ B))
                       COEFLIST))
         (SETQ C D)
         NIL)
        (SETQ I (PLUS2 I 1))
        (GO LAB))
     DONE
      (RETURN (REVERSIP COEFLIST)))) 
(ENDMODULE) 