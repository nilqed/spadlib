(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'MODSR)) 
(CREATE-PACKAGE '(MODSR MODSQRT MODROOTS MODSOLVE) '(SOLVE)) 
(FLUID '(CURRENT-MODULUS)) 
(LOAD-PACKAGE 'SOLVE) 
(LOAD-PACKAGE 'FACTOR) 
(PUT 'GENERAL-EVALUATE-MOD-P 'NUMBER-OF-ARGS 3) 
(PUT 'GENERAL-EVALUATE-MOD-P 'DEFINED-ON-LINE '45) 
(PUT 'GENERAL-EVALUATE-MOD-P 'DEFINED-IN-FILE 'SOLVE/MODSR.RED) 
(PUT 'GENERAL-EVALUATE-MOD-P 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE GENERAL-EVALUATE-MOD-P (A V N)
    (COND ((OR (ATOM A) (ATOM (CAR A))) A)
          ((EQUAL N 0) (GENERAL-EVALUATE-MOD-P A V NIL))
          ((EQUAL V NIL) (ERRORF "Variable=NIL in GENERAL-EVALUATE-MOD-P"))
          ((EQUAL (CAAAR A) V)
           (GENERAL-HORNER-RULE-MOD-P (CDAR A) (CDAAR A) (CDR A) N V))
          (T
           ((LAMBDA (G539 G540)
              (COND ((NULL G539) G540) (T (CONS (CONS (CAAR A) G539) G540))))
            (GENERAL-EVALUATE-MOD-P (CDAR A) V N)
            (GENERAL-EVALUATE-MOD-P (CDR A) V N))))) 
(PUT 'GENERAL-HORNER-RULE-MOD-P 'NUMBER-OF-ARGS 5) 
(PUT 'GENERAL-HORNER-RULE-MOD-P 'DEFINED-ON-LINE '56) 
(PUT 'GENERAL-HORNER-RULE-MOD-P 'DEFINED-IN-FILE 'SOLVE/MODSR.RED) 
(PUT 'GENERAL-HORNER-RULE-MOD-P 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE GENERAL-HORNER-RULE-MOD-P (V DEGG A N VAR)
    (COND
     ((OR (OR (ATOM A) (ATOM (CAR A))) (NOT (EQUAL (CAAAR A) VAR)))
      (COND ((OR (NULL N) (ZEROP N)) A)
            (T
             (PROGN
              (SETQ V (GENERAL-TIMES-MOD-P V (GENERAL-EXPT-MOD-P N DEGG)))
              (GENERAL-PLUS-MOD-P A V)))))
     (T
      (PROG (NEWDEG)
        (SETQ NEWDEG (CDAAR A))
        (RETURN
         (GENERAL-HORNER-RULE-MOD-P
          (COND ((OR (NULL N) (ZEROP N)) (CDAR A))
                (T
                 (GENERAL-PLUS-MOD-P (CDAR A)
                                     (GENERAL-TIMES-MOD-P V
                                                          (GENERAL-EXPT-MOD-P N
                                                           (IDIFFERENCE DEGG
                                                                        NEWDEG))))))
          NEWDEG (CDR A) N VAR)))))) 
(PUT 'GENERAL-EXPT-MOD-P 'NUMBER-OF-ARGS 2) 
(PUT 'GENERAL-EXPT-MOD-P 'DEFINED-ON-LINE '74) 
(PUT 'GENERAL-EXPT-MOD-P 'DEFINED-IN-FILE 'SOLVE/MODSR.RED) 
(PUT 'GENERAL-EXPT-MOD-P 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE GENERAL-EXPT-MOD-P (A N)
    (COND ((EQUAL N 0) 1) ((EQUAL N 1) A)
          (T
           (PROG (W X)
             (SETQ W (DIVIDE N 2))
             (SETQ X (GENERAL-EXPT-MOD-P A (CAR W)))
             (SETQ X (GENERAL-TIMES-MOD-P X X))
             (COND
              ((NOT (EQUAL (CDR W) 0)) (SETQ X (GENERAL-TIMES-MOD-P X A))))
             (RETURN X))))) 
(PUT 'GENERAL-MONIC-MOD-P 'NUMBER-OF-ARGS 1) 
(PUT 'GENERAL-MONIC-MOD-P 'DEFINED-ON-LINE '86) 
(PUT 'GENERAL-MONIC-MOD-P 'DEFINED-IN-FILE 'SOLVE/MODSR.RED) 
(PUT 'GENERAL-MONIC-MOD-P 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE GENERAL-MONIC-MOD-P (A)
    (COND ((EQUAL A NIL) NIL) ((OR (ATOM A) (ATOM (CAR A))) 1)
          ((EQUAL (CDAR A) 1) A)
          ((NOT (OR (ATOM (CDAR A)) (ATOM (CAR (CDAR A)))))
           (ERRORF "LC NOT NUMERIC IN GENERAL-MONIC-MOD-P"))
          (T
           (GENERAL-MULTIPLY-BY-CONSTANT-MOD-P A
            (GENERAL-MODULAR-RECIPROCAL (CDAR A)))))) 
(PUT 'GENERAL-QUOTIENT-MOD-P 'NUMBER-OF-ARGS 2) 
(PUT 'GENERAL-QUOTIENT-MOD-P 'DEFINED-ON-LINE '97) 
(PUT 'GENERAL-QUOTIENT-MOD-P 'DEFINED-IN-FILE 'SOLVE/MODSR.RED) 
(PUT 'GENERAL-QUOTIENT-MOD-P 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE GENERAL-QUOTIENT-MOD-P (A B)
    (COND ((NULL B) (ERRORF "B=0 IN GENERAL-QUOTIENT-MOD-P"))
          ((OR (ATOM B) (ATOM (CAR B)))
           (GENERAL-MULTIPLY-BY-CONSTANT-MOD-P A
            (GENERAL-MODULAR-RECIPROCAL B)))
          ((EQUAL A NIL) NIL)
          ((OR (ATOM A) (ATOM (CAR A))) (SETQ EXACT-QUOTIENT-FLAG NIL))
          ((EQUAL (CAAAR A) (CAAAR B)) (GENERAL-XQUOTIENT-MOD-P A B (CAAAR B)))
          ((ORDOP (CAAAR A) (CAAAR B))
           ((LAMBDA (G542 G543)
              (COND ((NULL G542) G543) (T (CONS (CONS (CAAR A) G542) G543))))
            (GENERAL-QUOTIENT-MOD-P (CDAR A) B)
            (GENERAL-QUOTIENT-MOD-P (CDR A) B)))
          (T (SETQ EXACT-QUOTIENT-FLAG NIL)))) 
(PUT 'GENERAL-XQUOTIENT-MOD-P 'NUMBER-OF-ARGS 3) 
(PUT 'GENERAL-XQUOTIENT-MOD-P 'DEFINED-ON-LINE '112) 
(PUT 'GENERAL-XQUOTIENT-MOD-P 'DEFINED-IN-FILE 'SOLVE/MODSR.RED) 
(PUT 'GENERAL-XQUOTIENT-MOD-P 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE GENERAL-XQUOTIENT-MOD-P (A B V)
    (COND ((EQUAL A NIL) NIL)
          ((OR (OR (ATOM A) (ATOM (CAR A))) (NOT (EQUAL (CAAAR A) V))
               (ILESSP (CDAAR A) (CDAAR B)))
           (SETQ EXACT-QUOTIENT-FLAG NIL))
          ((EQUAL (CDAAR A) (CDAAR B))
           (PROG (W)
             (SETQ W (GENERAL-QUOTIENT-MOD-P (CDAR A) (CDAR B)))
             (COND
              ((GENERAL-DIFFERENCE-MOD-P A (GENERAL-TIMES-MOD-P W B))
               (SETQ EXACT-QUOTIENT-FLAG NIL)))
             (RETURN W)))
          (T
           (PROG (TERM)
             (SETQ TERM
                     (CONS
                      (GETPOWER (FKERN (CAAAR A))
                                (IDIFFERENCE (CDAAR A) (CDAAR B)))
                      (GENERAL-QUOTIENT-MOD-P (CDAR A) (CDAR B))))
             (SETQ A
                     (GENERAL-PLUS-MOD-P (CDR A)
                                         (GENERAL-TIMES-TERM-MOD-P
                                          (GENERAL-NEGATE-TERM TERM) (CDR B))))
             (RETURN (CONS TERM (GENERAL-XQUOTIENT-MOD-P A B V))))))) 
(PUT 'GENERAL-NEGATE-TERM 'NUMBER-OF-ARGS 1) 
(PUT 'GENERAL-NEGATE-TERM 'DEFINED-ON-LINE '135) 
(PUT 'GENERAL-NEGATE-TERM 'DEFINED-IN-FILE 'SOLVE/MODSR.RED) 
(PUT 'GENERAL-NEGATE-TERM 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE GENERAL-NEGATE-TERM (TERM)
    (CONS (CAR TERM) (GENERAL-MINUS-MOD-P (CDR TERM)))) 
(PUT 'GENERAL-REMAINDER-MOD-P 'NUMBER-OF-ARGS 2) 
(PUT 'GENERAL-REMAINDER-MOD-P 'DEFINED-ON-LINE '140) 
(PUT 'GENERAL-REMAINDER-MOD-P 'DEFINED-IN-FILE 'SOLVE/MODSR.RED) 
(PUT 'GENERAL-REMAINDER-MOD-P 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE GENERAL-REMAINDER-MOD-P (A B)
    (COND ((NULL B) (ERRORF "B=0 IN GENERAL-REMAINDER-MOD-P"))
          ((OR (ATOM B) (ATOM (CAR B))) NIL) ((OR (ATOM A) (ATOM (CAR A))) A)
          (T (GENERAL-XREMAINDER-MOD-P A B (CAAAR B))))) 
(PUT 'GENERAL-XREMAINDER-MOD-P 'NUMBER-OF-ARGS 3) 
(PUT 'GENERAL-XREMAINDER-MOD-P 'DEFINED-ON-LINE '148) 
(PUT 'GENERAL-XREMAINDER-MOD-P 'DEFINED-IN-FILE 'SOLVE/MODSR.RED) 
(PUT 'GENERAL-XREMAINDER-MOD-P 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE GENERAL-XREMAINDER-MOD-P (A B V)
    (COND
     ((OR (OR (ATOM A) (ATOM (CAR A))) (NOT (EQUAL (CAAAR A) V))
          (ILESSP (CDAAR A) (CDAAR B)))
      A)
     (T
      (PROG (Q W)
        (SETQ Q
                (GENERAL-QUOTIENT-MOD-P (GENERAL-MINUS-MOD-P (CDAR A))
                 (CDAR B)))
        (SETQ W (IDIFFERENCE (CDAAR A) (CDAAR B)))
        (COND
         ((EQUAL W 0)
          (SETQ A
                  (GENERAL-PLUS-MOD-P (CDR A)
                                      (GENERAL-MULTIPLY-BY-CONSTANT-MOD-P
                                       (CDR B) Q))))
         (T
          (SETQ A
                  (GENERAL-PLUS-MOD-P (CDR A)
                                      (GENERAL-TIMES-TERM-MOD-P
                                       (CONS (GETPOWER (FKERN (CAAAR B)) W) Q)
                                       (CDR B))))))
        (RETURN (GENERAL-XREMAINDER-MOD-P A B V)))))) 
(PUT 'GENERAL-MULTIPLY-BY-CONSTANT-MOD-P 'NUMBER-OF-ARGS 2) 
(PUT 'GENERAL-MULTIPLY-BY-CONSTANT-MOD-P 'DEFINED-ON-LINE '167) 
(PUT 'GENERAL-MULTIPLY-BY-CONSTANT-MOD-P 'DEFINED-IN-FILE 'SOLVE/MODSR.RED) 
(PUT 'GENERAL-MULTIPLY-BY-CONSTANT-MOD-P 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE GENERAL-MULTIPLY-BY-CONSTANT-MOD-P (A N)
    (COND ((NULL A) NIL) ((EQUAL N 1) A)
          ((OR (ATOM A) (ATOM (CAR A)))
           ((LAMBDA (U) (COND ((ZEROP U) NIL) (T U)))
            (GENERAL-MODULAR-TIMES A N)))
          (T
           ((LAMBDA (G545 G546)
              (COND ((NULL G545) G546) (T (CONS (CONS (CAAR A) G545) G546))))
            (GENERAL-MULTIPLY-BY-CONSTANT-MOD-P (CDAR A) N)
            (GENERAL-MULTIPLY-BY-CONSTANT-MOD-P (CDR A) N))))) 
(PUT 'GENERAL-GCD-MOD-P 'NUMBER-OF-ARGS 2) 
(PUT 'GENERAL-GCD-MOD-P 'DEFINED-ON-LINE '176) 
(PUT 'GENERAL-GCD-MOD-P 'DEFINED-IN-FILE 'SOLVE/MODSR.RED) 
(PUT 'GENERAL-GCD-MOD-P 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE GENERAL-GCD-MOD-P (A B)
    (PROGN
     (SETQ REDUCTION-COUNT 0)
     (COND ((NULL A) (MONIC-MOD-P B)) ((NULL B) (MONIC-MOD-P A))
           ((OR (ATOM A) (ATOM (CAR A))) 1) ((OR (ATOM B) (ATOM (CAR B))) 1)
           ((IGREATERP (CDAAR A) (CDAAR B)) (GENERAL-ORDERED-GCD-MOD-P A B))
           (T (GENERAL-ORDERED-GCD-MOD-P B A))))) 
(PUT 'GENERAL-ORDERED-GCD-MOD-P 'NUMBER-OF-ARGS 2) 
(PUT 'GENERAL-ORDERED-GCD-MOD-P 'DEFINED-ON-LINE '189) 
(PUT 'GENERAL-ORDERED-GCD-MOD-P 'DEFINED-IN-FILE 'SOLVE/MODSR.RED) 
(PUT 'GENERAL-ORDERED-GCD-MOD-P 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE GENERAL-ORDERED-GCD-MOD-P (A B)
    (PROG (STEPS)
      (SETQ STEPS 0)
     TOP
      (SETQ A (GENERAL-REDUCE-DEGREE-MOD-P A B))
      (COND ((NULL A) (RETURN (GENERAL-MONIC-MOD-P B))))
      (SETQ STEPS (PLUS STEPS 1))
      (COND
       ((OR (ATOM A) (ATOM (CAR A)))
        (PROGN (SETQ REDUCTION-COUNT (PLUS REDUCTION-COUNT STEPS)) (RETURN 1)))
       ((LESSP (CDAAR A) (CDAAR B))
        (PROG (W)
          (SETQ REDUCTION-COUNT (PLUS REDUCTION-COUNT STEPS))
          (SETQ STEPS 0)
          (SETQ W A)
          (SETQ A B)
          (SETQ B W))))
      (GO TOP))) 
(PUT 'GENERAL-REDUCE-DEGREE-MOD-P 'NUMBER-OF-ARGS 2) 
(PUT 'GENERAL-REDUCE-DEGREE-MOD-P 'DEFINED-ON-LINE '209) 
(PUT 'GENERAL-REDUCE-DEGREE-MOD-P 'DEFINED-IN-FILE 'SOLVE/MODSR.RED) 
(PUT 'GENERAL-REDUCE-DEGREE-MOD-P 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE GENERAL-REDUCE-DEGREE-MOD-P (A B)
    (PROG (Q W)
      (SETQ Q
              (GENERAL-MODULAR-QUOTIENT (GENERAL-MODULAR-MINUS (CDAR A))
                                        (CDAR B)))
      (SETQ W (IDIFFERENCE (CDAAR A) (CDAAR B)))
      (COND
       ((EQUAL W 0)
        (RETURN
         (GENERAL-PLUS-MOD-P (CDR A)
                             (GENERAL-MULTIPLY-BY-CONSTANT-MOD-P (CDR B) Q))))
       (T
        (RETURN
         (GENERAL-PLUS-MOD-P (CDR A)
                             (GENERAL-TIMES-TERM-MOD-P
                              (CONS (GETPOWER (FKERN (CAAAR B)) W) Q)
                              (CDR B)))))))) 
(PUT 'MODP 'NUMBER-OF-ARGS 2) 
(PUT 'MODP 'DEFINED-ON-LINE '229) 
(PUT 'MODP 'DEFINED-IN-FILE 'SOLVE/MODSR.RED) 
(PUT 'MODP 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MODP (A P)
    (PROGN (SETQ A (REMAINDER A P)) (COND ((LESSP A 0) (PLUS A P)) (T A)))) 
(PUT 'LOWESTDEG1 'NUMBER-OF-ARGS 3) 
(PUT 'LOWESTDEG1 'DEFINED-ON-LINE '232) 
(PUT 'LOWESTDEG1 'DEFINED-IN-FILE 'SOLVE/MODSR.RED) 
(PUT 'LOWESTDEG1 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE LOWESTDEG1 (F X N)
    (COND ((NULL F) N) ((OR (OR (ATOM F) (ATOM (CAR F))) (NEQ (CAAAR F) X)) 0)
          (T (LOWESTDEG1 (CDR F) X (CDAAR F))))) 
(PUT 'REDUCE-MOD-P* 'NUMBER-OF-ARGS 2) 
(PUT 'REDUCE-MOD-P* 'DEFINED-ON-LINE '237) 
(PUT 'REDUCE-MOD-P* 'DEFINED-IN-FILE 'SOLVE/MODSR.RED) 
(PUT 'REDUCE-MOD-P* 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE REDUCE-MOD-P* (F P) ((LAMBDA (CURRENT-MODULUS) (GENERAL-REDUCE-MOD-P F)) P)) 
(PUT 'MODUNTAG 'NUMBER-OF-ARGS 1) 
(PUT 'MODUNTAG 'DEFINED-ON-LINE '240) 
(PUT 'MODUNTAG 'DEFINED-IN-FILE 'SOLVE/MODSR.RED) 
(PUT 'MODUNTAG 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MODUNTAG (F)
    (COND ((EQCAR F '|:MOD:|) (CDR F)) ((ATOM F) F)
          (T (CONS (MODUNTAG (CAR F)) (MODUNTAG (CDR F)))))) 
(PUT 'SAFE-MODRECIP 'NUMBER-OF-ARGS 1) 
(PUT 'SAFE-MODRECIP 'DEFINED-ON-LINE '245) 
(PUT 'SAFE-MODRECIP 'DEFINED-IN-FILE 'SOLVE/MODSR.RED) 
(PUT 'SAFE-MODRECIP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SAFE-MODRECIP (U)
    (PROG (Q *MSG *PROTFG)
      (SETQ *MSG NIL)
      (SETQ *PROTFG T)
      (COND ((EQCAR U '|:MOD:|) (SETQ U (CDR U))))
      (SETQ Q (ERRORSET (LIST 'GENERAL-MODULAR-RECIPROCAL U) NIL NIL))
      (SETQ ERFG* NIL)
      (RETURN (COND ((ERRORP Q) NIL) (T (CAR Q)))))) 
(ENDMODULE) 