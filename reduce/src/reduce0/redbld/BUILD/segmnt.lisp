(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'SEGMNT)) 
(NULL (SETQ *MODE 'SYMBOLIC)) 
(GLOBAL '(GENTRANLANG* MAXEXPPRINTLEN* TEMPVARNAME* TEMPVARNUM* TEMPVARTYPE*)) 
(SHARE
 (LIST 'GENTRANLANG* 'MAXEXPPRINTLEN* 'TEMPVARNAME* 'TEMPVARNUM* 'TEMPVARTYPE*)) 
(SETQ MAXEXPPRINTLEN* (PROGN (SETQ ALGLIST* (CONS NIL NIL)) 800)) 
(SETQ TEMPVARNAME* (PROGN (SETQ ALGLIST* (CONS NIL NIL)) 'T)) 
(SETQ TEMPVARNUM* (PROGN (SETQ ALGLIST* (CONS NIL NIL)) 0)) 
(SETQ TEMPVARTYPE* (PROGN (SETQ ALGLIST* (CONS NIL NIL)) NIL)) 
(FLAG '(MARKEDVARP MARKVAR TEMPVAR UNMARKVAR) 'OPFN) 
(GLOBAL '(*DO* *FOR*)) 
(PUT 'SEG 'NUMBER-OF-ARGS 1) 
(PUT 'SEG 'DEFINED-ON-LINE '57) 
(PUT 'SEG 'DEFINED-IN-FILE 'GENTRAN/SEGMNT.RED) 
(PUT 'SEG 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SEG (FORMS)
    (PROG (F FORALL-RESULT FORALL-ENDPTR)
      (SETQ F FORMS)
      (COND ((NULL F) (RETURN NIL)))
      (SETQ FORALL-RESULT
              (SETQ FORALL-ENDPTR
                      (CONS
                       ((LAMBDA (F)
                          (COND
                           ((LISPEXPP F)
                            (COND ((TOOLONGEXPP F) (SEGEXP F 'UNKNOWN)) (T F)))
                           ((LISPSTMTP F) (SEGSTMT F))
                           ((LISPSTMTGPP F)
                            (COND ((TOOLONGSTMTGPP F) (SEGGROUP F)) (T F)))
                           ((LISPDEFP F)
                            (COND ((TOOLONGDEFP F) (SEGDEF F)) (T F)))
                           (T F)))
                        (CAR F))
                       NIL)))
     LOOPLABEL
      (SETQ F (CDR F))
      (COND ((NULL F) (RETURN FORALL-RESULT)))
      (RPLACD FORALL-ENDPTR
              (CONS
               ((LAMBDA (F)
                  (COND
                   ((LISPEXPP F)
                    (COND ((TOOLONGEXPP F) (SEGEXP F 'UNKNOWN)) (T F)))
                   ((LISPSTMTP F) (SEGSTMT F))
                   ((LISPSTMTGPP F)
                    (COND ((TOOLONGSTMTGPP F) (SEGGROUP F)) (T F)))
                   ((LISPDEFP F) (COND ((TOOLONGDEFP F) (SEGDEF F)) (T F)))
                   (T F)))
                (CAR F))
               NIL))
      (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
      (GO LOOPLABEL))) 
(PUT 'SEGEXP 'NUMBER-OF-ARGS 2) 
(PUT 'SEGEXP 'DEFINED-ON-LINE '87) 
(PUT 'SEGEXP 'DEFINED-IN-FILE 'GENTRAN/SEGMNT.RED) 
(PUT 'SEGEXP 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE SEGEXP (EXP TYPE) (REVERSE (SEGEXP1 EXP TYPE))) 
(PUT 'SEGEXP1 'NUMBER-OF-ARGS 2) 
(PUT 'SEGEXP1 'DEFINED-ON-LINE '92) 
(PUT 'SEGEXP1 'DEFINED-IN-FILE 'GENTRAN/SEGMNT.RED) 
(PUT 'SEGEXP1 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE SEGEXP1 (EXP TYPE)
    (PROG (RES)
      (SETQ RES (SEGEXP2 EXP TYPE))
      (UNMARKVAR RES)
      (COND
       ((EQUAL (CAR RES) (CADADR RES))
        (PROGN (SETQ RES (CDR RES)) (RPLACA RES (CADDAR RES)))))
      (RETURN RES))) 
(PUT 'SEGEXP2 'NUMBER-OF-ARGS 2) 
(PUT 'SEGEXP2 'DEFINED-ON-LINE '107) 
(PUT 'SEGEXP2 'DEFINED-IN-FILE 'GENTRAN/SEGMNT.RED) 
(PUT 'SEGEXP2 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE SEGEXP2 (EXP TYPE)
    (PROG (EXPN ASSIGNS NEWASSIGNS UNOPS OP TERMLIST VAR TMP)
      (SETQ EXPN EXP)
      (PROG ()
       WHILELABEL
        (COND ((NOT (EQUAL (LENGTH EXPN) 2)) (RETURN NIL)))
        (PROGN (SETQ UNOPS (CONS (CAR EXPN) UNOPS)) (SETQ EXPN (CADR EXPN)))
        (GO WHILELABEL))
      (SETQ OP (CAR EXPN))
      (PROG (TERM)
        (SETQ TERM (CDR EXPN))
       LAB
        (COND ((NULL TERM) (RETURN NIL)))
        ((LAMBDA (TERM)
           (PROGN
            (COND
             ((TOOLONGEXPP TERM)
              (PROGN
               (SETQ TMP (SEGEXP2 TERM TYPE))
               (SETQ TERM (CAR TMP))
               (SETQ NEWASSIGNS (CDR TMP))))
             (T (SETQ NEWASSIGNS 'NIL)))
            (COND
             ((AND (TOOLONGEXPP (CONS OP (CONS TERM TERMLIST))) TERMLIST
                   (OR (GREATERP (LENGTH TERMLIST) 1) (PAIRP (CAR TERMLIST))))
              (PROGN
               (UNMARKVAR TERMLIST)
               (SETQ VAR (OR VAR (TEMPVAR TYPE)))
               (MARKVAR VAR)
               (SETQ ASSIGNS
                       (CONS
                        (MKASSIGN VAR
                         (COND ((ONEP (LENGTH TERMLIST)) (CAR TERMLIST))
                               (T (CONS OP TERMLIST))))
                        ASSIGNS))
               (SETQ TERMLIST (LIST VAR TERM))))
             (T (SETQ TERMLIST (APPEND TERMLIST (LIST TERM)))))
            (SETQ ASSIGNS (APPEND NEWASSIGNS ASSIGNS))))
         (CAR TERM))
        (SETQ TERM (CDR TERM))
        (GO LAB))
      (SETQ EXPN
              (COND ((ONEP (LENGTH TERMLIST)) (CAR TERMLIST))
                    (T (CONS OP TERMLIST))))
      (PROG ()
       WHILELABEL
        (COND ((NOT UNOPS) (RETURN NIL)))
        (PROGN (SETQ EXPN (LIST (CAR UNOPS) EXPN)) (SETQ UNOPS (CDR UNOPS)))
        (GO WHILELABEL))
      (COND
       ((EQUAL EXPN EXP)
        (PROGN
         (UNMARKVAR EXPN)
         (SETQ VAR (OR VAR (TEMPVAR TYPE)))
         (MARKVAR VAR)
         (SETQ ASSIGNS (LIST (MKASSIGN VAR EXPN)))
         (SETQ EXPN VAR))))
      (RETURN (CONS EXPN ASSIGNS)))) 
(PUT 'SEGSTMT 'NUMBER-OF-ARGS 1) 
(PUT 'SEGSTMT 'DEFINED-ON-LINE '159) 
(PUT 'SEGSTMT 'DEFINED-IN-FILE 'GENTRAN/SEGMNT.RED) 
(PUT 'SEGSTMT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SEGSTMT (STMT)
    (COND
     ((LISPASSIGNP STMT)
      (COND ((TOOLONGASSIGNP STMT) (SEGASSIGN STMT)) (T STMT)))
     ((LISPCONDP STMT) (COND ((TOOLONGCONDP STMT) (SEGCOND STMT)) (T STMT)))
     ((LISPWHILEP STMT) (COND ((TOOLONGWHILEP STMT) (SEGWHILE STMT)) (T STMT)))
     ((LISPREPEATP STMT)
      (COND ((TOOLONGREPEATP STMT) (SEGREPEAT STMT)) (T STMT)))
     ((LISPFORP STMT) (COND ((TOOLONGFORP STMT) (SEGFOR STMT)) (T STMT)))
     ((LISPRETURNP STMT)
      (COND ((TOOLONGRETURNP STMT) (SEGRETURN STMT)) (T STMT)))
     (T STMT))) 
(PUT 'SEGASSIGN 'NUMBER-OF-ARGS 1) 
(PUT 'SEGASSIGN 'DEFINED-ON-LINE '205) 
(PUT 'SEGASSIGN 'DEFINED-IN-FILE 'GENTRAN/SEGMNT.RED) 
(PUT 'SEGASSIGN 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SEGASSIGN (STMT)
    (PROG (VAR EXP TYPE)
      (SETQ VAR (CADR STMT))
      (SETQ TYPE (GETVARTYPE VAR))
      (SETQ EXP (CADDR STMT))
      (SETQ STMT (SEGEXP1 EXP TYPE))
      (RPLACA STMT (MKASSIGN VAR (CAR STMT)))
      (RETURN (MKSTMTGP NIL (REVERSE STMT))))) 
(PUT 'SEGCOND 'NUMBER-OF-ARGS 1) 
(PUT 'SEGCOND 'DEFINED-ON-LINE '217) 
(PUT 'SEGCOND 'DEFINED-IN-FILE 'GENTRAN/SEGMNT.RED) 
(PUT 'SEGCOND 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SEGCOND (CONDD)
    (PROG (TASSIGNS RES MARKEDVARS TYPE)
      (SETQ TYPE
              (OR (GET GENTRANLANG* 'BOOLEAN-TYPE)
                  (GET 'FORTRAN 'BOOLEAN-TYPE)))
      (PROG ()
       WHILELABEL
        (COND ((NOT (SETQ CONDD (CDR CONDD))) (RETURN NIL)))
        (PROG (EXP STMT)
          (COND
           ((TOOLONGEXPP (SETQ EXP (CAAR CONDD)))
            (PROGN
             (SETQ EXP (SEGEXP1 EXP TYPE))
             (SETQ TASSIGNS (APPEND (CDR EXP) TASSIGNS))
             (SETQ EXP (CAR EXP))
             (MARKVAR EXP)
             (SETQ MARKEDVARS (CONS EXP MARKEDVARS)))))
          (SETQ STMT
                  (PROG (ST FORALL-RESULT FORALL-ENDPTR)
                    (SETQ ST (CDAR CONDD))
                   STARTOVER
                    (COND ((NULL ST) (RETURN NIL)))
                    (SETQ FORALL-RESULT
                            ((LAMBDA (ST) (SEG (LIST ST))) (CAR ST)))
                    (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
                    (SETQ ST (CDR ST))
                    (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
                   LOOPLABEL
                    (COND ((NULL ST) (RETURN FORALL-RESULT)))
                    (RPLACD FORALL-ENDPTR
                            ((LAMBDA (ST) (SEG (LIST ST))) (CAR ST)))
                    (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
                    (SETQ ST (CDR ST))
                    (GO LOOPLABEL)))
          (SETQ RES (CONS (CONS EXP STMT) RES)))
        (GO WHILELABEL))
      (UNMARKVAR MARKEDVARS)
      (RETURN
       (COND
        (TASSIGNS
         (MKSTMTGP NIL (REVERSE (CONS (MKCOND (REVERSE RES)) TASSIGNS))))
        (T (MKCOND (REVERSE RES))))))) 
(PUT 'SEGWHILE 'NUMBER-OF-ARGS 1) 
(PUT 'SEGWHILE 'DEFINED-ON-LINE '248) 
(PUT 'SEGWHILE 'DEFINED-IN-FILE 'GENTRAN/SEGMNT.RED) 
(PUT 'SEGWHILE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SEGWHILE (STMT)
    (PROG (LOGEXP STMTLST TASSIGNS TYPE RES)
      (SETQ LOGEXP (CADR STMT))
      (SETQ STMTLST (CDDR STMT))
      (COND
       ((TOOLONGEXPP LOGEXP)
        (PROGN
         (SETQ TYPE
                 (OR (GET GENTRANLANG* 'BOOLEAN-TYPE)
                     (GET 'FORTRAN 'BOOLEAN-TYPE)))
         (SETQ TASSIGNS (SEGEXP1 LOGEXP TYPE))
         (SETQ LOGEXP (CAR TASSIGNS))
         (SETQ TASSIGNS (CDR TASSIGNS)))))
      (SETQ STMTLST
              (PROG (ST FORALL-RESULT FORALL-ENDPTR)
                (SETQ ST STMTLST)
               STARTOVER
                (COND ((NULL ST) (RETURN NIL)))
                (SETQ FORALL-RESULT ((LAMBDA (ST) (SEG (LIST ST))) (CAR ST)))
                (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
                (SETQ ST (CDR ST))
                (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
               LOOPLABEL
                (COND ((NULL ST) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR ((LAMBDA (ST) (SEG (LIST ST))) (CAR ST)))
                (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
                (SETQ ST (CDR ST))
                (GO LOOPLABEL)))
      (SETQ RES (CONS 'WHILE (CONS LOGEXP STMTLST)))
      (COND
       (TASSIGNS
        (PROGN
         (SETQ RES (APPEND RES (REVERSE TASSIGNS)))
         (SETQ RES (CONS 'PROGN (APPEND (REVERSE TASSIGNS) (LIST RES)))))))
      (RETURN RES))) 
(PUT 'SEGREPEAT 'NUMBER-OF-ARGS 1) 
(PUT 'SEGREPEAT 'DEFINED-ON-LINE '277) 
(PUT 'SEGREPEAT 'DEFINED-IN-FILE 'GENTRAN/SEGMNT.RED) 
(PUT 'SEGREPEAT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SEGREPEAT (STMT)
    (PROG (STMTLST LOGEXP TYPE)
      (SETQ STMT (REVERSE (CDR STMT)))
      (SETQ LOGEXP (CAR STMT))
      (SETQ STMTLST (REVERSE (CDR STMT)))
      (SETQ STMTLST
              (PROG (ST FORALL-RESULT FORALL-ENDPTR)
                (SETQ ST STMTLST)
               STARTOVER
                (COND ((NULL ST) (RETURN NIL)))
                (SETQ FORALL-RESULT ((LAMBDA (ST) (SEG (LIST ST))) (CAR ST)))
                (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
                (SETQ ST (CDR ST))
                (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
               LOOPLABEL
                (COND ((NULL ST) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR ((LAMBDA (ST) (SEG (LIST ST))) (CAR ST)))
                (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
                (SETQ ST (CDR ST))
                (GO LOOPLABEL)))
      (COND
       ((TOOLONGEXPP LOGEXP)
        (PROGN
         (SETQ TYPE
                 (OR (GET GENTRANLANG* 'BOOLEAN-TYPE)
                     (GET 'FORTRAN 'BOOLEAN-TYPE)))
         (SETQ LOGEXP (SEGEXP1 LOGEXP TYPE))
         (SETQ STMTLST (APPEND STMTLST (REVERSE (CDR LOGEXP))))
         (SETQ LOGEXP (CAR LOGEXP)))))
      (RETURN (CONS 'REPEAT (APPEND STMTLST (LIST LOGEXP)))))) 
(PUT 'SEGFOR 'NUMBER-OF-ARGS 1) 
(PUT 'SEGFOR 'DEFINED-ON-LINE '299) 
(PUT 'SEGFOR 'DEFINED-IN-FILE 'GENTRAN/SEGMNT.RED) 
(PUT 'SEGFOR 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SEGFOR (STMT)
    (PROG (VAR LOEXP STEPEXP HIEXP STMTLST TASSIGNS1 TASSIGNS2 TYPE MARKEDVARS
           RES)
      (SETQ VAR (CADR STMT))
      (SETQ TYPE (GETVARTYPE VAR))
      (SETQ STMT (CDDR STMT))
      (SETQ LOEXP (CAAR STMT))
      (SETQ STEPEXP (CADAR STMT))
      (SETQ HIEXP (CADDAR STMT))
      (SETQ STMTLST (CDDR STMT))
      (COND
       ((TOOLONGEXPP LOEXP)
        (PROGN
         (SETQ LOEXP (SEGEXP1 LOEXP TYPE))
         (SETQ TASSIGNS1 (REVERSE (CDR LOEXP)))
         (SETQ LOEXP (CAR LOEXP))
         (MARKVAR LOEXP)
         (SETQ MARKEDVARS (CONS LOEXP MARKEDVARS)))))
      (COND
       ((TOOLONGEXPP STEPEXP)
        (PROGN
         (SETQ STEPEXP (SEGEXP1 STEPEXP TYPE))
         (SETQ TASSIGNS2 (REVERSE (CDR STEPEXP)))
         (SETQ STEPEXP (CAR STEPEXP))
         (MARKVAR STEPEXP)
         (SETQ MARKEDVARS (CONS STEPEXP MARKEDVARS)))))
      (COND
       ((TOOLONGEXPP HIEXP)
        (PROGN
         (SETQ HIEXP (SEGEXP1 HIEXP TYPE))
         (SETQ TASSIGNS1 (APPEND TASSIGNS1 (REVERSE (CDR HIEXP))))
         (SETQ TASSIGNS2 (APPEND TASSIGNS2 (REVERSE (CDR HIEXP))))
         (SETQ HIEXP (CAR HIEXP)))))
      (UNMARKVAR MARKEDVARS)
      (SETQ STMTLST
              (PROG (ST FORALL-RESULT FORALL-ENDPTR)
                (SETQ ST STMTLST)
               STARTOVER
                (COND ((NULL ST) (RETURN NIL)))
                (SETQ FORALL-RESULT ((LAMBDA (ST) (SEG (LIST ST))) (CAR ST)))
                (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
                (SETQ ST (CDR ST))
                (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
               LOOPLABEL
                (COND ((NULL ST) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR ((LAMBDA (ST) (SEG (LIST ST))) (CAR ST)))
                (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
                (SETQ ST (CDR ST))
                (GO LOOPLABEL)))
      (SETQ STMTLST (APPEND STMTLST TASSIGNS2))
      (SETQ RES
              (CONS *FOR*
                    (CONS VAR
                          (CONS (LIST LOEXP STEPEXP HIEXP)
                                (CONS *DO* STMTLST)))))
      (COND (TASSIGNS1 (RETURN (MKSTMTGP NIL (APPEND TASSIGNS1 (LIST RES)))))
            (T (RETURN RES))))) 
(PUT 'SEGRETURN 'NUMBER-OF-ARGS 1) 
(PUT 'SEGRETURN 'DEFINED-ON-LINE '345) 
(PUT 'SEGRETURN 'DEFINED-IN-FILE 'GENTRAN/SEGMNT.RED) 
(PUT 'SEGRETURN 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SEGRETURN (RET)
    (PROGN
     (SETQ RET (SEGEXP1 (CADR RET) 'UNKNOWN))
     (RPLACA RET (MKRETURN (CAR RET)))
     (MKSTMTGP NIL (REVERSE RET)))) 
(PUT 'SEGGROUP 'NUMBER-OF-ARGS 1) 
(PUT 'SEGGROUP 'DEFINED-ON-LINE '353) 
(PUT 'SEGGROUP 'DEFINED-IN-FILE 'GENTRAN/SEGMNT.RED) 
(PUT 'SEGGROUP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SEGGROUP (STMTGP)
    (PROG (LOCVARS RES)
      (COND
       ((EQ (CAR STMTGP) 'PROG)
        (PROGN (SETQ LOCVARS (CADR STMTGP)) (SETQ STMTGP (CDR STMTGP))))
       (T (SETQ LOCVARS 0)))
      (PROG ()
       WHILELABEL
        (COND ((NOT (SETQ STMTGP (CDR STMTGP))) (RETURN NIL)))
        (SETQ RES (APPEND (SEG (LIST (CAR STMTGP))) RES))
        (GO WHILELABEL))
      (RETURN (MKSTMTGP LOCVARS (REVERSE RES))))) 
(PUT 'SEGDEF 'NUMBER-OF-ARGS 1) 
(PUT 'SEGDEF 'DEFINED-ON-LINE '369) 
(PUT 'SEGDEF 'DEFINED-IN-FILE 'GENTRAN/SEGMNT.RED) 
(PUT 'SEGDEF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SEGDEF (DEFF)
    (MKDEF (CADR DEFF) (CADDR DEFF)
     (PROG (STMT FORALL-RESULT FORALL-ENDPTR)
       (SETQ STMT (CDDDR DEFF))
      STARTOVER
       (COND ((NULL STMT) (RETURN NIL)))
       (SETQ FORALL-RESULT ((LAMBDA (STMT) (SEG (LIST STMT))) (CAR STMT)))
       (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
       (SETQ STMT (CDR STMT))
       (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
      LOOPLABEL
       (COND ((NULL STMT) (RETURN FORALL-RESULT)))
       (RPLACD FORALL-ENDPTR ((LAMBDA (STMT) (SEG (LIST STMT))) (CAR STMT)))
       (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
       (SETQ STMT (CDR STMT))
       (GO LOOPLABEL)))) 
(PUT 'TOOLONGEXPP 'NUMBER-OF-ARGS 1) 
(PUT 'TOOLONGEXPP 'DEFINED-ON-LINE '380) 
(PUT 'TOOLONGEXPP 'DEFINED-IN-FILE 'GENTRAN/SEGMNT.RED) 
(PUT 'TOOLONGEXPP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE TOOLONGEXPP (EXP) (GREATERP (NUMPRINTLEN EXP) MAXEXPPRINTLEN*)) 
(PUT 'TOOLONGSTMTP 'NUMBER-OF-ARGS 1) 
(PUT 'TOOLONGSTMTP 'DEFINED-ON-LINE '383) 
(PUT 'TOOLONGSTMTP 'DEFINED-IN-FILE 'GENTRAN/SEGMNT.RED) 
(PUT 'TOOLONGSTMTP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE TOOLONGSTMTP (STMT)
    (COND ((ATOM STMT) NIL)
          ((LISPSTMTP STMT)
           (COND ((LISPCONDP STMT) (TOOLONGCONDP STMT))
                 ((LISPASSIGNP STMT) (TOOLONGASSIGNP STMT))
                 ((LISPRETURNP STMT) (TOOLONGRETURNP STMT))
                 ((LISPWHILEP STMT) (TOOLONGWHILEP STMT))
                 ((LISPREPEATP STMT) (TOOLONGREPEATP STMT))
                 ((LISPFORP STMT) (TOOLONGFORP STMT))
                 (T
                  (LISPEVAL
                   (CONS 'OR
                         (PROG (EXP FORALL-RESULT FORALL-ENDPTR)
                           (SETQ EXP STMT)
                           (COND ((NULL EXP) (RETURN NIL)))
                           (SETQ FORALL-RESULT
                                   (SETQ FORALL-ENDPTR
                                           (CONS
                                            ((LAMBDA (EXP) (TOOLONGEXPP EXP))
                                             (CAR EXP))
                                            NIL)))
                          LOOPLABEL
                           (SETQ EXP (CDR EXP))
                           (COND ((NULL EXP) (RETURN FORALL-RESULT)))
                           (RPLACD FORALL-ENDPTR
                                   (CONS
                                    ((LAMBDA (EXP) (TOOLONGEXPP EXP))
                                     (CAR EXP))
                                    NIL))
                           (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                           (GO LOOPLABEL)))))))
          (T (TOOLONGSTMTGPP STMT)))) 
(PUT 'TOOLONGASSIGNP 'NUMBER-OF-ARGS 1) 
(PUT 'TOOLONGASSIGNP 'DEFINED-ON-LINE '402) 
(PUT 'TOOLONGASSIGNP 'DEFINED-IN-FILE 'GENTRAN/SEGMNT.RED) 
(PUT 'TOOLONGASSIGNP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE TOOLONGASSIGNP (ASSIGN) (TOOLONGEXPP (CADDR ASSIGN))) 
(PUT 'TOOLONGCONDP 'NUMBER-OF-ARGS 1) 
(PUT 'TOOLONGCONDP 'DEFINED-ON-LINE '405) 
(PUT 'TOOLONGCONDP 'DEFINED-IN-FILE 'GENTRAN/SEGMNT.RED) 
(PUT 'TOOLONGCONDP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE TOOLONGCONDP (CONDD)
    (PROG (TOOLONG)
      (PROG ()
       WHILELABEL
        (COND ((NOT (SETQ CONDD (CDR CONDD))) (RETURN NIL)))
        (COND
         ((OR (TOOLONGEXPP (CAAR CONDD)) (TOOLONGSTMTP (CADAR CONDD)))
          (SETQ TOOLONG T)))
        (GO WHILELABEL))
      (RETURN TOOLONG))) 
(PUT 'TOOLONGWHILEP 'NUMBER-OF-ARGS 1) 
(PUT 'TOOLONGWHILEP 'DEFINED-ON-LINE '414) 
(PUT 'TOOLONGWHILEP 'DEFINED-IN-FILE 'GENTRAN/SEGMNT.RED) 
(PUT 'TOOLONGWHILEP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE TOOLONGWHILEP (STMT)
    (OR (TOOLONGEXPP (CADR STMT))
        (LISPEVAL
         (CONS 'OR
               (PROG (ST FORALL-RESULT FORALL-ENDPTR)
                 (SETQ ST (CDDR STMT))
                 (COND ((NULL ST) (RETURN NIL)))
                 (SETQ FORALL-RESULT
                         (SETQ FORALL-ENDPTR
                                 (CONS
                                  ((LAMBDA (ST) (TOOLONGSTMTP ST)) (CAR ST))
                                  NIL)))
                LOOPLABEL
                 (SETQ ST (CDR ST))
                 (COND ((NULL ST) (RETURN FORALL-RESULT)))
                 (RPLACD FORALL-ENDPTR
                         (CONS ((LAMBDA (ST) (TOOLONGSTMTP ST)) (CAR ST)) NIL))
                 (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                 (GO LOOPLABEL)))))) 
(PUT 'TOOLONGREPEATP 'NUMBER-OF-ARGS 1) 
(PUT 'TOOLONGREPEATP 'DEFINED-ON-LINE '418) 
(PUT 'TOOLONGREPEATP 'DEFINED-IN-FILE 'GENTRAN/SEGMNT.RED) 
(PUT 'TOOLONGREPEATP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE TOOLONGREPEATP (STMT)
    (PROGN
     (SETQ STMT (REVERSE (CDR STMT)))
     (OR (TOOLONGEXPP (CAR STMT))
         (LISPEVAL
          (CONS 'OR
                (PROG (ST FORALL-RESULT FORALL-ENDPTR)
                  (SETQ ST (CDR STMT))
                  (COND ((NULL ST) (RETURN NIL)))
                  (SETQ FORALL-RESULT
                          (SETQ FORALL-ENDPTR
                                  (CONS
                                   ((LAMBDA (ST) (TOOLONGSTMTP ST)) (CAR ST))
                                   NIL)))
                 LOOPLABEL
                  (SETQ ST (CDR ST))
                  (COND ((NULL ST) (RETURN FORALL-RESULT)))
                  (RPLACD FORALL-ENDPTR
                          (CONS ((LAMBDA (ST) (TOOLONGSTMTP ST)) (CAR ST))
                                NIL))
                  (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                  (GO LOOPLABEL))))))) 
(PUT 'TOOLONGFORP 'NUMBER-OF-ARGS 1) 
(PUT 'TOOLONGFORP 'DEFINED-ON-LINE '425) 
(PUT 'TOOLONGFORP 'DEFINED-IN-FILE 'GENTRAN/SEGMNT.RED) 
(PUT 'TOOLONGFORP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE TOOLONGFORP (STMT)
    (OR
     (LISPEVAL
      (CONS 'OR
            (PROG (EXP FORALL-RESULT FORALL-ENDPTR)
              (SETQ EXP (CADDR STMT))
              (COND ((NULL EXP) (RETURN NIL)))
              (SETQ FORALL-RESULT
                      (SETQ FORALL-ENDPTR
                              (CONS
                               ((LAMBDA (EXP) (TOOLONGEXPP EXP)) (CAR EXP))
                               NIL)))
             LOOPLABEL
              (SETQ EXP (CDR EXP))
              (COND ((NULL EXP) (RETURN FORALL-RESULT)))
              (RPLACD FORALL-ENDPTR
                      (CONS ((LAMBDA (EXP) (TOOLONGEXPP EXP)) (CAR EXP)) NIL))
              (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
              (GO LOOPLABEL))))
     (LISPEVAL
      (CONS 'OR
            (PROG (ST FORALL-RESULT FORALL-ENDPTR)
              (SETQ ST (CDDDDR STMT))
              (COND ((NULL ST) (RETURN NIL)))
              (SETQ FORALL-RESULT
                      (SETQ FORALL-ENDPTR
                              (CONS ((LAMBDA (ST) (TOOLONGSTMTP ST)) (CAR ST))
                                    NIL)))
             LOOPLABEL
              (SETQ ST (CDR ST))
              (COND ((NULL ST) (RETURN FORALL-RESULT)))
              (RPLACD FORALL-ENDPTR
                      (CONS ((LAMBDA (ST) (TOOLONGSTMTP ST)) (CAR ST)) NIL))
              (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
              (GO LOOPLABEL)))))) 
(PUT 'TOOLONGRETURNP 'NUMBER-OF-ARGS 1) 
(PUT 'TOOLONGRETURNP 'DEFINED-ON-LINE '431) 
(PUT 'TOOLONGRETURNP 'DEFINED-IN-FILE 'GENTRAN/SEGMNT.RED) 
(PUT 'TOOLONGRETURNP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE TOOLONGRETURNP (RET) (AND (CDR RET) (TOOLONGEXPP (CADR RET)))) 
(PUT 'TOOLONGSTMTGPP 'NUMBER-OF-ARGS 1) 
(PUT 'TOOLONGSTMTGPP 'DEFINED-ON-LINE '434) 
(PUT 'TOOLONGSTMTGPP 'DEFINED-IN-FILE 'GENTRAN/SEGMNT.RED) 
(PUT 'TOOLONGSTMTGPP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE TOOLONGSTMTGPP (STMTGP)
    (LISPEVAL
     (CONS 'OR
           (PROG (STMT FORALL-RESULT FORALL-ENDPTR)
             (SETQ STMT (CDR STMTGP))
             (COND ((NULL STMT) (RETURN NIL)))
             (SETQ FORALL-RESULT
                     (SETQ FORALL-ENDPTR
                             (CONS
                              ((LAMBDA (STMT) (TOOLONGSTMTP STMT)) (CAR STMT))
                              NIL)))
            LOOPLABEL
             (SETQ STMT (CDR STMT))
             (COND ((NULL STMT) (RETURN FORALL-RESULT)))
             (RPLACD FORALL-ENDPTR
                     (CONS ((LAMBDA (STMT) (TOOLONGSTMTP STMT)) (CAR STMT))
                           NIL))
             (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
             (GO LOOPLABEL))))) 
(PUT 'TOOLONGDEFP 'NUMBER-OF-ARGS 1) 
(PUT 'TOOLONGDEFP 'DEFINED-ON-LINE '438) 
(PUT 'TOOLONGDEFP 'DEFINED-IN-FILE 'GENTRAN/SEGMNT.RED) 
(PUT 'TOOLONGDEFP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE TOOLONGDEFP (DEFF)
    (COND ((LISPSTMTGPP (CADDDR DEFF)) (TOOLONGSTMTGPP (CADDDR DEFF)))
          (T
           (LISPEVAL
            (CONS 'OR
                  (PROG (STMT FORALL-RESULT FORALL-ENDPTR)
                    (SETQ STMT (CDDDR DEFF))
                    (COND ((NULL STMT) (RETURN NIL)))
                    (SETQ FORALL-RESULT
                            (SETQ FORALL-ENDPTR
                                    (CONS
                                     ((LAMBDA (STMT) (TOOLONGSTMTP STMT))
                                      (CAR STMT))
                                     NIL)))
                   LOOPLABEL
                    (SETQ STMT (CDR STMT))
                    (COND ((NULL STMT) (RETURN FORALL-RESULT)))
                    (RPLACD FORALL-ENDPTR
                            (CONS
                             ((LAMBDA (STMT) (TOOLONGSTMTP STMT)) (CAR STMT))
                             NIL))
                    (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                    (GO LOOPLABEL))))))) 
(PUT 'NUMPRINTLEN 'NUMBER-OF-ARGS 1) 
(PUT 'NUMPRINTLEN 'DEFINED-ON-LINE '450) 
(PUT 'NUMPRINTLEN 'DEFINED-IN-FILE 'GENTRAN/SEGMNT.RED) 
(PUT 'NUMPRINTLEN 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE NUMPRINTLEN (EXP)
    (COND ((ATOM EXP) (LENGTH (EXPLODE EXP)))
          ((ONEP (LENGTH EXP)) (NUMPRINTLEN (CAR EXP)))
          ((EQUAL (CAR EXP) '|:RD:|)
           (PROGN
            (SETQ EXP (|RD:EXPLODE| EXP))
            (PLUS 2 (LENGTH (CAR EXP)) (LENGTH (EXPLODE (CADR EXP))))))
          ((MEMQ (CAR EXP) '(|:CR:| |:CRN:| |:GI:|))
           (PROGN
            (SETQ EXP
                    (CONS (|RD:EXPLODE| (CONS '|:RD:| (CADR EXP)))
                          (|RD:EXPLODE| (CONS '|:RD:| (CDDR EXP)))))
            (PLUS 12 (LENGTH (CAAR EXP)) (LENGTH (EXPLODE (CDAR EXP)))
                  (LENGTH (CADR EXP)) (LENGTH (EXPLODE (CDDR EXP))))))
          (T
           (PLUS (LENGTH EXP)
                 (LISPEVAL
                  (CONS 'PLUS
                        (PROG (ELT FORALL-RESULT FORALL-ENDPTR)
                          (SETQ ELT (CDR EXP))
                          (COND ((NULL ELT) (RETURN NIL)))
                          (SETQ FORALL-RESULT
                                  (SETQ FORALL-ENDPTR
                                          (CONS
                                           ((LAMBDA (ELT) (NUMPRINTLEN ELT))
                                            (CAR ELT))
                                           NIL)))
                         LOOPLABEL
                          (SETQ ELT (CDR ELT))
                          (COND ((NULL ELT) (RETURN FORALL-RESULT)))
                          (RPLACD FORALL-ENDPTR
                                  (CONS
                                   ((LAMBDA (ELT) (NUMPRINTLEN ELT)) (CAR ELT))
                                   NIL))
                          (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                          (GO LOOPLABEL)))))))) 
(PUT 'TEMPVAR 'NUMBER-OF-ARGS 1) 
(PUT 'TEMPVAR 'DEFINED-ON-LINE '480) 
(PUT 'TEMPVAR 'DEFINED-IN-FILE 'GENTRAN/SEGMNT.RED) 
(PUT 'TEMPVAR 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE TEMPVAR (TYPE)
    (PROG (TVAR XNAME NUM)
      (COND ((MEMQ TYPE '(NIL 0)) (SETQ TYPE TEMPVARTYPE*)))
      (SETQ XNAME (EXPLODE TEMPVARNAME*))
      (SETQ NUM TEMPVARNUM*)
      (COND
       ((MEMQ TYPE '(NIL UNKNOWN))
        (PROG ()
         REPEATLABEL
          (PROGN
           (SETQ TVAR (INTERN (COMPRESS (APPEND XNAME (EXPLODE NUM)))))
           (SETQ NUM (ADD1 NUM)))
          (COND
           ((NOT
             (AND (NOT (MARKEDVARP TVAR)) (NOT (GET TVAR '*VTYPE*))
                  (NOT (GETVARTYPE TVAR))))
            (GO REPEATLABEL)))))
       (T
        (PROG ()
         REPEATLABEL
          (PROGN
           (SETQ TVAR (INTERN (COMPRESS (APPEND XNAME (EXPLODE NUM)))))
           (SETQ NUM (ADD1 NUM)))
          (COND
           ((NOT
             (AND (NOT (MARKEDVARP TVAR))
                  (OR (EQ (GET TVAR '*VTYPE*) TYPE)
                      (AND (NOT (GET TVAR '*VTYPE*))
                           (NOT (GETVARTYPE TVAR))))))
            (GO REPEATLABEL))))))
      (PUT TVAR '*VTYPE* TYPE)
      (COND ((EQ TYPE 'UNKNOWN) (GENTRANERR 'W TVAR "UNDECLARED VARIABLE" NIL))
            (TYPE (SYMTABPUT NIL TVAR (LIST TYPE))))
      (RETURN TVAR))) 
(PUT 'ISNUMBER 'NUMBER-OF-ARGS 1) 
(PUT 'ISNUMBER 'DEFINED-ON-LINE '531) 
(PUT 'ISNUMBER 'DEFINED-IN-FILE 'GENTRAN/SEGMNT.RED) 
(PUT 'ISNUMBER 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE ISNUMBER (U) (OR (NUMBERP U) (AND (PAIRP U) (MEMQ (CAR U) DOMAINLIST*)))) 
(PUT 'MARKVAR 'NUMBER-OF-ARGS 1) 
(PUT 'MARKVAR 'DEFINED-ON-LINE '534) 
(PUT 'MARKVAR 'DEFINED-IN-FILE 'GENTRAN/SEGMNT.RED) 
(PUT 'MARKVAR 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MARKVAR (VAR)
    (COND ((ISNUMBER VAR) VAR)
          ((ATOM VAR) (PROGN (FLAG (LIST VAR) '*MARKED*) VAR))
          (T
           (PROGN
            (PROG (V)
              (SETQ V VAR)
             LAB
              (COND ((NULL V) (RETURN NIL)))
              ((LAMBDA (V) (MARKVAR V)) (CAR V))
              (SETQ V (CDR V))
              (GO LAB))
            VAR)))) 
(PUT 'MARKEDVARP 'NUMBER-OF-ARGS 1) 
(PUT 'MARKEDVARP 'DEFINED-ON-LINE '542) 
(PUT 'MARKEDVARP 'DEFINED-IN-FILE 'GENTRAN/SEGMNT.RED) 
(PUT 'MARKEDVARP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MARKEDVARP (VAR) (FLAGP VAR '*MARKED*)) 
(PUT 'UNMARKVAR 'NUMBER-OF-ARGS 1) 
(PUT 'UNMARKVAR 'DEFINED-ON-LINE '545) 
(PUT 'UNMARKVAR 'DEFINED-IN-FILE 'GENTRAN/SEGMNT.RED) 
(PUT 'UNMARKVAR 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE UNMARKVAR (VAR)
    (COND ((ISNUMBER VAR) VAR) ((ATOM VAR) (REMFLAG (LIST VAR) '*MARKED*))
          (T
           (PROG (ELT)
             (SETQ ELT VAR)
            LAB
             (COND ((NULL ELT) (RETURN NIL)))
             ((LAMBDA (ELT) (UNMARKVAR ELT)) (CAR ELT))
             (SETQ ELT (CDR ELT))
             (GO LAB))))) 
(ENDMODULE) 