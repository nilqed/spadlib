(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'INTFIERZ)) 
(EXPORTS (LIST 'CALC_MAP_TAR 'CALC_DEN_TAR 'PRE-CALC-MAP_)) 
(IMPORTS (LIST 'MK-NUMR 'MAP_-TO-STRAND)) 
(NULL (SETQ *MODE 'SYMBOLIC)) 
(PUT 'SORT-MAP_ 'NUMBER-OF-ARGS 5) 
(PUT 'SORT-MAP_ 'DEFINED-ON-LINE '52) 
(PUT 'SORT-MAP_ 'DEFINED-IN-FILE 'HEPHYS/INTFIERZ.RED) 
(PUT 'SORT-MAP_ 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE SORT-MAP_ (MAP_ TADEPOLES DELTAS POLES S)
    (COND ((NULL MAP_) (LIST S TADEPOLES DELTAS POLES))
          (T
           (PROG (VERT TDP)
             (SETQ VERT (INCIDENT1 '|_0| (CAR MAP_) 'LL))
             (COND ((NULL VERT) (SETQ TDP (TADEPOLEP (CAR MAP_))))
                   (T
                    (RETURN
                     (COND
                      ((EQUAL (CAAR VERT) '|_0|)
                       (SORT-MAP_ (CDR MAP_) TADEPOLES DELTAS
                        (CONS (CAADR VERT) POLES) S))
                      ((EQUAL (CAADR VERT) '|_0|)
                       (SORT-MAP_ (CDR MAP_) TADEPOLES DELTAS
                        (CONS (CAAR VERT) POLES) S))
                      ((EQUAL (CAR VERT) (CADR VERT))
                       (SORT-MAP_ (CDR MAP_) (CONS (CAAR VERT) TADEPOLES)
                        DELTAS POLES S))
                      (T
                       (SORT-MAP_ (CDR MAP_) TADEPOLES
                        (CONS (LIST 'CONS (CAAR VERT) (CAADR VERT)) DELTAS)
                        POLES S))))))
             (RETURN
              (COND
               ((NULL TDP)
                (SORT-MAP_ (CDR MAP_) TADEPOLES DELTAS POLES
                 (CONS (CAR MAP_) S)))
               (T
                (SORT-MAP_ (CDR MAP_) (CONS (CADR TDP) TADEPOLES) DELTAS
                 (CONS (CAAR TDP) POLES) S)))))))) 
(PUT 'TADEPOLEP 'NUMBER-OF-ARGS 1) 
(PUT 'TADEPOLEP 'DEFINED-ON-LINE '82) 
(PUT 'TADEPOLEP 'DEFINED-IN-FILE 'HEPHYS/INTFIERZ.RED) 
(PUT 'TADEPOLEP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE TADEPOLEP (VRT)
    (COND ((EQUAL (CAR VRT) (CADR VRT)) (CONS (CADDR VRT) (CAR VRT)))
          ((EQUAL (CAR VRT) (CADDR VRT)) (CONS (CADR VRT) (CAR VRT)))
          ((EQUAL (CADR VRT) (CADDR VRT)) (CONS (CAR VRT) (CADR VRT))) (T NIL))) 
(PUT 'DEL-TADES 'NUMBER-OF-ARGS 2) 
(PUT 'DEL-TADES 'DEFINED-ON-LINE '91) 
(PUT 'DEL-TADES 'DEFINED-IN-FILE 'HEPHYS/INTFIERZ.RED) 
(PUT 'DEL-TADES 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE DEL-TADES (TADES EDGES)
    (COND ((NULL TADES) EDGES)
          (T (DEL-TADES (CDR TADES) (DELETE (CAR TADES) EDGES))))) 
(PUT 'DEL-DELTAS 'NUMBER-OF-ARGS 2) 
(PUT 'DEL-DELTAS 'DEFINED-ON-LINE '95) 
(PUT 'DEL-DELTAS 'DEFINED-IN-FILE 'HEPHYS/INTFIERZ.RED) 
(PUT 'DEL-DELTAS 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE DEL-DELTAS (DELTAS EDGES)
    (COND ((NULL (CDR DELTAS)) EDGES)
          (T (DEL-DELTAS (CDR DELTAS) (DEL-TADES (CDAR DELTAS) EDGES))))) 
(PUT 'PRE-CALC-MAP_ 'NUMBER-OF-ARGS 2) 
(PUT 'PRE-CALC-MAP_ 'DEFINED-ON-LINE '101) 
(PUT 'PRE-CALC-MAP_ 'DEFINED-IN-FILE 'HEPHYS/INTFIERZ.RED) 
(PUT 'PRE-CALC-MAP_ 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE PRE-CALC-MAP_ (MAP_ EDGES)
    (PROG (STRAND W)
      (SETQ W (SORT-MAP_ MAP_ NIL (LIST 1) NIL NIL))
      (SETQ EDGES
              (DEL-DELTAS (CADDR W) (DEL-TADES (CADR W) (DELETE '|_0| EDGES))))
      (SETQ STRAND (COND ((CAR W) (MAP_-TO-STRAND EDGES (CAR W))) (T NIL)))
      (RETURN (CONS STRAND W)))) 
(PUT 'CALC_MAP_TAR 'NUMBER-OF-ARGS 2) 
(PUT 'CALC_MAP_TAR 'DEFINED-ON-LINE '116) 
(PUT 'CALC_MAP_TAR 'DEFINED-IN-FILE 'HEPHYS/INTFIERZ.RED) 
(PUT 'CALC_MAP_TAR 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE CALC_MAP_TAR (GSTRAND ALST)
    (PROG (POLES EDGES STRAND DELTAS TADES MAP_)
      (SETQ STRAND (CAR GSTRAND))
      (SETQ MAP_ (CADR GSTRAND))
      (SETQ TADES (CADDR GSTRAND))
      (SETQ DELTAS (CAR (CDDDR GSTRAND)))
      (SETQ POLES (CAR (CDDDDR GSTRAND)))
      (COND ((EV-POLES POLES ALST) (RETURN 0)))
      (RETURN
       (CONSTIMES
        (LIST (CONSTIMES DELTAS) (CONSTIMES (EV-TADES TADES ALST))
              (COND ((NULL MAP_) 1) (T (STRAND-ALG-TOP STRAND MAP_ ALST)))))))) 
(PUT 'EV-POLES 'NUMBER-OF-ARGS 2) 
(PUT 'EV-POLES 'DEFINED-ON-LINE '132) 
(PUT 'EV-POLES 'DEFINED-IN-FILE 'HEPHYS/INTFIERZ.RED) 
(PUT 'EV-POLES 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE EV-POLES (POLES ALST)
    (COND ((NULL POLES) NIL)
          ((EQUAL (CDR (ASSOC (CAR POLES) ALST)) 0)
           (EV-POLES (CDR POLES) ALST))
          (T POLES))) 
(PUT 'EV-DELTAS 'NUMBER-OF-ARGS 1) 
(PUT 'EV-DELTAS 'DEFINED-ON-LINE '138) 
(PUT 'EV-DELTAS 'DEFINED-IN-FILE 'HEPHYS/INTFIERZ.RED) 
(PUT 'EV-DELTAS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE EV-DELTAS (DELTAS)
    (COND ((NULL DELTAS) (LIST 1))
          (T (CONS (CONS 'CONS (CAR DELTAS)) (EV-DELTAS (CDR DELTAS)))))) 
(PUT 'EV-TADES 'NUMBER-OF-ARGS 2) 
(PUT 'EV-TADES 'DEFINED-ON-LINE '142) 
(PUT 'EV-TADES 'DEFINED-IN-FILE 'HEPHYS/INTFIERZ.RED) 
(PUT 'EV-TADES 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE EV-TADES (TADES ALST)
    (COND ((NULL TADES) (LIST 1))
          (T
           (CONS (BINC NDIM* (CDR (ASSOC (CAR TADES) ALST)))
                 (EV-TADES (CDR TADES) ALST))))) 
(PUT 'EV-EDGELOOP 'NUMBER-OF-ARGS 2) 
(PUT 'EV-EDGELOOP 'DEFINED-ON-LINE '149) 
(PUT 'EV-EDGELOOP 'DEFINED-IN-FILE 'HEPHYS/INTFIERZ.RED) 
(PUT 'EV-EDGELOOP 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE EV-EDGELOOP (EDGE ALST) (BINC NDIM* (CDR (ASSOC (CAR EDGE) ALST)))) 
(PUT 'EV-DENOM2 'NUMBER-OF-ARGS 2) 
(PUT 'EV-DENOM2 'DEFINED-ON-LINE '153) 
(PUT 'EV-DENOM2 'DEFINED-IN-FILE 'HEPHYS/INTFIERZ.RED) 
(PUT 'EV-DENOM2 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE EV-DENOM2 (VERT ALST) (EV-EDGELOOP (CAR VERT) ALST)) 
(PUT 'EV-DENOM3 'NUMBER-OF-ARGS 2) 
(PUT 'EV-DENOM3 'DEFINED-ON-LINE '157) 
(PUT 'EV-DENOM3 'DEFINED-IN-FILE 'HEPHYS/INTFIERZ.RED) 
(PUT 'EV-DENOM3 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE EV-DENOM3 (VERT ALST)
    (PROG (E1 E2 E3 LINES SIGN |3J| NUMR)
      (SETQ E1 (CDR (ASSOC (CAR (CAR VERT)) ALST)))
      (SETQ E2 (CDR (ASSOC (CAR (CADR VERT)) ALST)))
      (SETQ E3 (CDR (ASSOC (CAR (CADDR VERT)) ALST)))
      (SETQ LINES (QUOTIENT (PLUS E1 E2 E3) 2))
      (SETQ E1 (DIFFERENCE LINES E1))
      (SETQ E2 (DIFFERENCE LINES E2))
      (SETQ E3 (DIFFERENCE LINES E3))
      (SETQ SIGN
              (EXPT (MINUS 1)
                    (PLUS (TIMES E1 E2) (TIMES E1 E3) (TIMES E2 E3))))
      (SETQ NUMR (MK-NUMR NDIM* 0 LINES))
      (SETQ NUMR (COND (NUMR (CONSTIMES NUMR)) (T 1)))
      (SETQ |3J|
              (LISTQUOTIENT NUMR
               (TIMES (FACTORIAL E1) (FACTORIAL E2) (FACTORIAL E3) SIGN)))
      (RETURN |3J|))) 
(PUT 'BINC 'NUMBER-OF-ARGS 2) 
(PUT 'BINC 'DEFINED-ON-LINE '177) 
(PUT 'BINC 'DEFINED-IN-FILE 'HEPHYS/INTFIERZ.RED) 
(PUT 'BINC 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE BINC (N P)
    (COND ((EQUAL 0 P) 1)
          (T (LISTQUOTIENT (CONSTIMES (MK-NUMR N 0 P)) (FACTORIAL P))))) 
(PUT 'CALC_DEN_TAR 'NUMBER-OF-ARGS 2) 
(PUT 'CALC_DEN_TAR 'DEFINED-ON-LINE '182) 
(PUT 'CALC_DEN_TAR 'DEFINED-IN-FILE 'HEPHYS/INTFIERZ.RED) 
(PUT 'CALC_DEN_TAR 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE CALC_DEN_TAR (DEN_ ALST)
    ((LAMBDA (U)
       (COND ((NULL U) 1) ((NULL (CDR U)) (CAR U)) (T (CONSTIMES U))))
     (DENLIST DEN_ ALST))) 
(PUT 'DENLIST 'NUMBER-OF-ARGS 2) 
(PUT 'DENLIST 'DEFINED-ON-LINE '188) 
(PUT 'DENLIST 'DEFINED-IN-FILE 'HEPHYS/INTFIERZ.RED) 
(PUT 'DENLIST 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE DENLIST (DEN_ ALST)
    (COND ((NULL DEN_) NIL)
          ((EQUAL (LENGTH (CAR DEN_)) 2)
           (CONS (EV-DENOM2 (CAR DEN_) ALST) (DENLIST (CDR DEN_) ALST)))
          (T (CONS (EV-DENOM3 (CAR DEN_) ALST) (DENLIST (CDR DEN_) ALST))))) 
(ENDMODULE) 