(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'NUMEVAL)) 
(PUT 'ACCURACYCONTROL 'NUMBER-OF-ARGS 3) 
(PUT 'ACCURACYCONTROL 'DEFINED-ON-LINE '36) 
(PUT 'ACCURACYCONTROL 'DEFINED-IN-FILE 'NUMERIC/NUMEVAL.RED) 
(PUT 'ACCURACYCONTROL 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE ACCURACYCONTROL (U DA DI)
    (PROG (X N V)
      (SETQ V U)
      (SETQ ACCURACY* DA)
      (SETQ ITERATIONS* DI)
      (PROG ()
       WHILELABEL
        (COND ((NOT V) (RETURN NIL)))
        (PROGN
         (SETQ X (CAR V))
         (SETQ V (CDR V))
         (COND
          ((AND (EQCAR X 'EQUAL) (MEMQ (CADR X) '(ACCURACY ITERATIONS)))
           (PROGN
            (SETQ U (DELETE X U))
            (SETQ N (CADDR X))
            (COND ((EQUAL (CADR X) 'ACCURACY) (SETQ ACCURACY* N))
                  (T (SETQ ITERATIONS* N)))
            NIL))))
        (GO WHILELABEL))
      (RETURN U))) 
(PUT 'UPDATE-PRECISION 'NUMBER-OF-ARGS 1) 
(PUT 'UPDATE-PRECISION 'DEFINED-ON-LINE '53) 
(PUT 'UPDATE-PRECISION 'DEFINED-IN-FILE 'NUMERIC/NUMEVAL.RED) 
(PUT 'UPDATE-PRECISION 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE UPDATE-PRECISION (L)
    (PROG (MN ZP P)
      (SETQ ZP 0)
      (SETQ P 0)
      (SETQ MN (UPDATE-PRECISION1 L))
      (COND ((NULL MN) (RETURN NIL)))
      (SETQ P (PRECISION 0))
      (SETQ ZP (|:RECIP| (EXPT 10 (DIFFERENCE P 3))))
      (PROGN
       (COND
        (((LAMBDA (A B) (|:MINUSP| (|:DIFFERENCE| B A))) MN ZP) (RETURN NIL)))
       (PROG ()
        WHILELABEL
         (COND
          ((NOT ((LAMBDA (A B) (|:MINUSP| (|:DIFFERENCE| A B))) MN ZP))
           (RETURN NIL)))
         (PROGN (SETQ P (|:PLUSN| P 1)) (SETQ ZP (|::QUOTIENT| ZP 10)))
         (GO WHILELABEL))
       NIL)
      (PRECMSG P))) 
(PUT 'UPDATE-PRECISION1 'NUMBER-OF-ARGS 1) 
(PUT 'UPDATE-PRECISION1 'DEFINED-ON-LINE '68) 
(PUT 'UPDATE-PRECISION1 'DEFINED-IN-FILE 'NUMERIC/NUMEVAL.RED) 
(PUT 'UPDATE-PRECISION1 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE UPDATE-PRECISION1 (L)
    (PROG (X Y Z)
      (PROG ()
       WHILELABEL
        (COND ((NOT L) (RETURN NIL)))
        (PROGN
         (SETQ X (CAR L))
         (SETQ L (CDR L))
         (COND
          ((NOT (|:ZEROP| X))
           (PROGN
            (SETQ Y (ABSF X))
            (SETQ Z
                    (COND
                     ((OR (NULL Z)
                          ((LAMBDA (A B) (|:MINUSP| (|:DIFFERENCE| A B))) Y Z))
                      Y)
                     (T Z)))))))
        (GO WHILELABEL))
      (RETURN Z))) 
(SETK 'RULES_RD
      (AEVAL
       (LIST 'LIST
             (LIST 'REPLACEBY (LIST 'EXPT (LIST '~ 'U) (LIST '~ 'X))
                   (LIST 'WHEN (LIST 'EXP (LIST 'TIMES (LIST 'LOG 'U) 'X))
                         (LIST 'NOT (LIST 'NUMBERP 'X))))))) 
(PUT 'SWITCH-MODE-RD-ALG 'NUMBER-OF-ARGS 1) 
(FLAG '(SWITCH-MODE-RD-ALG) 'OPFN) 
(PUT 'SWITCH-MODE-RD-ALG 'DEFINED-ON-LINE '86) 
(PUT 'SWITCH-MODE-RD-ALG 'DEFINED-IN-FILE 'NUMERIC/NUMEVAL.RED) 
(PUT 'SWITCH-MODE-RD-ALG 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SWITCH-MODE-RD-ALG (U)
    (COND
     ((EVALEQUAL (AEVAL U) 0)
      (PROGN
       (AEVAL (FORALL (LIST '(X) 'T '(CLEAR (LIST (LIST 'EXP 'X))))))
       (AEVAL (LET '(RULES_RD)))
       (AEVAL 'NIL)))
     (T
      (PROGN
       (AEVAL (FORALL (LIST '(X) 'T '(LET00 '((EQUAL (EXP X) (EXPT E X)))))))
       (AEVAL (CLEARRULES (LIST 'RULES_RD)))
       (AEVAL 'NIL))))) 
(AEVAL 'NIL) 
(FLUID '(*ROUNDED)) 
(PUT 'SWITCH-MODE-RD 'NUMBER-OF-ARGS 1) 
(PUT 'SWITCH-MODE-RD 'DEFINED-ON-LINE '98) 
(PUT 'SWITCH-MODE-RD 'DEFINED-IN-FILE 'NUMERIC/NUMEVAL.RED) 
(PUT 'SWITCH-MODE-RD 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SWITCH-MODE-RD (U)
    (PROG (OLDMODE PREC NE)
      (COND
       ((NULL U)
        (PROGN
         (COND
          ((NOT (MEMQ DMODE* '(|:RD:| |:CR|)))
           (PROGN (SETQ OLDMODE T) (SETDMODE 'ROUNDED (SETQ *ROUNDED T)))))
         (SETQ NE *NOEQUIV)
         (SETQ *NOEQUIV T)
         (SETQ PREC (PRECISION 0))
         (SWITCH-MODE-RD-ALG 0)
         (RETURN (LIST OLDMODE PREC *ROUNDBF NE))))
       (T
        (PROGN
         (COND ((CAR U) (SETDMODE 'ROUNDED (SETQ *ROUNDED NIL))))
         (PRECISION (CADR U))
         (SETQ *ROUNDBF (CADDR U))
         (SETQ *NOEQUIV (CADDDR U))
         (SWITCH-MODE-RD-ALG 1)
         NIL))))) 
(FLUID '(DMARITH* *EVALUATEERROR)) 
(SETQ DMARITH*
        '((DIFFERENCE . |:DIFFERENCE|) (QUOTIENT . |::QUOTIENT|) (MINUS . NEGF)
          (SQRT . NUM-SQRTF) (EXPT . |:DMEXPT|) (MIN . |DM:MIN|)
          (MAX . |DM:MAX|))) 
(PUT 'EVALUATE 'NUMBER-OF-ARGS 3) 
(PUT 'EVALUATE 'DEFINED-ON-LINE '131) 
(PUT 'EVALUATE 'DEFINED-IN-FILE 'NUMERIC/NUMEVAL.RED) 
(PUT 'EVALUATE 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE EVALUATE (U V P)
    (PROG (A R *EVALUATEERROR MSG)
      (SETQ MSG (NOT *PROTFG))
      (SETQ A (PAIR V P))
      ((LAMBDA (*MSG *PROTFG)
         (SETQ R (ERRORSET (LIST 'EVALUATE0 (MKQUOTE U) (MKQUOTE A)) MSG NIL)))
       NIL T)
      (COND
       ((ERRORP R)
        (REDERR "error during function evaluation (e.g. singularity)")))
      (RETURN (CAR R)))) 
(PUT 'EVALUATE* 'NUMBER-OF-ARGS 3) 
(PUT 'EVALUATE* 'DEFINED-ON-LINE '142) 
(PUT 'EVALUATE* 'DEFINED-IN-FILE 'NUMERIC/NUMEVAL.RED) 
(PUT 'EVALUATE* 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE EVALUATE* (U V P)
    (PROG (A R *EVALUATEERROR)
      (SETQ A (PAIR V P))
      ((LAMBDA (*MSG *PROTFG)
         (SETQ R (ERRORSET (LIST 'EVALUATE0 (MKQUOTE U) (MKQUOTE A)) NIL NIL)))
       NIL T)
      (SETQ ERFG* NIL)
      (COND ((NULL *EVALUATEERROR) (RETURN R)) (T (EVALUATE0 U A))))) 
(PUT 'EVALUATE0 'NUMBER-OF-ARGS 2) 
(PUT 'EVALUATE0 'DEFINED-ON-LINE '154) 
(PUT 'EVALUATE0 'DEFINED-IN-FILE 'NUMERIC/NUMEVAL.RED) 
(PUT 'EVALUATE0 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE EVALUATE0 (U V) (EVALUATE1 (EVALUATE-HORNER U) V)) 
(PUT 'EVALUATE1 'NUMBER-OF-ARGS 2) 
(PUT 'EVALUATE1 'DEFINED-ON-LINE '157) 
(PUT 'EVALUATE1 'DEFINED-IN-FILE 'NUMERIC/NUMEVAL.RED) 
(PUT 'EVALUATE1 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE EVALUATE1 (U V)
    (COND ((OR (NUMBERP U) (NULL U)) (FORCE-TO-DM U))
          ((AND (PAIRP U) (GET (CAR U) 'DNAME)) U)
          (T
           ((LAMBDA (A)
              (COND (A (CDR A))
                    ((ATOM U)
                     (COND
                      ((EQUAL U 'I)
                       (COND
                        ((SETQ U (GET DMODE* 'IVALUE)) (CAR (APPLY U '(NIL))))
                        (T (REDERR "i used as indeterminate value"))))
                      ((OR (EQUAL U 'E) (EQUAL U 'PI))
                       (FORCE-TO-DM (CAR (SIMP U))))
                      (T (PROGN (SETQ *EVALUATEERROR T) (TYPERR U "number")))))
                    (T (EVALUATE2 (CAR U) (CDR U) V))))
            (ASSOC U V))))) 
(PUT 'EVALUATE2 'NUMBER-OF-ARGS 3) 
(PUT 'EVALUATE2 'DEFINED-ON-LINE '170) 
(PUT 'EVALUATE2 'DEFINED-IN-FILE 'NUMERIC/NUMEVAL.RED) 
(PUT 'EVALUATE2 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE EVALUATE2 (OP PARS V)
    (COND ((EQUAL OP '|:DN:|) (CAR (|DN:SIMP| PARS)))
          (T
           ((LAMBDA (A)
              (PROGN
               (SETQ PARS
                       (PROG (P FORALL-RESULT FORALL-ENDPTR)
                         (SETQ P PARS)
                         (COND ((NULL P) (RETURN NIL)))
                         (SETQ FORALL-RESULT
                                 (SETQ FORALL-ENDPTR
                                         (CONS
                                          ((LAMBDA (P) (EVALUATE1 P V))
                                           (CAR P))
                                          NIL)))
                        LOOPLABEL
                         (SETQ P (CDR P))
                         (COND ((NULL P) (RETURN FORALL-RESULT)))
                         (RPLACD FORALL-ENDPTR
                                 (CONS ((LAMBDA (P) (EVALUATE1 P V)) (CAR P))
                                       NIL))
                         (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                         (GO LOOPLABEL)))
               (COND ((EQUAL OP 'PLUS) (|:DMPLUSLST| PARS))
                     ((EQUAL OP 'TIMES) (|:DMTIMESLST| PARS))
                     ((SETQ A (ASSOC OP DMARITH*)) (APPLY (CDR A) PARS))
                     ((AND (PAIRP (CAR PARS)) (SETQ A (GET OP (CAAR PARS))))
                      (APPLY A PARS))
                     (T
                      (FORCE-TO-DM
                       (CAR
                        (SIMP
                         (CONS OP
                               (PROG (P FORALL-RESULT FORALL-ENDPTR)
                                 (SETQ P PARS)
                                 (COND ((NULL P) (RETURN NIL)))
                                 (SETQ FORALL-RESULT
                                         (SETQ FORALL-ENDPTR
                                                 (CONS
                                                  ((LAMBDA (P) (PREPF P))
                                                   (CAR P))
                                                  NIL)))
                                LOOPLABEL
                                 (SETQ P (CDR P))
                                 (COND ((NULL P) (RETURN FORALL-RESULT)))
                                 (RPLACD FORALL-ENDPTR
                                         (CONS ((LAMBDA (P) (PREPF P)) (CAR P))
                                               NIL))
                                 (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                                 (GO LOOPLABEL))))))))))
            NIL)))) 
(PUT 'LIST-EVALUATE 'NUMBER-OF-ARGS 3) 
(PUT 'LIST-EVALUATE 'DEFINED-ON-LINE '184) 
(PUT 'LIST-EVALUATE 'DEFINED-IN-FILE 'NUMERIC/NUMEVAL.RED) 
(PUT 'LIST-EVALUATE 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE LIST-EVALUATE (U V P)
    (PROG (R FORALL-RESULT FORALL-ENDPTR)
      (SETQ R U)
      (COND ((NULL R) (RETURN NIL)))
      (SETQ FORALL-RESULT
              (SETQ FORALL-ENDPTR
                      (CONS ((LAMBDA (R) (EVALUATE R V P)) (CAR R)) NIL)))
     LOOPLABEL
      (SETQ R (CDR R))
      (COND ((NULL R) (RETURN FORALL-RESULT)))
      (RPLACD FORALL-ENDPTR (CONS ((LAMBDA (R) (EVALUATE R V P)) (CAR R)) NIL))
      (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
      (GO LOOPLABEL))) 
(PUT 'MATRIX-EVALUATE 'NUMBER-OF-ARGS 3) 
(PUT 'MATRIX-EVALUATE 'DEFINED-ON-LINE '187) 
(PUT 'MATRIX-EVALUATE 'DEFINED-IN-FILE 'NUMERIC/NUMEVAL.RED) 
(PUT 'MATRIX-EVALUATE 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE MATRIX-EVALUATE (U V P)
    (PROG (R FORALL-RESULT FORALL-ENDPTR)
      (SETQ R U)
      (COND ((NULL R) (RETURN NIL)))
      (SETQ FORALL-RESULT
              (SETQ FORALL-ENDPTR
                      (CONS ((LAMBDA (R) (LIST-EVALUATE R V P)) (CAR R)) NIL)))
     LOOPLABEL
      (SETQ R (CDR R))
      (COND ((NULL R) (RETURN FORALL-RESULT)))
      (RPLACD FORALL-ENDPTR
              (CONS ((LAMBDA (R) (LIST-EVALUATE R V P)) (CAR R)) NIL))
      (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
      (GO LOOPLABEL))) 
(PUT '|:DMEXPT| 'NUMBER-OF-ARGS 2) 
(PUT '|:DMEXPT| 'DEFINED-ON-LINE '190) 
(PUT '|:DMEXPT| 'DEFINED-IN-FILE 'NUMERIC/NUMEVAL.RED) 
(PUT '|:DMEXPT| 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE |:DMEXPT| (U V)
    ((LAMBDA (N)
       (COND ((FIXP N) (|:EXPT| U N))
             (T
              (PROGN
               (SETQ U (FORCE-TO-DM U))
               (SETQ V (FORCE-TO-DM V))
               (COND (*COMPLEX (CREXPT* U V)) (T (RDEXPT* U V)))))))
     (|:DM2FIX| V))) 
(PUT '|DM:MIN| 'NUMBER-OF-ARGS 2) 
(PUT '|DM:MIN| 'DEFINED-ON-LINE '196) 
(PUT '|DM:MIN| 'DEFINED-IN-FILE 'NUMERIC/NUMEVAL.RED) 
(PUT '|DM:MIN| 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE |DM:MIN| (A B)
    (COND (((LAMBDA (A B) (|:MINUSP| (|:DIFFERENCE| B A))) A B) B) (T A))) 
(PUT '|DM:MAX| 'NUMBER-OF-ARGS 2) 
(PUT '|DM:MAX| 'DEFINED-ON-LINE '199) 
(PUT '|DM:MAX| 'DEFINED-IN-FILE 'NUMERIC/NUMEVAL.RED) 
(PUT '|DM:MAX| 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE |DM:MAX| (A B)
    (COND (((LAMBDA (A B) (|:MINUSP| (|:DIFFERENCE| B A))) A B) A) (T B))) 
(PUT '|:DM2FIX| 'NUMBER-OF-ARGS 1) 
(PUT '|:DM2FIX| 'DEFINED-ON-LINE '202) 
(PUT '|:DM2FIX| 'DEFINED-IN-FILE 'NUMERIC/NUMEVAL.RED) 
(PUT '|:DM2FIX| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |:DM2FIX| (U)
    (COND ((FIXP U) U)
          (T
           ((LAMBDA (*NOEQUIV)
              (COND ((FIXP (SETQ U (INT-EQUIV-CHK U))) U) ((NULL U) 0)
                    ((AND (FLOATP (CDR U))
                          (EQUAL 0.0 (DIFFERENCE (CDR U) (FIX (CDR U)))))
                     (FIX (CDR U)))
                    (T U)))
            NIL)))) 
(PUT '|:DMTIMESLST| 'NUMBER-OF-ARGS 1) 
(PUT '|:DMTIMESLST| 'DEFINED-ON-LINE '209) 
(PUT '|:DMTIMESLST| 'DEFINED-IN-FILE 'NUMERIC/NUMEVAL.RED) 
(PUT '|:DMTIMESLST| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |:DMTIMESLST| (U)
    (COND ((NULL U) 1) ((NULL (CDR U)) (CAR U))
          (T (|:TIMESN| (CAR U) (|:DMTIMESLST| (CDR U)))))) 
(PUT '|:DMPLUSLST| 'NUMBER-OF-ARGS 1) 
(PUT '|:DMPLUSLST| 'DEFINED-ON-LINE '214) 
(PUT '|:DMPLUSLST| 'DEFINED-IN-FILE 'NUMERIC/NUMEVAL.RED) 
(PUT '|:DMPLUSLST| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |:DMPLUSLST| (U)
    (COND ((NULL U) 0) ((NULL (CDR U)) (CAR U))
          (T (|:PLUSN| (CAR U) (|:DMPLUSLST| (CDR U)))))) 
(PUT '|::QUOTIENT| 'NUMBER-OF-ARGS 2) 
(PUT '|::QUOTIENT| 'DEFINED-ON-LINE '219) 
(PUT '|::QUOTIENT| 'DEFINED-IN-FILE 'NUMERIC/NUMEVAL.RED) 
(PUT '|::QUOTIENT| 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE |::QUOTIENT| (U V) (|:QUOTIENT| U (COND ((FIXP V) (I2RD* V)) (T V)))) 
(PUT 'LIST+LIST 'NUMBER-OF-ARGS 2) 
(PUT 'LIST+LIST 'DEFINED-ON-LINE '224) 
(PUT 'LIST+LIST 'DEFINED-IN-FILE 'NUMERIC/NUMEVAL.RED) 
(PUT 'LIST+LIST 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE LIST+LIST (L1 L2)
    (COND ((NULL L1) NIL)
          (T
           (CONS (|:PLUSN| (CAR L1) (CAR L2)) (LIST+LIST (CDR L1) (CDR L2)))))) 
(PUT 'LIST-LIST 'NUMBER-OF-ARGS 2) 
(PUT 'LIST-LIST 'DEFINED-ON-LINE '228) 
(PUT 'LIST-LIST 'DEFINED-IN-FILE 'NUMERIC/NUMEVAL.RED) 
(PUT 'LIST-LIST 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE LIST-LIST (L1 L2)
    (COND ((NULL L1) NIL)
          (T
           (CONS (|:DIFFERENCE| (CAR L1) (CAR L2))
                 (LIST-LIST (CDR L1) (CDR L2)))))) 
(PUT 'SCAL*LIST 'NUMBER-OF-ARGS 2) 
(PUT 'SCAL*LIST 'DEFINED-ON-LINE '232) 
(PUT 'SCAL*LIST 'DEFINED-IN-FILE 'NUMERIC/NUMEVAL.RED) 
(PUT 'SCAL*LIST 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE SCAL*LIST (S L)
    (COND ((NULL L) NIL)
          (T (CONS (|:TIMESN| S (CAR L)) (SCAL*LIST S (CDR L)))))) 
(PUT 'INNERPRODUCT 'NUMBER-OF-ARGS 2) 
(PUT 'INNERPRODUCT 'DEFINED-ON-LINE '237) 
(PUT 'INNERPRODUCT 'DEFINED-IN-FILE 'NUMERIC/NUMEVAL.RED) 
(PUT 'INNERPRODUCT 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE INNERPRODUCT (U V)
    (COND ((NULL U) 0)
          (T
           (|:PLUSN| (|:TIMESN| (CAR U) (CAR V))
                     (INNERPRODUCT (CDR U) (CDR V)))))) 
(PUT 'CONJLIST 'NUMBER-OF-ARGS 1) 
(PUT 'CONJLIST 'DEFINED-ON-LINE '241) 
(PUT 'CONJLIST 'DEFINED-IN-FILE 'NUMERIC/NUMEVAL.RED) 
(PUT 'CONJLIST 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE CONJLIST (U)
    (COND ((NOT *COMPLEX) U)
          (T
           (PROG (X FORALL-RESULT FORALL-ENDPTR)
             (SETQ X U)
             (COND ((NULL X) (RETURN NIL)))
             (SETQ FORALL-RESULT
                     (SETQ FORALL-ENDPTR
                             (CONS
                              ((LAMBDA (X)
                                 (|:DIFFERENCE| (REPARTF X)
                                                (|:TIMESN|
                                                 (CAR
                                                  (APPLY (GET DMODE* 'IVALUE)
                                                         '(NIL)))
                                                 (IMPARTF X))))
                               (CAR X))
                              NIL)))
            LOOPLABEL
             (SETQ X (CDR X))
             (COND ((NULL X) (RETURN FORALL-RESULT)))
             (RPLACD FORALL-ENDPTR
                     (CONS
                      ((LAMBDA (X)
                         (|:DIFFERENCE| (REPARTF X)
                                        (|:TIMESN|
                                         (CAR
                                          (APPLY (GET DMODE* 'IVALUE) '(NIL)))
                                         (IMPARTF X))))
                       (CAR X))
                      NIL))
             (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
             (GO LOOPLABEL))))) 
(PUT 'NORMLIST 'NUMBER-OF-ARGS 1) 
(PUT 'NORMLIST 'DEFINED-ON-LINE '246) 
(PUT 'NORMLIST 'DEFINED-IN-FILE 'NUMERIC/NUMEVAL.RED) 
(PUT 'NORMLIST 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE NORMLIST (U) (NUM-SQRTF (INNERPRODUCT U (CONJLIST U)))) 
(PUT 'MAT*LIST 'NUMBER-OF-ARGS 2) 
(PUT 'MAT*LIST 'DEFINED-ON-LINE '249) 
(PUT 'MAT*LIST 'DEFINED-IN-FILE 'NUMERIC/NUMEVAL.RED) 
(PUT 'MAT*LIST 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MAT*LIST (M V)
    (COND ((NULL (CDR M)) (SCAL*LIST (CAR V) (CAR M)))
          (T
           (PROG (R FORALL-RESULT FORALL-ENDPTR)
             (SETQ R M)
             (COND ((NULL R) (RETURN NIL)))
             (SETQ FORALL-RESULT
                     (SETQ FORALL-ENDPTR
                             (CONS ((LAMBDA (R) (INNERPRODUCT R V)) (CAR R))
                                   NIL)))
            LOOPLABEL
             (SETQ R (CDR R))
             (COND ((NULL R) (RETURN FORALL-RESULT)))
             (RPLACD FORALL-ENDPTR
                     (CONS ((LAMBDA (R) (INNERPRODUCT R V)) (CAR R)) NIL))
             (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
             (GO LOOPLABEL))))) 
(PUT 'NUM-SQRTF 'NUMBER-OF-ARGS 1) 
(PUT 'NUM-SQRTF 'DEFINED-ON-LINE '253) 
(PUT 'NUM-SQRTF 'DEFINED-IN-FILE 'NUMERIC/NUMEVAL.RED) 
(PUT 'NUM-SQRTF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE NUM-SQRTF (A)
    (COND
     ((OR (ATOM A) (ATOM (CAR A)))
      (APPLY (GET 'SQRT DMODE*) (LIST (FORCE-TO-DM A))))
     (T
      (PROGN
       (SETQ A (SIMPSQRT (LIST (PREPF A))))
       (COND
        ((OR (NOT (ONEP (CDR A)))
             (NOT (OR (ATOM (CAR A)) (ATOM (CAR (CAR A))))))
         (REDERR "sqrtf called in wrong mode"))
        (T (CAR A))))))) 
(PUT 'FORCE-TO-DM 'NUMBER-OF-ARGS 1) 
(PUT 'FORCE-TO-DM 'DEFINED-ON-LINE '264) 
(PUT 'FORCE-TO-DM 'DEFINED-IN-FILE 'NUMERIC/NUMEVAL.RED) 
(PUT 'FORCE-TO-DM 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FORCE-TO-DM (A)
    (COND ((NOT (OR (ATOM A) (ATOM (CAR A)))) (TYPERR (PREPF A) "number"))
          ((NULL A) (FORCE-TO-DM 0))
          ((NUMBERP A) (APPLY (GET DMODE* 'I2D) (LIST A)))
          ((AND (PAIRP A) (EQUAL (CAR A) DMODE*)) A)
          (T
           ((LAMBDA (FCN)
              (COND (FCN (APPLY FCN (LIST A)))
                    (T (REDERR (LIST "conversion error with " A)))))
            (AND (PAIRP A) (GET (CAR A) DMODE*)))))) 
(PUT 'PRINTSFLIST 'NUMBER-OF-ARGS 1) 
(PUT 'PRINTSFLIST 'DEFINED-ON-LINE '273) 
(PUT 'PRINTSFLIST 'DEFINED-IN-FILE 'NUMERIC/NUMEVAL.RED) 
(PUT 'PRINTSFLIST 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PRINTSFLIST (X)
    (PROG (N)
      (SETQ N 0)
      (WRITEPRI "(" NIL)
      (PROG (Y)
        (SETQ Y X)
       LAB
        (COND ((NULL Y) (RETURN NIL)))
        ((LAMBDA (Y)
           (PROGN
            (COND ((GREATERP N 0) (WRITEPRI " , " NIL)))
            (SETQ N (PLUS N 1))
            (WRITEPRI (MKQUOTE (PREPF Y)) NIL)))
         (CAR Y))
        (SETQ Y (CDR Y))
        (GO LAB))
      (WRITEPRI ")" NIL))) 
(FLUID '(HORNER-CACHE*)) 
(PUT 'EVALUATE-HORNER 'NUMBER-OF-ARGS 1) 
(PUT 'EVALUATE-HORNER 'DEFINED-ON-LINE '285) 
(PUT 'EVALUATE-HORNER 'DEFINED-IN-FILE 'NUMERIC/NUMEVAL.RED) 
(PUT 'EVALUATE-HORNER 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE EVALUATE-HORNER (U)
    ((LAMBDA (W)
       (COND (W (CDR W))
             (T
              (PROGN
               (SETQ W (SIMP* U))
               (SETQ W (PREPSQ (CONS (HORNERF (CAR W)) (HORNERF (CDR W)))))
               (SETQ HORNER-CACHE* (CONS (CONS U W) HORNER-CACHE*))
               W))))
     (ASSOC U HORNER-CACHE*))) 
(ENDMODULE) 