(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'MODPOLY)) 
(FLUID
 '(CURRENT-MODULUS EXACT-QUOTIENT-FLAG M-IMAGE-VARIABLE MODULUS/2
   REDUCTION-COUNT)) 
(DE COMES-BEFORE (P1 P2)
    (OR (AND (EQUAL (CAR P1) (CAR P2)) (IGREATERP (CDR P1) (CDR P2)))
        (AND (NOT (EQUAL (CAR P1) (CAR P2))) (ORDOP (CAR P1) (CAR P2))))) 
(PUT 'COMES-BEFORE 'NUMBER-OF-ARGS 2) 
(PUT 'COMES-BEFORE 'DEFINED-ON-LINE '41) 
(PUT 'COMES-BEFORE 'DEFINED-IN-FILE 'FACTOR/MODPOLY.RED) 
(PUT 'COMES-BEFORE 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(PUTC 'COMES-BEFORE 'INLINE
      '(LAMBDA (P1 P2)
         (OR (AND (EQUAL (CAR P1) (CAR P2)) (IGREATERP (CDR P1) (CDR P2)))
             (AND (NOT (EQUAL (CAR P1) (CAR P2))) (ORDOP (CAR P1) (CAR P2)))))) 
(PUT 'PLUS-MOD-P 'NUMBER-OF-ARGS 2) 
(PUT 'PLUS-MOD-P 'DEFINED-ON-LINE '68) 
(PUT 'PLUS-MOD-P 'DEFINED-IN-FILE 'FACTOR/MODPOLY.RED) 
(PUT 'PLUS-MOD-P 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE PLUS-MOD-P (A B)
    (PROG (W R X)
     TOP
      (COND ((NULL A) (PROGN (SETQ W B) (GO EXIT)))
            ((NULL B) (PROGN (SETQ W A) (GO EXIT)))
            ((OR (ATOM A) (ATOM (CAR A)))
             (COND
              ((OR (ATOM B) (ATOM (CAR B)))
               (PROGN
                (SETQ W
                        ((LAMBDA (U) (COND ((ZEROP U) NIL) (T U)))
                         (PROG (RESULT)
                           (SETQ RESULT (IPLUS2 A B))
                           (COND
                            ((NOT (ILESSP RESULT CURRENT-MODULUS))
                             (SETQ RESULT
                                     (IDIFFERENCE RESULT CURRENT-MODULUS))))
                           (RETURN RESULT))))
                (GO EXIT)))
              (T (PROGN (SETQ R (CONS (CAR B) R)) (SETQ B (CDR B)) (GO TOP)))))
            ((OR (ATOM B) (ATOM (CAR B)))
             (PROGN (SETQ R (CONS (CAR A) R)) (SETQ A (CDR A)) (GO TOP)))
            ((EQUAL (CAAR A) (CAAR B))
             (PROGN
              (SETQ X (PLUS-MOD-P (CDAR A) (CDAR B)))
              (COND (X (SETQ R (CONS (CONS (CAAR A) X) R))))
              (SETQ A (CDR A))
              (SETQ B (CDR B))
              (GO TOP)))
            ((OR
              (AND (EQUAL (CAR (CAAR A)) (CAR (CAAR B)))
                   (IGREATERP (CDR (CAAR A)) (CDR (CAAR B))))
              (AND (NOT (EQUAL (CAR (CAAR A)) (CAR (CAAR B))))
                   (ORDOP (CAR (CAAR A)) (CAR (CAAR B)))))
             (PROGN (SETQ R (CONS (CAR A) R)) (SETQ A (CDR A)) (GO TOP)))
            (T (PROGN (SETQ R (CONS (CAR B) R)) (SETQ B (CDR B)) (GO TOP))))
     EXIT
      (PROG ()
       WHILELABEL
        (COND ((NOT R) (RETURN NIL)))
        (PROGN (SETQ A (CDR R)) (RPLACD R W) (SETQ W R) (SETQ R A))
        (GO WHILELABEL))
      (RETURN W))) 
(PUT 'TIMES-MOD-P 'NUMBER-OF-ARGS 2) 
(PUT 'TIMES-MOD-P 'DEFINED-ON-LINE '111) 
(PUT 'TIMES-MOD-P 'DEFINED-IN-FILE 'FACTOR/MODPOLY.RED) 
(PUT 'TIMES-MOD-P 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE TIMES-MOD-P (A B)
    (COND ((OR (NULL A) (NULL B)) NIL)
          ((OR (ATOM A) (ATOM (CAR A))) (MULTIPLY-BY-CONSTANT-MOD-P B A))
          ((OR (ATOM B) (ATOM (CAR B))) (MULTIPLY-BY-CONSTANT-MOD-P A B))
          ((EQUAL (CAAAR A) (CAAAR B))
           (PLUS-MOD-P
            (PLUS-MOD-P (TIMES-TERM-MOD-P (CAR A) B)
             (TIMES-TERM-MOD-P (CAR B) (CDR A)))
            (TIMES-MOD-P (CDR A) (CDR B))))
          ((ORDOP (CAAAR A) (CAAAR B))
           ((LAMBDA (G601 G602)
              (COND ((NULL G601) G602) (T (CONS (CONS (CAAR A) G601) G602))))
            (TIMES-MOD-P (CDAR A) B) (TIMES-MOD-P (CDR A) B)))
          (T
           ((LAMBDA (G604 G605)
              (COND ((NULL G604) G605) (T (CONS (CONS (CAAR B) G604) G605))))
            (TIMES-MOD-P A (CDAR B)) (TIMES-MOD-P A (CDR B)))))) 
(PUT 'TIMES-TERM-MOD-P 'NUMBER-OF-ARGS 2) 
(PUT 'TIMES-TERM-MOD-P 'DEFINED-ON-LINE '144) 
(PUT 'TIMES-TERM-MOD-P 'DEFINED-IN-FILE 'FACTOR/MODPOLY.RED) 
(PUT 'TIMES-TERM-MOD-P 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE TIMES-TERM-MOD-P (TERM B)
    (PROG (W R TMP)
     TOP
      (COND ((NULL B) (PROGN (SETQ R NIL) (GO EXIT)))
            ((OR (ATOM B) (ATOM (CAR B)))
             (PROGN
              (SETQ R
                      ((LAMBDA (G607)
                         (COND ((NULL G607) NIL)
                               (T (CONS (CONS (CAR TERM) G607) NIL))))
                       (MULTIPLY-BY-CONSTANT-MOD-P (CDR TERM) B)))
              (GO EXIT)))
            ((EQUAL (CAAR TERM) (CAAAR B))
             (PROGN
              (SETQ W
                      (CONS
                       (CONS
                        (GETPOWER (FKERN (CAAR TERM))
                                  (IPLUS2 (CDAR TERM) (CDAAR B)))
                        (TIMES-MOD-P (CDR TERM) (CDAR B)))
                       W))
              (SETQ B (CDR B))
              (GO TOP)))
            ((ORDOP (CAAR TERM) (CAAAR B))
             (PROGN
              (SETQ R
                      ((LAMBDA (G610)
                         (COND ((NULL G610) NIL)
                               (T (CONS (CONS (CAR TERM) G610) NIL))))
                       (TIMES-MOD-P (CDR TERM) B)))
              (GO EXIT)))
            (T
             (PROGN
              (SETQ W
                      (CONS (CONS (CAAR B) (TIMES-TERM-MOD-P TERM (CDAR B)))
                            W))
              (SETQ B (CDR B))
              (GO TOP))))
     EXIT
      (PROG ()
       WHILELABEL
        (COND ((NOT W) (RETURN NIL)))
        (PROGN
         (SETQ TMP (CDR W))
         (COND ((CDAR W) (PROGN (RPLACD W R) (SETQ R W))))
         (SETQ W TMP))
        (GO WHILELABEL))
      (RETURN R))) 
(PUT 'DIFFERENCE-MOD-P 'NUMBER-OF-ARGS 2) 
(PUT 'DIFFERENCE-MOD-P 'DEFINED-ON-LINE '177) 
(PUT 'DIFFERENCE-MOD-P 'DEFINED-IN-FILE 'FACTOR/MODPOLY.RED) 
(PUT 'DIFFERENCE-MOD-P 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE DIFFERENCE-MOD-P (A B) (PLUS-MOD-P A (MINUS-MOD-P B))) 
(PUT 'MINUS-MOD-P 'NUMBER-OF-ARGS 1) 
(PUT 'MINUS-MOD-P 'DEFINED-ON-LINE '180) 
(PUT 'MINUS-MOD-P 'DEFINED-IN-FILE 'FACTOR/MODPOLY.RED) 
(PUT 'MINUS-MOD-P 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MINUS-MOD-P (A)
    (COND ((NULL A) NIL)
          ((OR (ATOM A) (ATOM (CAR A)))
           (COND ((EQUAL A 0) A) (T (IDIFFERENCE CURRENT-MODULUS A))))
          (T
           (CONS (CONS (CAAR A) (MINUS-MOD-P (CDAR A)))
                 (MINUS-MOD-P (CDR A)))))) 
(PUT 'REDUCE-MOD-P 'NUMBER-OF-ARGS 1) 
(PUT 'REDUCE-MOD-P 'DEFINED-ON-LINE '186) 
(PUT 'REDUCE-MOD-P 'DEFINED-IN-FILE 'FACTOR/MODPOLY.RED) 
(PUT 'REDUCE-MOD-P 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REDUCE-MOD-P (A)
    (COND ((NULL A) NIL)
          ((OR (ATOM A) (ATOM (CAR A)))
           ((LAMBDA (U) (COND ((ZEROP U) NIL) (T U))) (MODULAR-NUMBER A)))
          (T
           ((LAMBDA (G613 G614)
              (COND ((NULL G613) G614) (T (CONS (CONS (CAAR A) G613) G614))))
            (REDUCE-MOD-P (CDAR A)) (REDUCE-MOD-P (CDR A)))))) 
(PUT 'MONIC-MOD-P 'NUMBER-OF-ARGS 1) 
(PUT 'MONIC-MOD-P 'DEFINED-ON-LINE '192) 
(PUT 'MONIC-MOD-P 'DEFINED-IN-FILE 'FACTOR/MODPOLY.RED) 
(PUT 'MONIC-MOD-P 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MONIC-MOD-P (A)
    (COND ((EQUAL A NIL) NIL) ((OR (ATOM A) (ATOM (CAR A))) 1)
          ((EQUAL (CDAR A) 1) A)
          ((NOT (OR (ATOM (CDAR A)) (ATOM (CAR (CDAR A)))))
           (ERRORF "LC not numeric in monic-mod-p"))
          (T (MULTIPLY-BY-CONSTANT-MOD-P A (MODULAR-RECIPROCAL (CDAR A)))))) 
(PUT 'QUOTFAIL-MOD-P 'NUMBER-OF-ARGS 2) 
(PUT 'QUOTFAIL-MOD-P 'DEFINED-ON-LINE '203) 
(PUT 'QUOTFAIL-MOD-P 'DEFINED-IN-FILE 'FACTOR/MODPOLY.RED) 
(PUT 'QUOTFAIL-MOD-P 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE QUOTFAIL-MOD-P (A B)
    (PROG (C)
      (SETQ EXACT-QUOTIENT-FLAG T)
      (SETQ C (QUOTIENT-MOD-P A B))
      (COND (EXACT-QUOTIENT-FLAG (RETURN C))
            (T (ERRORF "Quotient not exact (mod p)"))))) 
(PUT 'QUOTIENT-MOD-P 'NUMBER-OF-ARGS 2) 
(PUT 'QUOTIENT-MOD-P 'DEFINED-ON-LINE '212) 
(PUT 'QUOTIENT-MOD-P 'DEFINED-IN-FILE 'FACTOR/MODPOLY.RED) 
(PUT 'QUOTIENT-MOD-P 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE QUOTIENT-MOD-P (A B)
    (COND ((NULL B) (ERRORF "b=0 in quotient-mod-p"))
          ((OR (ATOM B) (ATOM (CAR B)))
           (PROG (R)
             (SETQ R (SAFE-MODULAR-RECIPROCAL B))
             (COND ((NULL R) (RETURN (SETQ EXACT-QUOTIENT-FLAG NIL)))
                   (T (RETURN (MULTIPLY-BY-CONSTANT-MOD-P A R))))))
          ((EQUAL A NIL) NIL)
          ((OR (ATOM A) (ATOM (CAR A))) (SETQ EXACT-QUOTIENT-FLAG NIL))
          ((EQUAL (CAAAR A) (CAAAR B)) (XQUOTIENT-MOD-P A B (CAAAR B)))
          ((ORDOP (CAAAR A) (CAAAR B))
           ((LAMBDA (G616 G617)
              (COND ((NULL G616) G617) (T (CONS (CONS (CAAR A) G616) G617))))
            (QUOTIENT-MOD-P (CDAR A) B) (QUOTIENT-MOD-P (CDR A) B)))
          (T (SETQ EXACT-QUOTIENT-FLAG NIL)))) 
(PUT 'XQUOTIENT-MOD-P 'NUMBER-OF-ARGS 3) 
(PUT 'XQUOTIENT-MOD-P 'DEFINED-ON-LINE '235) 
(PUT 'XQUOTIENT-MOD-P 'DEFINED-IN-FILE 'FACTOR/MODPOLY.RED) 
(PUT 'XQUOTIENT-MOD-P 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE XQUOTIENT-MOD-P (A B V)
    (COND ((EQUAL A NIL) NIL)
          ((OR (OR (ATOM A) (ATOM (CAR A))) (NOT (EQUAL (CAAAR A) V))
               (ILESSP (CDAAR A) (CDAAR B)))
           (SETQ EXACT-QUOTIENT-FLAG NIL))
          ((EQUAL (CDAAR A) (CDAAR B))
           (PROG (W)
             (SETQ W (QUOTIENT-MOD-P (CDAR A) (CDAR B)))
             (COND
              ((OR (EQUAL W NIL) (DIFFERENCE-MOD-P A (TIMES-MOD-P W B)))
               (SETQ EXACT-QUOTIENT-FLAG NIL)))
             (RETURN W)))
          (T
           (PROG (TERM)
             (SETQ TERM
                     (CONS
                      (GETPOWER (FKERN (CAAAR A))
                                (IDIFFERENCE (CDAAR A) (CDAAR B)))
                      (QUOTIENT-MOD-P (CDAR A) (CDAR B))))
             (SETQ A
                     (PLUS-MOD-P (CDR A)
                      (TIMES-TERM-MOD-P (NEGATE-TERM TERM) (CDR B))))
             (RETURN (CONS TERM (XQUOTIENT-MOD-P A B V))))))) 
(PUT 'NEGATE-TERM 'NUMBER-OF-ARGS 1) 
(PUT 'NEGATE-TERM 'DEFINED-ON-LINE '258) 
(PUT 'NEGATE-TERM 'DEFINED-IN-FILE 'FACTOR/MODPOLY.RED) 
(PUT 'NEGATE-TERM 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE NEGATE-TERM (TERM) (CONS (CAR TERM) (MINUS-MOD-P (CDR TERM)))) 
(PUT 'REMAINDER-MOD-P 'NUMBER-OF-ARGS 2) 
(PUT 'REMAINDER-MOD-P 'DEFINED-ON-LINE '263) 
(PUT 'REMAINDER-MOD-P 'DEFINED-IN-FILE 'FACTOR/MODPOLY.RED) 
(PUT 'REMAINDER-MOD-P 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE REMAINDER-MOD-P (A B)
    (COND ((NULL B) (ERRORF "b=0 in remainder-mod-p"))
          ((OR (ATOM B) (ATOM (CAR B))) NIL) ((OR (ATOM A) (ATOM (CAR A))) A)
          (T (XREMAINDER-MOD-P A B (CAAAR B))))) 
(PUT 'XREMAINDER-MOD-P 'NUMBER-OF-ARGS 3) 
(PUT 'XREMAINDER-MOD-P 'DEFINED-ON-LINE '271) 
(PUT 'XREMAINDER-MOD-P 'DEFINED-IN-FILE 'FACTOR/MODPOLY.RED) 
(PUT 'XREMAINDER-MOD-P 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE XREMAINDER-MOD-P (A B V)
    (COND
     ((OR (OR (ATOM A) (ATOM (CAR A))) (NOT (EQUAL (CAAAR A) V))
          (ILESSP (CDAAR A) (CDAAR B)))
      A)
     (T
      (PROG (Q W)
        (SETQ Q (QUOTIENT-MOD-P (MINUS-MOD-P (CDAR A)) (CDAR B)))
        (SETQ W (IDIFFERENCE (CDAAR A) (CDAAR B)))
        (COND
         ((EQUAL W 0)
          (SETQ A (PLUS-MOD-P (CDR A) (MULTIPLY-BY-CONSTANT-MOD-P (CDR B) Q))))
         (T
          (SETQ A
                  (PLUS-MOD-P (CDR A)
                   (TIMES-TERM-MOD-P (CONS (GETPOWER (FKERN (CAAAR B)) W) Q)
                    (CDR B))))))
        (RETURN (XREMAINDER-MOD-P A B V)))))) 
(PUT 'MULTIPLY-BY-CONSTANT-MOD-P 'NUMBER-OF-ARGS 2) 
(PUT 'MULTIPLY-BY-CONSTANT-MOD-P 'DEFINED-ON-LINE '298) 
(PUT 'MULTIPLY-BY-CONSTANT-MOD-P 'DEFINED-IN-FILE 'FACTOR/MODPOLY.RED) 
(PUT 'MULTIPLY-BY-CONSTANT-MOD-P 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MULTIPLY-BY-CONSTANT-MOD-P (A N)
    (PROG (R X)
      (COND ((NULL A) (RETURN NIL)) ((EQUAL N 1) (RETURN A)))
      (PROG ()
       WHILELABEL
        (COND ((NOT (NOT (OR (ATOM A) (ATOM (CAR A))))) (RETURN NIL)))
        (PROGN
         (SETQ X (MULTIPLY-BY-CONSTANT-MOD-P (CDAR A) N))
         (COND (X (SETQ R (CONS (CONS (CAAR A) X) R))))
         (SETQ A (CDR A)))
        (GO WHILELABEL))
      (COND
       (A
        (SETQ A
                ((LAMBDA (U) (COND ((ZEROP U) NIL) (T U)))
                 (REMAINDER (TIMES A N) CURRENT-MODULUS)))))
      (PROG ()
       WHILELABEL
        (COND ((NOT R) (RETURN NIL)))
        (PROGN (SETQ X (CDR R)) (RPLACD R A) (SETQ A R) (SETQ R X))
        (GO WHILELABEL))
      (RETURN A))) 
(PUT 'GCD-MOD-P 'NUMBER-OF-ARGS 2) 
(PUT 'GCD-MOD-P 'DEFINED-ON-LINE '317) 
(PUT 'GCD-MOD-P 'DEFINED-IN-FILE 'FACTOR/MODPOLY.RED) 
(PUT 'GCD-MOD-P 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE GCD-MOD-P (A B)
    (PROGN
     (SETQ REDUCTION-COUNT 0)
     (COND ((NULL A) (MONIC-MOD-P B)) ((NULL B) (MONIC-MOD-P A))
           ((OR (ATOM A) (ATOM (CAR A))) 1) ((OR (ATOM B) (ATOM (CAR B))) 1)
           ((IGREATERP (CDAAR A) (CDAAR B)) (ORDERED-GCD-MOD-P A B))
           (T (ORDERED-GCD-MOD-P B A))))) 
(PUT 'ORDERED-GCD-MOD-P 'NUMBER-OF-ARGS 2) 
(PUT 'ORDERED-GCD-MOD-P 'DEFINED-ON-LINE '330) 
(PUT 'ORDERED-GCD-MOD-P 'DEFINED-IN-FILE 'FACTOR/MODPOLY.RED) 
(PUT 'ORDERED-GCD-MOD-P 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE ORDERED-GCD-MOD-P (A B)
    (PROG (STEPS)
      (SETQ STEPS 0)
     TOP
      (SETQ A (REDUCE-DEGREE-MOD-P A B))
      (COND ((NULL A) (RETURN (MONIC-MOD-P B))))
      (SETQ STEPS (PLUS STEPS 1))
      (COND
       ((OR (ATOM A) (ATOM (CAR A)))
        (PROGN (SETQ REDUCTION-COUNT (PLUS REDUCTION-COUNT STEPS)) (RETURN 1)))
       ((LESSP (CDAAR A) (CDAAR B))
        (PROG (W)
          (SETQ REDUCTION-COUNT (PLUS REDUCTION-COUNT STEPS))
          (SETQ STEPS 0)
          (SETQ W A)
          (SETQ A B)
          (SETQ B W))))
      (GO TOP))) 
(PUT 'REDUCE-DEGREE-MOD-P 'NUMBER-OF-ARGS 2) 
(PUT 'REDUCE-DEGREE-MOD-P 'DEFINED-ON-LINE '350) 
(PUT 'REDUCE-DEGREE-MOD-P 'DEFINED-IN-FILE 'FACTOR/MODPOLY.RED) 
(PUT 'REDUCE-DEGREE-MOD-P 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE REDUCE-DEGREE-MOD-P (A B)
    (PROG (Q W)
      (SETQ Q
              (REMAINDER
               (TIMES
                (COND ((EQUAL (CDAR A) 0) (CDAR A))
                      (T (IDIFFERENCE CURRENT-MODULUS (CDAR A))))
                (MODULAR-RECIPROCAL (CDAR B)))
               CURRENT-MODULUS))
      (SETQ W (IDIFFERENCE (CDAAR A) (CDAAR B)))
      (COND
       ((EQUAL W 0)
        (RETURN (PLUS-MOD-P (CDR A) (MULTIPLY-BY-CONSTANT-MOD-P (CDR B) Q))))
       (T
        (RETURN
         (PLUS-MOD-P (CDR A)
          (TIMES-TERM-MOD-P (CONS (GETPOWER (FKERN (CAAAR B)) W) Q)
           (CDR B)))))))) 
(PUT 'DERIVATIVE-MOD-P 'NUMBER-OF-ARGS 1) 
(PUT 'DERIVATIVE-MOD-P 'DEFINED-ON-LINE '366) 
(PUT 'DERIVATIVE-MOD-P 'DEFINED-IN-FILE 'FACTOR/MODPOLY.RED) 
(PUT 'DERIVATIVE-MOD-P 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE DERIVATIVE-MOD-P (A)
    (COND ((OR (ATOM A) (ATOM (CAR A))) NIL) ((EQUAL (CDAAR A) 1) (CDAR A))
          (T (DERIVATIVE-MOD-P-1 A (CAAAR A))))) 
(PUT 'DERIVATIVE-MOD-P-1 'NUMBER-OF-ARGS 2) 
(PUT 'DERIVATIVE-MOD-P-1 'DEFINED-ON-LINE '372) 
(PUT 'DERIVATIVE-MOD-P-1 'DEFINED-IN-FILE 'FACTOR/MODPOLY.RED) 
(PUT 'DERIVATIVE-MOD-P-1 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE DERIVATIVE-MOD-P-1 (A V)
    (COND ((OR (ATOM A) (ATOM (CAR A))) NIL) ((NOT (EQUAL (CAAAR A) V)) NIL)
          ((EQUAL (CDAAR A) 1) (CDAR A))
          (T
           ((LAMBDA (G619 G620)
              (COND ((NULL G619) G620)
                    (T
                     (CONS (CONS (GETPOWER (FKERN V) (ISUB1 (CDAAR A))) G619)
                           G620))))
            (MULTIPLY-BY-CONSTANT-MOD-P (CDAR A) (MODULAR-NUMBER (CDAAR A)))
            (DERIVATIVE-MOD-P-1 (CDR A) V))))) 
(PUT 'SQUARE-FREE-MOD-P 'NUMBER-OF-ARGS 1) 
(PUT 'SQUARE-FREE-MOD-P 'DEFINED-ON-LINE '381) 
(PUT 'SQUARE-FREE-MOD-P 'DEFINED-IN-FILE 'FACTOR/MODPOLY.RED) 
(PUT 'SQUARE-FREE-MOD-P 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SQUARE-FREE-MOD-P (A)
    (OR (OR (ATOM A) (ATOM (CAR A)))
        ((LAMBDA (U) (OR (ATOM U) (ATOM (CAR U))))
         (GCD-MOD-P A (DERIVATIVE-MOD-P A))))) 
(PUT 'EVALUATE-MOD-P 'NUMBER-OF-ARGS 3) 
(PUT 'EVALUATE-MOD-P 'DEFINED-ON-LINE '386) 
(PUT 'EVALUATE-MOD-P 'DEFINED-IN-FILE 'FACTOR/MODPOLY.RED) 
(PUT 'EVALUATE-MOD-P 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE EVALUATE-MOD-P (A V N)
    (COND ((OR (ATOM A) (ATOM (CAR A))) A)
          ((EQUAL N 0) (EVALUATE-MOD-P A V NIL))
          ((EQUAL V NIL) (ERRORF "Variable=NIL in evaluate-mod-p"))
          ((EQUAL (CAAAR A) V)
           (HORNER-RULE-MOD-P (CDAR A) (CDAAR A) (CDR A) N V))
          (T
           ((LAMBDA (G622 G623)
              (COND ((NULL G622) G623) (T (CONS (CONS (CAAR A) G622) G623))))
            (EVALUATE-MOD-P (CDAR A) V N) (EVALUATE-MOD-P (CDR A) V N))))) 
(PUT 'HORNER-RULE-MOD-P 'NUMBER-OF-ARGS 5) 
(PUT 'HORNER-RULE-MOD-P 'DEFINED-ON-LINE '396) 
(PUT 'HORNER-RULE-MOD-P 'DEFINED-IN-FILE 'FACTOR/MODPOLY.RED) 
(PUT 'HORNER-RULE-MOD-P 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE HORNER-RULE-MOD-P (V DEGG A N VAR)
    (COND
     ((OR (OR (ATOM A) (ATOM (CAR A))) (NOT (EQUAL (CAAAR A) VAR)))
      (COND ((OR (NULL N) (ZEROP N)) A)
            (T
             (PROGN
              (SETQ V (TIMES-MOD-P V (EXPT-MOD-P N DEGG)))
              (PLUS-MOD-P A V)))))
     (T
      (PROG (NEWDEG)
        (SETQ NEWDEG (CDAAR A))
        (RETURN
         (HORNER-RULE-MOD-P
          (COND ((OR (NULL N) (ZEROP N)) (CDAR A))
                (T
                 (PLUS-MOD-P (CDAR A)
                  (TIMES-MOD-P V (EXPT-MOD-P N (IDIFFERENCE DEGG NEWDEG))))))
          NEWDEG (CDR A) N VAR)))))) 
(PUT 'EXPT-MOD-P 'NUMBER-OF-ARGS 2) 
(PUT 'EXPT-MOD-P 'DEFINED-ON-LINE '411) 
(PUT 'EXPT-MOD-P 'DEFINED-IN-FILE 'FACTOR/MODPOLY.RED) 
(PUT 'EXPT-MOD-P 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE EXPT-MOD-P (A N)
    (COND ((EQUAL N 0) 1) ((EQUAL N 1) A)
          (T
           (PROG (W X)
             (SETQ W (DIVIDE N 2))
             (SETQ X (EXPT-MOD-P A (CAR W)))
             (SETQ X (TIMES-MOD-P X X))
             (COND ((NOT (EQUAL (CDR W) 0)) (SETQ X (TIMES-MOD-P X A))))
             (RETURN X))))) 
(PUT 'MAKE-BIVARIATE-MOD-P 'NUMBER-OF-ARGS 3) 
(PUT 'MAKE-BIVARIATE-MOD-P 'DEFINED-ON-LINE '423) 
(PUT 'MAKE-BIVARIATE-MOD-P 'DEFINED-IN-FILE 'FACTOR/MODPOLY.RED) 
(PUT 'MAKE-BIVARIATE-MOD-P 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE MAKE-BIVARIATE-MOD-P (U IMSET V)
    (COND ((OR (ATOM U) (ATOM (CAR U))) U)
          ((EQUAL (CAAAR U) M-IMAGE-VARIABLE)
           ((LAMBDA (G625 G626)
              (COND ((NULL G625) G626) (T (CONS (CONS (CAAR U) G625) G626))))
            (MAKE-UNIVARIATE-MOD-P (CDAR U) IMSET V)
            (MAKE-BIVARIATE-MOD-P (CDR U) IMSET V)))
          (T (MAKE-UNIVARIATE-MOD-P U IMSET V)))) 
(PUT 'MAKE-UNIVARIATE-MOD-P 'NUMBER-OF-ARGS 3) 
(PUT 'MAKE-UNIVARIATE-MOD-P 'DEFINED-ON-LINE '434) 
(PUT 'MAKE-UNIVARIATE-MOD-P 'DEFINED-IN-FILE 'FACTOR/MODPOLY.RED) 
(PUT 'MAKE-UNIVARIATE-MOD-P 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE MAKE-UNIVARIATE-MOD-P (U IMSET V)
    (COND ((OR (ATOM U) (ATOM (CAR U))) U)
          ((EQUAL (CAAAR U) V)
           ((LAMBDA (G628 G629)
              (COND ((NULL G628) G629) (T (CONS (CONS (CAAR U) G628) G629))))
            ((LAMBDA (U) (COND ((ZEROP U) NIL) (T U)))
             (EVALUATE-IN-ORDER-MOD-P (CDAR U) IMSET))
            (MAKE-UNIVARIATE-MOD-P (CDR U) IMSET V)))
          (T
           ((LAMBDA (U) (COND ((ZEROP U) NIL) (T U)))
            (EVALUATE-IN-ORDER-MOD-P U IMSET))))) 
(PUT 'EVALUATE-IN-ORDER-MOD-P 'NUMBER-OF-ARGS 2) 
(PUT 'EVALUATE-IN-ORDER-MOD-P 'DEFINED-ON-LINE '443) 
(PUT 'EVALUATE-IN-ORDER-MOD-P 'DEFINED-IN-FILE 'FACTOR/MODPOLY.RED) 
(PUT 'EVALUATE-IN-ORDER-MOD-P 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE EVALUATE-IN-ORDER-MOD-P (U IMSET)
    (COND ((OR (ATOM U) (ATOM (CAR U))) (*D2N U))
          ((EQUAL (CAAAR U) (CAAR IMSET))
           (HORNER-RULE-IN-ORDER-MOD-P
            (EVALUATE-IN-ORDER-MOD-P (CDAR U) (CDR IMSET)) (CDAAR U) (CDR U)
            IMSET))
          (T (EVALUATE-IN-ORDER-MOD-P U (CDR IMSET))))) 
(PUT 'HORNER-RULE-IN-ORDER-MOD-P 'NUMBER-OF-ARGS 4) 
(PUT 'HORNER-RULE-IN-ORDER-MOD-P 'DEFINED-ON-LINE '452) 
(PUT 'HORNER-RULE-IN-ORDER-MOD-P 'DEFINED-IN-FILE 'FACTOR/MODPOLY.RED) 
(PUT 'HORNER-RULE-IN-ORDER-MOD-P 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE HORNER-RULE-IN-ORDER-MOD-P (C DEGG A VSET)
    (COND
     ((OR (ATOM A) (ATOM (CAR A)))
      (PROG (RESULT)
        (SETQ RESULT
                (IPLUS2 (*D2N A)
                        (REMAINDER (TIMES C (MODULAR-EXPT (CDAR VSET) DEGG))
                                   CURRENT-MODULUS)))
        (COND
         ((NOT (ILESSP RESULT CURRENT-MODULUS))
          (SETQ RESULT (IDIFFERENCE RESULT CURRENT-MODULUS))))
        (RETURN RESULT)))
     ((NOT (EQUAL (CAAAR A) (CAAR VSET)))
      (PROG (RESULT)
        (SETQ RESULT
                (IPLUS2 (EVALUATE-IN-ORDER-MOD-P A (CDR VSET))
                        (REMAINDER (TIMES C (MODULAR-EXPT (CDAR VSET) DEGG))
                                   CURRENT-MODULUS)))
        (COND
         ((NOT (ILESSP RESULT CURRENT-MODULUS))
          (SETQ RESULT (IDIFFERENCE RESULT CURRENT-MODULUS))))
        (RETURN RESULT)))
     (T
      (PROG (NEWDEG)
        (SETQ NEWDEG (CDAAR A))
        (RETURN
         (HORNER-RULE-IN-ORDER-MOD-P
          (PROG (RESULT)
            (SETQ RESULT
                    (IPLUS2 (EVALUATE-IN-ORDER-MOD-P (CDAR A) (CDR VSET))
                            (REMAINDER
                             (TIMES C
                                    (MODULAR-EXPT (CDAR VSET)
                                                  (IDIFFERENCE DEGG NEWDEG)))
                             CURRENT-MODULUS)))
            (COND
             ((NOT (ILESSP RESULT CURRENT-MODULUS))
              (SETQ RESULT (IDIFFERENCE RESULT CURRENT-MODULUS))))
            (RETURN RESULT))
          NEWDEG (CDR A) VSET)))))) 
(PUT 'MAKE-MODULAR-SYMMETRIC 'NUMBER-OF-ARGS 1) 
(PUT 'MAKE-MODULAR-SYMMETRIC 'DEFINED-ON-LINE '470) 
(PUT 'MAKE-MODULAR-SYMMETRIC 'DEFINED-IN-FILE 'FACTOR/MODPOLY.RED) 
(PUT 'MAKE-MODULAR-SYMMETRIC 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MAKE-MODULAR-SYMMETRIC (A)
    (COND ((NULL A) NIL)
          ((OR (ATOM A) (ATOM (CAR A)))
           (COND
            ((GREATERP A MODULUS/2)
             ((LAMBDA (U) (COND ((ZEROP U) NIL) (T U)))
              (DIFFERENCE A CURRENT-MODULUS)))
            (T A)))
          (T
           ((LAMBDA (G631 G632)
              (COND ((NULL G631) G632) (T (CONS (CONS (CAAR A) G631) G632))))
            (MAKE-MODULAR-SYMMETRIC (CDAR A))
            (MAKE-MODULAR-SYMMETRIC (CDR A)))))) 
(ENDMODULE) 