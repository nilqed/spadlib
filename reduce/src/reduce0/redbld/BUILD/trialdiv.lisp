(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'TRIALDIV)) 
(FLUID '(*TRINT INTVAR LOGLIST TANLIST)) 
(EXPORTS (LIST 'COUNTZ 'FINDSQRTS 'FINDTRIALDIVS 'TRIALDIV 'SIMP 'MKSP)) 
(IMPORTS (LIST '*MULTF 'PRINTSF 'QUOTF)) 
(PUT 'COUNTZ 'NUMBER-OF-ARGS 1) 
(PUT 'COUNTZ 'DEFINED-ON-LINE '36) 
(PUT 'COUNTZ 'DEFINED-IN-FILE 'INT/TRIALDIV.RED) 
(PUT 'COUNTZ 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE COUNTZ (DL)
    (PROG (S N RL)
     LOOP2
      (COND ((NULL DL) (RETURN (ARRANGELISTZ RL))))
      (SETQ N 1)
     LOOP1
      (SETQ N (PLUS N 1))
      (SETQ S (CAR DL))
      (SETQ DL (CDR DL))
      (COND ((AND (NOT (NULL DL)) (EQ S (CAR DL))) (GO LOOP1))
            (T (SETQ RL (CONS (CONS S N) RL))))
      (GO LOOP2))) 
(PUT 'ARRANGELISTZ 'NUMBER-OF-ARGS 1) 
(PUT 'ARRANGELISTZ 'DEFINED-ON-LINE '50) 
(PUT 'ARRANGELISTZ 'DEFINED-IN-FILE 'INT/TRIALDIV.RED) 
(PUT 'ARRANGELISTZ 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE ARRANGELISTZ (D)
    (PROG (N S RL R)
      (SETQ N 1)
      (COND ((NULL D) (RETURN RL)))
     LOOPD
      (COND ((EQUAL (CDAR D) N) (SETQ S (CONS (CAAR D) S)))
            (T (SETQ R (CONS (CAR D) R))))
      (SETQ D (CDR D))
      (COND ((NOT (NULL D)) (GO LOOPD)))
      (SETQ D R)
      (SETQ RL (CONS S RL))
      (SETQ S NIL)
      (SETQ R NIL)
      (SETQ N (PLUS N 1))
      (COND ((NOT (NULL D)) (GO LOOPD)))
      (RETURN (REVERSIP RL)))) 
(PUT 'FINDTRIALDIVS 'NUMBER-OF-ARGS 1) 
(PUT 'FINDTRIALDIVS 'DEFINED-ON-LINE '67) 
(PUT 'FINDTRIALDIVS 'DEFINED-IN-FILE 'INT/TRIALDIV.RED) 
(PUT 'FINDTRIALDIVS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FINDTRIALDIVS (ZL)
    (PROG (DLISTS1 ARGS1)
      (PROG (Z)
        (SETQ Z ZL)
       LAB
        (COND ((NULL Z) (RETURN NIL)))
        ((LAMBDA (Z)
           (COND
            ((EXPORTAN Z)
             (PROGN
              (COND
               ((EQ (CAR Z) 'TAN)
                (PROGN
                 (SETQ ARGS1 (CONS (CONS (GETPOWER (FKERN Z) 2) 1) 1))
                 (SETQ TANLIST (CONS (CONS ARGS1 1) TANLIST))))
               (T (SETQ ARGS1 (LIST (CONS (GETPOWER (FKERN Z) 1) 1)))))
              (SETQ DLISTS1 (CONS (CONS Z ARGS1) DLISTS1))))))
         (CAR Z))
        (SETQ Z (CDR Z))
        (GO LAB))
      (RETURN DLISTS1))) 
(PUT 'EXPORTAN 'NUMBER-OF-ARGS 1) 
(PUT 'EXPORTAN 'DEFINED-ON-LINE '85) 
(PUT 'EXPORTAN 'DEFINED-IN-FILE 'INT/TRIALDIV.RED) 
(PUT 'EXPORTAN 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE EXPORTAN (DL)
    (COND ((ATOM DL) NIL)
          (T
           (PROG ()
             (COND ((EQ (CAR DL) 'TAN) (RETURN T)))
            NXT
             (COND ((NOT (EQ (CAR DL) 'EXPT)) (RETURN NIL)))
             (SETQ DL (CADR DL))
             (COND ((OR (ATOM DL) (NOT (SMEMBER INTVAR DL))) (RETURN T)))
             (GO NXT))))) 
(PUT 'FINDSQRTS 'NUMBER-OF-ARGS 1) 
(PUT 'FINDSQRTS 'DEFINED-ON-LINE '99) 
(PUT 'FINDSQRTS 'DEFINED-IN-FILE 'INT/TRIALDIV.RED) 
(PUT 'FINDSQRTS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FINDSQRTS (Z)
    (PROG (R)
      (PROG ()
       WHILELABEL
        (COND ((NOT (NOT (NULL Z))) (RETURN NIL)))
        (PROGN
         (COND ((EQCAR (CAR Z) 'SQRT) (SETQ R (CONS (CAR Z) R))))
         (SETQ Z (CDR Z)))
        (GO WHILELABEL))
      (RETURN R))) 
(PUT 'TRIALDIV 'NUMBER-OF-ARGS 2) 
(PUT 'TRIALDIV 'DEFINED-ON-LINE '107) 
(PUT 'TRIALDIV 'DEFINED-IN-FILE 'INT/TRIALDIV.RED) 
(PUT 'TRIALDIV 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE TRIALDIV (X DL)
    (PROG (QLIST Q)
      (PROG ()
       WHILELABEL
        (COND ((NOT (NOT (NULL DL))) (RETURN NIL)))
        (COND
         ((NOT (NULL (SETQ Q ((LAMBDA (*EXP) (QUOTF1 X (CDAR DL))) T))))
          (PROGN
           (COND
            ((AND (EQUAL (CAAAR DL) 'TAN) (NOT (EQCAR QLIST (CDAR DL))))
             (SETQ LOGLIST
                     (CONS (CONS 'IDEN (SIMP (CADR (CAAR DL)))) LOGLIST))))
           (SETQ QLIST (CONS (CDAR DL) QLIST))
           (SETQ X Q)))
         (T (SETQ DL (CDR DL))))
        (GO WHILELABEL))
      (RETURN (CONS QLIST X)))) 
(ENDMODULE) 