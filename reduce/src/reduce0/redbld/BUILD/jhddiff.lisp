(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'JHDDIFF)) 
(PUT '*DIFFSQ 'NUMBER-OF-ARGS 2) 
(PUT '*DIFFSQ 'DEFINED-ON-LINE '31) 
(PUT '*DIFFSQ 'DEFINED-IN-FILE 'ALGINT/JHDDIFF.RED) 
(PUT '*DIFFSQ 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE *DIFFSQ (U V)
    (*MULTSQ (*ADDSQ (*DIFFF (CAR U) V) (NEGSQ (*MULTSQ U (*DIFFF (CDR U) V))))
             (CONS 1 (CDR U)))) 
(PUT '*DIFFF 'NUMBER-OF-ARGS 2) 
(PUT '*DIFFF 'DEFINED-ON-LINE '39) 
(PUT '*DIFFF 'DEFINED-IN-FILE 'ALGINT/JHDDIFF.RED) 
(PUT '*DIFFF 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE *DIFFF (U V)
    (COND ((OR (ATOM U) (ATOM (CAR U))) (CONS NIL 1))
          (T
           (*ADDSQ
            (*ADDSQ
             (MULTSQ (CONS (LIST (CONS (CAAR U) 1)) 1) (*DIFFF (CDAR U) V))
             (*MULTSQ (CONS (CDAR U) 1) (*DIFFP (CAAR U) V)))
            (*DIFFF (CDR U) V))))) 
(PUT '*DIFFP 'NUMBER-OF-ARGS 2) 
(PUT '*DIFFP 'DEFINED-ON-LINE '47) 
(PUT '*DIFFP 'DEFINED-IN-FILE 'ALGINT/JHDDIFF.RED) 
(PUT '*DIFFP 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE *DIFFP (U V)
    (COND ((ATOM (CAR U)) (DIFFP U V)) ((NOT (EQ (CAAR U) 'SQRT)) (DIFFP U V))
          (T
           (PROG (W DW)
             (SETQ W (SIMP (CADR (CAR U))))
             (SETQ DW (*DIFFSQ W V))
             (COND ((NULL (CAR DW)) (RETURN DW)))
             (RETURN
              (*MULTSQ (*MULTSQ DW (INVSQ W))
                       (CONS
                        (*MULTF (CDR U)
                                (CONS (CONS (GETPOWER (FKERN (CAR U)) 1) 1)
                                      NIL))
                        2))))))) 
(ENDMODULE) 