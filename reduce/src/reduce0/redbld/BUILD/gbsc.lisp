(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(FLUID '(GBSC_RCSID* GBSC_COPYRIGHT*)) 
(SETQ GBSC_RCSID* "$Id: gbsc.red 5872 2021-07-29 14:53:49Z arthurcnorman $") 
(SETQ GBSC_COPYRIGHT* "Copyright (c) 2003-2009 A. Dolzmann and L. Gilch") 
(MODULE (LIST 'GBSC)) 
(FLUID '(*CGBVERBOSE CGB_HASHSIZE*)) 
(PUT 'GBSC_STRCONST 'NUMBER-OF-ARGS 3) 
(PUT 'GBSC_STRCONST 'DEFINED-ON-LINE '42) 
(PUT 'GBSC_STRCONST 'DEFINED-IN-FILE 'CGB/GBSC.RED) 
(PUT 'GBSC_STRCONST 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE GBSC_STRCONST (RT GB N)
    (PROG (W G UL BETA L)
      (SETQ L 0)
      (SETQ UL (REVERSIP (VDP_LSORT (GBSC_VDPSETPROD RT N))))
      (SETQ BETA (GBSC_BETAINIT))
      (COND
       (*CGBVERBOSE
        (PROGN
         (SETQ L (LENGTH UL))
         (IOTO_TPRIN2T "Combined structure constants:"))))
      (PROG (U)
        (SETQ U UL)
       LAB
        (COND ((NULL U) (RETURN NIL)))
        ((LAMBDA (U)
           (PROGN
            (COND
             (*CGBVERBOSE
              (PROGN
               (COND
                ((EQUAL (REMAINDER L 10) 0) (IOTO_PRIN2 (LIST "[" L "] "))))
               (SETQ L (DIFFERENCE L 1)))))
            (COND
             ((MEMBER U RT)
              (PROG (V)
                (SETQ V RT)
               LAB
                (COND ((NULL V) (RETURN NIL)))
                ((LAMBDA (V)
                   (SETQ BETA
                           (GBSC_BETASET BETA U V
                            (COND ((EQUAL U V) (SIMP 1)) (T (SIMP 0))))))
                 (CAR V))
                (SETQ V (CDR V))
                (GO LAB)))
             ((SETQ W (GBSC_HMMEMBER U GB))
              (PROGN
               (SETQ G (GB_REDUCE U GB))
               (PROG (V)
                 (SETQ V RT)
                LAB
                 (COND ((NULL V) (RETURN NIL)))
                 ((LAMBDA (V)
                    (SETQ BETA (GBSC_BETASET BETA U V (GBSC_GETLINCOMBC V G))))
                  (CAR V))
                 (SETQ V (CDR V))
                 (GO LAB))))
             (T
              (PROGN
               (SETQ W (GBSC_GOODFCTR U RT))
               (PROG (V)
                 (SETQ V RT)
                LAB
                 (COND ((NULL V) (RETURN NIL)))
                 ((LAMBDA (V)
                    (SETQ BETA
                            (GBSC_BETASET BETA U V
                             (GBSC_SUMBETA BETA (CAR W) (CDR W) V RT))))
                  (CAR V))
                 (SETQ V (CDR V))
                 (GO LAB)))))))
         (CAR U))
        (SETQ U (CDR U))
        (GO LAB))
      (COND (*CGBVERBOSE (IOTO_PRIN2T "done")))
      (RETURN BETA))) 
(PUT 'GBSC_VDPSETPROD 'NUMBER-OF-ARGS 2) 
(PUT 'GBSC_VDPSETPROD 'DEFINED-ON-LINE '82) 
(PUT 'GBSC_VDPSETPROD 'DEFINED-IN-FILE 'CGB/GBSC.RED) 
(PUT 'GBSC_VDPSETPROD 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE GBSC_VDPSETPROD (VDPL N)
    (PROG (PRODL)
      (COND ((EQUAL N 1) (RETURN VDPL)))
      (PROG (X)
        (SETQ X (GBSC_VDPSETPROD VDPL (DIFFERENCE N 1)))
       LAB
        (COND ((NULL X) (RETURN NIL)))
        ((LAMBDA (X)
           (PROG (Y)
             (SETQ Y VDPL)
            LAB
             (COND ((NULL Y) (RETURN NIL)))
             ((LAMBDA (Y) (SETQ PRODL (LTO_INSERT (VDP_PROD X Y) PRODL)))
              (CAR Y))
             (SETQ Y (CDR Y))
             (GO LAB)))
         (CAR X))
        (SETQ X (CDR X))
        (GO LAB))
      (RETURN PRODL))) 
(PUT 'GBSC_HMMEMBER 'NUMBER-OF-ARGS 2) 
(PUT 'GBSC_HMMEMBER 'DEFINED-ON-LINE '95) 
(PUT 'GBSC_HMMEMBER 'DEFINED-IN-FILE 'CGB/GBSC.RED) 
(PUT 'GBSC_HMMEMBER 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE GBSC_HMMEMBER (U GB)
    (PROG (HTU)
      (SETQ HTU (CADR U))
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND GB (NEQ (CADR (CAR GB)) HTU))) (RETURN NIL)))
        (SETQ GB (CDR GB))
        (GO WHILELABEL))
      (RETURN GB))) 
(PUT 'GBSC_GETLINCOMBC 'NUMBER-OF-ARGS 2) 
(PUT 'GBSC_GETLINCOMBC 'DEFINED-ON-LINE '107) 
(PUT 'GBSC_GETLINCOMBC 'DEFINED-IN-FILE 'CGB/GBSC.RED) 
(PUT 'GBSC_GETLINCOMBC 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE GBSC_GETLINCOMBC (B P)
    (PROG (BT)
      (SETQ B (CAR (CDDDR B)))
      (SETQ P (CAR (CDDDR P)))
      (SETQ BT (CAR B))
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND (NOT (NULL P)) (NEQ (CAR P) BT))) (RETURN NIL)))
        (SETQ P (CDDR P))
        (GO WHILELABEL))
      (COND ((NULL P) (RETURN (SIMP 0))))
      (RETURN (CADR P)))) 
(PUT 'GBSC_GOODFCTR 'NUMBER-OF-ARGS 2) 
(PUT 'GBSC_GOODFCTR 'DEFINED-ON-LINE '123) 
(PUT 'GBSC_GOODFCTR 'DEFINED-IN-FILE 'CGB/GBSC.RED) 
(PUT 'GBSC_GOODFCTR 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE GBSC_GOODFCTR (U RT)
    (PROG (HTU FCTR CAND CANDT N I)
      (SETQ HTU (CADR U))
      (SETQ N (LENGTH HTU))
      (SETQ I 1)
      (PROG ()
       WHILELABEL
        (COND ((NOT (LEQ I N)) (RETURN NIL)))
        (PROGN
         (SETQ CANDT
                 (PROG (X FORALL-RESULT FORALL-ENDPTR)
                   (SETQ X HTU)
                   (COND ((NULL X) (RETURN NIL)))
                   (SETQ FORALL-RESULT
                           (SETQ FORALL-ENDPTR
                                   (CONS ((LAMBDA (X) X) (CAR X)) NIL)))
                  LOOPLABEL
                   (SETQ X (CDR X))
                   (COND ((NULL X) (RETURN FORALL-RESULT)))
                   (RPLACD FORALL-ENDPTR (CONS ((LAMBDA (X) X) (CAR X)) NIL))
                   (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                   (GO LOOPLABEL)))
         (COND
          ((GREATERP (NTH CANDT I) 0)
           (PROGN
            (SETCAR (PNTH CANDT I) (DIFFERENCE (NTH CANDT I) 1))
            (SETQ CAND (VDP_FMON (SIMP 1) CANDT))
            (COND
             ((NOT (MEMBER CAND RT))
              (PROGN
               (SETQ FCTR (CONS CAND (VDP_FMON (SIMP 1) (GBSC_MKVAR I N))))
               (SETQ I (PLUS N 1))))))))
         (SETQ I (PLUS I 1)))
        (GO WHILELABEL))
      (COND ((NEQ I (PLUS N 2)) (REDERR (LIST "bug in gbsc_goodfctr"))))
      (RETURN FCTR))) 
(PUT 'GBSC_MKVAR 'NUMBER-OF-ARGS 2) 
(PUT 'GBSC_MKVAR 'DEFINED-ON-LINE '148) 
(PUT 'GBSC_MKVAR 'DEFINED-IN-FILE 'CGB/GBSC.RED) 
(PUT 'GBSC_MKVAR 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE GBSC_MKVAR (I N)
    (PROG (M)
      (PROG (J)
        (SETQ J 1)
       LAB
        (COND ((MINUSP (DIFFERENCE (DIFFERENCE I 1) J)) (RETURN NIL)))
        (SETQ M (CONS 0 M))
        (SETQ J (PLUS2 J 1))
        (GO LAB))
      (SETQ M (CONS 1 M))
      (PROG (J)
        (SETQ J (PLUS I 1))
       LAB
        (COND ((MINUSP (DIFFERENCE N J)) (RETURN NIL)))
        (SETQ M (CONS 0 M))
        (SETQ J (PLUS2 J 1))
        (GO LAB))
      (RETURN (REVERSIP M)))) 
(PUT 'GBSC_SUMBETA 'NUMBER-OF-ARGS 5) 
(PUT 'GBSC_SUMBETA 'DEFINED-ON-LINE '161) 
(PUT 'GBSC_SUMBETA 'DEFINED-IN-FILE 'CGB/GBSC.RED) 
(PUT 'GBSC_SUMBETA 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE GBSC_SUMBETA (BETA UP XI V RT)
    (PROG (RES BETAUPLINE)
      (SETQ RES (SIMP 0))
      (SETQ BETAUPLINE (GBSC_BETAGETLINE BETA UP))
      (PROG (W)
        (SETQ W RT)
       LAB
        (COND ((NULL W) (RETURN NIL)))
        ((LAMBDA (W)
           (COND
            ((IEQUAL (EV_COMP (CADR UP) (CADR W)) 1)
             (SETQ RES
                     (ADDSQ RES
                            (MULTSQ (GBSC_BETALINEGET BETAUPLINE W)
                                    (GBSC_BETAGET BETA (VDP_PROD W XI) V)))))))
         (CAR W))
        (SETQ W (CDR W))
        (GO LAB))
      (RETURN RES))) 
(PUT 'GBSC_BETAINIT 'NUMBER-OF-ARGS 0) 
(PUT 'GBSC_BETAINIT 'DEFINED-ON-LINE '193) 
(PUT 'GBSC_BETAINIT 'DEFINED-IN-FILE 'CGB/GBSC.RED) 
(PUT 'GBSC_BETAINIT 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE GBSC_BETAINIT NIL (MKVECT (DIFFERENCE CGB_HASHSIZE* 1))) 
(PUT 'GBSC_BETASET 'NUMBER-OF-ARGS 4) 
(PUT 'GBSC_BETASET 'DEFINED-ON-LINE '198) 
(PUT 'GBSC_BETASET 'DEFINED-IN-FILE 'CGB/GBSC.RED) 
(PUT 'GBSC_BETASET 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE GBSC_BETASET (BETA U V SC)
    (PROG (W I SLOT)
      (SETQ I (GBSC_HASHFUNCTION U))
      (SETQ SLOT (GETV BETA I))
      (COND
       ((NULL SLOT)
        (PROGN
         (PUTV BETA I (LIST (CONS U (LIST (CONS V SC)))))
         (RETURN BETA))))
      (SETQ W (ASSOC U SLOT))
      (COND
       ((NULL W)
        (PROGN
         (PUTV BETA I (CONS (CONS U (LIST (CONS V SC))) SLOT))
         (RETURN BETA))))
      (COND ((NOT (ASSOC V (CDR W))) (SETCDR W (CONS (CONS V SC) (CDR W))))
            (T (REDERR "bug in gbsc_betaset (gbsc_strconst)")))
      (RETURN BETA))) 
(PUT 'GBSC_HASHFUNCTION 'NUMBER-OF-ARGS 1) 
(PUT 'GBSC_HASHFUNCTION 'DEFINED-ON-LINE '223) 
(PUT 'GBSC_HASHFUNCTION 'DEFINED-IN-FILE 'CGB/GBSC.RED) 
(PUT 'GBSC_HASHFUNCTION 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE GBSC_HASHFUNCTION (TERM)
    (PROG (W)
      (SETQ W 0)
      (PROG (X)
        (SETQ X (CADR TERM))
       LAB
        (COND ((NULL X) (RETURN NIL)))
        ((LAMBDA (X) (SETQ W (PLUS (TIMES 10 W) X))) (CAR X))
        (SETQ X (CDR X))
        (GO LAB))
      (RETURN (REMAINDER W CGB_HASHSIZE*)))) 
(PUT 'GBSC_BETAGETLINE 'NUMBER-OF-ARGS 2) 
(PUT 'GBSC_BETAGETLINE 'DEFINED-ON-LINE '232) 
(PUT 'GBSC_BETAGETLINE 'DEFINED-IN-FILE 'CGB/GBSC.RED) 
(PUT 'GBSC_BETAGETLINE 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE GBSC_BETAGETLINE (BETA U)
    (PROG (W)
      (SETQ W (ASSOC U (GETV BETA (GBSC_HASHFUNCTION U))))
      (COND ((NULL W) (REDERR "bug in gbsc_betagetline")))
      (RETURN (CDR W)))) 
(PUT 'GBSC_BETALINEGET 'NUMBER-OF-ARGS 2) 
(PUT 'GBSC_BETALINEGET 'DEFINED-ON-LINE '241) 
(PUT 'GBSC_BETALINEGET 'DEFINED-IN-FILE 'CGB/GBSC.RED) 
(PUT 'GBSC_BETALINEGET 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE GBSC_BETALINEGET (BETALINE V)
    (PROG (W)
      (SETQ W (ATSOC V BETALINE))
      (COND ((NULL W) (REDERR "bug in gbsc_betalineget")))
      (RETURN (CDR W)))) 
(PUT 'GBSC_BETAGET 'NUMBER-OF-ARGS 3) 
(PUT 'GBSC_BETAGET 'DEFINED-ON-LINE '251) 
(PUT 'GBSC_BETAGET 'DEFINED-IN-FILE 'CGB/GBSC.RED) 
(PUT 'GBSC_BETAGET 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE GBSC_BETAGET (BETA U V)
    (PROG (W)
      (SETQ W (ASSOC U (GETV BETA (GBSC_HASHFUNCTION U))))
      (COND ((NULL W) (REDERR "bug in gbsc_betaget (1)")))
      (SETQ W (ATSOC V (CDR W)))
      (COND ((NULL W) (REDERR "bug in gbsc_betaget (2)")))
      (RETURN (CDR W)))) 
(ENDMODULE) 