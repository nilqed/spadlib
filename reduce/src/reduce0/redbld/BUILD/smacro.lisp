(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'SMACRO)) 
(FLUID '(*DEFN INLINEINFO *NOINLINES)) 
(PUT 'APPLSMACRO 'NUMBER-OF-ARGS 3) 
(PUT 'APPLSMACRO 'DEFINED-ON-LINE '140) 
(PUT 'APPLSMACRO 'DEFINED-IN-FILE 'RLISP/SMACRO.RED) 
(PUT 'APPLSMACRO 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE APPLSMACRO (U VALS NAME)
    (PROG (BODY REMVARS VARLIST W INLINEINFO)
      (SETQ VARLIST (CADR U))
      (SETQ BODY (CADDR U))
      (SETQ INLINEINFO (LIST NAME VARLIST BODY))
      (COND
       ((NEQ (LENGTH VARLIST) (LENGTH VALS))
        (RERROR 'RLISP 15 (LIST "Argument mismatch for SMACRO" NAME))))
      (COND (*LOGINLINES (LOG_INLINES VARLIST BODY VALS)))
      (COND
       ((OR (NO-SIDE-EFFECT-LISTP VALS) (ONE-ENTRY-LISTP VARLIST BODY))
        (RETURN (SUBLA-Q (PAIR VARLIST VALS) BODY)))
       ((GREATERP (LENGTH VARLIST) 1)
        (PROGN
         (SETQ W
                 (PROG (X FORALL-RESULT FORALL-ENDPTR)
                   (SETQ X VARLIST)
                   (COND ((NULL X) (RETURN NIL)))
                   (SETQ FORALL-RESULT
                           (SETQ FORALL-ENDPTR
                                   (CONS
                                    ((LAMBDA (X) (CONS X (GENSYM))) (CAR X))
                                    NIL)))
                  LOOPLABEL
                   (SETQ X (CDR X))
                   (COND ((NULL X) (RETURN FORALL-RESULT)))
                   (RPLACD FORALL-ENDPTR
                           (CONS ((LAMBDA (X) (CONS X (GENSYM))) (CAR X)) NIL))
                   (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                   (GO LOOPLABEL)))
         (SETQ BODY (SUBLA-Q W BODY))
         (SETQ VARLIST
                 (PROG (X FORALL-RESULT FORALL-ENDPTR)
                   (SETQ X W)
                   (COND ((NULL X) (RETURN NIL)))
                   (SETQ FORALL-RESULT
                           (SETQ FORALL-ENDPTR
                                   (CONS ((LAMBDA (X) (CDR X)) (CAR X)) NIL)))
                  LOOPLABEL
                   (SETQ X (CDR X))
                   (COND ((NULL X) (RETURN FORALL-RESULT)))
                   (RPLACD FORALL-ENDPTR
                           (CONS ((LAMBDA (X) (CDR X)) (CAR X)) NIL))
                   (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                   (GO LOOPLABEL))))))
      (PROG (X)
        (SETQ X VALS)
       LAB
        (COND ((NULL X) (RETURN NIL)))
        ((LAMBDA (X)
           (PROGN
            (COND
             ((OR (NO-SIDE-EFFECTP X) (ONE-ENTRYP (CAR VARLIST) BODY))
              (SETQ BODY (SUBLA-Q (LIST (CONS (CAR VARLIST) X)) BODY)))
             (T (SETQ REMVARS (ACONC REMVARS (CONS (CAR VARLIST) X)))))
            (SETQ VARLIST (CDR VARLIST))))
         (CAR X))
        (SETQ X (CDR X))
        (GO LAB))
      (COND ((NULL REMVARS) (RETURN BODY))
            (T
             (PROGN
              (SETQ W
                      (CONS
                       (LIST 'LAMBDA
                             (PROG (X FORALL-RESULT FORALL-ENDPTR)
                               (SETQ X REMVARS)
                               (COND ((NULL X) (RETURN NIL)))
                               (SETQ FORALL-RESULT
                                       (SETQ FORALL-ENDPTR
                                               (CONS
                                                ((LAMBDA (X) (CAR X)) (CAR X))
                                                NIL)))
                              LOOPLABEL
                               (SETQ X (CDR X))
                               (COND ((NULL X) (RETURN FORALL-RESULT)))
                               (RPLACD FORALL-ENDPTR
                                       (CONS ((LAMBDA (X) (CAR X)) (CAR X))
                                             NIL))
                               (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                               (GO LOOPLABEL))
                             BODY)
                       (PROG (X FORALL-RESULT FORALL-ENDPTR)
                         (SETQ X REMVARS)
                         (COND ((NULL X) (RETURN NIL)))
                         (SETQ FORALL-RESULT
                                 (SETQ FORALL-ENDPTR
                                         (CONS ((LAMBDA (X) (CDR X)) (CAR X))
                                               NIL)))
                        LOOPLABEL
                         (SETQ X (CDR X))
                         (COND ((NULL X) (RETURN FORALL-RESULT)))
                         (RPLACD FORALL-ENDPTR
                                 (CONS ((LAMBDA (X) (CDR X)) (CAR X)) NIL))
                         (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                         (GO LOOPLABEL))))
              (RETURN W)))))) 
(PUT 'APPLINLINE 'NUMBER-OF-ARGS 3) 
(PUT 'APPLINLINE 'DEFINED-ON-LINE '195) 
(PUT 'APPLINLINE 'DEFINED-IN-FILE 'RLISP/SMACRO.RED) 
(PUT 'APPLINLINE 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE APPLINLINE (U VALS NAME)
    (PROG (VARLIST BODY)
      (SETQ VARLIST (CADR U))
      (SETQ BODY (CADDR U))
      (SETQ INLINEINFO (LIST NAME VARLIST BODY))
      (COND
       ((NEQ (LENGTH VARLIST) (LENGTH VALS))
        (RERROR 'RLISP 15
                (LIST "Argument mismatch for inline function" NAME))))
      (COND (*LOGINLINES (LOG_INLINES VARLIST BODY VALS)))
      (COND
       ((AND (EQUAL (LENGTH VARLIST) 1)
             (OR (EQUAL BODY (CAR VARLIST))
                 (AND (NOT (ATOM BODY)) (ATOM (CAR BODY))
                      (NEQ (CAR BODY) (CAR VARLIST))
                      (EQCAR (CDR BODY) (CAR VARLIST))
                      (NOT (SMEMBER (CAR VARLIST) (CDDR BODY))))))
        (RETURN (SUBLA-Q (PAIR VARLIST VALS) BODY)))
       (T (RETURN (CONS U VALS)))))) 
(PUT 'LOG_INLINES 'NUMBER-OF-ARGS 3) 
(PUT 'LOG_INLINES 'DEFINED-ON-LINE '219) 
(PUT 'LOG_INLINES 'DEFINED-IN-FILE 'RLISP/SMACRO.RED) 
(PUT 'LOG_INLINES 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE LOG_INLINES (VARLIST BODY VALS)
    (PROG ()
      (COND ((LOG_ASSIGNMENT VARLIST BODY) (RETURN NIL)))
      (COND ((LOG_FREEVARS VARLIST BODY) (RETURN NIL))))) 
(PUT 'LOG_ASSIGNMENT 'NUMBER-OF-ARGS 2) 
(PUT 'LOG_ASSIGNMENT 'DEFINED-ON-LINE '244) 
(PUT 'LOG_ASSIGNMENT 'DEFINED-IN-FILE 'RLISP/SMACRO.RED) 
(PUT 'LOG_ASSIGNMENT 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE LOG_ASSIGNMENT (VARLIST U)
    (COND ((OR (ATOM U) (EQCAR U 'QUOTE) (EQCAR U 'FUNCTION)) NIL)
          ((EQCAR U 'SETQ)
           (PROGN
            (COND
             ((MEMBER (CADR U) VARLIST)
              (PROGN
               (COND ((NOT (ZEROP (POSN))) (TERPRI)))
               (PRIN2 "+++ Assignment to parameter of inline: ")
               (PRINT U)
               (PRIN2 "+++ Macro was: ")
               (PRINT INLINEINFO)
               T))
             (T (LOG_ASSIGNMENT VARLIST (CADDR U))))))
          ((EQCAR U 'COND) (LOG_ASSIGNMENT_LIST_LIST VARLIST (CDR U)))
          (T (LOG_ASSIGNMENT_LIST VARLIST U)))) 
(PUT 'LOG_ASSIGNMENT_LIST_LIST 'NUMBER-OF-ARGS 2) 
(PUT 'LOG_ASSIGNMENT_LIST_LIST 'DEFINED-ON-LINE '258) 
(PUT 'LOG_ASSIGNMENT_LIST_LIST 'DEFINED-IN-FILE 'RLISP/SMACRO.RED) 
(PUT 'LOG_ASSIGNMENT_LIST_LIST 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE LOG_ASSIGNMENT_LIST_LIST (VARLIST U)
    (COND ((ATOM U) NIL) ((LOG_ASSIGNMENT_LIST VARLIST (CAR U)) T)
          (T (LOG_ASSIGNMENT_LIST_LIST VARLIST (CDR U))))) 
(PUT 'LOG_ASSIGNMENT_LIST 'NUMBER-OF-ARGS 2) 
(PUT 'LOG_ASSIGNMENT_LIST 'DEFINED-ON-LINE '263) 
(PUT 'LOG_ASSIGNMENT_LIST 'DEFINED-IN-FILE 'RLISP/SMACRO.RED) 
(PUT 'LOG_ASSIGNMENT_LIST 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE LOG_ASSIGNMENT_LIST (VARLIST U)
    (COND ((ATOM U) NIL) ((LOG_ASSIGNMENT VARLIST (CAR U)) T)
          (T (LOG_ASSIGNMENT_LIST VARLIST (CDR U))))) 
(PUT 'LOG_FREEVARS 'NUMBER-OF-ARGS 2) 
(PUT 'LOG_FREEVARS 'DEFINED-ON-LINE '268) 
(PUT 'LOG_FREEVARS 'DEFINED-IN-FILE 'RLISP/SMACRO.RED) 
(PUT 'LOG_FREEVARS 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE LOG_FREEVARS (VARLIST U)
    (COND
     ((ATOM U)
      (PROGN
       (COND
        ((OR (NOT (IDP U)) (MEMBER U VARLIST) (GLOBALP U) (FLUIDP U)
             (GET U 'CONSTANT?) (EQUAL U NIL) (EQUAL U T))
         NIL)
        (T
         (PROGN
          (COND ((NOT (ZEROP (POSN))) (TERPRI)))
          (PRIN2 "+++ Use of free variable in smacro/inline body: ")
          (PRINT U)
          (PRIN2 "+++ Macro was: ")
          (PRINT INLINEINFO)
          T)))))
     ((OR (EQCAR U 'QUOTE) (AND (EQCAR U 'FUNCTION) (ATOM (CADR U)))
          (EQCAR U 'GO))
      NIL)
     ((EQCAR U 'PROG) (LOG_FREEVARS_LIST (APPEND (CADR U) VARLIST) (CDR U) T))
     ((EQCAR U 'LAMBDA)
      (LOG_FREEVARS_LIST (APPEND (CADR U) VARLIST) (CDR U) NIL))
     ((EQCAR U 'COND) (LOG_FREEVARS_LIST_LIST VARLIST (CDR U)))
     ((ATOM (CAR U)) (LOG_FREEVARS_LIST VARLIST (CDR U) NIL))
     (T (LOG_FREEVARS_LIST VARLIST U NIL)))) 
(PUT 'LOG_FREEVARS_LIST_LIST 'NUMBER-OF-ARGS 2) 
(PUT 'LOG_FREEVARS_LIST_LIST 'DEFINED-ON-LINE '296) 
(PUT 'LOG_FREEVARS_LIST_LIST 'DEFINED-IN-FILE 'RLISP/SMACRO.RED) 
(PUT 'LOG_FREEVARS_LIST_LIST 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE LOG_FREEVARS_LIST_LIST (VARLIST U)
    (COND ((ATOM U) NIL) ((LOG_FREEVARS_LIST VARLIST (CAR U) NIL) T)
          (T (LOG_FREEVARS_LIST_LIST VARLIST (CDR U))))) 
(PUT 'LOG_FREEVARS_LIST 'NUMBER-OF-ARGS 3) 
(PUT 'LOG_FREEVARS_LIST 'DEFINED-ON-LINE '301) 
(PUT 'LOG_FREEVARS_LIST 'DEFINED-IN-FILE 'RLISP/SMACRO.RED) 
(PUT 'LOG_FREEVARS_LIST 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE LOG_FREEVARS_LIST (VARLIST U ISPROG)
    (COND ((ATOM U) NIL)
          ((AND ISPROG (ATOM (CAR U))) (LOG_FREEVARS_LIST VARLIST (CDR U) T))
          ((LOG_FREEVARS VARLIST (CAR U)) T)
          (T (LOG_FREEVARS_LIST VARLIST (CDR U) ISPROG)))) 
(PUT 'NO-SIDE-EFFECTP 'NUMBER-OF-ARGS 1) 
(PUT 'NO-SIDE-EFFECTP 'DEFINED-ON-LINE '310) 
(PUT 'NO-SIDE-EFFECTP 'DEFINED-IN-FILE 'RLISP/SMACRO.RED) 
(PUT 'NO-SIDE-EFFECTP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE NO-SIDE-EFFECTP (U)
    (COND
     ((ATOM U)
      (OR (NUMBERP U) (STRINGP U) (EQUAL U NIL) (EQUAL U T)
          (AND (IDP U) (NOT (OR (FLUIDP U) (GLOBALP U))))))
     ((EQUAL (CAR U) 'QUOTE) T)
     ((FLAGP (CAR U) 'NOSIDEEFFECTS) (VERY-NO-SIDE-EFFECT-LISTP (CDR U)))
     (T NIL))) 
(PUT 'VERY-NO-SIDE-EFFECTP 'NUMBER-OF-ARGS 1) 
(PUT 'VERY-NO-SIDE-EFFECTP 'DEFINED-ON-LINE '320) 
(PUT 'VERY-NO-SIDE-EFFECTP 'DEFINED-IN-FILE 'RLISP/SMACRO.RED) 
(PUT 'VERY-NO-SIDE-EFFECTP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE VERY-NO-SIDE-EFFECTP (U)
    (COND
     ((ATOM U)
      (OR (NUMBERP U) (STRINGP U) (EQUAL U NIL) (EQUAL U T)
          (AND (IDP U) (NOT (OR (FLUIDP U) (GLOBALP U))))))
     ((EQUAL (CAR U) 'QUOTE) T) (T NIL))) 
(PUT 'NO-SIDE-EFFECT-LISTP 'NUMBER-OF-ARGS 1) 
(PUT 'NO-SIDE-EFFECT-LISTP 'DEFINED-ON-LINE '326) 
(PUT 'NO-SIDE-EFFECT-LISTP 'DEFINED-IN-FILE 'RLISP/SMACRO.RED) 
(PUT 'NO-SIDE-EFFECT-LISTP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE NO-SIDE-EFFECT-LISTP (U)
    (OR (NULL U)
        (AND (NO-SIDE-EFFECTP (CAR U)) (NO-SIDE-EFFECT-LISTP (CDR U))))) 
(PUT 'VERY-NO-SIDE-EFFECT-LISTP 'NUMBER-OF-ARGS 1) 
(PUT 'VERY-NO-SIDE-EFFECT-LISTP 'DEFINED-ON-LINE '330) 
(PUT 'VERY-NO-SIDE-EFFECT-LISTP 'DEFINED-IN-FILE 'RLISP/SMACRO.RED) 
(PUT 'VERY-NO-SIDE-EFFECT-LISTP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE VERY-NO-SIDE-EFFECT-LISTP (U)
    (OR (NULL U)
        (AND (VERY-NO-SIDE-EFFECTP (CAR U))
             (VERY-NO-SIDE-EFFECT-LISTP (CDR U))))) 
(FLAG '(CAR CDR CAAR CADR CDAR CDDR) 'NOSIDEEFFECTS) 
(FLAG '(NOT NULL ATOM EQ NUMBERP FIXP FLOATP EQCAR) 'NOSIDEEFFECTS) 
(PUT 'ONE-ENTRYP 'NUMBER-OF-ARGS 2) 
(PUT 'ONE-ENTRYP 'DEFINED-ON-LINE '353) 
(PUT 'ONE-ENTRYP 'DEFINED-IN-FILE 'RLISP/SMACRO.RED) 
(PUT 'ONE-ENTRYP 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE ONE-ENTRYP (U V)
    (COND ((ATOM V) T)
          ((SMEMQ U (CAR V))
           (COND ((SMEMQ U (CDR V)) NIL) (T (ONE-ENTRYP U (CAR V)))))
          (T (ONE-ENTRYP U (CDR V))))) 
(PUT 'ONE-ENTRY-LISTP 'NUMBER-OF-ARGS 2) 
(PUT 'ONE-ENTRY-LISTP 'DEFINED-ON-LINE '360) 
(PUT 'ONE-ENTRY-LISTP 'DEFINED-IN-FILE 'RLISP/SMACRO.RED) 
(PUT 'ONE-ENTRY-LISTP 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE ONE-ENTRY-LISTP (U V)
    (OR (NULL U) (AND (ONE-ENTRYP (CAR U) V) (ONE-ENTRY-LISTP (CDR U) V)))) 
(PUT 'DELASC 'NUMBER-OF-ARGS 2) 
(PUT 'DELASC 'DEFINED-ON-LINE '363) 
(PUT 'DELASC 'DEFINED-IN-FILE 'RLISP/SMACRO.RED) 
(PUT 'DELASC 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE DELASC (U V)
    (PROG (W)
      (PROG ()
       WHILELABEL
        (COND ((NOT V) (RETURN NIL)))
        (PROGN
         (COND
          ((OR (ATOM (CAR V)) (NEQ U (CAAR V))) (SETQ W (CONS (CAR V) W))))
         (SETQ V (CDR V)))
        (GO WHILELABEL))
      (RETURN (REVERSIP W)))) 
(PUT 'SUBLA-Q 'NUMBER-OF-ARGS 2) 
(PUT 'SUBLA-Q 'DEFINED-ON-LINE '374) 
(PUT 'SUBLA-Q 'DEFINED-IN-FILE 'RLISP/SMACRO.RED) 
(PUT 'SUBLA-Q 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE SUBLA-Q (U V)
    (PROG (X)
      (COND ((OR (NULL U) (NULL V)) (RETURN V))
            ((ATOM V) (RETURN (COND ((SETQ X (ATSOC V U)) (CDR X)) (T V))))
            ((OR (EQUAL (CAR V) 'QUOTE) (EQUAL (CAR V) 'GO)) (RETURN V))
            ((AND (OR (EQCAR V 'LAMBDA) (EQCAR V 'PROG)) (NOT (ATOM (CDR V))))
             (PROGN
              (SETQ X (CADR V))
              (PROG (XX)
                (SETQ XX X)
               LAB
                (COND ((NULL XX) (RETURN NIL)))
                ((LAMBDA (XX) (SETQ U (DELASC XX U))) (CAR XX))
                (SETQ XX (CDR XX))
                (GO LAB))
              (SETQ X (CONS (SUBLA-Q U (CAR V)) (SUBLA-Q U (CDR V))))
              (RETURN X)))
            (T (RETURN (CONS (SUBLA-Q U (CAR V)) (SUBLA-Q U (CDR V)))))))) 
(PUT 'INLINE 'MACROFN 'APPLSMACRO) 
(PUT 'SMACRO 'MACROFN 'APPLSMACRO) 
(PUT 'MAKECARCDR 'NUMBER-OF-ARGS 2) 
(PUT 'MAKECARCDR 'DEFINED-ON-LINE '451) 
(PUT 'MAKECARCDR 'DEFINED-IN-FILE 'RLISP/SMACRO.RED) 
(PUT 'MAKECARCDR 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MAKECARCDR (PATH X)
    (COND ((NULL PATH) X) ((NULL (CDR PATH)) (LIST (CAR PATH) X))
          ((NULL (CDDR PATH))
           (LIST
            (CDR
             (ASSOC (CONS (CAR PATH) (CADR PATH))
                    '(((CAR . CAR) . CAAR) ((CAR . CDR) . CADR)
                      ((CDR . CAR) . CDAR) ((CDR . CDR) . CDDR))))
            X))
          (T
           (LIST
            (CDR
             (ASSOC (CONS (CAR PATH) (CONS (CADR PATH) (CADDR PATH)))
                    '(((CAR CAR . CAR) . CAAAR) ((CAR CAR . CDR) . CAADR)
                      ((CAR CDR . CAR) . CADAR) ((CAR CDR . CDR) . CADDR)
                      ((CDR CAR . CAR) . CDAAR) ((CDR CAR . CDR) . CDADR)
                      ((CDR CDR . CAR) . CDDAR) ((CDR CDR . CDR) . CDDDR))))
            (MAKECARCDR (CDDDR PATH) X))))) 
(PUT 'CAR 'MUTATOR 'SETCAR) 
(PUT 'CDR 'MUTATOR 'SETCDR) 
(PUT 'EXPAND_ACCESSOR 'NUMBER-OF-ARGS 3) 
(PUT 'EXPAND_ACCESSOR 'DEFINED-ON-LINE '475) 
(PUT 'EXPAND_ACCESSOR 'DEFINED-IN-FILE 'RLISP/SMACRO.RED) 
(PUT 'EXPAND_ACCESSOR 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE EXPAND_ACCESSOR (U PATH R)
    (COND ((EQUAL U '_) R)
          ((EQCAR U 'CONS)
           (EXPAND_ACCESSOR (CADR U) (CONS 'CAR PATH)
                            (EXPAND_ACCESSOR (CADDR U) (CONS 'CDR PATH) R)))
          ((OR (EQUAL U NIL) (NOT (IDP U))) (TYPERR U "illegal as accessor"))
          (T
           (PROGN
            (SETQ R (CONS (LIST 'PUT (MKQUOTE U) ''NUMBER-OF-ARGS 1) R))
            (COND
             ((NOT *NOINLINES)
              (PROG (P)
                (SETQ P
                        (LIST 'PUTC (MKQUOTE U) ''INLINE
                              (MKQUOTE
                               (LIST 'LAMBDA '(U) (MAKECARCDR PATH 'U)))))
                (COND (*DEFN (LISPEVAL P)))
                (SETQ R (CONS P R)))))
            (SETQ R (CONS (LIST 'DE U '(U) (MAKECARCDR PATH 'U)) R))
            (SETQ R
                    (CONS
                     (LIST 'PUT (MKQUOTE U) ''SETQFN
                           (MKQUOTE
                            (LIST 'LAMBDA '(U V)
                                  (LIST (GET (CAR PATH) 'MUTATOR)
                                        (MAKECARCDR (CDR PATH) 'U) 'V))))
                     R))
            (SETQ U (INTERN (LIST2STRING (APPEND '(S E T _) (EXPLODE2 U)))))
            (SETQ R (CONS (LIST 'PUT (MKQUOTE U) ''NUMBER-OF-ARGS 2) R))
            (COND
             ((NOT *NOINLINES)
              (PROG (P)
                (SETQ P
                        (LIST 'PUTC (MKQUOTE U) ''INLINE
                              (MKQUOTE
                               (LIST 'LAMBDA '(U V)
                                     (LIST (GET (CAR PATH) 'MUTATOR)
                                           (MAKECARCDR (CDR PATH) 'U) 'V)))))
                (COND (*DEFN (LISPEVAL P)))
                (SETQ R (CONS P R)))))
            (SETQ R
                    (CONS
                     (LIST 'DE U '(U V)
                           (LIST (GET (CAR PATH) 'MUTATOR)
                                 (MAKECARCDR (CDR PATH) 'U) 'V))
                     R))
            R)))) 
(FLAG '(PUTC) 'EVAL) 
(PUT 'ACCESSORS 'DEFINED-ON-LINE '518) 
(PUT 'ACCESSORS 'DEFINED-IN-FILE 'RLISP/SMACRO.RED) 
(PUT 'ACCESSORS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DM ACCESSORS (U)
    (PROG (R)
      (SETQ U (EVAL (CADR U)))
      (PROG (C)
        (SETQ C U)
       LAB
        (COND ((NULL C) (RETURN NIL)))
        ((LAMBDA (C) (SETQ R (EXPAND_ACCESSOR C NIL R))) (CAR C))
        (SETQ C (CDR C))
        (GO LAB))
      (RETURN (CONS 'PROGN (APPEND (REVERSE R) '(NIL)))))) 
(PUT 'ACCESSORS 'STAT 'RLIS) 
(ENDMODULE) 