(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'DECREP)) 
(NULL (SETQ *MODE 'SYMBOLIC)) 
(PUT 'DIGITS2NUM 'NUMBER-OF-ARGS 2) 
(PUT 'DIGITS2NUM 'DEFINED-ON-LINE '33) 
(PUT 'DIGITS2NUM 'DEFINED-IN-FILE 'RATAPRX/DECREP.RED) 
(PUT 'DIGITS2NUM 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE DIGITS2NUM (X BASE)
    (PROG (N)
      (COND
       ((NOT (PAIRP X))
        (REDERR "digits2num: arg should be list of non-negative digits")))
      (SETQ N 0)
      (PROG (D)
        (SETQ D X)
       LAB
        (COND ((NULL D) (RETURN NIL)))
        ((LAMBDA (D)
           (COND
            ((AND (FIXP D) (GEQ D 0) (LESSP D BASE))
             (SETQ N (PLUS (TIMES N BASE) D)))
            (T
             (REDERR
              "digits2num: arg should be list of non-negative digits"))))
         (CAR D))
        (SETQ D (CDR D))
        (GO LAB))
      (RETURN N))) 
(PUT 'NUM2DIGITS 'NUMBER-OF-ARGS 2) 
(PUT 'NUM2DIGITS 'DEFINED-ON-LINE '51) 
(PUT 'NUM2DIGITS 'DEFINED-IN-FILE 'RATAPRX/DECREP.RED) 
(PUT 'NUM2DIGITS 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE NUM2DIGITS (N BASE)
    (PROG (RESULT)
      (COND ((NOT (FIXP N)) (REDERR "num2digits: arg must be an integer")))
      (COND ((EQUAL N 0) (RETURN (LIST 0))))
      (COND ((LESSP N 0) (SETQ N (MINUS N))))
      (PROG ()
       WHILELABEL
        (COND ((NOT (GREATERP N 0)) (RETURN NIL)))
        (PROGN
         (SETQ N (DIVIDE N BASE))
         (SETQ RESULT (CONS (CDR N) RESULT))
         (SETQ N (CAR N))
         NIL)
        (GO WHILELABEL))
      (RETURN RESULT))) 
(FLAG '(PERIODIC) 'OPFN) 
(PUT 'RATIONAL2PERIODIC 'PSOPFN 'R2P**) 
(PUT 'R2P** 'NUMBER-OF-ARGS 1) 
(PUT 'R2P** 'DEFINED-ON-LINE '74) 
(PUT 'R2P** 'DEFINED-IN-FILE 'RATAPRX/DECREP.RED) 
(PUT 'R2P** 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE R2P** (U)
    (PROG (BASE N D RES NEG_FLAG)
      (SETQ BASE (COND ((CDR U) (IEVAL (CADR U))) (T 10)))
      (COND
       ((OR (LESSP BASE 2) (GREATERP BASE 16))
        (REDERR "rational2periodic: base must be >=2 and <= 16")))
      (SETQ U (REVAL1 (CAR U) NIL))
      (COND ((EQCAR U 'MINUS) (PROGN (SETQ U (CADR U)) (SETQ NEG_FLAG T) NIL)))
      (SETQ U (R2P-NUM-DEN U))
      (SETQ N (CAR U))
      (SETQ D (CDR U))
      (COND ((LESSP N 0) (PROGN (SETQ NEG_FLAG T) (SETQ N (MINUS N)))))
      (SETQ RES (RAT2FIXED_PT N D BASE))
      (COND (NEG_FLAG (SETQ BASE (MINUS BASE))))
      (RETURN
       (LIST 'PERIODIC (CONS 'LIST (CAR RES)) (CONS 'LIST (CADR RES))
             (CONS 'LIST (CADDR RES)) BASE)))) 
(PUT 'R2P-NUM-DEN 'NUMBER-OF-ARGS 1) 
(PUT 'R2P-NUM-DEN 'DEFINED-ON-LINE '95) 
(PUT 'R2P-NUM-DEN 'DEFINED-IN-FILE 'RATAPRX/DECREP.RED) 
(PUT 'R2P-NUM-DEN 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE R2P-NUM-DEN (U)
    (PROG (V W)
      (COND ((FIXP U) (RETURN (CONS U 1))))
      (COND
       ((AND (EQCAR U 'QUOTIENT) (FIXP (CADR U)) (FIXP (CADDR U)))
        (RETURN (CONS (CADR U) (CADDR U)))))
      (COND
       ((EQCAR U '*SQ)
        (PROGN
         (SETQ V (CADR U))
         (COND
          (((LAMBDA (U) (OR (ATOM U) (ATOM (CAR U)))) (SETQ W (CAR V)))
           (COND ((AND (FIXP W) (FIXP (CDR V))) (RETURN (CONS W (CDR V))))
                 ((AND (EQCAR W '|:RN:|) (EQUAL (CDR V) 1))
                  (RETURN (CDR W))))))
         NIL)))
      (REDERR "rational2periodic: 1st arg must be a rational number"))) 
(PUT 'RAT2FIXED_PT 'NUMBER-OF-ARGS 3) 
(PUT 'RAT2FIXED_PT 'DEFINED-ON-LINE '113) 
(PUT 'RAT2FIXED_PT 'DEFINED-IN-FILE 'RATAPRX/DECREP.RED) 
(PUT 'RAT2FIXED_PT 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE RAT2FIXED_PT (N D BASE)
    (PROG (M Z INTPART NON_PERIODIC REPEATING)
      (SETQ M (DIVIDE N D))
      (SETQ INTPART (CAR M))
      (SETQ N (TIMES BASE (CDR M)))
      (SETQ M (DIVIDE N D))
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND (NEQ N 0) (NOT (MEMBER M Z)))) (RETURN NIL)))
        (PROGN
         (SETQ Z (CONS M Z))
         (SETQ N (TIMES BASE (CDR M)))
         (SETQ M (DIVIDE N D))
         NIL)
        (GO WHILELABEL))
      (SETQ Z (REVERSIP Z))
      (COND
       ((EQUAL N 0)
        (SETQ NON_PERIODIC
                (PROG (PR FORALL-RESULT FORALL-ENDPTR)
                  (SETQ PR Z)
                  (COND ((NULL PR) (RETURN NIL)))
                  (SETQ FORALL-RESULT
                          (SETQ FORALL-ENDPTR
                                  (CONS ((LAMBDA (PR) (CAR PR)) (CAR PR))
                                        NIL)))
                 LOOPLABEL
                  (SETQ PR (CDR PR))
                  (COND ((NULL PR) (RETURN FORALL-RESULT)))
                  (RPLACD FORALL-ENDPTR
                          (CONS ((LAMBDA (PR) (CAR PR)) (CAR PR)) NIL))
                  (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                  (GO LOOPLABEL))))
       (T
        (PROGN
         (PROG ()
          WHILELABEL
           (COND ((NOT Z) (RETURN NIL)))
           (COND
            ((NEQ M (CAR Z))
             (PROGN
              (SETQ NON_PERIODIC (CONS (CAAR Z) NON_PERIODIC))
              (SETQ Z (CDR Z))
              NIL))
            (T
             (PROGN
              (SETQ REPEATING
                      (PROG (PR FORALL-RESULT FORALL-ENDPTR)
                        (SETQ PR Z)
                        (COND ((NULL PR) (RETURN NIL)))
                        (SETQ FORALL-RESULT
                                (SETQ FORALL-ENDPTR
                                        (CONS ((LAMBDA (PR) (CAR PR)) (CAR PR))
                                              NIL)))
                       LOOPLABEL
                        (SETQ PR (CDR PR))
                        (COND ((NULL PR) (RETURN FORALL-RESULT)))
                        (RPLACD FORALL-ENDPTR
                                (CONS ((LAMBDA (PR) (CAR PR)) (CAR PR)) NIL))
                        (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                        (GO LOOPLABEL)))
              (SETQ Z NIL)
              NIL)))
           (GO WHILELABEL))
         (SETQ NON_PERIODIC (REVERSIP NON_PERIODIC))
         NIL)))
      (RETURN (LIST (NUM2DIGITS INTPART BASE) NON_PERIODIC REPEATING)))) 
(PUT 'FIXED_PT2RAT 'NUMBER-OF-ARGS 4) 
(PUT 'FIXED_PT2RAT 'DEFINED-ON-LINE '150) 
(PUT 'FIXED_PT2RAT 'DEFINED-IN-FILE 'RATAPRX/DECREP.RED) 
(PUT 'FIXED_PT2RAT 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE FIXED_PT2RAT (IP NPP PP B)
    (PROG (LNPP LPP N D PP1 G)
      (SETQ LNPP (LENGTH NPP))
      (SETQ LPP (LENGTH PP))
      (SETQ IP (DIGITS2NUM IP B))
      (COND ((NEQ LNPP 0) (SETQ NPP (DIGITS2NUM NPP B))) (T (SETQ NPP 0)))
      (SETQ D (EXPT B LNPP))
      (SETQ N (PLUS (TIMES IP D) NPP))
      (COND
       ((NEQ LPP 0)
        (PROGN
         (SETQ PP (DIGITS2NUM PP B))
         (SETQ PP1 (DIFFERENCE (EXPT B LPP) 1))
         (SETQ N (PLUS (TIMES N PP1) PP))
         (SETQ D (TIMES D PP1))
         NIL)))
      (SETQ G (GCDN N D))
      (SETQ N (QUOTIENT N G))
      (SETQ D (QUOTIENT D G))
      (COND ((EQUAL D 1) (RETURN N)) (T (RETURN (LIST 'QUOTIENT N D)))))) 
(PUT '*DIGIT_LISTP 'NUMBER-OF-ARGS 2) 
(PUT '*DIGIT_LISTP 'DEFINED-ON-LINE '181) 
(PUT '*DIGIT_LISTP 'DEFINED-IN-FILE 'RATAPRX/DECREP.RED) 
(PUT '*DIGIT_LISTP 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE *DIGIT_LISTP (U B)
    (PROG (RES)
      (COND ((NOT (EQCAR U 'LIST)) (RETURN NIL)))
      (SETQ RES T)
      (SETQ U (CDR U))
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND RES U)) (RETURN NIL)))
        (PROGN
         (COND ((OR (LESSP (CAR U) 0) (GREATERP (CAR U) B)) (SETQ RES NIL)))
         (SETQ U (CDR U))
         NIL)
        (GO WHILELABEL))
      (RETURN RES))) 
(PUT 'PERIODIC2RATIONAL 'PSOPFN 'P2R**) 
(PUT 'P2R** 'NUMBER-OF-ARGS 1) 
(PUT 'P2R** 'DEFINED-ON-LINE '198) 
(PUT 'P2R** 'DEFINED-IN-FILE 'RATAPRX/DECREP.RED) 
(PUT 'P2R** 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE P2R** (U)
    (PROG (L IP NPP PP BASE NEG_FLAG RES)
      (SETQ L (LENGTH U))
      (COND
       ((EQUAL L 1)
        (COND
         ((EQUAL (CAAR U) 'PERIODIC)
          (PROGN
           (SETQ U (CDAR U))
           (SETQ IP (CAR U))
           (SETQ NPP (CADR U))
           (SETQ PP (CADDR U))
           (COND ((CDDDR U) (SETQ BASE (IEVAL (CADDDR U)))) (T (SETQ BASE 10)))
           (COND
            ((LESSP BASE 0)
             (PROGN (SETQ NEG_FLAG T) (SETQ BASE (MINUS BASE)))))
           (SETQ RES (FIXED_PT2RAT (CDR IP) (CDR NPP) (CDR PP) BASE))
           (COND (NEG_FLAG (RETURN (LIST 'MINUS RES))) (T (RETURN RES)))
           NIL))
         (T
          (REDERR "periodic2rational: single arg must be (periodic, ....)")))))
      (COND
       ((OR (EQUAL L 2) (GREATERP L 4))
        (REDERR "periodic2rational: too many arguments -- must be 1, 3 or 4")))
      (SETQ IP (CAR U))
      (SETQ NPP (CADR U))
      (SETQ PP (CADDR U))
      (COND ((CDDDR U) (SETQ BASE (IEVAL (CADDDR U)))) (T (SETQ BASE 10)))
      (COND
       ((LESSP BASE 0) (PROGN (SETQ NEG_FLAG T) (SETQ BASE (MINUS BASE)) NIL)))
      (COND
       ((OR (LESSP BASE 2) (GREATERP BASE 16))
        (REDERR "periodic2rational: base must be >=2 and <= 16")))
      (COND
       ((OR (EQUAL (LENGTH IP) 1)
            (NOT
             (AND (*DIGIT_LISTP IP BASE) (*DIGIT_LISTP NPP BASE)
                  (*DIGIT_LISTP PP BASE))))
        (REDERR "periodic2rational: invalid digit list(s) for this base")))
      (SETQ RES (FIXED_PT2RAT (CDR IP) (CDR NPP) (CDR PP) BASE))
      (COND (NEG_FLAG (RETURN (LIST 'MINUS RES))) (T (RETURN RES))))) 
(FLUID '(*DIGIT2CH)) 
(SETQ *DIGIT2CH (MKVECT 15)) 
(PUT 'PRINT_PERIODIC 'NUMBER-OF-ARGS 1) 
(PUT 'PRINT_PERIODIC 'DEFINED-ON-LINE '256) 
(PUT 'PRINT_PERIODIC 'DEFINED-IN-FILE 'RATAPRX/DECREP.RED) 
(PUT 'PRINT_PERIODIC 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PRINT_PERIODIC (U)
    (COND
     ((OR (NOT *NAT) (GREATERP (PLUS (LENGTH (CADDR U)) 10) (LINELENGTH NIL)))
      'FAILED)
     (T
      (PROG (OO IP NPP PP BASE NEG_FLAG L1 L2 L3 L)
        (SETQ IP (CDR (CADR U)))
        (SETQ L1 (LENGTH IP))
        (SETQ NPP (CDR (CADDR U)))
        (SETQ L2 (LENGTH NPP))
        (SETQ PP (CDR (CADDDR U)))
        (SETQ L3 (LENGTH PP))
        (SETQ BASE (CADR (CDDDR U)))
        (COND
         ((LESSP BASE 0)
          (PROGN (SETQ NEG_FLAG T) (SETQ BASE (MINUS BASE)) NIL)))
        (COND
         ((GREATERP L3 0)
          (PROGN
           (SETQ L (PLUS L1 L2 1))
           (COND (NEG_FLAG (SETQ L (PLUS L 1))))
           (SETQ YCOORD* (PLUS YCOORD* 1))
           (SETQ OO POSN*)
           (SETQ YMAX* (MAX YMAX* YCOORD*))
           (PROG (I)
             (SETQ I 1)
            LAB
             (COND ((MINUSP (DIFFERENCE L I)) (RETURN NIL)))
             (PRIN2* " ")
             (SETQ I (PLUS2 I 1))
             (GO LAB))
           (PROG (I)
             (SETQ I 1)
            LAB
             (COND ((MINUSP (DIFFERENCE L3 I)) (RETURN NIL)))
             (PRIN2* "_")
             (SETQ I (PLUS2 I 1))
             (GO LAB))
           (SETQ POSN* OO)
           (SETQ YCOORD* (DIFFERENCE YCOORD* 1))
           NIL)))
        (COND (NEG_FLAG (PRIN2* "-")))
        (PROG (D)
          (SETQ D IP)
         LAB
          (COND ((NULL D) (RETURN NIL)))
          ((LAMBDA (D) (PRIN2* (GETV *DIGIT2CH D))) (CAR D))
          (SETQ D (CDR D))
          (GO LAB))
        (COND
         ((OR (GREATERP L2 0) (GREATERP L3 0))
          (PROGN
           (PRIN2* ".")
           (PROG (D)
             (SETQ D NPP)
            LAB
             (COND ((NULL D) (RETURN NIL)))
             ((LAMBDA (D) (PRIN2* (GETV *DIGIT2CH D))) (CAR D))
             (SETQ D (CDR D))
             (GO LAB))
           (PROG (D)
             (SETQ D PP)
            LAB
             (COND ((NULL D) (RETURN NIL)))
             ((LAMBDA (D) (PRIN2* (GETV *DIGIT2CH D))) (CAR D))
             (SETQ D (CDR D))
             (GO LAB))
           NIL)))
        (COND
         ((NEQ BASE 10)
          (PROGN (PRIN2* "  (base ") (PRIN2* BASE) (PRIN2* ")") NIL)))
        (RETURN T))))) 
(PROG (I)
  (SETQ I 0)
 LAB
  (COND ((MINUSP (DIFFERENCE 9 I)) (RETURN NIL)))
  (PUTV *DIGIT2CH I I)
  (SETQ I (PLUS2 I 1))
  (GO LAB)) 
(PUTV *DIGIT2CH 10 '|a|) 
(PUTV *DIGIT2CH 11 '|b|) 
(PUTV *DIGIT2CH 12 '|c|) 
(PUTV *DIGIT2CH 13 '|d|) 
(PUTV *DIGIT2CH 14 '|e|) 
(PUTV *DIGIT2CH 15 '|f|) 
(PUT 'PERIODIC 'PRIFN 'PRINT_PERIODIC) 
(PUT 'PERIODIC 'FANCY-PRIFN 'FANCY-PERIODIC) 
(FLUID '(FANCY-POS* FANCY-TEXPOS FANCY-LINE*)) 
(PUT 'FANCY-PERIODIC 'NUMBER-OF-ARGS 1) 
(PUT 'FANCY-PERIODIC 'DEFINED-ON-LINE '319) 
(PUT 'FANCY-PERIODIC 'DEFINED-IN-FILE 'RATAPRX/DECREP.RED) 
(PUT 'FANCY-PERIODIC 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FANCY-PERIODIC (U)
    (PROG (POS TPOS FL W)
      (SETQ POS FANCY-POS*)
      (SETQ TPOS FANCY-TEXPOS)
      (SETQ FL FANCY-LINE*)
      (SETQ W
              (PROG (W0 IP NPP PP BASE NEG_FLAG L2 L3)
                (SETQ IP (CDR (CADR U)))
                (SETQ NPP (CDR (CADDR U)))
                (SETQ L2 (LENGTH NPP))
                (SETQ PP (CDR (CADDDR U)))
                (SETQ L3 (LENGTH PP))
                (SETQ BASE (CADR (CDDDR U)))
                (COND
                 ((LESSP BASE 0)
                  (PROGN (SETQ NEG_FLAG T) (SETQ BASE (MINUS BASE)) NIL)))
                (COND (NEG_FLAG (FANCY-PRIN2* "-" 0)))
                (FANCY-PRIN2* '|\\MATHRM{| 0)
                (PROG (D)
                  (SETQ D IP)
                 LAB
                  (COND ((NULL D) (RETURN NIL)))
                  ((LAMBDA (D) (FANCY-PRIN2* (GETV *DIGIT2CH D) 0)) (CAR D))
                  (SETQ D (CDR D))
                  (GO LAB))
                (FANCY-PRIN2* '} 0)
                (COND
                 ((OR (GREATERP L2 0) (GREATERP L3 0))
                  (PROGN
                   (FANCY-PRIN2* "." 0)
                   (FANCY-PRIN2* '|\\MATHRM{| 0)
                   (PROG (D)
                     (SETQ D NPP)
                    LAB
                     (COND ((NULL D) (RETURN NIL)))
                     ((LAMBDA (D) (FANCY-PRIN2* (GETV *DIGIT2CH D) 0)) (CAR D))
                     (SETQ D (CDR D))
                     (GO LAB))
                   (FANCY-PRIN2* '} 0)
                   (COND
                    ((GREATERP L3 0)
                     (PROGN
                      (FANCY-PRIN2* '|\\OVERLINE{\\MATHRM{| 0)
                      (PROG (D)
                        (SETQ D PP)
                       LAB
                        (COND ((NULL D) (RETURN NIL)))
                        ((LAMBDA (D) (FANCY-PRIN2* (GETV *DIGIT2CH D) 0))
                         (CAR D))
                        (SETQ D (CDR D))
                        (GO LAB))
                      (FANCY-PRIN2* '}} 0)
                      NIL)))
                   NIL)))
                (COND
                 ((NEQ BASE 10)
                  (PROGN
                   (FANCY-PRIN2* '_ 0)
                   (FANCY-PRIN2* '{ 0)
                   ((LAMBDA (*LIST) (SETQ W0 (FANCY-MAPRINT BASE 0))) NIL)
                   (FANCY-PRIN2* '} 0)
                   NIL)))
                (RETURN W0)))
      (COND
       ((EQ W 'FAILED) (SETQ FANCY-LINE* FL) (SETQ FANCY-TEXPOS TPOS)
        (SETQ FANCY-POS* POS)))
      (RETURN W))) 
(ENDMODULE) 