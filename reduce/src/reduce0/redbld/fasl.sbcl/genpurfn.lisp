(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'GENPURFN)) 
(DE BE_LAST (U) (DELETE (LASTCAR U) U)) 
(PUT 'BE_LAST 'NUMBER-OF-ARGS 1) 
(PUT 'BE_LAST 'DEFINED-ON-LINE '28) 
(PUT 'BE_LAST 'DEFINED-IN-FILE 'ASSIST/GENPURFN.RED) 
(PUT 'BE_LAST 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(PUTC 'BE_LAST 'INLINE '(LAMBDA (U) (DELETE (LASTCAR U) U))) 
(PUT 'RMKIDNEW 'NUMBER-OF-ARGS 1) 
(PUT 'RMKIDNEW 'DEFINED-ON-LINE '35) 
(PUT 'RMKIDNEW 'DEFINED-IN-FILE 'ASSIST/GENPURFN.RED) 
(PUT 'RMKIDNEW 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RMKIDNEW (U)
    (COND ((OR (NULL U) (NULL (SETQ U (REVAL1 (CAR U) T)))) (GENSYM))
          (T (MKID U (GENSYM))))) 
(PUT 'MKIDNEW 'PSOPFN 'RMKIDNEW) 
(PUT 'LIST_TO_IDS 'NUMBER-OF-ARGS 1) 
(PUT 'LIST_TO_IDS 'DEFINED-ON-LINE '40) 
(PUT 'LIST_TO_IDS 'DEFINED-IN-FILE 'ASSIST/GENPURFN.RED) 
(PUT 'LIST_TO_IDS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE LIST_TO_IDS (L)
    (COND ((ATOM L) (REDERR "argument for list_to_ids must be a list"))
          (T
           (INTERN
            (COMPRESS
             (PROG (I FORALL-RESULT FORALL-ENDPTR)
               (SETQ I (CDR L))
              STARTOVER
               (COND ((NULL I) (RETURN NIL)))
               (SETQ FORALL-RESULT ((LAMBDA (I) (EXPLODE I)) (CAR I)))
               (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
               (SETQ I (CDR I))
               (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
              LOOPLABEL
               (COND ((NULL I) (RETURN FORALL-RESULT)))
               (RPLACD FORALL-ENDPTR ((LAMBDA (I) (EXPLODE I)) (CAR I)))
               (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
               (SETQ I (CDR I))
               (GO LOOPLABEL))))))) 
(FLAG '(LIST_TO_IDS) 'OPFN) 
(PUT 'SIMPSETF 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPSETF 'DEFINED-ON-LINE '47) 
(PUT 'SIMPSETF 'DEFINED-IN-FILE 'ASSIST/GENPURFN.RED) 
(PUT 'SIMPSETF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPSETF (U)
    (PROG (X)
      (SETQ X (SIMP* (CAR U)))
      (COND
       ((OR (NOT (KERNP X)) (FIXP (*Q2A1 X *NOSQ)))
        (TYPERR (*Q2A1 X *NOSQ) "setvalue kernel"))
       (T (SETQ X (*Q2A1 X *NOSQ))))
      (LET0 (LIST (LIST 'EQUAL X (MK*SQ (SETQ U (SIMP* (CADR U)))))))
      (RETURN U))) 
(PUT 'SETVALUE 'SIMPFN 'SIMPSETF) 
(NEWTOK '((= =) SETVALUE | == |)) 
(INFIX (LIST 'SETVALUE)) 
(FLAG '(PRIN2) 'OPFN) 
(FLAG '(ODDP) 'BOOLEAN) 
(PUT 'FOLLOWLINE 'NUMBER-OF-ARGS 1) 
(PUT 'FOLLOWLINE 'DEFINED-ON-LINE '75) 
(PUT 'FOLLOWLINE 'DEFINED-IN-FILE 'ASSIST/GENPURFN.RED) 
(PUT 'FOLLOWLINE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FOLLOWLINE (N) (PROGN (TERPRI) (SPACES N))) 
(FLAG '(FOLLOWLINE) 'OPFN) 
(PUT '|CHARNUMP:| 'NUMBER-OF-ARGS 1) 
(PUT '|CHARNUMP:| 'DEFINED-ON-LINE '85) 
(PUT '|CHARNUMP:| 'DEFINED-IN-FILE 'ASSIST/GENPURFN.RED) 
(PUT '|CHARNUMP:| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |CHARNUMP:| (X)
    (COND
     ((MEMBER X (LIST '|0| '|1| '|2| '|3| '|4| '|5| '|6| '|7| '|8| '|9|)) T))) 
(PUT 'CHARNUMP 'NUMBER-OF-ARGS 1) 
(PUT 'CHARNUMP 'DEFINED-ON-LINE '88) 
(PUT 'CHARNUMP 'DEFINED-IN-FILE 'ASSIST/GENPURFN.RED) 
(PUT 'CHARNUMP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE CHARNUMP (U)
    (COND ((NULL U) T) (T (AND (|CHARNUMP:| (CAR U)) (CHARNUMP (CDR U)))))) 
(PUT 'DETIDNUM 'NUMBER-OF-ARGS 1) 
(PUT 'DETIDNUM 'DEFINED-ON-LINE '91) 
(PUT 'DETIDNUM 'DEFINED-IN-FILE 'ASSIST/GENPURFN.RED) 
(PUT 'DETIDNUM 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE DETIDNUM (U)
    (COND
     ((IDP U)
      (PROG (UU)
        (COND ((EQUAL (LENGTH (SETQ UU (CDR (EXPLODE U)))) 1) (GO L1))
              (T
               (PROG ()
                WHILELABEL
                 (COND ((NOT (NOT (CHARNUMP UU))) (RETURN NIL)))
                 (SETQ UU (CDR UU))
                 (GO WHILELABEL))))
       L1
        (SETQ UU (COMPRESS UU))
        (COND ((FIXP UU) (RETURN UU))))))) 
(FLAG '(DETIDNUM) 'OPFN) 
(PUT 'DELLASTDIGIT 'NUMBER-OF-ARGS 1) 
(PUT 'DELLASTDIGIT 'DEFINED-ON-LINE '103) 
(PUT 'DELLASTDIGIT 'DEFINED-IN-FILE 'ASSIST/GENPURFN.RED) 
(PUT 'DELLASTDIGIT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE DELLASTDIGIT (U)
    (COND ((FIXP U) (COMPRESS (REVERSE (CDR (REVERSE (EXPLODE U))))))
          (T (TYPERR U "integer")))) 
(FLAG '(DELLASTDIGIT) 'OPFN) 
(PUT 'RANDOMLIST 'NUMBER-OF-ARGS 2) 
(PUT 'RANDOMLIST 'DEFINED-ON-LINE '112) 
(PUT 'RANDOMLIST 'DEFINED-IN-FILE 'ASSIST/GENPURFN.RED) 
(PUT 'RANDOMLIST 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE RANDOMLIST (N TRIAL)
    (CONS 'LIST
          (PROG (J FORALL-RESULT FORALL-ENDPTR)
            (SETQ J 1)
            (COND ((MINUSP (DIFFERENCE TRIAL J)) (RETURN NIL)))
            (SETQ FORALL-RESULT (SETQ FORALL-ENDPTR (CONS (RANDOM N) NIL)))
           LOOPLABEL
            (SETQ J (PLUS2 J 1))
            (COND ((MINUSP (DIFFERENCE TRIAL J)) (RETURN FORALL-RESULT)))
            (RPLACD FORALL-ENDPTR (CONS (RANDOM N) NIL))
            (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
            (GO LOOPLABEL)))) 
(FLAG '(RANDOMLIST) 'OPFN) 
(PUT 'TRANSPOSE 'NUMBER-OF-ARGS 3) 
(PUT 'TRANSPOSE 'DEFINED-ON-LINE '121) 
(PUT 'TRANSPOSE 'DEFINED-IN-FILE 'ASSIST/GENPURFN.RED) 
(PUT 'TRANSPOSE 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE TRANSPOSE (L I J)
    (PROG (TMP)
      (SETQ TMP (NTH L I))
      (SETCAR (PNTH L I) (NTH L J))
      (SETCAR (PNTH L J) TMP)
      (RETURN L))) 
(PUT 'COMBNUM 'NUMBER-OF-ARGS 2) 
(FLAG '(COMBNUM) 'OPFN) 
(PUT 'COMBNUM 'DEFINED-ON-LINE '131) 
(PUT 'COMBNUM 'DEFINED-IN-FILE 'ASSIST/GENPURFN.RED) 
(PUT 'COMBNUM 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE COMBNUM (N NU)
    (COND
     ((EVALGREATERP (AEVAL NU) (AEVAL N))
      (AEVAL
       (REDERR
        (REVALX "second argument cannot be bigger than first argument"))))
     (T
      (AEVAL
       (LIST 'QUOTIENT
             (LIST 'QUOTIENT (LIST 'FACTORIAL N) (LIST 'FACTORIAL NU))
             (LIST 'FACTORIAL (LIST 'DIFFERENCE N NU))))))) 
(PUT 'CYCLICPERMLIST 'NUMBER-OF-ARGS 1) 
(PUT 'CYCLICPERMLIST 'DEFINED-ON-LINE '137) 
(PUT 'CYCLICPERMLIST 'DEFINED-IN-FILE 'ASSIST/GENPURFN.RED) 
(PUT 'CYCLICPERMLIST 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE CYCLICPERMLIST (L)
    (COND ((ATOM L) NIL)
          (T
           (PROG (X LE)
             (SETQ LE 0)
             (SETQ L (CDR L))
             (SETQ LE (LENGTH L))
             (SETQ X (CONS (CONS 'LIST L) X))
             (PROG (I)
               (SETQ I 2)
              LAB
               (COND ((MINUSP (DIFFERENCE LE I)) (RETURN NIL)))
               (SETQ X
                       (CONS
                        (CONS 'LIST (SETQ L (APPEND (CDR L) (LIST (CAR L)))))
                        X))
               (SETQ I (PLUS2 I 1))
               (GO LAB))
             (RETURN (CONS 'LIST (REVERSIP X))))))) 
(FLAG '(CYCLICPERMLIST) 'OPFN) 
(PUT 'RPERMUTATION 'NUMBER-OF-ARGS 1) 
(PUT 'RPERMUTATION 'DEFINED-ON-LINE '150) 
(PUT 'RPERMUTATION 'DEFINED-IN-FILE 'ASSIST/GENPURFN.RED) 
(PUT 'RPERMUTATION 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RPERMUTATION (U)
    (COND ((NOT (BAGLISTP (SETQ U (REVAL1 (CAR U) T)))) NIL)
          ((NULL (CDR U)) (CONS 'LIST NIL))
          (T
           (PROG (X PRF)
             (SETQ PRF (CAR U))
             (SETQ U (CDR U))
             (SETQ X
                     (PROG (J FORALL-RESULT FORALL-ENDPTR)
                       (SETQ J U)
                      STARTOVER
                       (COND ((NULL J) (RETURN NIL)))
                       (SETQ FORALL-RESULT
                               ((LAMBDA (J)
                                  (MAPCONS (PERMUTATIONS (DELETE J U)) J))
                                (CAR J)))
                       (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
                       (SETQ J (CDR J))
                       (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
                      LOOPLABEL
                       (COND ((NULL J) (RETURN FORALL-RESULT)))
                       (RPLACD FORALL-ENDPTR
                               ((LAMBDA (J)
                                  (MAPCONS (PERMUTATIONS (DELETE J U)) J))
                                (CAR J)))
                       (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
                       (SETQ J (CDR J))
                       (GO LOOPLABEL)))
             (SETQ X
                     (PROG (J FORALL-RESULT FORALL-ENDPTR)
                       (SETQ J X)
                       (COND ((NULL J) (RETURN NIL)))
                       (SETQ FORALL-RESULT
                               (SETQ FORALL-ENDPTR
                                       (CONS
                                        ((LAMBDA (J) (CONS PRF J)) (CAR J))
                                        NIL)))
                      LOOPLABEL
                       (SETQ J (CDR J))
                       (COND ((NULL J) (RETURN FORALL-RESULT)))
                       (RPLACD FORALL-ENDPTR
                               (CONS ((LAMBDA (J) (CONS PRF J)) (CAR J)) NIL))
                       (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                       (GO LOOPLABEL)))
             (RETURN (CONS PRF X)))))) 
(PUT 'PERMUTATIONS 'PSOPFN 'RPERMUTATION) 
(PUT 'PERM_TO_NUM 'NUMBER-OF-ARGS 2) 
(PUT 'PERM_TO_NUM 'DEFINED-ON-LINE '162) 
(PUT 'PERM_TO_NUM 'DEFINED-IN-FILE 'ASSIST/GENPURFN.RED) 
(PUT 'PERM_TO_NUM 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE PERM_TO_NUM (NINDL INDL)
    (PROG (LN FLN R NUM POS)
      (SETQ LN 0)
      (SETQ FLN 0)
      (SETQ R 0)
      (SETQ NUM 0)
      (SETQ POS 0)
      (SETQ NINDL (CDR NINDL))
      (COND ((EQUAL (SETQ LN (LENGTH NINDL)) 1) (RETURN NUM)))
      (SETQ FLN (RNFACTORIAL* (MKRATNUM LN)))
      (PROG ()
       WHILELABEL
        (COND ((NOT (GEQ LN 1)) (RETURN NIL)))
        (PROGN
         (PROGN
          (SETQ R (RPOSITION (LIST (LASTCAR NINDL) INDL)))
          (SETQ NINDL
                  (PROG (J FORALL-RESULT FORALL-ENDPTR)
                    (SETQ J (DELETE (LASTCAR NINDL) NINDL))
                    (COND ((NULL J) (RETURN NIL)))
                    (SETQ FORALL-RESULT
                            (SETQ FORALL-ENDPTR
                                    (CONS
                                     ((LAMBDA (J)
                                        (PROGN
                                         (SETQ POS (RPOSITION (LIST J INDL)))
                                         (COND
                                          ((GREATERP POS R)
                                           (NTH (CDR INDL) (DIFFERENCE POS 1)))
                                          (T J))))
                                      (CAR J))
                                     NIL)))
                   LOOPLABEL
                    (SETQ J (CDR J))
                    (COND ((NULL J) (RETURN FORALL-RESULT)))
                    (RPLACD FORALL-ENDPTR
                            (CONS
                             ((LAMBDA (J)
                                (PROGN
                                 (SETQ POS (RPOSITION (LIST J INDL)))
                                 (COND
                                  ((GREATERP POS R)
                                   (NTH (CDR INDL) (DIFFERENCE POS 1)))
                                  (T J))))
                              (CAR J))
                             NIL))
                    (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                    (GO LOOPLABEL)))
          (SETQ FLN (QUOTIENT FLN LN))
          (SETQ NUM (PLUS NUM (TIMES (DIFFERENCE LN R) FLN)))
          NIL)
         (SETQ LN (DIFFERENCE LN 1)))
        (GO WHILELABEL))
      (RETURN NUM))) 
(PUT 'NUM_TO_PERM 'NUMBER-OF-ARGS 2) 
(PUT 'NUM_TO_PERM 'DEFINED-ON-LINE '183) 
(PUT 'NUM_TO_PERM 'DEFINED-IN-FILE 'ASSIST/GENPURFN.RED) 
(PUT 'NUM_TO_PERM 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE NUM_TO_PERM (NUM INDL)
    (PROG (RK J F M LST NINDL)
      (SETQ RK 0)
      (SETQ J 0)
      (SETQ F 0)
      (SETQ M 0)
      (SETQ LST 0)
      (SETQ INDL (CDR INDL))
      (SETQ RK (LENGTH INDL))
      (SETQ F (RNFACTORIAL* (MKRATNUM RK)))
      (PROG ()
       WHILELABEL
        (COND ((NOT (GEQ RK 1)) (RETURN NIL)))
        (PROGN
         (PROGN
          (SETQ F (QUOTIENT F RK))
          (SETQ M (RNFLOOR* (MKRATNUM (QUOTIENT NUM F))))
          (SETQ NUM (DIFFERENCE NUM (TIMES M F)))
          (SETQ J (DIFFERENCE RK M))
          (SETQ LST (NTH INDL J))
          (SETQ INDL (REMOVE INDL J))
          (SETQ NINDL (CONS LST NINDL)))
         (SETQ RK (DIFFERENCE RK 1)))
        (GO WHILELABEL))
      (RETURN (CONS 'LIST NINDL)))) 
(FLAG '(PERM_TO_NUM NUM_TO_PERM) 'OPFN) 
(PUT '|:COMB| 'NUMBER-OF-ARGS 1) 
(PUT '|:COMB| 'DEFINED-ON-LINE '202) 
(PUT '|:COMB| 'DEFINED-IN-FILE 'ASSIST/GENPURFN.RED) 
(PUT '|:COMB| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |:COMB| (U)
    (PROG (X PRF N)
      (SETQ N 0)
      (COND
       ((NEQ (LENGTH U) 2)
        (REDERR "combinations called with wrong number of arguments")))
      (SETQ X (REVAL1 (CAR U) T))
      (COND ((NOT (BAGLISTP X)) (RETURN NIL)))
      (SETQ PRF (CAR X))
      (SETQ X (CDR X))
      (SETQ N (REVAL1 (CADR U) T))
      (RETURN
       (CONS PRF
             (PROG (J FORALL-RESULT FORALL-ENDPTR)
               (SETQ J (COMB X N))
               (COND ((NULL J) (RETURN NIL)))
               (SETQ FORALL-RESULT
                       (SETQ FORALL-ENDPTR
                               (CONS ((LAMBDA (J) (CONS PRF J)) (CAR J)) NIL)))
              LOOPLABEL
               (SETQ J (CDR J))
               (COND ((NULL J) (RETURN FORALL-RESULT)))
               (RPLACD FORALL-ENDPTR
                       (CONS ((LAMBDA (J) (CONS PRF J)) (CAR J)) NIL))
               (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
               (GO LOOPLABEL)))))) 
(PUT 'COMBINATIONS 'PSOPFN '|:COMB|) 
(PUT 'SYMMETRIZE 'SIMPFN 'SIMPSUMSYM) 
(FLAG '(SYMMETRIZE) 'LISTARGP) 
(PUT 'SIMPSUMSYM 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPSUMSYM 'DEFINED-ON-LINE '217) 
(PUT 'SIMPSUMSYM 'DEFINED-IN-FILE 'ASSIST/GENPURFN.RED) 
(PUT 'SIMPSUMSYM 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPSUMSYM (U)
    (COND ((NEQ (LENGTH U) 3) (REDERR "3 arguments required for symmetrize"))
          (T
           (PROG (UU X RES OPER FN BOOL BOOLFN N)
             (SETQ N 0)
             (SETQ FN (CADDR U))
             (COND
              ((NOT (MEMQ (GETTYPE FN) '(PROCEDURE ALGEBRAIC_PROCEDURE)))
               (TYPERR FN "procedure")))
             ((LAMBDA (X)
                (SETQ UU
                        (COND
                         ((FLAGP FN 'OPFN)
                          (PROGN (SETQ BOOLFN T) (REVAL1 X T)))
                         (T (CDR (REVAL1 X T))))))
              (CAR U))
             (SETQ N (LENGTH UU))
             (SETQ OPER (CADR U))
             (COND ((NOT (IDP OPER)) (TYPERR OPER "operator"))
                   ((NULL (FLAGP OPER 'OPFN))
                    (COND
                     ((NULL (GET OPER 'SIMPFN))
                      (PUT OPER 'SIMPFN 'SIMPIDEN)))))
             (FLAG (LIST OPER) 'LISTARGP)
             (SETQ X
                     (COND
                      ((AND (LISTP (CAR UU)) (NOT BOOLFN))
                       (PROGN (SETQ BOOL T) (APPLY1 FN (CDAR UU))))
                      ((AND BOOLFN (LISTP (CADR UU)))
                       (PROGN (SETQ BOOL T) (APPLY1 FN (CADR UU))))
                      (T (APPLY1 FN UU))))
             (COND ((FLAGP FN 'OPFN) (SETQ X (ALG_TO_SYMB X))))
             (SETQ N (DIFFERENCE (LENGTH X) 1))
             (COND
              ((NOT BOOL)
               (PROGN
                (SETQ RES
                        (LIST
                         (CONS (GETPOWER (FKERN (CONS OPER (CAR X))) 1) 1)))
                (PROG (I)
                  (SETQ I 1)
                 LAB
                  (COND ((MINUSP (DIFFERENCE N I)) (RETURN NIL)))
                  (PROGN
                   (SETQ UU (CADR X))
                   (ACONC RES (CONS (GETPOWER (FKERN (CONS OPER UU)) 1) 1))
                   (DELQIP UU X)
                   NIL)
                  (SETQ I (PLUS2 I 1))
                  (GO LAB))
                NIL))
              (T
               (PROGN
                (SETQ RES
                        (LIST
                         (CONS
                          (GETPOWER
                           (FKERN
                            (CONS OPER
                                  (LIST
                                   (CONS 'LIST
                                         (PROG (I FORALL-RESULT FORALL-ENDPTR)
                                           (SETQ I (CAR X))
                                           (COND ((NULL I) (RETURN NIL)))
                                           (SETQ FORALL-RESULT
                                                   (SETQ FORALL-ENDPTR
                                                           (CONS
                                                            ((LAMBDA (I)
                                                               (MK*SQ
                                                                (SIMP* I)))
                                                             (CAR I))
                                                            NIL)))
                                          LOOPLABEL
                                           (SETQ I (CDR I))
                                           (COND
                                            ((NULL I) (RETURN FORALL-RESULT)))
                                           (RPLACD FORALL-ENDPTR
                                                   (CONS
                                                    ((LAMBDA (I)
                                                       (MK*SQ (SIMP* I)))
                                                     (CAR I))
                                                    NIL))
                                           (SETQ FORALL-ENDPTR
                                                   (CDR FORALL-ENDPTR))
                                           (GO LOOPLABEL))))))
                           1)
                          1)))
                (PROG (I)
                  (SETQ I 1)
                 LAB
                  (COND ((MINUSP (DIFFERENCE N I)) (RETURN NIL)))
                  (PROGN
                   (SETQ UU (CADR X))
                   (ACONC RES
                          (CONS
                           (GETPOWER
                            (FKERN
                             (CONS OPER
                                   (LIST
                                    (CONS 'LIST
                                          (PROG (I FORALL-RESULT FORALL-ENDPTR)
                                            (SETQ I UU)
                                            (COND ((NULL I) (RETURN NIL)))
                                            (SETQ FORALL-RESULT
                                                    (SETQ FORALL-ENDPTR
                                                            (CONS
                                                             ((LAMBDA (I)
                                                                (MK*SQ
                                                                 (SIMP* I)))
                                                              (CAR I))
                                                             NIL)))
                                           LOOPLABEL
                                            (SETQ I (CDR I))
                                            (COND
                                             ((NULL I) (RETURN FORALL-RESULT)))
                                            (RPLACD FORALL-ENDPTR
                                                    (CONS
                                                     ((LAMBDA (I)
                                                        (MK*SQ (SIMP* I)))
                                                      (CAR I))
                                                     NIL))
                                            (SETQ FORALL-ENDPTR
                                                    (CDR FORALL-ENDPTR))
                                            (GO LOOPLABEL))))))
                            1)
                           1))
                   (DELQIP UU X)
                   NIL)
                  (SETQ I (PLUS2 I 1))
                  (GO LAB))
                NIL)))
             (COND
              ((OR (GET OPER 'OPMTCH) (FLAGP OPER 'OPFN))
               (SETQ RES (RESIMP (CONS RES 1))))
              (T (SETQ RES (CONS RES 1))))
             (RETURN RES))))) 
(PUT 'SORTNUMLIST 'NUMBER-OF-ARGS 1) 
(PUT 'SORTNUMLIST 'DEFINED-ON-LINE '260) 
(PUT 'SORTNUMLIST 'DEFINED-IN-FILE 'ASSIST/GENPURFN.RED) 
(PUT 'SORTNUMLIST 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SORTNUMLIST (L)
    ((LAMBDA (X)
       (CONS 'LIST
             (COND ((LESSP (LENGTH X) 10) (BUBBLESORT1 X))
                   (T (QUICKSORT_I_TO_J X 1 (LENGTH X))))))
     (CDR L))) 
(FLAG '(SORTNUMLIST) 'OPFN) 
(PUT 'SORTLIST 'NUMBER-OF-ARGS 2) 
(PUT 'SORTLIST 'DEFINED-ON-LINE '268) 
(PUT 'SORTLIST 'DEFINED-IN-FILE 'ASSIST/GENPURFN.RED) 
(PUT 'SORTLIST 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE SORTLIST (L FN)
    (COND
     ((NUMLIS (CDR L))
      (COND ((EQ FN 'LESSP) (SORTNUMLIST L))
            ((EQ FN 'GEQ)
             ((LAMBDA (X)
                (CONS 'LIST
                      (REVERSE
                       (COND ((LESSP (LENGTH X) 10) (BUBBLESORT1 X))
                             (T (QUICKSORT_I_TO_J X 1 (LENGTH X)))))))
              (CDR L)))
            (T NIL)))
     (T (CONS 'LIST (BUBSORT1 (CDR L) FN))))) 
(FLAG '(SORTLIST) 'OPFN) 
(PUT 'BUBBLESORT1 'NUMBER-OF-ARGS 1) 
(PUT 'BUBBLESORT1 'DEFINED-ON-LINE '279) 
(PUT 'BUBBLESORT1 'DEFINED-IN-FILE 'ASSIST/GENPURFN.RED) 
(PUT 'BUBBLESORT1 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE BUBBLESORT1 (L)
    (PROG (LN)
      (SETQ LN 0)
      (SETQ LN (LENGTH L))
      (PROG (I)
        (SETQ I 1)
       LAB
        (COND ((MINUSP (DIFFERENCE LN I)) (RETURN NIL)))
        (PROG (J)
          (SETQ J (PLUS I 1))
         LAB
          (COND ((MINUSP (DIFFERENCE LN J)) (RETURN NIL)))
          (COND
           ((AND (NEQ I J) (GREATERP (NTH L I) (NTH L J))) (TRANSPOSE L I J))
           (T NIL))
          (SETQ J (PLUS2 J 1))
          (GO LAB))
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (RETURN L))) 
(PUT 'BUBSORT1 'NUMBER-OF-ARGS 2) 
(PUT 'BUBSORT1 'DEFINED-ON-LINE '290) 
(PUT 'BUBSORT1 'DEFINED-IN-FILE 'ASSIST/GENPURFN.RED) 
(PUT 'BUBSORT1 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE BUBSORT1 (L FN)
    (PROG (LN)
      (SETQ LN 0)
      (SETQ LN (LENGTH L))
      (PROG (I)
        (SETQ I 1)
       LAB
        (COND ((MINUSP (DIFFERENCE LN I)) (RETURN NIL)))
        (PROG (J)
          (SETQ J (PLUS I 1))
         LAB
          (COND ((MINUSP (DIFFERENCE LN J)) (RETURN NIL)))
          (COND
           ((AND (NEQ I J) (APPLY2 FN (NTH L J) (NTH L I))) (TRANSPOSE L I J))
           (T NIL))
          (SETQ J (PLUS2 J 1))
          (GO LAB))
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (RETURN L))) 
(PUT 'FIND_PIVOT_INDEX 'NUMBER-OF-ARGS 3) 
(PUT 'FIND_PIVOT_INDEX 'DEFINED-ON-LINE '303) 
(PUT 'FIND_PIVOT_INDEX 'DEFINED-IN-FILE 'ASSIST/GENPURFN.RED) 
(PUT 'FIND_PIVOT_INDEX 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE FIND_PIVOT_INDEX (L I J)
    (PROG (KEY K)
      (SETQ K 0)
      (SETQ KEY (NTH L I))
      (SETQ K (PLUS I 1))
     A
      (COND ((EQUAL K (PLUS J 1)) (RETURN (MINUS 1))))
      (COND ((GREATERP (NTH L K) KEY) (RETURN K))
            ((LESSP (NTH L K) KEY) (RETURN I)))
      (SETQ K (PLUS K 1))
      (GO A))) 
(PUT 'PARTITION 'NUMBER-OF-ARGS 4) 
(PUT 'PARTITION 'DEFINED-ON-LINE '314) 
(PUT 'PARTITION 'DEFINED-IN-FILE 'ASSIST/GENPURFN.RED) 
(PUT 'PARTITION 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE PARTITION (L I J PIVOT)
    (PROG (LE RI)
      (SETQ LE 0)
      (SETQ RI 0)
      (SETQ LE I)
      (SETQ RI J)
     A
      (COND ((GREATERP LE RI) (RETURN LE)))
      (TRANSPOSE L LE RI)
      (PROG ()
       WHILELABEL
        (COND ((NOT (LESSP (NTH L LE) PIVOT)) (RETURN NIL)))
        (SETQ LE (PLUS LE 1))
        (GO WHILELABEL))
      (PROG ()
       WHILELABEL
        (COND ((NOT (GEQ (NTH L RI) PIVOT)) (RETURN NIL)))
        (SETQ RI (DIFFERENCE RI 1))
        (GO WHILELABEL))
      (GO A))) 
(PUT 'QUICKSORT_I_TO_J 'NUMBER-OF-ARGS 3) 
(PUT 'QUICKSORT_I_TO_J 'DEFINED-ON-LINE '327) 
(PUT 'QUICKSORT_I_TO_J 'DEFINED-IN-FILE 'ASSIST/GENPURFN.RED) 
(PUT 'QUICKSORT_I_TO_J 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE QUICKSORT_I_TO_J (L I J)
    (PROG (K PI_)
      (SETQ K 0)
      (SETQ PI_ 0)
      (SETQ PI_ (FIND_PIVOT_INDEX L I J))
      (RETURN
       (COND
        ((NEQ PI_ (MINUS 1))
         (PROGN
          (SETQ PI_ (NTH L PI_))
          (SETQ K (PARTITION L I J PI_))
          (QUICKSORT_I_TO_J L I (DIFFERENCE K 1))
          (QUICKSORT_I_TO_J L K J)
          L))
        (T L))))) 
(PUT 'ALGSORT 'NUMBER-OF-ARGS 2) 
(PUT 'ALGSORT 'DEFINED-ON-LINE '336) 
(PUT 'ALGSORT 'DEFINED-IN-FILE 'ASSIST/GENPURFN.RED) 
(PUT 'ALGSORT 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE ALGSORT (U V) (SYMB_TO_ALG (SORT (ALG_TO_SYMB U) V))) 
(FLAG '(ALGSORT) 'OPFN) 
(PUT 'CHECKPROPLIST1 'NUMBER-OF-ARGS 2) 
(PUT 'CHECKPROPLIST1 'DEFINED-ON-LINE '346) 
(PUT 'CHECKPROPLIST1 'DEFINED-IN-FILE 'ASSIST/GENPURFN.RED) 
(PUT 'CHECKPROPLIST1 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE CHECKPROPLIST1 (L FN)
    (COND ((NULL L) T)
          ((EQ FN 'NUMBERP)
           (COND
            ((APPLY1 (FUNCTION EVALNUMBERP) (CAR L))
             (CHECKPROPLIST1 (CDR L) FN))
            (T NIL)))
          ((EQ FN 'FLOATP)
           (COND ((ATOM (CAR L)) NIL)
                 ((APPLY1 (FUNCTION FLOATP) (CDAR L))
                  (CHECKPROPLIST1 (CDR L) FN))
                 (T NIL)))
          ((EQUAL (GET FN 'NUMBER-OF-ARGS) 1)
           (COND ((APPLY1 FN (CAR L)) (CHECKPROPLIST1 (CDR L) FN)) (T NIL)))
          ((EQUAL (GET FN 'NUMBER-OF-ARGS) 2)
           (COND
            ((APPLY FN (LIST (CAR L) (CADR L))) (CHECKPROPLIST1 (CDR L) FN))
            (T NIL))))) 
(PUT 'CHECKPROPLIST 'NUMBER-OF-ARGS 2) 
(PUT 'CHECKPROPLIST 'DEFINED-ON-LINE '364) 
(PUT 'CHECKPROPLIST 'DEFINED-IN-FILE 'ASSIST/GENPURFN.RED) 
(PUT 'CHECKPROPLIST 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE CHECKPROPLIST (L FN)
    (COND ((ATOM L) (REDERR "First argument must be a list"))
          (T (CHECKPROPLIST1 (CDR L) FN)))) 
(FLAG '(CHECKPROPLIST) 'BOOLEAN) 
(PUT 'EXTRACTLIST1 'NUMBER-OF-ARGS 2) 
(PUT 'EXTRACTLIST1 'DEFINED-ON-LINE '371) 
(PUT 'EXTRACTLIST1 'DEFINED-IN-FILE 'ASSIST/GENPURFN.RED) 
(PUT 'EXTRACTLIST1 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE EXTRACTLIST1 (L FN)
    (COND ((NULL L) NIL)
          ((EQ FN 'NUMBERP)
           (COND
            ((APPLY1 (FUNCTION EVALNUMBERP) (CAR L))
             (CONS (CAR L) (EXTRACTLIST1 (CDR L) FN)))
            (T (EXTRACTLIST1 (CDR L) FN))))
          ((EQ FN 'FLOATP)
           (COND ((ATOM (CAR L)) (EXTRACTLIST1 (CDR L) FN))
                 ((APPLY1 (FUNCTION FLOATP) (CDAR L))
                  (CONS (CAR L) (EXTRACTLIST1 (CDR L) FN)))
                 (T (EXTRACTLIST1 (CDR L) FN))))
          ((APPLY1 FN (CAR L)) (CONS (CAR L) (EXTRACTLIST1 (CDR L) FN)))
          (T (EXTRACTLIST1 (CDR L) FN)))) 
(PUT 'EXTRACTLIST 'NUMBER-OF-ARGS 2) 
(PUT 'EXTRACTLIST 'DEFINED-ON-LINE '390) 
(PUT 'EXTRACTLIST 'DEFINED-IN-FILE 'ASSIST/GENPURFN.RED) 
(PUT 'EXTRACTLIST 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE EXTRACTLIST (L FN)
    ((LAMBDA (X)
       (COND
        ((AND X (GREATERP X 1))
         (REDERR "UNARY boolean function required as argument"))
        (T (CONS 'LIST (EXTRACTLIST1 (CDR L) FN)))))
     (GET FN 'NUMBER-OF-ARGS))) 
(FLAG '(EXTRACTLIST) 'OPFN) 
(PUT 'PUTFLAG 'NUMBER-OF-ARGS 3) 
(PUT 'PUTFLAG 'DEFINED-ON-LINE '400) 
(PUT 'PUTFLAG 'DEFINED-IN-FILE 'ASSIST/GENPURFN.RED) 
(PUT 'PUTFLAG 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE PUTFLAG (U FLG B)
    (COND
     ((AND (NOT (IDP U)) (NOT (NULL (BAGLISTP U))))
      (PROGN
       (PROG (X)
         (SETQ X (CDR U))
        LAB
         (COND ((NULL X) (RETURN NIL)))
         ((LAMBDA (X) (PUTFLAG X FLG B)) (CAR X))
         (SETQ X (CDR X))
         (GO LAB))
       T))
     ((AND (IDP U) (EQ B T))
      (PROGN
       (FLAG (LIST U) FLG)
       (SETQ |:FLAGLIS| (UNION (LIST (LIST U FLG)) |:FLAGLIS|))
       FLG))
     ((AND (IDP U) (EQUAL B 0))
      (PROGN (REMFLAG (LIST U) FLG) (|:DELETE| U NIL FLG) NIL))
     (T (REDERR "*** VARIABLES ARE (idp OR list of flags, T or 0).")))) 
(PUT 'PUTPROP 'NUMBER-OF-ARGS 4) 
(PUT 'PUTPROP 'DEFINED-ON-LINE '412) 
(PUT 'PUTPROP 'DEFINED-IN-FILE 'ASSIST/GENPURFN.RED) 
(PUT 'PUTPROP 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE PUTPROP (U PROP VAL B)
    (COND
     ((AND (NOT (IDP U)) (BAGLISTP U))
      (PROGN
       (PROG (X)
         (SETQ X (CDR U))
        LAB
         (COND ((NULL X) (RETURN NIL)))
         ((LAMBDA (X) (PUTPROP X PROP VAL B)) (CAR X))
         (SETQ X (CDR X))
         (GO LAB))
       T))
     ((AND (IDP U) (EQ B T))
      (PROGN
       (PUT U PROP VAL)
       (SETQ |:PROPLIS| (UNION (LIST (LIST U PROP VAL)) |:PROPLIS|))
       U))
     ((AND (IDP U) (EQUAL B 0))
      (PROGN (REMPROP U PROP) (|:DELETE| U PROP VAL) NIL))
     (T (REDERR "*** VARIABLES ARE (idp OR list of idps, T or 0).")))) 
(FLAG '(PUTFLAG PUTPROP) 'OPFN) 
(PUT 'RDISPLAYPROP 'NUMBER-OF-ARGS 1) 
(PUT 'RDISPLAYPROP 'DEFINED-ON-LINE '426) 
(PUT 'RDISPLAYPROP 'DEFINED-IN-FILE 'ASSIST/GENPURFN.RED) 
(PUT 'RDISPLAYPROP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RDISPLAYPROP (U)
    (PROG (X VAL AA)
      (SETQ X (REVAL1 (CAR U) T))
      (SETQ VAL (REVAL1 (CADR U) T))
      (PROG (J)
        (SETQ J |:PROPLIS|)
       LAB
        (COND ((NULL J) (RETURN NIL)))
        ((LAMBDA (J)
           (COND
            ((AND (EQ (CAR J) X) (EQ (CADR J) VAL))
             (SETQ AA (CONS (CONS 'LIST (CDR J)) AA)))))
         (CAR J))
        (SETQ J (CDR J))
        (GO LAB))
      (RETURN (COND ((EQUAL (LENGTH AA) 1) (FIRST AA)) (T (CONS 'LIST AA)))))) 
(PUT 'DISPLAYPROP 'PSOPFN 'RDISPLAYPROP) 
(PUT 'DISPLAYFLAG 'PSOPFN 'RDISPLAYFLAG) 
(PUT 'RDISPLAYFLAG 'NUMBER-OF-ARGS 1) 
(PUT 'RDISPLAYFLAG 'DEFINED-ON-LINE '439) 
(PUT 'RDISPLAYFLAG 'DEFINED-IN-FILE 'ASSIST/GENPURFN.RED) 
(PUT 'RDISPLAYFLAG 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RDISPLAYFLAG (U)
    (PROG (X AA)
      (SETQ X (REVAL1 (CAR U) T))
      (PROG (J)
        (SETQ J |:FLAGLIS|)
       LAB
        (COND ((NULL J) (RETURN NIL)))
        ((LAMBDA (J) (COND ((EQUAL (CAR J) X) (SETQ AA (CONS (CADR J) AA)))))
         (CAR J))
        (SETQ J (CDR J))
        (GO LAB))
      (RETURN (CONS 'LIST AA)))) 
(PUT '|CLRFLG:| 'NUMBER-OF-ARGS 1) 
(PUT '|CLRFLG:| 'DEFINED-ON-LINE '446) 
(PUT '|CLRFLG:| 'DEFINED-IN-FILE 'ASSIST/GENPURFN.RED) 
(PUT '|CLRFLG:| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |CLRFLG:| (U)
    (PROG (X)
      (SETQ X |:FLAGLIS|)
     LAB
      (COND ((NULL X) (RETURN NIL)))
      ((LAMBDA (X) (COND ((EQ U (CAR X)) (PUTFLAG (CAR X) (CADR X) 0))))
       (CAR X))
      (SETQ X (CDR X))
      (GO LAB))) 
(PUT 'CLEARFLAG 'NUMBER-OF-ARGS 1) 
(PUT 'CLEARFLAG 'DEFINED-ON-LINE '450) 
(PUT 'CLEARFLAG 'DEFINED-IN-FILE 'ASSIST/GENPURFN.RED) 
(PUT 'CLEARFLAG 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE CLEARFLAG (U)
    (COND
     ((AND (NULL (CDR U)) (EQ (CAR U) 'ALL))
      (PROG (X)
        (SETQ X |:FLAGLIS|)
       LAB
        (COND ((NULL X) (RETURN NIL)))
        ((LAMBDA (X) (PUTFLAG (CAR X) (CADR X) 0)) (CAR X))
        (SETQ X (CDR X))
        (GO LAB)))
     ((NULL (CDR U)) (|CLRFLG:| (CAR U)))
     (T
      (PROG (Y)
        (SETQ Y U)
       LAB
        (COND ((NULL Y) (RETURN NIL)))
        ((LAMBDA (Y) (|CLRFLG:| Y)) (CAR Y))
        (SETQ Y (CDR Y))
        (GO LAB))))) 
(PUT '|CLRPRP:| 'NUMBER-OF-ARGS 1) 
(PUT '|CLRPRP:| 'DEFINED-ON-LINE '458) 
(PUT '|CLRPRP:| 'DEFINED-IN-FILE 'ASSIST/GENPURFN.RED) 
(PUT '|CLRPRP:| 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE |CLRPRP:| (U)
    (PROG (X)
      (SETQ X |:PROPLIS|)
     LAB
      (COND ((NULL X) (RETURN NIL)))
      ((LAMBDA (X)
         (COND ((EQ U (CAR X)) (PUTPROP (CAR X) (CADR X) (CADDR X) 0))))
       (CAR X))
      (SETQ X (CDR X))
      (GO LAB))) 
(PUT 'CLEARPROP 'NUMBER-OF-ARGS 1) 
(PUT 'CLEARPROP 'DEFINED-ON-LINE '462) 
(PUT 'CLEARPROP 'DEFINED-IN-FILE 'ASSIST/GENPURFN.RED) 
(PUT 'CLEARPROP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE CLEARPROP (U)
    (COND
     ((AND (NULL (CDR U)) (EQ (CAR U) 'ALL))
      (PROG (X)
        (SETQ X |:PROPLIS|)
       LAB
        (COND ((NULL X) (RETURN NIL)))
        ((LAMBDA (X) (PUTPROP (CAR X) (CADR X) (CADDR X) 0)) (CAR X))
        (SETQ X (CDR X))
        (GO LAB)))
     ((NULL (CDR U)) (|CLRPRP:| (CAR U)))
     (T
      (PROG (Y)
        (SETQ Y U)
       LAB
        (COND ((NULL Y) (RETURN NIL)))
        ((LAMBDA (Y) (|CLRPRP:| Y)) (CAR Y))
        (SETQ Y (CDR Y))
        (GO LAB))))) 
(PUT 'CLEARFLAG 'STAT 'RLIS) 
(PUT 'CLEARPROP 'STAT 'RLIS) 
(ENDMODULE) 