(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'COMPLX)) 
(PUT 'REAL-IMAG-SQ 'NUMBER-OF-ARGS 1) 
(PUT 'REAL-IMAG-SQ 'DEFINED-ON-LINE '35) 
(PUT 'REAL-IMAG-SQ 'DEFINED-IN-FILE 'SUM/COMPLX.RED) 
(PUT 'REAL-IMAG-SQ 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REAL-IMAG-SQ (U)
    (PROG (X Y)
      (SETQ X (REAL-IMAG-F (CAR U)))
      (SETQ Y (REAL-IMAG-F (CDR U)))
      (SETQ U
              (ADDF
               (COND (*PHYSOP-LOADED (PHYSOP-MULTF (CAR Y) (CAR Y)))
                     (T (POLY-MULTF (CAR Y) (CAR Y))))
               (COND (*PHYSOP-LOADED (PHYSOP-MULTF (CDR Y) (CDR Y)))
                     (T (POLY-MULTF (CDR Y) (CDR Y))))))
      (RETURN
       (CONS
        (CANCEL
         (CONS
          (ADDF
           (COND (*PHYSOP-LOADED (PHYSOP-MULTF (CAR X) (CAR Y)))
                 (T (POLY-MULTF (CAR X) (CAR Y))))
           (COND (*PHYSOP-LOADED (PHYSOP-MULTF (CDR X) (CDR Y)))
                 (T (POLY-MULTF (CDR X) (CDR Y)))))
          U))
        (CANCEL
         (CONS
          (ADDF
           (COND (*PHYSOP-LOADED (PHYSOP-MULTF (CAR Y) (CDR X)))
                 (T (POLY-MULTF (CAR Y) (CDR X))))
           (NEGF
            (COND (*PHYSOP-LOADED (PHYSOP-MULTF (CAR X) (CDR Y)))
                  (T (POLY-MULTF (CAR X) (CDR Y))))))
          U)))))) 
(PUT 'REAL-IMAG-F 'NUMBER-OF-ARGS 1) 
(PUT 'REAL-IMAG-F 'DEFINED-ON-LINE '51) 
(PUT 'REAL-IMAG-F 'DEFINED-IN-FILE 'SUM/COMPLX.RED) 
(PUT 'REAL-IMAG-F 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REAL-IMAG-F (U)
    (PROG (X)
      (COND ((OR (ATOM U) (ATOM (CAR U))) (RETURN (CONS U NIL))))
      (SETQ X (SETKORDER (LIST 'I)))
      (SETQ U (REORDER U))
      (SETQ U
              (COND
               ((AND (EQ (CAAAR U) 'I) (EQUAL (CDAAR U) 1))
                (CONS (CDR U) (CDAR U)))
               (T (CONS U NIL))))
      (SETKORDER X)
      (RETURN (CONS (REORDER (CAR U)) (REORDER (CDR U)))))) 
(PUT 'REAL-IMAG-SINCOS 'NUMBER-OF-ARGS 1) 
(PUT 'REAL-IMAG-SINCOS 'DEFINED-ON-LINE '68) 
(PUT 'REAL-IMAG-SINCOS 'DEFINED-IN-FILE 'SUM/COMPLX.RED) 
(PUT 'REAL-IMAG-SINCOS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE REAL-IMAG-SINCOS (U)
    (PROG (V W Z)
      (SETQ V (REAL-IMAG-SQ U))
      (COND
       ((NULL (CADR V))
        (PROGN
         (SETQ U (PREPSQ U))
         (RETURN (CONS (SIMP* (LIST 'SINH U)) (SIMP* (LIST 'COSH U))))))
       ((NULL (CAAR V))
        (PROGN
         (SETQ U (PREPSQ (CDR V)))
         (RETURN
          (CONS
           (MULTSQ (CONS (LIST (CONS (CONS 'I 1) 1)) 1) (SIMP* (LIST 'SIN U)))
           (SIMP* (LIST 'COS U)))))))
      (SETQ U (PREPSQ (CDR V)))
      (SETQ V (PREPSQ (CAR V)))
      (SETQ W (SIMP* (LIST 'COS U)))
      (SETQ U (SIMP* (LIST 'SIN U)))
      (SETQ U (MULTSQ (CONS (LIST (CONS (CONS 'I 1) 1)) 1) U))
      (SETQ Z (SIMP* (LIST 'COSH V)))
      (SETQ V (SIMP* (LIST 'SINH V)))
      (RETURN
       (CONS (ADDSQ (MULTSQ W V) (MULTSQ U Z))
             (ADDSQ (MULTSQ W Z) (MULTSQ U V)))))) 
(PUT 'SUM-SPLIT-LOG 'NUMBER-OF-ARGS 2) 
(PUT 'SUM-SPLIT-LOG 'DEFINED-ON-LINE '98) 
(PUT 'SUM-SPLIT-LOG 'DEFINED-IN-FILE 'SUM/COMPLX.RED) 
(PUT 'SUM-SPLIT-LOG 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE SUM-SPLIT-LOG (U V)
    (PROG (X Y Z LST LLST MLST)
      (SETQ LST (SUM-TERM-SPLIT U V))
     A
      (COND ((NULL LST) (RETURN (CONS LLST MLST))))
      (SETQ U (CAR LST))
      (SETQ LST (CDR LST))
      (SETQ Z (CAR U))
      (COND
       ((OR (OR (ATOM Z) (ATOM (CAR Z))) (CDR Z)
            (NOT (EQUAL (CDAR (SETQ Z (CAR Z))) 1)) (ATOM (CAAR Z))
            (NOT (EQ (CAR (CAAR Z)) 'LOG)) (DEPEND-F (CDR Z) V)
            (DEPEND-F (CDR U) V))
        (PROGN (SETQ MLST (CONS U MLST)) (GO A))))
      (SETQ Y (CONS (REORDER (CDR Z)) (REORDER (CDR U))))
      (SETQ Z (SIMP* (CADR (CAAR Z))))
      (COND ((SETQ X (ASSOC Y LLST)) (RPLACD X (MULTSQ (CDR X) Z)))
            ((SETQ X (ASSOC (NEGSQ Y) LLST))
             (RPLACD X (MULTSQ (CDR X) (INVSQ Z))))
            (T (SETQ LLST (CONS (CONS Y Z) LLST))))
      (GO A))) 
(PUT 'PROD-SPLIT-EXP 'NUMBER-OF-ARGS 2) 
(PUT 'PROD-SPLIT-EXP 'DEFINED-ON-LINE '120) 
(PUT 'PROD-SPLIT-EXP 'DEFINED-IN-FILE 'SUM/COMPLX.RED) 
(PUT 'PROD-SPLIT-EXP 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE PROD-SPLIT-EXP (U V)
    (PROG (X Y Z W KLST LST)
      (SETQ LST (KERNELS (CAR U)))
      (SETQ LST (KERNELS1 (CDR U) LST))
     A
      (COND ((NULL LST) (GO B)))
      (SETQ Z (CAR LST))
      (COND
       ((AND (NOT (ATOM Z)) (EQ (CAR Z) 'EXPT) (NOT (DEPEND-P (CADR Z) V))
             (DEPEND-P (CADDR Z) V))
        (SETQ KLST (CONS Z KLST))))
      (SETQ LST (CDR LST))
      (GO A)
     B
      (COND ((NULL KLST) (RETURN (CONS NIL (LIST U)))))
      (SETQ X (SETKORDER KLST))
      (SETQ Z (REORDER (CAR U)))
      (SETQ Y (REORDER (CDR U)))
     C
      (COND
       ((OR (OR (ATOM Z) (ATOM (CAR Z))) (CDR Z)
            (NOT (MEMQ (SETQ W (CAAAR Z)) KLST)))
        (GO D)))
      (SETQ V (MULTSQ (CONS (CDAR (CAR Z)) 1) (SIMP* (CADDR W))))
      (SETQ W (CADR W))
      (COND ((SETQ U (ASSOC W LST)) (RPLACD U (ADDSQ (CDR U) V)))
            (T (SETQ LST (CONS (CONS W V) LST))))
      (SETQ Z (CDR (CAR Z)))
      (GO C)
     D
      (COND
       ((OR (OR (ATOM Y) (ATOM (CAR Y))) (CDR Y)
            (NOT (MEMQ (SETQ W (CAAAR Y)) KLST)))
        (GO E)))
      (SETQ V (MULTSQ (CONS (CDAR (CAR Y)) 1) (NEGSQ (SIMP* (CADDR W)))))
      (SETQ W (CADR W))
      (COND ((SETQ U (ASSOC W LST)) (RPLACD U (ADDSQ (CDR U) V)))
            (T (SETQ LST (CONS (CONS W V) LST))))
      (SETQ Y (CDR (CAR Y)))
      (GO D)
     E
      (SETKORDER X)
      (SETQ U (CONS (REORDER Z) (REORDER Y)))
      (RETURN (CONS LST (LIST U))))) 
(ENDMODULE) 