(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'LOGSORT)) 
(GLOBAL '(DOMAINLIST*)) 
(FLUID '(*DIV FACTORS* *COMBINELOGS *NONEGLOGS *EXPANDLOGS *UNCACHED)) 
(SWITCH (LIST 'COMBINELOGS 'EXPANDLOGS)) 
(PUT 'CLOGSQ* 'NUMBER-OF-ARGS 1) 
(PUT 'CLOGSQ* 'DEFINED-ON-LINE '39) 
(PUT 'CLOGSQ* 'DEFINED-IN-FILE 'ALG/LOGSORT.RED) 
(PUT 'CLOGSQ* 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE CLOGSQ* (X)
    (PROG (*DIV *COMBINELOGS *EXPANDLOGS)
      (SETQ *DIV (SETQ *EXPANDLOGS T))
      ((LAMBDA (*UNCACHED) (SETQ X (SIMP (PREPSQ X)))) T)
      (SETQ *EXPANDLOGS NIL)
      (RETURN (SIMP* (COMBLOG (PREPSQ* X)))))) 
(PUT 'LOGSORT 'NUMBER-OF-ARGS 1) 
(PUT 'LOGSORT 'DEFINED-ON-LINE '45) 
(PUT 'LOGSORT 'DEFINED-IN-FILE 'ALG/LOGSORT.RED) 
(PUT 'LOGSORT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE LOGSORT (X)
    (PROG (*DIV *COMBINELOGS *EXPANDLOGS *NONEGLOGS)
      (SETQ *DIV (SETQ *EXPANDLOGS (SETQ *NONEGLOGS T)))
      ((LAMBDA (*UNCACHED) (SETQ X (SIMP X))) T)
      (SETQ *EXPANDLOGS NIL)
      (RETURN (COMBLOG (PREPSQ* X))))) 
(PUT 'COMBLOG 'NUMBER-OF-ARGS 1) 
(PUT 'COMBLOG 'DEFINED-ON-LINE '55) 
(PUT 'COMBLOG 'DEFINED-IN-FILE 'ALG/LOGSORT.RED) 
(PUT 'COMBLOG 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE COMBLOG (X)
    (COND ((OR (ATOM X) (MEMQ (CAR X) DOMAINLIST*)) X)
          ((OR (EQ (CAR X) 'PLUS)
               (AND (EQ (CAR X) 'TIMES)
                    ((LAMBDA (Y)
                       (AND (NOT (OR (ATOM Y) (ATOM (CAR Y))))
                            (EQCAR (CAAAR Y) 'LOG)))
                     (CAR (SIMP* X)))))
           (PREPSQ* (CLOGSQ (SIMP* X))))
          (T (CONS (COMBLOG (CAR X)) (COMBLOG (CDR X)))))) 
(PUT 'CLOGSQ 'NUMBER-OF-ARGS 1) 
(PUT 'CLOGSQ 'DEFINED-ON-LINE '64) 
(PUT 'CLOGSQ 'DEFINED-IN-FILE 'ALG/LOGSORT.RED) 
(PUT 'CLOGSQ 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE CLOGSQ (X) (CONS (CLOGF (CAR X)) (CLOGF (CDR X)))) 
(PUT 'CLOGF 'NUMBER-OF-ARGS 1) 
(PUT 'CLOGF 'DEFINED-ON-LINE '66) 
(PUT 'CLOGF 'DEFINED-IN-FILE 'ALG/LOGSORT.RED) 
(PUT 'CLOGF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE CLOGF (U)
    (PROG (X Y)
      (SETQ X (KERNELS U))
      (PROG (J)
        (SETQ J X)
       LAB
        (COND ((NULL J) (RETURN NIL)))
        ((LAMBDA (J) (COND ((EQCAR J 'LOG) (SETQ Y (CONS J Y))))) (CAR J))
        (SETQ J (CDR J))
        (GO LAB))
      (COND ((NULL Y) (RETURN U)))
      (SETQ X (SETDIFF X Y))
      (SETQ X (SETKORDER (NCONC X Y)))
      (SETQ U (CLOGF1 (REORDER U)))
      (SETKORDER X)
      (RETURN (REORDER U)))) 
(PUT 'CLOGF1 'NUMBER-OF-ARGS 1) 
(PUT 'CLOGF1 'DEFINED-ON-LINE '78) 
(PUT 'CLOGF1 'DEFINED-IN-FILE 'ALG/LOGSORT.RED) 
(PUT 'CLOGF1 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE CLOGF1 (X)
    (COND ((OR (ATOM X) (ATOM (CAR X))) X) ((EQCAR (CAAAR X) 'LOG) (CLOGF2 X))
          (T
           (ADDF
            ((LAMBDA (G597)
               ((LAMBDA (G188)
                  (COND (*PHYSOP-LOADED (PHYSOP-MULTF G188 G597))
                        (T (POLY-MULTF G188 G597))))
                (LIST (CONS (CAAR X) 1))))
             (CLOGF1 (CDAR X)))
            (CLOGF1 (CDR X)))))) 
(PUT 'CLOGF2 'NUMBER-OF-ARGS 1) 
(PUT 'CLOGF2 'DEFINED-ON-LINE '86) 
(PUT 'CLOGF2 'DEFINED-IN-FILE 'ALG/LOGSORT.RED) 
(PUT 'CLOGF2 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE CLOGF2 (X)
    (PROG (Y Z R S G A B C D W XX K)
      (SETQ K 0)
      (SETQ XX X)
     ST
      (COND ((OR (ATOM X) (ATOM (CAR X))) (PROGN (SETQ W (ADDF W X)) (GO RET)))
            ((OR (NOT (EQCAR (CAAAR X) 'LOG)) (NEQ (CDAAR X) 1))
             (PROGN
              (SETQ W (ADDF W (LIST (CAR X))))
              (SETQ X (CDR X))
              (GO ST))))
      (SETQ Y (LIST (CAR X)))
      (COND
       ((NOT ((LAMBDA (U) (OR (ATOM U) (ATOM (CAR U)))) (SETQ Z (CDR X))))
        (GO LP)))
      (GO RET)
     LP
      (COND ((OR (ATOM Z) (ATOM (CAR Z))) (GO RET)))
      (SETQ R (LIST (CAR Z)))
      (SETQ Z (CDR Z))
      (COND ((AND (EQCAR (CAAAR R) 'LOG) (EQUAL (CDAAR R) 1)) (GO A2)))
     A1
      (SETQ S (ADDF R S))
      (GO LP)
     A2
      (SETQ B (COEFGCD (SETQ A (CDAR R)) 0))
      (SETQ A (QUOTF-FAIL A B))
      (SETQ D (COEFGCD (SETQ C (CDAR Y)) 0))
      (SETQ C (QUOTF-FAIL C D))
      (SETQ G (GCDF A C))
      (SETQ A (QUOTF-FAIL A G))
      (SETQ C (QUOTF-FAIL C G))
      (COND
       ((OR (NOT (OR (ATOM A) (ATOM (CAR A))))
            (NOT (OR (ATOM C) (ATOM (CAR C)))))
        (GO A1))
       ((AND (NUMBERP A) (NUMBERP C)) (GO A3))
       ((EQUAL ((LAMBDA (*EXP) (QUOTF1 A C)) T) (MINUS 1))
        (PROGN
         (SETQ G
                 (CONS
                  (COND (*PHYSOP-LOADED (PHYSOP-MULTF A B))
                        (T (POLY-MULTF A B)))
                  1))
         (SETQ K 1)
         (SETQ A (LIST 'QUOTIENT (CADR (CAAAR R)) (CADR (CAAAR Y))))
         (GO A4)))
       (T (GO A1)))
     A3
      (SETQ B (COND (*PHYSOP-LOADED (PHYSOP-MULTF A B)) (T (POLY-MULTF A B))))
      (SETQ D (COND (*PHYSOP-LOADED (PHYSOP-MULTF C D)) (T (POLY-MULTF C D))))
      (SETQ K (GCDF K (GCDF B D)))
      (SETQ B (QUOTF-FAIL B K))
      (SETQ D (QUOTF-FAIL D K))
      (COND
       ((AND *PRECISE
             (NOT (ONE_COMPLEXLIST (LIST (CADR (CAAAR R)) (CADR (CAAAR Y))))))
        (RETURN XX)))
      (SETQ A
              (LIST 'TIMES (LOGARG (CADR (CAAAR R)) B)
                    (LOGARG (CADR (CAAAR Y)) D)))
      (SETQ G (CONS G 1))
     A4
      (SETQ A (PREPSQ (SIMP* A)))
      (SETQ Y
              (CAR
               (SIMP*
                (LIST 'TIMES K
                      (COND
                       ((AND (EQCAR A 'QUOTIENT) (EQUAL (CADR A) 1))
                        (LIST 'MINUS (LIST 'LOG (CADDR A))))
                       (T (LIST 'LOG A)))
                      (PREPSQ G)))))
      (GO LP)
     RET
      (RETURN (ADDF W (ADDF Y (ADDF Z (CLOGF1 S))))))) 
(PUT 'LOGARG 'NUMBER-OF-ARGS 2) 
(PUT 'LOGARG 'DEFINED-ON-LINE '131) 
(PUT 'LOGARG 'DEFINED-IN-FILE 'ALG/LOGSORT.RED) 
(PUT 'LOGARG 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE LOGARG (A C) (COND ((EQUAL C 1) A) (T (LIST 'EXPT A C)))) 
(PUT 'COEFGCD 'NUMBER-OF-ARGS 2) 
(PUT 'COEFGCD 'DEFINED-ON-LINE '134) 
(PUT 'COEFGCD 'DEFINED-IN-FILE 'ALG/LOGSORT.RED) 
(PUT 'COEFGCD 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE COEFGCD (U G)
    (COND ((OR (ATOM U) (ATOM (CAR U))) (GCDF U G))
          (T (COEFGCD (CDAR U) (COEFGCD (CDR U) G))))) 
(ENDMODULE) 