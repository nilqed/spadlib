(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'SQFRNORM)) 
(FLUID '(*PVAR LISTOFALLSQRTS)) 
(GLOBAL '(MODEVALCOUNT)) 
(SETQ MODEVALCOUNT 1) 
(EXPORTS (LIST 'SQFR-NORM2 'RES-SQRT)) 
(PUT 'RES-SQRT 'NUMBER-OF-ARGS 2) 
(PUT 'RES-SQRT 'DEFINED-ON-LINE '181) 
(PUT 'RES-SQRT 'DEFINED-IN-FILE 'ALGINT/SQFRNORM.RED) 
(PUT 'RES-SQRT 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE RES-SQRT (U A)
    (PROG (X N V K L)
      (SETQ X (CAAAR U))
      (SETQ N (CDAAR U))
      (SETQ N (QUOTIENT N 2))
      (SETQ V (MKVECT N))
      (PUTV V 0 1)
      (PROG (I)
        (SETQ I 1)
       LAB
        (COND ((MINUSP (DIFFERENCE N I)) (RETURN NIL)))
        (PUTV V I (*MULTF A (GETV V (DIFFERENCE I 1))))
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (SETQ K (SETQ L NIL))
      (PROG ()
       WHILELABEL
        (COND ((NOT U) (RETURN NIL)))
        (COND ((NEQ (CAAAR U) X) (PROGN (SETQ L (ADDF L U)) (SETQ U NIL)))
              (T
               (PROGN
                (COND
                 ((EVENP (CDAAR U))
                  (SETQ L
                          (ADDF L
                                (*MULTF (CDAR U)
                                        (GETV V (QUOTIENT (CDAAR U) 2))))))
                 (T
                  (SETQ K
                          (ADDF K
                                (*MULTF (CDAR U)
                                        (GETV V
                                              (QUOTIENT
                                               (DIFFERENCE (CDAAR U) 1)
                                               2)))))))
                (SETQ U (CDR U)))))
        (GO WHILELABEL))
      (RETURN
       (ADDF (*MULTF L L)
             (*MULTF (NEGF A)
                     (COND (*PHYSOP-LOADED (PHYSOP-MULTF K K))
                           (T (POLY-MULTF K K)))))))) 
(PUT 'SQFR-NORM2 'NUMBER-OF-ARGS 3) 
(PUT 'SQFR-NORM2 'DEFINED-ON-LINE '209) 
(PUT 'SQFR-NORM2 'DEFINED-IN-FILE 'ALGINT/SQFRNORM.RED) 
(PUT 'SQFR-NORM2 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE SQFR-NORM2 (F MVARF A)
    (PROG (U W AA FF RESFN)
      (SETQ RESFN 'RESULTANT)
      (COND
       ((EQCAR A 'SQRT)
        (PROGN (SETQ RESFN 'RES-SQRT) (SETQ AA (*Q2F (SIMP (CADR A))))))
       (T (RERROR 'ALGINT 1 "Norms over transcendental extensions")))
      (SETQ F (PVARSUB F A '| GERBIL|))
      (SETQ W NIL)
      (COND ((INVOLVESF F '| GERBIL|) (GO L1)))
     INCREASE
      (SETQ W (ADDF W (LIST (CONS (GETPOWER (FKERN A) 1) 1))))
      (SETQ F
              (*Q2F
               (ALGINT-SUBF F
                (LIST
                 (CONS MVARF (LIST 'PLUS MVARF (LIST 'MINUS '| GERBIL|)))))))
     L1
      (SETQ U (APPLY2 RESFN (MAKEMAINVAR F '| GERBIL|) AA))
      (SETQ FF (NSQFRP U MVARF))
      (COND (FF (GO INCREASE)))
      (SETQ F (*Q2F (ALGINT-SUBF F (LIST (CONS '| GERBIL| A)))))
      (RETURN (LIST U W F)))) 
(PUT 'NSQFRP 'NUMBER-OF-ARGS 2) 
(PUT 'NSQFRP 'DEFINED-ON-LINE '235) 
(PUT 'NSQFRP 'DEFINED-IN-FILE 'ALGINT/SQFRNORM.RED) 
(PUT 'NSQFRP 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE NSQFRP (U V)
    (PROG (W)
      (SETQ W (MODEVAL U V))
      (COND ((EQ W 'FAILED) (GO NORMAL)))
      (COND ((ATOM W) (GO NORMAL)))
      (COND ((NEQ (LDEGVAR W V) (LDEGVAR U V)) (GO NORMAL)))
      (SETQ W (GCDF W (PARTIALDIFF W V)))
      (COND ((IEQUAL W 1) (RETURN NIL)))
     NORMAL
      (SETQ W (GCDF U (PARTIALDIFF U V)))
      (COND ((INVOLVESF W V) (RETURN W)) (T (RETURN NIL))))) 
(PUT 'LDEGVAR 'NUMBER-OF-ARGS 2) 
(PUT 'LDEGVAR 'DEFINED-ON-LINE '259) 
(PUT 'LDEGVAR 'DEFINED-IN-FILE 'ALGINT/SQFRNORM.RED) 
(PUT 'LDEGVAR 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE LDEGVAR (U V)
    (COND ((ATOM U) 0) ((EQ (CAAAR U) V) (CDAAR U)) ((ORDOP V (CAAAR U)) 0)
          (T (MAX2 (LDEGVAR (CDAR U) V) (LDEGVAR (CDR U) V))))) 
(PUT 'MODEVAL 'NUMBER-OF-ARGS 2) 
(PUT 'MODEVAL 'DEFINED-ON-LINE '269) 
(PUT 'MODEVAL 'DEFINED-IN-FILE 'ALGINT/SQFRNORM.RED) 
(PUT 'MODEVAL 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MODEVAL (U V)
    (COND ((ATOM U) U)
          ((EQ V (CAAAR U))
           (PROG (W X)
             (SETQ W (MODEVAL (CDAR U) V))
             (COND ((EQ W 'FAILED) (RETURN W)))
             (SETQ X (MODEVAL (CDR U) V))
             (COND ((EQ X 'FAILED) (RETURN X)))
             (COND ((NULL W) (RETURN X))
                   (T (RETURN (CONS (CONS (CAAR U) W) X))))))
          (T
           (PROG (W X)
             (SETQ X (CAAAR U))
             (COND ((NOT (ATOM X)) (COND ((DEPENDSP X V) (RETURN 'FAILED)))))
             (SETQ X (MODEVALVAR X))
             (COND ((EQ X 'FAILED) (RETURN X)))
             (SETQ W (MODEVAL (CDAR U) V))
             (COND ((EQ W 'FAILED) (RETURN W)))
             (COND
              (X
               (SETQ W
                       ((LAMBDA (G574)
                          (COND (*PHYSOP-LOADED (PHYSOP-MULTF W G574))
                                (T (POLY-MULTF W G574))))
                        (EXPTF X (CDAAR U))))))
             (SETQ X (MODEVAL (CDR U) V))
             (COND ((EQ X 'FAILED) (RETURN X)))
             (RETURN (ADDF W X)))))) 
(PUT 'MODEVALVAR 'NUMBER-OF-ARGS 1) 
(PUT 'MODEVALVAR 'DEFINED-ON-LINE '306) 
(PUT 'MODEVALVAR 'DEFINED-IN-FILE 'ALGINT/SQFRNORM.RED) 
(PUT 'MODEVALVAR 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MODEVALVAR (V)
    (PROG (W)
      (COND
       ((ATOM V)
        (PROGN
         (COND ((SETQ W (GET V 'MODVALUE)) (RETURN W)))
         (PUT V 'MODVALUE MODEVALCOUNT)
         (SETQ MODEVALCOUNT (PLUS MODEVALCOUNT 1))
         (RETURN (DIFFERENCE MODEVALCOUNT 1))))
       ((NEQ (CAR V) 'SQRT)
        (PROGN
         (COND (*TRA (PROGN (PRINC "Unexpected algebraic:") (PRINT V))))
         (ERROR1)))
       ((NUMBERP (CADR V))
        (RETURN (CONS (CONS (GETPOWER (FKERN V) 1) 1) NIL))))
      (SETQ W (MODEVAL (*Q2F (SIMP (CADR V))) *PVAR))
      (SETQ W (ASSOC W LISTOFALLSQRTS))
      (COND (W (RETURN (CDR W))) (T (RETURN 'FAILED))))) 
(ENDMODULE) 