(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'FRACDI)) 
(FLUID '(BASIC-LISTOFALLSQRTS BASIC-LISTOFNEWSQRTS EXPSUB INTVAR SQRT-INTVAR)) 
(GLOBAL '(COATES-FDI)) 
(EXPORTS
 (LIST 'FDI-PRINT 'FDI-REVERTSQ 'FDI-UPGRADE 'FRACTIONAL-DEGREE-AT-INFINITY)) 
(PUT 'FDI-PRINT 'NUMBER-OF-ARGS 0) 
(PUT 'FDI-PRINT 'DEFINED-ON-LINE '40) 
(PUT 'FDI-PRINT 'DEFINED-IN-FILE 'ALGINT/FRACDI.RED) 
(PUT 'FDI-PRINT 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE FDI-PRINT NIL
    (PROGN
     (PRINC "We substitute ")
     (PRINC INTVAR)
     (PRINC "**")
     (PRINC COATES-FDI)
     (PRINC " for ")
     (PRINC INTVAR)
     (PROGN
      (PRIN2 " in order to avoid fractional degrees at infinity")
      (TERPRI)
      " in order to avoid fractional degrees at infinity"))) 
(PUT 'FDI-REVERTSQ 'NUMBER-OF-ARGS 1) 
(PUT 'FDI-REVERTSQ 'DEFINED-ON-LINE '50) 
(PUT 'FDI-REVERTSQ 'DEFINED-IN-FILE 'ALGINT/FRACDI.RED) 
(PUT 'FDI-REVERTSQ 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FDI-REVERTSQ (U)
    (COND ((IEQUAL COATES-FDI 1) U)
          (T (CONS (FDI-REVERT (CAR U)) (FDI-REVERT (CDR U)))))) 
(PUT 'FDI-REVERT 'NUMBER-OF-ARGS 1) 
(PUT 'FDI-REVERT 'DEFINED-ON-LINE '56) 
(PUT 'FDI-REVERT 'DEFINED-IN-FILE 'ALGINT/FRACDI.RED) 
(PUT 'FDI-REVERT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FDI-REVERT (U)
    (COND ((NOT (INVOLVESF U INTVAR)) U)
          (T
           (ADDF (FDI-REVERT (CDR U))
                 (*MULTF (FDI-REVERTPOW (CAAR U)) (FDI-REVERT (CDAR U))))))) 
(PUT 'FDI-REVERTPOW 'NUMBER-OF-ARGS 1) 
(PUT 'FDI-REVERTPOW 'DEFINED-ON-LINE '64) 
(PUT 'FDI-REVERTPOW 'DEFINED-IN-FILE 'ALGINT/FRACDI.RED) 
(PUT 'FDI-REVERTPOW 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FDI-REVERTPOW (POW)
    (COND ((NOT (DEPENDSP (CAR POW) INTVAR)) (CONS (CONS POW 1) NIL))
          ((EQ (CAR POW) INTVAR)
           (PROG (V)
             (SETQ V (DIVIDE (CDR POW) COATES-FDI))
             (COND
              ((EQUAL (CDR POW) 0)
               (RETURN
                (CONS (CONS (GETPOWER (FKERN INTVAR) (CAR POW)) 1) NIL)))
              (T (INTERR "Unable to revert fdi")))))
          ((EQ (CAR POW) 'SQRT)
           (SIMPSQRT2 (FDI-REVERT (*Q2F (SIMP (CADR (CAR POW)))))))
          (T (INTERR "Unrecognised term to revert")))) 
(PUT 'FDI-UPGRADE 'NUMBER-OF-ARGS 1) 
(PUT 'FDI-UPGRADE 'DEFINED-ON-LINE '80) 
(PUT 'FDI-UPGRADE 'DEFINED-IN-FILE 'ALGINT/FRACDI.RED) 
(PUT 'FDI-UPGRADE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FDI-UPGRADE (PLACE)
    (PROG (ANS U EXPSUB N)
      (SETQ N COATES-FDI)
      (PROG (U)
        (SETQ U PLACE)
       LAB
        (COND ((NULL U) (RETURN NIL)))
        ((LAMBDA (U)
           (COND
            ((EQCAR (SETQ U (CDR U)) 'EXPT) (SETQ N (QUOTIENT N (CADDR U))))))
         (CAR U))
        (SETQ U (CDR U))
        (GO LAB))
      (COND ((EQUAL N 1) (RETURN PLACE)))
      (SETQ EXPSUB (LIST INTVAR 'EXPT INTVAR N))
      (SETQ ANS (NCONC (BASICPLACE PLACE) (LIST EXPSUB)))
      (SETQ EXPSUB (LIST EXPSUB))
      (SETQ U (EXTENPLACE PLACE))
      (PROG ()
       WHILELABEL
        (COND ((NOT U) (RETURN NIL)))
        (PROG (V W RFU)
          (SETQ V (FDI-UPGR2 (CAAR U)))
          (COND ((IEQUAL V 1) (RETURN (SETQ U (CDR U)))))
          (COND ((EQCAR (SETQ RFU (CDAR U)) 'MINUS) (SETQ W (CADR RFU)))
                ((EQCAR RFU 'SQRT) (SETQ W RFU))
                (T (INTERR "Unknown place format")))
          (SETQ W (FDI-UPGR2 W))
          (COND ((IEQUAL W 1) (INTERR "Place collapses under rewriting")))
          (COND
           ((EQCAR RFU 'MINUS) (SETQ ANS (NCONC ANS (LIST (LIST V 'MINUS W)))))
           (T (SETQ ANS (NCONC ANS (LIST (CONS V W))))))
          (SETQ U (CDR U))
          (RETURN NIL))
        (GO WHILELABEL))
      (SQRTSAVE BASIC-LISTOFALLSQRTS BASIC-LISTOFNEWSQRTS (BASICPLACE ANS))
      (RETURN ANS))) 
(PUT 'FDI-UPGR2 'NUMBER-OF-ARGS 1) 
(PUT 'FDI-UPGR2 'DEFINED-ON-LINE '120) 
(PUT 'FDI-UPGR2 'DEFINED-IN-FILE 'ALGINT/FRACDI.RED) 
(PUT 'FDI-UPGR2 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FDI-UPGR2 (U)
    (PROG (V MV)
      (SETQ V (XSUBSTITUTEP U EXPSUB))
      (COND ((NEQ (CDR V) 1) (GO ERROR)))
      (SETQ V (CAR V))
     LOOP
      (COND ((ATOM V) (RETURN V)))
      (COND ((CDR V) (GO ERROR)))
      (SETQ MV (CAAAR V))
      (COND
       ((OR (NOT (DEPENDSP MV INTVAR)) (EQ MV INTVAR))
        (PROGN (SETQ V (CDAR V)) (GO LOOP))))
      (COND
       ((AND (EQCAR MV 'SQRT) (NOT (SQRTSINSF (CDAR V) NIL INTVAR)))
        (RETURN MV)))
     ERROR
      (PROGN (PRIN2 "*** Format error ***") (TERPRI) "*** Format error ***")
      (PRINC "unable to go x:=x**")
      ((LAMBDA (X) (PROGN (PRIN2 X) (TERPRI) X)) COATES-FDI)
      (SUPERPRINT U)
      (INTERR "Failure to make integral at infinity"))) 
(PUT 'FRACTIONAL-DEGREE-AT-INFINITY 'NUMBER-OF-ARGS 1) 
(PUT 'FRACTIONAL-DEGREE-AT-INFINITY 'DEFINED-ON-LINE '153) 
(PUT 'FRACTIONAL-DEGREE-AT-INFINITY 'DEFINED-IN-FILE 'ALGINT/FRACDI.RED) 
(PUT 'FRACTIONAL-DEGREE-AT-INFINITY 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FRACTIONAL-DEGREE-AT-INFINITY (SQRTS)
    (COND
     (SQRTS
      (LCMN (FDI2 (CAR SQRTS)) (FRACTIONAL-DEGREE-AT-INFINITY (CDR SQRTS))))
     (T 1))) 
(PUT 'FDI2 'NUMBER-OF-ARGS 1) 
(PUT 'FDI2 'DEFINED-ON-LINE '159) 
(PUT 'FDI2 'DEFINED-IN-FILE 'ALGINT/FRACDI.RED) 
(PUT 'FDI2 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FDI2 (U)
    (PROG (N)
      (SETQ U (SUBSTITUTESQ (SIMP U) (LIST (LIST INTVAR 'QUOTIENT 1 INTVAR))))
      (SETQ N 0)
      (PROG ()
       WHILELABEL
        (COND ((NOT (INVOLVESQ U SQRT-INTVAR)) (RETURN NIL)))
        (PROGN
         (SETQ N (IADD1 N))
         (SETQ U (SUBSTITUTESQ U (LIST (LIST INTVAR 'EXPT INTVAR 2)))))
        (GO WHILELABEL))
      (RETURN (EXPT 2 N)))) 
(ENDMODULE) 