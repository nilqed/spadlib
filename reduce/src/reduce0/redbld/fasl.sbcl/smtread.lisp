(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'SMTREAD)) 
(REVISION 'SMTREAD "$Id: smtread.red 5986 2021-08-28 13:35:27Z thomas-sturm $") 
(COPYRIGHT 'SMTREAD "(c) 2014-2017 T. Sturm") 
(GLOBAL '($EOF$)) 
(GLOBAL '($EOL$)) 
(GLOBAL '(CRBUF*)) 
(GLOBAL '(CRBUF1*)) 
(GLOBAL '(CRCHAR*)) 
(FLUID '(CURLINE*)) 
(GLOBAL '(CURSYM*)) 
(GLOBAL '(EOF*)) 
(FLUID '(IFL*)) 
(GLOBAL '(NXTSYM*)) 
(GLOBAL '(OUTL*)) 
(GLOBAL '(TTYPE*)) 
(FLUID '(*QUOTENEWNAM)) 
(FLUID '(*RAISE)) 
(AEVAL (OPERATOR (LIST '_))) 
(PUT 'SMT_PRIN2X 'NUMBER-OF-ARGS 1) 
(PUT 'SMT_PRIN2X 'DEFINED-ON-LINE '66) 
(PUT 'SMT_PRIN2X 'DEFINED-IN-FILE 'REDLOG/SMT/SMTREAD.RED) 
(PUT 'SMT_PRIN2X 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SMT_PRIN2X (U) (SETQ OUTL* (CONS U OUTL*))) 
(PUT 'SMT_MKSTRNG 'NUMBER-OF-ARGS 1) 
(PUT 'SMT_MKSTRNG 'DEFINED-ON-LINE '69) 
(PUT 'SMT_MKSTRNG 'DEFINED-IN-FILE 'REDLOG/SMT/SMTREAD.RED) 
(PUT 'SMT_MKSTRNG 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SMT_MKSTRNG (U) U) 
(PUT 'SMT_READCH1 'NUMBER-OF-ARGS 0) 
(PUT 'SMT_READCH1 'DEFINED-ON-LINE '74) 
(PUT 'SMT_READCH1 'DEFINED-IN-FILE 'REDLOG/SMT/SMTREAD.RED) 
(PUT 'SMT_READCH1 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE SMT_READCH1 NIL
    (PROG (X)
      (COND
       ((NULL (TERMINALP))
        (PROGN
         (SETQ X (READCH))
         (AND (EQ X $EOL$) (SETQ CURLINE* (PLUS CURLINE* 1)))
         (RETURN X)))
       (CRBUF1* (PROGN (SETQ X (CAR CRBUF1*)) (SETQ CRBUF1* (CDR CRBUF1*))))
       (T (SETQ X (READCH))))
      (SETQ CRBUF* (CONS X CRBUF*))
      (RETURN X))) 
(PUT 'SMT_TOKEN1 'NUMBER-OF-ARGS 0) 
(PUT 'SMT_TOKEN1 'DEFINED-ON-LINE '89) 
(PUT 'SMT_TOKEN1 'DEFINED-IN-FILE 'REDLOG/SMT/SMTREAD.RED) 
(PUT 'SMT_TOKEN1 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE SMT_TOKEN1 NIL
    (PROG (X Y Z RAISE W N D G)
      (SETQ N 0)
      (SETQ D 0)
      (SETQ G 0)
      (SETQ X CRCHAR*)
     A
      (COND ((SEPRP X) (PROGN (SETQ X (SMT_READCH1)) (GO A)))
            ((DIGIT X) (RETURN (SMT_TOKEN-NUMBER X)))
            ((SMT_LITER X) (GO LETTER)) ((EQ X '|;|) (GO COMENT))
            ((EQ X '!) (GO ESCAPE))
            ((EQ X '|'|)
             (PROGN
              (SETQ CRCHAR* (SMT_READCH1))
              (SETQ NXTSYM* (MKQUOTE (SMT_RREAD)))
              (SETQ TTYPE* 4)
              (RETURN NXTSYM*)))
            ((EQ X '|"|) (GO STRING)))
      (SETQ TTYPE* 3)
      (COND ((EQ X $EOF$) (PROGN (SETQ CRCHAR* '| |) (SMT_FILENDERR))))
      (SETQ NXTSYM* X)
     A1
      (COND
       ((FLAGP X 'DELCHAR)
        (SETQ CRCHAR* '|
|))
       (T (SETQ CRCHAR* (SMT_READCH1))))
      (GO C)
     ESCAPE
      (SETQ RAISE *RAISE)
      (SETQ *RAISE NIL)
      (SETQ Y (CONS X Y))
      (SETQ X (SMT_READCH1))
      (SETQ *RAISE RAISE)
     LETTER
      (SETQ TTYPE* 0)
     LET1
      (SETQ Y (CONS X Y))
      (COND ((OR (DIGIT (SETQ X (SMT_READCH1))) (SMT_LITER X)) (GO LET1))
            ((EQ X '!) (GO ESCAPE)))
      (PROG (L)
        (SETQ L Y)
       LAB
        (COND ((NULL L) (RETURN NIL)))
        ((LAMBDA (L) (SETQ W (CONS '! (CONS L W)))) (CAR L))
        (SETQ L (CDR L))
        (GO LAB))
      (SETQ NXTSYM* (INTERN (COMPRESS W)))
     B
      (SETQ CRCHAR* X)
     C
      (RETURN NXTSYM*)
     NUMBER
      (SETQ TTYPE* 2)
     NUM1
      (SETQ Y (CONS X Y))
      (SETQ Z X)
      (SETQ X (SMT_READCH1))
      (COND ((OR (DIGIT X) (EQ X '|.|) (EQ X 'E) (EQ Z 'E)) (GO NUM1)))
      (SETQ Y (REVERSIP* Y))
      (SETQ W (MEMQ '|.| Y))
      (SETQ NXTSYM*
              (COND
               (W
                (PROGN
                 (SETQ D (EXPT 10 (LENGTH (CDR W))))
                 (SETQ N (COMPRESS (LTO_DELQIP '|.| Y)))
                 (SETQ G (GCDN N D))
                 (LIST '/ (QUOTIENT N G) (QUOTIENT D G))))
               (T (COMPRESS Y))))
      (GO B)
     STRING
      (SETQ RAISE *RAISE)
      (SETQ *RAISE NIL)
     STRINX
      (SETQ Y (CONS X Y))
      (SETQ X (SMT_READCH1))
      (COND ((NEQ X '|"|) (GO STRINX)))
      (SETQ Y (CONS X Y))
      (SETQ NXTSYM* (SMT_MKSTRNG (COMPRESS (REVERSIP* Y))))
      (SETQ *RAISE RAISE)
      (SETQ TTYPE* 1)
      (GO A1)
     COMENT
      (COND ((NEQ (SMT_READCH1) $EOL$) (GO COMENT)))
      (SETQ X (SMT_READCH1))
      (GO A))) 
(PUT 'SMT_TOKEN-NUMBER 'NUMBER-OF-ARGS 1) 
(PUT 'SMT_TOKEN-NUMBER 'DEFINED-ON-LINE '181) 
(PUT 'SMT_TOKEN-NUMBER 'DEFINED-IN-FILE 'REDLOG/SMT/SMTREAD.RED) 
(PUT 'SMT_TOKEN-NUMBER 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SMT_TOKEN-NUMBER (X)
    (PROG (DOTP POWER SIGN Y Z)
      (SETQ POWER 0)
      (SETQ TTYPE* 2)
     NUM1
      (COND ((OR Y (NULL (EQ X '|)|))) (SETQ Y (CONS X Y))))
      (COND (DOTP (SETQ POWER (DIFFERENCE POWER 1))))
     NUM2
      (COND
       ((EQ (SETQ X (READCH1)) '|.|)
        (COND (DOTP (RERROR 'SMTREAD 3 "Syntax error: improper number"))
              (T (PROGN (SETQ DOTP T) (GO NUM2)))))
       ((DIGIT X) (GO NUM1))
       ((AND (EQUAL Y '(|#|)) (OR (EQ X 'X) (EQ X '|x|))) (GO HEXNUM))
       ((EQ X '|\\|) (PROGN (READCH) (GO NUM2)))
       ((NULL (OR (EQ X 'E) (EQ X '|e|))) (GO RET)))
      (SETQ DOTP T)
      (COND ((EQ (SETQ X (READCH1)) '-) (SETQ SIGN T)) ((EQ X '+) NIL)
            ((NULL (DIGIT X)) (GO RET)) (T (SETQ Z (LIST X))))
     NUME1
      (COND ((NULL (DIGIT (SETQ X (READCH1)))) (GO NUME2)))
      (SETQ Z (CONS X Z))
      (GO NUME1)
     HEXNUM
      (SETQ Y 0)
     HEXNUM1
      (COND ((NOT (SETQ Z (GET (SETQ X (READCH1)) 'HEXDIGIT))) (GO RET1)))
      (SETQ Y (PLUS (TIMES 16 Y) Z))
      (GO HEXNUM1)
     NUME2
      (COND ((NULL Z) (RERROR 'SMTREAD 4 "Syntax error: improper number")))
      (SETQ Z (COMPRESS (REVERSIP* Z)))
      (COND (SIGN (SETQ POWER (DIFFERENCE POWER Z)))
            (T (SETQ POWER (PLUS POWER Z))))
     RET
      (SETQ Y (COMPRESS (REVERSIP* Y)))
     RET1
      (SETQ NXTSYM* (COND (DOTP (CONS '|:DN:| (CONS Y POWER))) (T Y)))
      (SETQ CRCHAR* X)
      (RETURN NXTSYM*))) 
(PUT 'SMT_LITER 'NUMBER-OF-ARGS 1) 
(PUT 'SMT_LITER 'DEFINED-ON-LINE '248) 
(PUT 'SMT_LITER 'DEFINED-IN-FILE 'REDLOG/SMT/SMTREAD.RED) 
(PUT 'SMT_LITER 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SMT_LITER (X)
    (OR (LITER X) (MEMQ X '(~ ! @ $ % ^ & * _ - + = < > |.| ? / |:|)))) 
(PUT 'SMT_TOKEN 'NUMBER-OF-ARGS 0) 
(PUT 'SMT_TOKEN 'DEFINED-ON-LINE '251) 
(PUT 'SMT_TOKEN 'DEFINED-IN-FILE 'REDLOG/SMT/SMTREAD.RED) 
(PUT 'SMT_TOKEN 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE SMT_TOKEN NIL (SMT_TOKEN1)) 
(PUT 'SMT_FILENDERR 'NUMBER-OF-ARGS 0) 
(PUT 'SMT_FILENDERR 'DEFINED-ON-LINE '255) 
(PUT 'SMT_FILENDERR 'DEFINED-IN-FILE 'REDLOG/SMT/SMTREAD.RED) 
(PUT 'SMT_FILENDERR 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE SMT_FILENDERR NIL
    (PROG (M)
      (SETQ EOF* (PLUS EOF* 1))
      (COND ((TERMINALP) (ERROR1))
            (T
             (PROGN
              (SETQ M
                      (COND (IFL* (LIST "End-of-file read in file" (CAR IFL*)))
                            (T "End-of-file read")))
              (ERROR 99 M)))))) 
(PUT 'SMT_PTOKEN 'NUMBER-OF-ARGS 0) 
(PUT 'SMT_PTOKEN 'DEFINED-ON-LINE '269) 
(PUT 'SMT_PTOKEN 'DEFINED-IN-FILE 'REDLOG/SMT/SMTREAD.RED) 
(PUT 'SMT_PTOKEN 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE SMT_PTOKEN NIL
    (PROG (X)
      (SETQ X (SMT_TOKEN))
      (COND ((AND (EQ X '|)|) (EQCAR OUTL* '| |)) (SETQ OUTL* (CDR OUTL*))))
      (SMT_PRIN2X X)
      (COND ((NOT (OR (EQ X '|(|) (EQ X '|)|))) (SMT_PRIN2X '| |)))
      (RETURN X))) 
(PUT 'SMT_RREAD1 'NUMBER-OF-ARGS 0) 
(PUT 'SMT_RREAD1 'DEFINED-ON-LINE '281) 
(PUT 'SMT_RREAD1 'DEFINED-IN-FILE 'REDLOG/SMT/SMTREAD.RED) 
(PUT 'SMT_RREAD1 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE SMT_RREAD1 NIL
    (PROG (X Y)
      (SETQ X (SMT_PTOKEN))
      (COND
       ((NOT (EQN TTYPE* 3))
        (RETURN
         (COND
          ((OR (NULL (IDP X)) (NULL *QUOTENEWNAM)
               (NULL (SETQ Y (GET X 'QUOTENEWNAM))))
           X)
          (T Y))))
       ((EQ X '|(|) (RETURN (SMT_RRDLS)))
       ((NULL (OR (EQ X '+) (EQ X '-))) (RETURN X)))
      (SETQ Y (SMT_PTOKEN))
      (COND
       ((NULL (NUMBERP Y))
        (PROGN
         (SETQ NXTSYM* " ")
         (SYMERR "Syntax error: improper number" NIL)))
       ((EQ X '-) (SETQ Y (APPLY 'MINUS (LIST Y)))))
      (RETURN Y))) 
(PUT 'SMT_RRDLS 'NUMBER-OF-ARGS 0) 
(PUT 'SMT_RRDLS 'DEFINED-ON-LINE '305) 
(PUT 'SMT_RRDLS 'DEFINED-IN-FILE 'REDLOG/SMT/SMTREAD.RED) 
(PUT 'SMT_RRDLS 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE SMT_RRDLS NIL
    (PROG (X Y Z)
     A
      (SETQ X (SMT_RREAD1))
      (COND ((NOT (EQN TTYPE* 3)) (GO B)) ((EQ X '|)|) (RETURN Z))
            ((NULL (EQ X '|.|)) (GO B)))
      (SETQ X (SMT_RREAD1))
      (SETQ Y (SMT_PTOKEN))
      (COND
       ((OR (NOT (EQN TTYPE* 3)) (NEQ Y '|)|))
        (PROGN (SETQ NXTSYM* " ") (SYMERR "Invalid S-expression" NIL)))
       (T (RETURN (NCONC Z X))))
     B
      (SETQ Z (NCONC Z (LIST X)))
      (GO A))) 
(PUT 'SMT_RREAD 'NUMBER-OF-ARGS 0) 
(PUT 'SMT_RREAD 'DEFINED-ON-LINE '327) 
(PUT 'SMT_RREAD 'DEFINED-IN-FILE 'REDLOG/SMT/SMTREAD.RED) 
(PUT 'SMT_RREAD 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE SMT_RREAD NIL (PROGN (SMT_PRIN2X " '") (SMT_RREAD1))) 
(PUT 'SMT_SCAN 'NUMBER-OF-ARGS 0) 
(PUT 'SMT_SCAN 'DEFINED-ON-LINE '333) 
(PUT 'SMT_SCAN 'DEFINED-IN-FILE 'REDLOG/SMT/SMTREAD.RED) 
(PUT 'SMT_SCAN 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE SMT_SCAN NIL
    (PROG (X Y)
      (COND ((NULL (EQ CURSYM* '*SEMICOL*)) (GO B)))
     A
      (SETQ NXTSYM* (SMT_TOKEN))
     B
      (COND ((NULL (ATOM NXTSYM*)) (GO Q1))
            ((OR (EQ NXTSYM* 'ELSE) (EQ CURSYM* '*SEMICOL*)) (SETQ OUTL* NIL)))
      (SMT_PRIN2X NXTSYM*)
     C
      (COND ((NULL (IDP NXTSYM*)) (GO L))
            ((AND (SETQ X (GET NXTSYM* 'NEWNAM)) (NEQ X NXTSYM*)) (GO NEW))
            ((AND (EQ NXTSYM* '|;|) (EQN TTYPE* 3)) (GO COMM))
            ((NULL (EQUAL TTYPE* 3)) (GO L))
            ((EQ NXTSYM* $EOF$) (RETURN (SMT_FILENDERR)))
            ((EQ NXTSYM* '|'|) (GO QUOTE))
            ((NOT (SETQ X (GET NXTSYM* 'SWITCH*))) (GO L))
            ((EQCAR (CDR X) '*SEMICOL*) (GO DELIM)))
     SW1
      (SETQ NXTSYM* (SMT_TOKEN))
      (COND ((NOT (EQN TTYPE* 3)) (GO SW2))
            ((EQ NXTSYM* $EOF$) (RETURN (SMT_FILENDERR))) ((CAR X) (GO SW3)))
     SW2
      (SETQ CURSYM* (CADR X))
      (COND ((EQ CURSYM* '*RPAR*) (GO L2)) (T (RETURN CURSYM*)))
     SW3
      (SETQ Y (ATSOC NXTSYM* (CAR X)))
      (COND ((NOT Y) (GO SW2)))
      (SMT_PRIN2X NXTSYM*)
      (SETQ X (CDR Y))
      (GO SW1)
     COMM
      (COND ((FLAGP CRCHAR* 'DELCHAR) (GO COM1)))
      (SETQ CRCHAR* (READCH))
      (GO COMM)
     COM1
      (SETQ CRCHAR* '| |)
      (CONDTERPRI)
      (GO A)
     DELIM
      (SETQ SEMIC* NXTSYM*)
      (RETURN (SETQ CURSYM* '*SEMICOL*))
     NEW
      (SETQ NXTSYM* X)
      (COND ((STRINGP X) (GO L)) ((ATOM X) (GO C)) (T (GO L)))
     QUOTE
      (SETQ NXTSYM* (MKQUOTE (SMT_RREAD1)))
      (GO L)
     Q1
      (COND ((NULL (EQ (CAR NXTSYM*) 'STRING)) (GO L)))
      (SMT_PRIN2X " ")
      (SMT_PRIN2X (CADR (SETQ NXTSYM* (MKQUOTE (CADR NXTSYM*)))))
     L
      (SETQ CURSYM* NXTSYM*)
     L1
      (SETQ NXTSYM* (SMT_TOKEN))
      (COND
       ((AND (EQ NXTSYM* $EOF$) (EQUAL TTYPE* 3)) (RETURN (SMT_FILENDERR))))
     L2
      (COND
       ((OR (NUMBERP NXTSYM*)
            (AND (ATOM NXTSYM*) (NULL (GET NXTSYM* 'SWITCH*))))
        (SMT_PRIN2X " ")))
      (RETURN CURSYM*))) 
(ENDMODULE) 