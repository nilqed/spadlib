(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'QSUM)) 
(AEVAL (NULL (SETQ *MODE 'ALGEBRAIC))) 
(SHARE (LIST '*QSUMRECURSION@SUB)) 
(SETQ *QSUMRECURSION@SUB
        (PROGN (SETQ ALGLIST* (CONS NIL NIL)) (LIST *REDEFMSG *ECHO *OUTPUT))) 
(SETQ *REDEFMSG NIL) 
(SWITCH (LIST (LIST 'EQUAL 'QSUM_NULLSPACE 'OFF))) 
(SWITCH (LIST (LIST 'EQUAL 'QSUM_TRACE 'OFF))) 
(SWITCH (LIST (LIST 'EQUAL 'QGOSPER_DOWN 'ON))) 
(SWITCH (LIST (LIST 'EQUAL 'QGOSPER_SPECIALSOL 'ON))) 
(SWITCH (LIST (LIST 'EQUAL 'QSUMRECURSION_DOWN 'ON))) 
(SWITCH (LIST (LIST 'EQUAL 'QSUMRECURSION_EXP 'OFF))) 
(SWITCH (LIST (LIST 'EQUAL 'QSUMRECURSION_CERTIFICATE 'OFF))) 
(SWITCH (LIST (LIST 'EQUAL 'QSUMRECURSION_PROFILE 'OFF))) 
(CLEAR (LIST 'SUMM)) 
(OPERATOR (LIST 'SUMM)) 
(SHARE (LIST 'QSUMRECURSION_RECRANGE*)) 
(SETQ QSUMRECURSION_RECRANGE*
        (PROGN (SETQ ALGLIST* (CONS NIL NIL)) (AEVAL (LIST 'LIST 1 5)))) 
(FORALL
 (LIST '(X N)
       '(AND (FIXP (REVALX (LIST 'QUOTIENT 'N 2)))
             (NOT (BOOLVALUE* (REVALX *COMPLEX))))
       '(LET00 '((EQUAL (EXPT (ABS X) N) (EXPT X N)))))) 
(FLUID '(*QSUM-SIMPEXPT)) 
(PUT 'POLYNOMQQ 'PSOPFN 'POLYNOMQQQ) 
(PUT 'POLYNOMQ4 'NUMBER-OF-ARGS 2) 
(FLAG '(POLYNOMQ4) 'OPFN) 
(PUT 'POLYNOMQ4 'DEFINED-ON-LINE '90) 
(PUT 'POLYNOMQ4 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'POLYNOMQ4 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE POLYNOMQ4 (EXPR1 K)
    (PROG (*EXP)
      (AEVAL (ON (LIST 'EXP)))
      (RETURN (AEVAL (LIST 'POLYNOMQQ EXPR1 K))))) 
(PUT 'TYPE_RATPOLY 'NUMBER-OF-ARGS 2) 
(FLAG '(TYPE_RATPOLY) 'OPFN) 
(PUT 'TYPE_RATPOLY 'DEFINED-ON-LINE '98) 
(PUT 'TYPE_RATPOLY 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'TYPE_RATPOLY 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE TYPE_RATPOLY (EXPR1 VAR)
    (PROG (DENO NUME)
      (SETQ DENO (AEVAL (LIST 'DEN EXPR1)))
      (SETQ NUME (AEVAL (LIST 'NUM EXPR1)))
      (COND
       ((AND (BOOLVALUE* (REVALX (LIST 'POLYNOMQQ DENO VAR)))
             (BOOLVALUE* (REVALX (LIST 'POLYNOMQQ NUME VAR))))
        (RETURN (AEVAL 'T)))
       (T (RETURN (AEVAL 'NIL)))))) 
(FLAG '(TYPE_RATPOLY) 'BOOLEAN) 
(PUT 'TTTYPE_RATPOLY 'NUMBER-OF-ARGS 2) 
(PUT 'TTTYPE_RATPOLY 'DEFINED-ON-LINE '110) 
(PUT 'TTTYPE_RATPOLY 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'TTTYPE_RATPOLY 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE TTTYPE_RATPOLY (U XX)
    ((LAMBDA (XX)
       (COND ((FIXP XX) T) ((NOT (EQCAR XX '*SQ)) NIL)
             (T
              (AND
               (POLYNOMQQQ
                (LIST (MK*SQ (CONS (CAR (CADR XX)) 1)) (REVAL1 (CADR U) T)))
               (POLYNOMQQQ
                (LIST (MK*SQ (CONS (CDR (CADR XX)) 1))
                      (REVAL1 (CADR U) T)))))))
     (REVAL1 (CAR U) NIL))) 
(FLAG '(TTTYPE_RATPOLY) 'BOOLEAN) 
(PUT 'POLYNOMQ 'NUMBER-OF-ARGS 2) 
(PUT 'POLYNOMQ 'DEFINED-ON-LINE '122) 
(PUT 'POLYNOMQ 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'POLYNOMQ 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE POLYNOMQ (X VAR)
    (COND ((NOT (FIXP (CDR (SIMP X)))) NIL)
          (T
           (PROG (KERNS KERN AA)
             (SETQ KERNS (KERNELS (*Q2F (SIMP X))))
            AA
             (COND ((NULL KERNS) (RETURN T)))
             (SETQ KERN (FIRST KERNS))
             (SETQ KERNS (CDR KERNS))
             (COND ((AND (NOT (EQ KERN VAR)) (DEPENDS KERN VAR)) (RETURN NIL))
                   (T (GO AA))))))) 
(FLAG '(POLYNOMQ) 'OPFN) 
(FLAG '(POLYNOMQ TYPE_RATPOLY) 'BOOLEAN) 
(PUT 'POLYNOMQQQ 'NUMBER-OF-ARGS 1) 
(PUT 'POLYNOMQQQ 'DEFINED-ON-LINE '140) 
(PUT 'POLYNOMQQQ 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'POLYNOMQQQ 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE POLYNOMQQQ (X)
    ((LAMBDA (XX)
       (COND ((FIXP XX) T) ((NOT (ONEP (CDR (SETQ XX (CADR XX))))) NIL)
             (T
              (PROG (KERNS KERN AA VAR FFORM MVV DEGG)
                (SETQ FFORM (SFP (CAAAR (CAR XX))))
                (SETQ VAR (REVAL1 (CADR X) T))
                (COND
                 (FFORM
                  (PROGN
                   (SETQ XX (CAR XX))
                   (PROG ()
                    WHILELABEL
                     (COND ((NOT (NEQ XX 1)) (RETURN NIL)))
                     (PROGN
                      (SETQ MVV (CAAAR XX))
                      (SETQ DEGG (CDAAR XX))
                      (SETQ XX (CDAR XX))
                      (COND
                       ((OR (ATOM MVV) (ATOM (CAR MVV)))
                        (PROGN
                         (COND
                          ((NOT (FREEOF MVV VAR))
                           (PROGN
                            (SETQ XX 1)
                            (SETQ KERNS (LIST (LIST 'SIN VAR))))))))
                       (T
                        (SETQ KERNS
                                (APPEND (APPEND (KERNELS MVV) (KERNELS DEGG))
                                        KERNS)))))
                     (GO WHILELABEL))))
                 (T (SETQ KERNS (KERNELS (*Q2F XX)))))
               AA
                (COND ((NULL KERNS) (RETURN T)))
                (SETQ KERN (FIRST KERNS))
                (SETQ KERNS (CDR KERNS))
                (COND
                 ((AND (NOT (EQ KERN VAR)) (DEPENDS KERN VAR)) (RETURN NIL))
                 (T (GO AA)))))))
     (REVAL1 (CAR X) NIL))) 
(PUT 'POLYNOMQQ 'PSOPFN 'POLYNOMQQQ) 
(PUT 'TTTTYPE_RATPOLY 'NUMBER-OF-ARGS 1) 
(PUT 'TTTTYPE_RATPOLY 'DEFINED-ON-LINE '166) 
(PUT 'TTTTYPE_RATPOLY 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'TTTTYPE_RATPOLY 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE TTTTYPE_RATPOLY (U)
    ((LAMBDA (XX)
       (COND ((FIXP XX) T) ((NOT (EQCAR XX '*SQ)) NIL)
             (T
              (AND
               (POLYNOMQQQ
                (LIST (MK*SQ (CONS (CAR (CADR XX)) 1)) (REVAL1 (CADR U) T)))
               (POLYNOMQQQ
                (LIST (MK*SQ (CONS (CDR (CADR XX)) 1))
                      (REVAL1 (CADR U) T)))))))
     (REVAL1 (CAR U) NIL))) 
(FLAG '(TYPE_RATPOLY) 'BOOLEAN) 
(PUT 'TYPE_RATPOLY 'PSOPFN 'TTTTYPE_RATPOLY) 
(FLUID '(PROFILE_TIME*)) 
(PUT 'START 'NUMBER-OF-ARGS 0) 
(PUT 'START 'DEFINED-ON-LINE '183) 
(PUT 'START 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'START 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE START NIL
    (PROG () (RETURN (SETQ PROFILE_TIME* (LIST 'LIST (TIME) (GCTIME)))))) 
(FLAG '(START) 'OPFN) 
(PUT 'STOP 'NUMBER-OF-ARGS 0) 
(PUT 'STOP 'DEFINED-ON-LINE '192) 
(PUT 'STOP 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'STOP 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE STOP NIL
    (PROG (GCT CPUT)
      (SETQ GCT (DIFFERENCE (GCTIME) (CADDR PROFILE_TIME*)))
      (SETQ CPUT (DIFFERENCE (DIFFERENCE (TIME) (CADR PROFILE_TIME*)) GCT))
      (RETURN (LIST 'LIST CPUT GCT)))) 
(FLAG '(STOP) 'OPFN) 
(PUT 'SHOWPROFILE 'NUMBER-OF-ARGS 0) 
(PUT 'SHOWPROFILE 'DEFINED-ON-LINE '204) 
(PUT 'SHOWPROFILE 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'SHOWPROFILE 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE SHOWPROFILE NIL
    (PROG (TIM)
      (PRIN2 "CPU: ")
      (SETQ TIM (DIFFERENCE (TIME) (CADR PROFILE_TIME*)))
      (PRIN2 TIM)
      (SETQ TIM (DIFFERENCE (GCTIME) (CADDR PROFILE_TIME*)))
      (COND ((EQUAL TIM 0) (RETURN (TERPRI))))
      (PRIN2 " ,  GC: ")
      (PRIN2 TIM)
      (TERPRI))) 
(FLAG '(SHOWPROFILE) 'OPFN) 
(OPERATOR (LIST 'TIMING-CPU+GC* 'TIMING-GC*)) 
(PUT 'TIMING 'NUMBER-OF-ARGS 1) 
(FLAG '(TIMING) 'OPFN) 
(PUT 'TIMING 'DEFINED-ON-LINE '223) 
(PUT 'TIMING 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'TIMING 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE TIMING (N)
    (PROG ()
      (COND
       ((EVALEQUAL (AEVAL N) (AEVAL 'START))
        (RETURN
         (PROGN
          (AEVAL (CLEAR (LIST 'TIMING-CPU+GC* 'TIMING-GC*)))
          (AEVAL (OPERATOR (LIST 'TIMING-CPU+GC* 'TIMING-GC*)))
          (AEVAL 'NIL)))))
      (COND
       ((EVALNUMBERP (AEVAL (LIST 'TIMING-CPU+GC* N)))
        (PROGN
         (SETK (LIST 'TIMING-GC* N)
               (AEVAL (LIST 'DIFFERENCE (GCTIME) (LIST 'TIMING-GC* N))))
         (SETK (LIST 'TIMING-CPU+GC* N)
               (AEVAL (LIST 'DIFFERENCE (TIME) (LIST 'TIMING-CPU+GC* N))))
         (AEVAL 'NIL)))
       (T
        (PROGN
         (SETK (LIST 'TIMING-GC* N) (AEVAL (GCTIME)))
         (SETK (LIST 'TIMING-CPU+GC* N) (AEVAL (TIME)))
         (AEVAL 'NIL))))
      (RETURN
       (AEVAL
        (LIST 'LIST
              (LIST 'DIFFERENCE (LIST 'TIMING-CPU+GC* N) (LIST 'TIMING-GC* N))
              (LIST 'TIMING-GC* N)))))) 
(PUT 'SHOWTIMING 'NUMBER-OF-ARGS 1) 
(FLAG '(SHOWTIMING) 'OPFN) 
(PUT 'SHOWTIMING 'DEFINED-ON-LINE '239) 
(PUT 'SHOWTIMING 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'SHOWTIMING 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SHOWTIMING (N)
    (LIST 'LIST
          (LIST 'DIFFERENCE (LIST 'TIMING-CPU+GC* N) (LIST 'TIMING-GC* N))
          (LIST 'TIMING-GC* N))) 
(PUT 'SHOWCPUTIMING 'NUMBER-OF-ARGS 1) 
(FLAG '(SHOWCPUTIMING) 'OPFN) 
(PUT 'SHOWCPUTIMING 'DEFINED-ON-LINE '244) 
(PUT 'SHOWCPUTIMING 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'SHOWCPUTIMING 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SHOWCPUTIMING (N)
    (LIST 'DIFFERENCE (LIST 'TIMING-CPU+GC* N) (LIST 'TIMING-GC* N))) 
(PUT 'SHOWGCTIMING 'NUMBER-OF-ARGS 1) 
(FLAG '(SHOWGCTIMING) 'OPFN) 
(PUT 'SHOWGCTIMING 'DEFINED-ON-LINE '249) 
(PUT 'SHOWGCTIMING 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'SHOWGCTIMING 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SHOWGCTIMING (N) (LIST 'TIMING-GC* N)) 
(PUT 'PRODUCT2LIST 'NUMBER-OF-ARGS 1) 
(PUT 'PRODUCT2LIST 'DEFINED-ON-LINE '255) 
(PUT 'PRODUCT2LIST 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'PRODUCT2LIST 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PRODUCT2LIST (TERM)
    (PROG (*FACTOR *EXP *LIMITEDFACTORS *MCD L Z)
      (ON (LIST 'FACTOR 'MCD))
      (OFF (LIST 'LIMITEDFACTORS))
      (SETQ TERM (SIMP (REVAL1 TERM NIL)))
      (SETQ Z (CAR TERM))
      (SETQ L (LIST))
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND (PAIRP Z) (EQ (CDR Z) NIL))) (RETURN NIL)))
        (PROG ()
          (SETQ L
                  (CONS
                   (MK*SQ
                    (CONS (CONS (CONS (CONS (CAAAR Z) (CDAAR Z)) 1) NIL) 1))
                   L))
          (SETQ Z (CDAR Z)))
        (GO WHILELABEL))
      (COND ((NOT (EQN Z 1)) (SETQ L (CONS (MK*SQ (CONS Z 1)) L))))
      (SETQ Z (CDR TERM))
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND (PAIRP Z) (EQ (CDR Z) NIL))) (RETURN NIL)))
        (PROG ()
          (SETQ L
                  (CONS
                   (MK*SQ
                    (CONS
                     (CONS (CONS (CONS (CAAAR Z) (MINUS (CDAAR Z))) 1) (CDR Z))
                     1))
                   L))
          (SETQ Z (CDAR Z)))
        (GO WHILELABEL))
      (COND ((NOT (EQN Z 1)) (SETQ L (CONS (MK*SQ (TIMES 1.0 Z)) L))))
      (RETURN (CONS 'LIST L)))) 
(FLAG '(PRODUCT2LIST) 'OPFN) 
(PUT 'SUM2LIST 'NUMBER-OF-ARGS 1) 
(PUT 'SUM2LIST 'DEFINED-ON-LINE '280) 
(PUT 'SUM2LIST 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'SUM2LIST 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SUM2LIST (Z)
    (PROG (*FACTOR *EXP *MCD *ALLFAC L DENOM)
      (ON (LIST 'EXP 'MCD))
      (OFF (LIST 'ALLFAC))
      (SETQ Z (SIMP (REVAL1 Z NIL)))
      (SETQ DENOM (CDR Z))
      (SETQ Z (CAR Z))
      (COND
       ((OR (ATOM Z) (NOT (NUMBERP DENOM)))
        (RETURN (CONS 'LIST (LIST (MK*SQ (CONS Z DENOM)))))))
      (SETQ L (LIST))
      (PROG ()
       REPEATLABEL
        (PROGN
         (SETQ L
                 (CONS
                  (MK*SQ
                   (CONS (CONS (CONS (CONS (CAAAR Z) (CDAAR Z)) (CDAR Z)) NIL)
                         DENOM))
                  L))
         (SETQ Z (CDR Z))
         NIL)
        (COND ((NOT (OR (ATOM Z) (NULL Z))) (GO REPEATLABEL))))
      (COND ((NOT (NULL Z)) (SETQ L (CONS (MK*SQ (CONS Z 1)) L))))
      (RETURN (CONS 'LIST L)))) 
(FLAG '(SUM2LIST) 'OPFN) 
(PUT 'LAURENTCOEFF 'NUMBER-OF-ARGS 2) 
(FLAG '(LAURENTCOEFF) 'OPFN) 
(PUT 'LAURENTCOEFF 'DEFINED-ON-LINE '304) 
(PUT 'LAURENTCOEFF 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'LAURENTCOEFF 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE LAURENTCOEFF (P X)
    (PROG (*EXP *FACTOR *MCD *DIV NP DP)
      (AEVAL (ON (LIST 'EXP 'MCD)))
      (AEVAL (OFF (LIST 'DIV)))
      (SETQ NP (AEVAL (LIST 'COEFF (LIST 'NUM P) X)))
      (SETQ DP (AEVAL (LIST 'SUB (LIST 'EQUAL X 1) (LIST 'DEN P))))
      (RETURN
       (PROG (J FORALL-RESULT FORALL-ENDPTR)
         (SETQ J (GETRLIST (AEVAL NP)))
         (COND ((NULL J) (RETURN (MAKELIST NIL))))
         (SETQ FORALL-RESULT
                 (SETQ FORALL-ENDPTR
                         (CONS
                          ((LAMBDA (J) (AEVAL (LIST 'QUOTIENT J DP))) (CAR J))
                          NIL)))
        LOOPLABEL
         (SETQ J (CDR J))
         (COND ((NULL J) (RETURN (CONS 'LIST FORALL-RESULT))))
         (RPLACD FORALL-ENDPTR
                 (CONS ((LAMBDA (J) (AEVAL (LIST 'QUOTIENT J DP))) (CAR J))
                       NIL))
         (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
         (GO LOOPLABEL))))) 
(PUT 'LAURENTCOEFFN 'NUMBER-OF-ARGS 3) 
(FLAG '(LAURENTCOEFFN) 'OPFN) 
(PUT 'LAURENTCOEFFN 'DEFINED-ON-LINE '315) 
(PUT 'LAURENTCOEFFN 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'LAURENTCOEFFN 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE LAURENTCOEFFN (P X N)
    (PROG (*EXP *FACTOR *MCD *RATIONAL DMODE* *DIV NP DP D)
      (AEVAL (ON (LIST 'EXP 'MCD)))
      (AEVAL (OFF (LIST 'RATIONAL)))
      (SETQ DP (AEVAL (LIST 'DEN P)))
      (SETQ D (AEVAL (LIST 'DEG DP X)))
      (SETQ NP
              (AEVAL
               (LIST 'QUOTIENT (LIST 'NUM P)
                     (LIST 'SUB (LIST 'EQUAL X 1) DP))))
      (SETQ N (AEVAL (LIST 'PLUS N D)))
      (COND ((EVALLESSP (AEVAL N) 0) (RETURN 0)))
      (RETURN (AEVAL (LIST 'COEFFN NP X N))))) 
(PUT 'LAURENTDEGREE 'NUMBER-OF-ARGS 2) 
(FLAG '(LAURENTDEGREE) 'OPFN) 
(PUT 'LAURENTDEGREE 'DEFINED-ON-LINE '329) 
(PUT 'LAURENTDEGREE 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'LAURENTDEGREE 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE LAURENTDEGREE (P X)
    (PROG (*EXP *FACTOR *MCD *DIV *RATIONAL DMODE*)
      (AEVAL (ON (LIST 'EXP 'MCD)))
      (AEVAL (OFF (LIST 'DIV 'RATIONAL)))
      (RETURN
       (AEVAL
        (LIST 'DIFFERENCE (LIST 'DEG (LIST 'NUM P) X)
              (LIST 'DEG (LIST 'DEN P) X)))))) 
(PUT 'LAURENTLDEGREE 'NUMBER-OF-ARGS 2) 
(FLAG '(LAURENTLDEGREE) 'OPFN) 
(PUT 'LAURENTLDEGREE 'DEFINED-ON-LINE '338) 
(PUT 'LAURENTLDEGREE 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'LAURENTLDEGREE 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE LAURENTLDEGREE (P X)
    (PROG (*EXP *FACTOR *MCD *DIV *RATIONAL DMODE*)
      (AEVAL (ON (LIST 'EXP 'MCD)))
      (AEVAL (OFF (LIST 'DIV 'RATIONAL)))
      (SETQ P (AEVAL (LIST 'SUB (LIST 'EQUAL X (LIST 'QUOTIENT 1 X)) P)))
      (RETURN
       (AEVAL
        (LIST 'DIFFERENCE (LIST 'DEG (LIST 'DEN P) X)
              (LIST 'DEG (LIST 'NUM P) X)))))) 
(PUT 'NULLSPACE_SIZE 'NUMBER-OF-ARGS 1) 
(PUT 'NULLSPACE_SIZE 'DEFINED-ON-LINE '350) 
(PUT 'NULLSPACE_SIZE 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'NULLSPACE_SIZE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE NULLSPACE_SIZE (X)
    (PROG ()
      (COND ((ATOM X) (RETURN 1))
            (T
             (RETURN
              (PLUS (NULLSPACE_SIZE (CAR X)) (NULLSPACE_SIZE (CDR X)))))))) 
(PUT 'NULLSPACE_EQUATIONS2SQMATRIX 'NUMBER-OF-ARGS 4) 
(PUT 'NULLSPACE_EQUATIONS2SQMATRIX 'DEFINED-ON-LINE '360) 
(PUT 'NULLSPACE_EQUATIONS2SQMATRIX 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'NULLSPACE_EQUATIONS2SQMATRIX 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE NULLSPACE_EQUATIONS2SQMATRIX (GLS VAR M N)
    (PROG (A GL)
      (TIMING 'NULLSPACE_EQUATIONS2SQMATRIX)
      (SETQ A (MKVECT M))
      (PROG (J)
        (SETQ J 0)
       LAB
        (COND ((MINUSP (DIFFERENCE M J)) (RETURN NIL)))
        (PUTV A J (MKVECT (PLUS N 1)))
        (SETQ J (PLUS2 J 1))
        (GO LAB))
      (PROG (ROW)
        (SETQ ROW 0)
       LAB
        (COND ((MINUSP (DIFFERENCE M ROW)) (RETURN NIL)))
        (PROG ()
          (SETQ GL (CAR GLS))
          (COND
           ((AND (PAIRP GL) (EQUAL (CAR GL) 'EQUAL))
            (SETQ GL (ADDSQ (SIMP (CADR GL)) (NEGSQ (SIMP (CADDR GL))))))
           (T (SETQ GL (SIMP GL))))
          (SETQ GLS (CDR GLS))
          (PROG (J)
            (SETQ J 0)
           LAB
            (COND ((MINUSP (DIFFERENCE N J)) (RETURN NIL)))
            (PROG ()
              (PUTV (GETV A ROW) J
                    (SIMP (COEFFN (REVAL1 (MK*SQ GL) NIL) (GETV VAR J) 1)))
              (SETQ GL (SUBSQ GL (LIST (CONS (GETV VAR J) 0)))))
            (SETQ J (PLUS2 J 1))
            (GO LAB))
          (PUTV (GETV A ROW) (PLUS N 1) GL))
        (SETQ ROW (PLUS2 ROW 1))
        (GO LAB))
      (TIMING 'NULLSPACE_EQUATIONS2SQMATRIX)
      (RETURN A))) 
(PUT 'NULLSPACESOLVE 'NUMBER-OF-ARGS 2) 
(PUT 'NULLSPACESOLVE 'DEFINED-ON-LINE '385) 
(PUT 'NULLSPACESOLVE 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'NULLSPACESOLVE 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE NULLSPACESOLVE (A VAR)
    (PROG (*FACTOR *EXP *GCD *MCD *LIMITEDFACTORS M N NR_PREF_VA VA)
      (TIMING 'NULLSPACESOLVE)
      (ON (LIST 'EXP 'MCD))
      (OFF (LIST 'GCD 'LIMITEDFACTORS))
      (COND ((AND (PAIRP A) (EQUAL (CAR A) 'LIST)) (SETQ A (CDR A)))
            (T (SETQ A (CONS A NIL))))
      (SETQ M (LENGTH A))
      (SETQ VA NIL)
      (PROG (J)
        (SETQ J 1)
       LAB
        (COND ((MINUSP (DIFFERENCE M J)) (RETURN NIL)))
        (PROG ()
          (SETQ N (CAR A))
          (SETQ A (CDR A))
          (COND ((NEQ N 0) (SETQ VA (CONS N VA)))))
        (SETQ J (PLUS2 J 1))
        (GO LAB))
      (SETQ A VA)
      (COND ((AND (PAIRP VAR) (EQUAL (CAR VAR) 'LIST)) (SETQ VAR (CDR VAR)))
            (T (SETQ VAR (CONS VAR NIL))))
      (SETQ M (DIFFERENCE (LENGTH A) 1))
      (SETQ N (DIFFERENCE (LENGTH VAR) 1))
      (SETQ NR_PREF_VA N)
      (SETQ VA (MKVECT N))
      (PROG (J)
        (SETQ J 0)
       LAB
        (COND ((MINUSP (DIFFERENCE N J)) (RETURN NIL)))
        (PROGN (PUTV VA J (CAR VAR)) (SETQ VAR (CDR VAR)))
        (SETQ J (PLUS2 J 1))
        (GO LAB))
      (SETQ A (NULLSPACE_EQUATIONS2SQMATRIX A VA M N))
      (ON (LIST 'FACTOR))
      (SETQ A A)
      (SETQ A (NULLSPACE_TRIANGULIZE A VA M (PLUS N 1) NR_PREF_VA))
      (SETQ VA (CADR A))
      (SETQ A (CAR A))
      (SETQ A (NULLSPACE_SORT A))
      (SETQ A (NULLSPACE_MATRIX2SOLUTION A VA))
      (TIMING 'NULLSPACESOLVE)
      (RETURN A))) 
(FLAG '(NULLSPACESOLVE) 'OPFN) 
(PUT 'NULLSPACE_SHOWMAT 'NUMBER-OF-ARGS 1) 
(PUT 'NULLSPACE_SHOWMAT 'DEFINED-ON-LINE '429) 
(PUT 'NULLSPACE_SHOWMAT 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'NULLSPACE_SHOWMAT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE NULLSPACE_SHOWMAT (A)
    (PROG (M N)
      (SETQ M (UPBV A))
      (SETQ N (UPBV (GETV A 1)))
      (PROG (J)
        (SETQ J 0)
       LAB
        (COND ((MINUSP (DIFFERENCE M J)) (RETURN NIL)))
        (PROG ()
          (PRIN2 "{")
          (PROG (I)
            (SETQ I 0)
           LAB
            (COND ((MINUSP (DIFFERENCE N I)) (RETURN NIL)))
            (PROG () (PRIN2 (PREPSQ (GETV (GETV A J) I))) (PRIN2 "  "))
            (SETQ I (PLUS2 I 1))
            (GO LAB))
          (PRIN2T "}"))
        (SETQ J (PLUS2 J 1))
        (GO LAB)))) 
(PUT 'NULLSPACE_TRIANGULIZE 'NUMBER-OF-ARGS 5) 
(PUT 'NULLSPACE_TRIANGULIZE 'DEFINED-ON-LINE '446) 
(PUT 'NULLSPACE_TRIANGULIZE 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'NULLSPACE_TRIANGULIZE 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE NULLSPACE_TRIANGULIZE (A VAR M N NR_PREF_VA)
    (PROG (TMP C NOT_CHANGED J PIVOT)
      (TIMING 'NULLSPACE_TRIANGULIZE)
      (SETQ C (MKVECT M))
      (PROG (J)
        (SETQ J 0)
       LAB
        (COND ((MINUSP (DIFFERENCE M J)) (RETURN NIL)))
        (PUTV C J (MINUS 1))
        (SETQ J (PLUS2 J 1))
        (GO LAB))
      (SETQ NOT_CHANGED
              (PROG (J FORALL-RESULT FORALL-ENDPTR)
                (SETQ J 0)
                (COND ((MINUSP (DIFFERENCE M J)) (RETURN NIL)))
                (SETQ FORALL-RESULT (SETQ FORALL-ENDPTR (CONS J NIL)))
               LOOPLABEL
                (SETQ J (PLUS2 J 1))
                (COND ((MINUSP (DIFFERENCE M J)) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR (CONS J NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (PROG (K)
        (SETQ K 0)
       LAB
        (COND ((MINUSP (DIFFERENCE M K)) (RETURN NIL)))
        (PROG ()
          (SETQ PIVOT
                  (NULLSPACE_TRIANGULIZE_PIVOT A NOT_CHANGED M (DIFFERENCE N 1)
                   K NR_PREF_VA))
          (COND
           ((NEQ PIVOT NIL)
            (PROG ()
              (SETQ J (CADR PIVOT))
              (NULLSPACE_TRIANGULIZE_EXCHANGE_COLUMNS A J K)
              (SETQ TMP (GETV VAR J))
              (PUTV VAR J (GETV VAR K))
              (PUTV VAR K TMP)
              (SETQ J (CAR PIVOT))
              (SETQ PIVOT (SIMP (MK*SQ (NEGSQ (GETV (GETV A J) K)))))
              (PROG (L)
                (SETQ L 0)
               LAB
                (COND ((MINUSP (DIFFERENCE N L)) (RETURN NIL)))
                (PUTV (GETV A J) L
                      (SIMP
                       (MK*SQ (MULTSQ (GETV (GETV A J) L) (INVSQ PIVOT)))))
                (SETQ L (PLUS2 L 1))
                (GO LAB))
              (PUTV C J K)
              (SETQ NOT_CHANGED (LIST))
              (PROG (L)
                (SETQ L 0)
               LAB
                (COND ((MINUSP (DIFFERENCE M L)) (RETURN NIL)))
                (COND
                 ((LESSP (GETV C L) 0)
                  (SETQ NOT_CHANGED (CONS L NOT_CHANGED))))
                (SETQ L (PLUS2 L 1))
                (GO LAB))
              (PROG (H)
                (SETQ H NOT_CHANGED)
               LAB
                (COND ((NULL H) (RETURN NIL)))
                ((LAMBDA (H)
                   (PROG ()
                     (SETQ PIVOT (GETV (GETV A H) K))
                     (PROG (L)
                       (SETQ L 0)
                      LAB
                       (COND
                        ((MINUSP (DIFFERENCE (DIFFERENCE K 1) L))
                         (RETURN NIL)))
                       (PROGN
                        (SETQ TMP
                                (SIMP
                                 (MK*SQ (MULTSQ PIVOT (GETV (GETV A J) L)))))
                        (SETQ TMP
                                (SIMP (MK*SQ (ADDSQ (GETV (GETV A H) L) TMP))))
                        (PUTV (GETV A H) L TMP)
                        NIL)
                       (SETQ L (PLUS2 L 1))
                       (GO LAB))
                     (PUTV (GETV A H) K (SIMP 0))
                     (PROG (L)
                       (SETQ L (PLUS K 1))
                      LAB
                       (COND ((MINUSP (DIFFERENCE N L)) (RETURN NIL)))
                       (PROGN
                        (SETQ TMP
                                (SIMP
                                 (MK*SQ (MULTSQ PIVOT (GETV (GETV A J) L)))))
                        (SETQ TMP
                                (SIMP (MK*SQ (ADDSQ (GETV (GETV A H) L) TMP))))
                        (PUTV (GETV A H) L TMP)
                        NIL)
                       (SETQ L (PLUS2 L 1))
                       (GO LAB))))
                 (CAR H))
                (SETQ H (CDR H))
                (GO LAB))))))
        (SETQ K (PLUS2 K 1))
        (GO LAB))
      (TIMING 'NULLSPACE_TRIANGULIZE)
      (RETURN (LIST A VAR)))) 
(PUT 'NULLSPACE_TRIANGULIZE_PIVOT 'NUMBER-OF-ARGS 6) 
(PUT 'NULLSPACE_TRIANGULIZE_PIVOT 'DEFINED-ON-LINE '500) 
(PUT 'NULLSPACE_TRIANGULIZE_PIVOT 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'NULLSPACE_TRIANGULIZE_PIVOT 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE NULLSPACE_TRIANGULIZE_PIVOT (A NOT_CHANGED M N K NR_PREF_VA)
    (PROG (*EXP *FACTOR *MCD *GCD ROW PIVOT PIVOTSIZE L1 L2 TMP)
      (TIMING 'NULLSPACE_TRIANGULIZE_PIVOT)
      (OFF (LIST 'FACTOR 'EXP 'MCD 'GCD))
      (SETQ PIVOT NIL)
      (SETQ PIVOTSIZE (LIST (EXPT 10 10) (EXPT 10 10)))
      (PROG (J)
        (SETQ J NOT_CHANGED)
       LAB
        (COND ((NULL J) (RETURN NIL)))
        ((LAMBDA (J)
           (PROG ()
             (PROG (H)
               (SETQ H K)
              LAB
               (COND ((MINUSP (DIFFERENCE NR_PREF_VA H)) (RETURN NIL)))
               (PROG ()
                 (SETQ ROW (GETV A J))
                 (SETQ TMP (GETV ROW H))
                 (COND
                  ((NEQ TMP (SIMP 0))
                   (PROG ()
                     (SETQ L1 (NULLSPACE_SIZE TMP))
                     (COND
                      ((LESSP L1 (PLUS (CAR PIVOTSIZE) 10))
                       (PROG ()
                         (SETQ L2
                                 (PROG (R FORALL-RESULT)
                                   (SETQ R K)
                                   (SETQ FORALL-RESULT 0)
                                  LAB1
                                   (COND
                                    ((MINUSP (DIFFERENCE N R))
                                     (RETURN FORALL-RESULT)))
                                   (SETQ FORALL-RESULT
                                           (PLUS
                                            (NULLSPACE_SIZE
                                             (MULTSQ (GETV ROW R) (INVSQ TMP)))
                                            FORALL-RESULT))
                                   (SETQ R (PLUS2 R 1))
                                   (GO LAB1)))
                         (COND
                          ((LESSP L2 (PLUS (CADR PIVOTSIZE) 100))
                           (PROG ()
                             (SETQ PIVOT (LIST J H))
                             (SETQ PIVOTSIZE (LIST L1 L2))))))))))))
               (SETQ H (PLUS2 H 1))
               (GO LAB))))
         (CAR J))
        (SETQ J (CDR J))
        (GO LAB))
      (TIMING 'NULLSPACE_TRIANGULIZE_PIVOT)
      (COND
       ((AND (LESSP NR_PREF_VA N) (EQUAL PIVOT NIL))
        (RETURN (NULLSPACE_TRIANGULIZE_PIVOT A NOT_CHANGED M N K N))))
      (RETURN PIVOT))) 
(PUT 'NULLSPACE_TRIANGULIZE_EXCHANGE_COLUMNS 'NUMBER-OF-ARGS 3) 
(PUT 'NULLSPACE_TRIANGULIZE_EXCHANGE_COLUMNS 'DEFINED-ON-LINE '533) 
(PUT 'NULLSPACE_TRIANGULIZE_EXCHANGE_COLUMNS 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'NULLSPACE_TRIANGULIZE_EXCHANGE_COLUMNS 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE NULLSPACE_TRIANGULIZE_EXCHANGE_COLUMNS (A J K)
    (PROG (LENGTH_A TMP)
      (COND ((EQUAL J K) (RETURN A)))
      (SETQ LENGTH_A (UPBV A))
      (PROG (L)
        (SETQ L 0)
       LAB
        (COND ((MINUSP (DIFFERENCE LENGTH_A L)) (RETURN NIL)))
        (PROG ()
          (SETQ TMP (GETV (GETV A L) J))
          (PUTV (GETV A L) J (GETV (GETV A L) K))
          (PUTV (GETV A L) K TMP))
        (SETQ L (PLUS2 L 1))
        (GO LAB))
      (RETURN A))) 
(PUT 'NULLSPACE_TRIANGULIZE_EXCHANGE_ROWS 'NUMBER-OF-ARGS 3) 
(PUT 'NULLSPACE_TRIANGULIZE_EXCHANGE_ROWS 'DEFINED-ON-LINE '548) 
(PUT 'NULLSPACE_TRIANGULIZE_EXCHANGE_ROWS 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'NULLSPACE_TRIANGULIZE_EXCHANGE_ROWS 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE NULLSPACE_TRIANGULIZE_EXCHANGE_ROWS (A J K)
    (PROG (TMP)
      (COND ((EQUAL J K) (RETURN A)))
      (SETQ TMP (GETV A J))
      (PUTV A J (GETV A K))
      (PUTV A K TMP))) 
(PUT 'NULLSPACE_SORT_COMP 'NUMBER-OF-ARGS 2) 
(PUT 'NULLSPACE_SORT_COMP 'DEFINED-ON-LINE '559) 
(PUT 'NULLSPACE_SORT_COMP 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'NULLSPACE_SORT_COMP 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE NULLSPACE_SORT_COMP (L1 L2)
    (PROG (Z1 Z2 LEN1 LEN2 ZEROE)
      (SETQ ZEROE (SIMP 0))
      (SETQ Z1 0)
      (SETQ LEN1 (UPBV L1))
      (PROG ()
       WHILELABEL
        (COND
         ((NOT (AND (LEQ Z1 LEN1) (EQUAL (GETV L1 Z1) ZEROE))) (RETURN NIL)))
        (SETQ Z1 (PLUS Z1 1))
        (GO WHILELABEL))
      (SETQ Z2 0)
      (SETQ LEN2 (UPBV L2))
      (PROG ()
       WHILELABEL
        (COND
         ((NOT (AND (LEQ Z2 LEN2) (EQUAL (GETV L2 Z2) ZEROE))) (RETURN NIL)))
        (SETQ Z2 (PLUS Z2 1))
        (GO WHILELABEL))
      (COND ((GREATERP Z1 Z2) (RETURN T)) (T (RETURN NIL))))) 
(PUT 'NULLSPACE_BUBBLESORT 'NUMBER-OF-ARGS 2) 
(PUT 'NULLSPACE_BUBBLESORT 'DEFINED-ON-LINE '575) 
(PUT 'NULLSPACE_BUBBLESORT 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'NULLSPACE_BUBBLESORT 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE NULLSPACE_BUBBLESORT (L FN)
    (PROG (LN TMP)
      (SETQ LN (UPBV L))
      (PROG (I)
        (SETQ I 0)
       LAB
        (COND ((MINUSP (DIFFERENCE LN I)) (RETURN NIL)))
        (PROG (J)
          (SETQ J (PLUS I 1))
         LAB
          (COND ((MINUSP (DIFFERENCE LN J)) (RETURN NIL)))
          (COND
           ((AND (NEQ I J) (APPLY2 FN (GETV L J) (GETV L I)))
            (PROG ()
              (SETQ TMP (GETV L I))
              (PUTV L I (GETV L J))
              (PUTV L J TMP))))
          (SETQ J (PLUS2 J 1))
          (GO LAB))
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (RETURN L))) 
(PUT 'NULLSPACE_SORT 'NUMBER-OF-ARGS 1) 
(PUT 'NULLSPACE_SORT 'DEFINED-ON-LINE '592) 
(PUT 'NULLSPACE_SORT 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'NULLSPACE_SORT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE NULLSPACE_SORT (A)
    (PROG (N ZEROELIST L SORTED_A)
      (TIMING 'NULLSPACE_SORT)
      (SETQ A (NULLSPACE_BUBBLESORT A 'NULLSPACE_SORT_COMP))
      (SETQ L (UPBV (GETV A 0)))
      (SETQ ZEROELIST (MKVECT L))
      (PROG (J)
        (SETQ J 0)
       LAB
        (COND ((MINUSP (DIFFERENCE L J)) (RETURN NIL)))
        (PUTV ZEROELIST J (SIMP 0))
        (SETQ J (PLUS2 J 1))
        (GO LAB))
      (SETQ N 0)
      (SETQ L (UPBV A))
      (PROG ()
       WHILELABEL
        (COND
         ((NOT (AND (LEQ N L) (EQUAL (GETV A N) ZEROELIST))) (RETURN NIL)))
        (SETQ N (PLUS N 1))
        (GO WHILELABEL))
      (SETQ SORTED_A (MKVECT (DIFFERENCE L N)))
      (PROG (J)
        (SETQ J N)
       LAB
        (COND ((MINUSP (DIFFERENCE L J)) (RETURN NIL)))
        (PUTV SORTED_A (DIFFERENCE J N) (GETV A J))
        (SETQ J (PLUS2 J 1))
        (GO LAB))
      (TIMING 'NULLSPACE_SORT)
      (RETURN SORTED_A))) 
(PUT 'NULLSPACE_MATRIX2SOLUTION 'NUMBER-OF-ARGS 2) 
(PUT 'NULLSPACE_MATRIX2SOLUTION 'DEFINED-ON-LINE '611) 
(PUT 'NULLSPACE_MATRIX2SOLUTION 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'NULLSPACE_MATRIX2SOLUTION 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE NULLSPACE_MATRIX2SOLUTION (A VAR)
    (PROG (M N SOLU TMP ROW)
      (TIMING 'NULLSPACE_MATRIX2SOLUTION)
      (SETQ M (UPBV A))
      (SETQ N (UPBV VAR))
      (SETQ SOLU
              (PROG (J FORALL-RESULT FORALL-ENDPTR)
                (SETQ J 0)
                (COND ((MINUSP (DIFFERENCE N J)) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR (CONS (GETV (GETV A 0) J) NIL)))
               LOOPLABEL
                (SETQ J (PLUS2 J 1))
                (COND ((MINUSP (DIFFERENCE N J)) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR (CONS (GETV (GETV A 0) J) NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (COND
       ((EQUAL SOLU
               (PROG (J FORALL-RESULT FORALL-ENDPTR)
                 (SETQ J 0)
                 (COND ((MINUSP (DIFFERENCE N J)) (RETURN NIL)))
                 (SETQ FORALL-RESULT (SETQ FORALL-ENDPTR (CONS (SIMP 0) NIL)))
                LOOPLABEL
                 (SETQ J (PLUS2 J 1))
                 (COND ((MINUSP (DIFFERENCE N J)) (RETURN FORALL-RESULT)))
                 (RPLACD FORALL-ENDPTR (CONS (SIMP 0) NIL))
                 (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                 (GO LOOPLABEL)))
        (RETURN (PROGN (TIMING 'NULLSPACE_MATRIX2SOLUTION) (CONS 'LIST NIL)))))
      (SETQ SOLU (MKVECT (PLUS N 1)))
      (PROG (J)
        (SETQ J 0)
       LAB
        (COND ((MINUSP (DIFFERENCE N J)) (RETURN NIL)))
        (PUTV SOLU J (SIMP (GETV VAR J)))
        (SETQ J (PLUS2 J 1))
        (GO LAB))
      (PUTV SOLU (PLUS N 1) (SIMP 1))
      (PROG (J)
        (SETQ J M)
       LAB
        (COND ((MINUSP (TIMES (MINUS 1) (DIFFERENCE 0 J))) (RETURN NIL)))
        (PROG ()
          (SETQ TMP (SIMP 0))
          (SETQ ROW (GETV A (DIFFERENCE M J)))
          (PROG (H)
            (SETQ H (PLUS J 1))
           LAB
            (COND ((MINUSP (DIFFERENCE (PLUS N 1) H)) (RETURN NIL)))
            (SETQ TMP (ADDSQ TMP (MULTSQ (NEGSQ (GETV ROW H)) (GETV SOLU H))))
            (SETQ H (PLUS2 H 1))
            (GO LAB))
          (PUTV SOLU J (MULTSQ TMP (INVSQ (GETV ROW J)))))
        (SETQ J (PLUS2 J (MINUS 1)))
        (GO LAB))
      (SETQ SOLU
              (PROG (J FORALL-RESULT FORALL-ENDPTR)
                (SETQ J 0)
                (COND ((MINUSP (DIFFERENCE N J)) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS
                                 (LIST 'EQUAL (GETV VAR J)
                                       (MK*SQ (GETV SOLU J)))
                                 NIL)))
               LOOPLABEL
                (SETQ J (PLUS2 J 1))
                (COND ((MINUSP (DIFFERENCE N J)) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        (CONS (LIST 'EQUAL (GETV VAR J) (MK*SQ (GETV SOLU J)))
                              NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (TIMING 'NULLSPACE_MATRIX2SOLUTION)
      (RETURN (CONS 'LIST SOLU)))) 
(PUT 'NULLSPACE_PROFILE 'NUMBER-OF-ARGS 0) 
(FLAG '(NULLSPACE_PROFILE) 'OPFN) 
(PUT 'NULLSPACE_PROFILE 'DEFINED-ON-LINE '644) 
(PUT 'NULLSPACE_PROFILE 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'NULLSPACE_PROFILE 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE NULLSPACE_PROFILE NIL
    (PROG ()
      (PROGN
       (ASSGNPRI (AEVAL "nullspace_coefflist:        ") NIL 'FIRST)
       (ASSGNPRI (AEVAL (LIST 'SHOWCPUTIMING 'NULLSPACE_EQUATIONS2SQMATRIX))
                 NIL 'LAST))
      (PROGN
       (ASSGNPRI (AEVAL "nullspace_triangulize:      ") NIL 'FIRST)
       (ASSGNPRI (AEVAL (LIST 'SHOWCPUTIMING 'NULLSPACE_TRIANGULIZE)) NIL
                 'LAST))
      (PROGN
       (ASSGNPRI (AEVAL "nullspace_triangulize_pivot:") NIL 'FIRST)
       (ASSGNPRI (AEVAL (LIST 'SHOWCPUTIMING 'NULLSPACE_TRIANGULIZE_PIVOT)) NIL
                 'LAST))
      (PROGN
       (ASSGNPRI (AEVAL "nullspace_sort:             ") NIL 'FIRST)
       (ASSGNPRI (AEVAL (LIST 'SHOWCPUTIMING 'NULLSPACE_SORT)) NIL 'LAST))
      (PROGN
       (ASSGNPRI (AEVAL "nullspace_matrix2solution:  ") NIL 'FIRST)
       (ASSGNPRI (AEVAL (LIST 'SHOWCPUTIMING 'NULLSPACE_MATRIX2SOLUTION)) NIL
                 'LAST))
      (PROGN
       (ASSGNPRI (AEVAL "nullspace:                  ") NIL 'FIRST)
       (ASSGNPRI (AEVAL (LIST 'SHOWCPUTIMING 'NULLSPACESOLVE)) NIL NIL)
       (ASSGNPRI (AEVAL "   (") NIL NIL)
       (ASSGNPRI (AEVAL (LIST 'SHOWGCTIMING 'NULLSPACESOLVE)) NIL NIL)
       (ASSGNPRI (AEVAL ")") NIL 'LAST)))) 
(PUT 'TRACE_QSUM 'NUMBER-OF-ARGS 2) 
(FLAG '(TRACE_QSUM) 'OPFN) 
(PUT 'TRACE_QSUM 'DEFINED-ON-LINE '663) 
(PUT 'TRACE_QSUM 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'TRACE_QSUM 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE TRACE_QSUM (TEXT TERM)
    (PROG ()
      (COND
       ((BOOLVALUE* (REVALX *QSUM_TRACE))
        (PROGN
         (ASSGNPRI (AEVAL TEXT) NIL 'FIRST)
         (ASSGNPRI (AEVAL "    ") NIL NIL)
         (ASSGNPRI (AEVAL (LIST 'SUB *QSUMRECURSION@SUB TERM)) NIL 'LAST)))))) 
(PUT 'QSUMRECURSION_NUMBER 'NUMBER-OF-ARGS 2) 
(PUT 'QSUMRECURSION_NUMBER 'DEFINED-ON-LINE '672) 
(PUT 'QSUMRECURSION_NUMBER 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'QSUMRECURSION_NUMBER 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE QSUMRECURSION_NUMBER (N D)
    (PROG (L B)
      (SETQ L (EXPLODE (REVAL1 N T)))
      (SETQ B (DIFFERENCE D (LENGTH L)))
      (COND
       ((GREATERP B 0)
        (PROG (J)
          (SETQ J 1)
         LAB
          (COND ((MINUSP (DIFFERENCE B J)) (RETURN NIL)))
          (PRIN2 " ")
          (SETQ J (PLUS2 J 1))
          (GO LAB))))
      (PROG (J)
        (SETQ J L)
       LAB
        (COND ((NULL J) (RETURN NIL)))
        ((LAMBDA (J) (PRIN1 (COMPRESS (LIST J)))) (CAR J))
        (SETQ J (CDR J))
        (GO LAB)))) 
(PUT 'QSUMRECURSION_QPROFILE 'NUMBER-OF-ARGS 0) 
(PUT 'QSUMRECURSION_QPROFILE 'DEFINED-ON-LINE '683) 
(PUT 'QSUMRECURSION_QPROFILE 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'QSUMRECURSION_QPROFILE 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE QSUMRECURSION_QPROFILE NIL
    (PROG (QRAT QUPD QDIS QFIN QSOL QDEG QSUM QSGC MAXT LMAX)
      (SETQ QRAT (REVAL1 (SHOWCPUTIMING 'QRATIOS) T))
      (SETQ QUPD (REVAL1 (SHOWCPUTIMING 'QUPDATE) T))
      (SETQ QDIS (REVAL1 (SHOWCPUTIMING 'QDISPERSIONSET) T))
      (SETQ QFIN (REVAL1 (SHOWCPUTIMING 'QFINDF) T))
      (SETQ QSOL (REVAL1 (SHOWCPUTIMING 'SOLVE) T))
      (SETQ QDEG (REVAL1 (SHOWCPUTIMING 'QDEGREEBOUND) T))
      (SETQ QSUM (REVAL1 (SHOWCPUTIMING 'QSUMRECURSION) T))
      (SETQ QSGC (REVAL1 (SHOWGCTIMING 'QSUMRECURSION) T))
      (SETQ MAXT (LENGTH (EXPLODE (MAX QRAT QUPD QDIS QSOL QDEG QSUM))))
      (SETQ LMAX (LENGTH (EXPLODE (MAX QDIS QSOL QSGC))))
      (PRIN2T " ")
      (PRIN2 " qratios:        ")
      (QSUMRECURSION_NUMBER QRAT MAXT)
      (PRIN2T "")
      (PRIN2 " qupdate:        ")
      (QSUMRECURSION_NUMBER QUPD MAXT)
      (PRIN2 "     (")
      (QSUMRECURSION_NUMBER QDIS LMAX)
      (PRIN2T " qdispersionset)")
      (PRIN2 " qfindf:         ")
      (QSUMRECURSION_NUMBER QFIN MAXT)
      (PRIN2 "     (")
      (QSUMRECURSION_NUMBER QSOL LMAX)
      (PRIN2 " solve,  ")
      (PRIN2 QDEG)
      (PRIN2T " qdegreebound)")
      (PRIN2 " qsumrecursion:  ")
      (QSUMRECURSION_NUMBER QSUM MAXT)
      (PRIN2 "     (")
      (QSUMRECURSION_NUMBER QSGC LMAX)
      (PRIN2T " gc-time)"))) 
(FLAG '(QSUMRECURSION_QPROFILE) 'OPFN) 
(CLEAR (LIST 'BINOMIAL 'QPOCHHAMMER 'QFAC 'QBINOMIAL 'QBRACKETS 'QFACTORIAL)) 
(OPERATOR (LIST 'BINOMIAL 'QPOCHHAMMER 'QFAC 'QBINOMIAL 'QBRACKETS 'QFACTORIAL)) 
(PUT 'QPSIHYPERTERM 'NUMBER-OF-ARGS 5) 
(FLAG '(QPSIHYPERTERM) 'OPFN) 
(PUT 'QPSIHYPERTERM 'DEFINED-ON-LINE '729) 
(PUT 'QPSIHYPERTERM 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'QPSIHYPERTERM 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE QPSIHYPERTERM (NU DE Q Z N)
    (PROG (R S)
      (SETQ R (AEVAL (LIST 'LENGTH NU)))
      (SETQ S (AEVAL (LIST 'LENGTH DE)))
      (SETQ NU
              (PROG (J FORALL-RESULT)
                (SETQ J (GETRLIST (AEVAL NU)))
                (SETQ FORALL-RESULT 1)
               LAB1
                (COND ((NULL J) (RETURN FORALL-RESULT)))
                (SETQ FORALL-RESULT
                        (AEVAL*
                         (LIST 'TIMES
                               ((LAMBDA (J) (AEVAL (LIST 'QPOCHHAMMER J Q N)))
                                (CAR J))
                               FORALL-RESULT)))
                (SETQ J (CDR J))
                (GO LAB1)))
      (SETQ DE
              (PROG (J FORALL-RESULT)
                (SETQ J (GETRLIST (AEVAL DE)))
                (SETQ FORALL-RESULT 1)
               LAB1
                (COND ((NULL J) (RETURN FORALL-RESULT)))
                (SETQ FORALL-RESULT
                        (AEVAL*
                         (LIST 'TIMES
                               ((LAMBDA (J) (AEVAL (LIST 'QPOCHHAMMER J Q N)))
                                (CAR J))
                               FORALL-RESULT)))
                (SETQ J (CDR J))
                (GO LAB1)))
      (SETQ NU
              (AEVAL
               (LIST 'TIMES NU
                     (LIST 'EXPT (MINUS 1)
                           (LIST 'TIMES (LIST 'DIFFERENCE S R) N))
                     (LIST 'EXPT Q
                           (LIST 'TIMES (LIST 'DIFFERENCE S R) N
                                 (LIST 'QUOTIENT (LIST 'DIFFERENCE N 1) 2)))
                     (LIST 'EXPT Z N))))
      (RETURN (AEVAL (LIST 'QUOTIENT NU DE))))) 
(PUT 'QPHIHYPERTERM 'NUMBER-OF-ARGS 5) 
(FLAG '(QPHIHYPERTERM) 'OPFN) 
(PUT 'QPHIHYPERTERM 'DEFINED-ON-LINE '742) 
(PUT 'QPHIHYPERTERM 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'QPHIHYPERTERM 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE QPHIHYPERTERM (NU DE Q Z N)
    (PROG (R S)
      (SETQ R (AEVAL (LIST 'LENGTH NU)))
      (SETQ S (AEVAL (LIST 'LENGTH DE)))
      (SETQ NU
              (PROG (J FORALL-RESULT)
                (SETQ J (GETRLIST (AEVAL NU)))
                (SETQ FORALL-RESULT 1)
               LAB1
                (COND ((NULL J) (RETURN FORALL-RESULT)))
                (SETQ FORALL-RESULT
                        (AEVAL*
                         (LIST 'TIMES
                               ((LAMBDA (J) (AEVAL (LIST 'QPOCHHAMMER J Q N)))
                                (CAR J))
                               FORALL-RESULT)))
                (SETQ J (CDR J))
                (GO LAB1)))
      (SETQ DE
              (PROG (J FORALL-RESULT)
                (SETQ J (GETRLIST (AEVAL DE)))
                (SETQ FORALL-RESULT 1)
               LAB1
                (COND ((NULL J) (RETURN FORALL-RESULT)))
                (SETQ FORALL-RESULT
                        (AEVAL*
                         (LIST 'TIMES
                               ((LAMBDA (J) (AEVAL (LIST 'QPOCHHAMMER J Q N)))
                                (CAR J))
                               FORALL-RESULT)))
                (SETQ J (CDR J))
                (GO LAB1)))
      (SETQ NU
              (AEVAL
               (LIST 'TIMES NU (LIST 'EXPT Z N)
                     (LIST 'EXPT
                           (LIST 'TIMES (LIST 'EXPT (MINUS 1) N)
                                 (LIST 'EXPT Q
                                       (LIST 'TIMES N
                                             (LIST 'QUOTIENT
                                                   (LIST 'DIFFERENCE N 1) 2))))
                           (LIST 'PLUS 1 (LIST 'DIFFERENCE S R))))))
      (RETURN
       (AEVAL (LIST 'QUOTIENT NU (LIST 'TIMES DE (LIST 'QPOCHHAMMER Q Q N))))))) 
(PUT 'QSIMPCOMB_STANDARD_INTEGER_PART_SF 'NUMBER-OF-ARGS 1) 
(PUT 'QSIMPCOMB_STANDARD_INTEGER_PART_SF 'DEFINED-ON-LINE '757) 
(PUT 'QSIMPCOMB_STANDARD_INTEGER_PART_SF 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'QSIMPCOMB_STANDARD_INTEGER_PART_SF 'PROCEDURE_TYPE
     '(ARROW GENERAL GENERAL)) 
(DE QSIMPCOMB_STANDARD_INTEGER_PART_SF (F)
    (PROG (L TMP Z)
      (SETQ L NIL)
      (PROG ()
       WHILELABEL
        (COND ((NOT (PAIRP F)) (RETURN NIL)))
        (PROGN
         (SETQ TMP (QSIMPCOMB_STANDARD_INTEGER_PART_SF (CDAR F)))
         (SETQ Z (CONS (CAAAR F) (CDAAR F)))
         (PROG ()
          REPEATLABEL
           (PROGN
            (SETQ L (CONS (CONS (CONS Z (CAR TMP)) NIL) L))
            (SETQ TMP (CDR TMP))
            NIL)
           (COND ((NOT (NULL TMP)) (GO REPEATLABEL))))
         (SETQ F (CDR F))
         NIL)
        (GO WHILELABEL))
      (COND ((NOT (NULL F)) (SETQ L (CONS F L))))
      (RETURN L))) 
(PUT 'QSIMPCOMB_STANDARD_INTEGER_PART 'NUMBER-OF-ARGS 1) 
(PUT 'QSIMPCOMB_STANDARD_INTEGER_PART 'DEFINED-ON-LINE '776) 
(PUT 'QSIMPCOMB_STANDARD_INTEGER_PART 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'QSIMPCOMB_STANDARD_INTEGER_PART 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE QSIMPCOMB_STANDARD_INTEGER_PART (Z)
    (PROG (*BALANCED_MOD *EXP *FACTOR *RATIONAL *DMODE N D TMP)
      (ON (LIST 'EXP))
      (OFF (LIST 'BALANCED_MOD 'RATIONAL))
      (SETQ Z (SIMP (REVAL1 (MK*SQ Z) NIL)))
      (SETQ N (CAR Z))
      (SETQ D (CDR Z))
      (SETQ N (QSIMPCOMB_STANDARD_INTEGER_PART_SF N))
      (COND ((NULL N) (RETURN 0)))
      (SETQ Z (SIMP 0))
      (PROG ()
       REPEATLABEL
        (PROGN
         (SETQ TMP (SIMP (MK*SQ (CONS (CAR N) D))))
         (COND
          ((AND (FIXP (CAR TMP)) (FIXP (CDR TMP))) (SETQ Z (ADDSQ Z TMP))))
         (SETQ N (CDR N))
         NIL)
        (COND ((NOT (NULL N)) (GO REPEATLABEL))))
      (COND
       ((EQN (CDR Z) 1)
        (COND ((NULL (CAR Z)) (RETURN 0)) (T (RETURN (CAR Z))))))
      (SETQ N (CAR Z))
      (SETQ D (CDR Z))
      (SETQ Z (CAR (QREMF N D)))
      (COND
       ((OR (AND (NULL Z) (|:MINUSP| N)) (|:MINUSP| Z))
        (SETQ Z (ADDF Z (MINUS 1)))))
      (COND ((NULL Z) (RETURN 0)) (T (RETURN Z))))) 
(PUT 'QSIMPCOMB_STANDARD_QEXP_PART_SF 'NUMBER-OF-ARGS 2) 
(PUT 'QSIMPCOMB_STANDARD_QEXP_PART_SF 'DEFINED-ON-LINE '804) 
(PUT 'QSIMPCOMB_STANDARD_QEXP_PART_SF 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'QSIMPCOMB_STANDARD_QEXP_PART_SF 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE QSIMPCOMB_STANDARD_QEXP_PART_SF (F Q)
    (PROG (P Z)
      (SETQ P (SIMP NIL))
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND (PAIRP F) (NULL (CDR F)))) (RETURN NIL)))
        (PROGN
         (COND ((EQ (CAAAR F) Q) (SETQ P (ADDSQ P (SIMP (CDAAR F)))))
               (T
                (PROG ()
                  (SETQ Z (CAAAR F))
                  (COND
                   ((AND (PAIRP Z) (EQ (CAR Z) 'EXPT) (EQ (CADR Z) Q))
                    (SETQ P
                            (ADDSQ P
                                   (SIMP
                                    (LIST 'TIMES (CADDR Z) (CDAAR F))))))))))
         (SETQ F (CDAR F))
         NIL)
        (GO WHILELABEL))
      (RETURN P))) 
(PUT 'QSIMPCOMB_STANDARD_QEXP_PART 'NUMBER-OF-ARGS 3) 
(PUT 'QSIMPCOMB_STANDARD_QEXP_PART 'DEFINED-ON-LINE '824) 
(PUT 'QSIMPCOMB_STANDARD_QEXP_PART 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'QSIMPCOMB_STANDARD_QEXP_PART 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE QSIMPCOMB_STANDARD_QEXP_PART (A Q QE)
    (PROG (*FACTOR *EXP N D)
      (ON (LIST 'FACTOR))
      (SETQ A (SIMP (REVAL1 (MK*SQ A) NIL)))
      (SETQ N (CAR A))
      (SETQ D (CDR A))
      (SETQ N (QSIMPCOMB_STANDARD_QEXP_PART_SF N Q))
      (SETQ D (QSIMPCOMB_STANDARD_QEXP_PART_SF D Q))
      (SETQ N (ADDSQ N (NEGSQ D)))
      (SETQ N (QSIMPCOMB_STANDARD_INTEGER_PART (MULTSQ N (INVSQ (SIMP QE)))))
      (SETQ D (SIMP (LIST 'EXPT Q (LIST 'TIMES (MK*SQ (SIMP N)) QE))))
      (COND
       ((NULL (SIMP (REVAL1 (MK*SQ (ADDSQ A (NEGSQ D))) NIL)))
        (SETQ N (|:DIFFERENCE| N (MINUS 1)))))
      (RETURN N))) 
(PUT 'QSIMPCOMB_QPOCHHAMMER_FINITE 'NUMBER-OF-ARGS 1) 
(PUT 'QSIMPCOMB_QPOCHHAMMER_FINITE 'DEFINED-ON-LINE '843) 
(PUT 'QSIMPCOMB_QPOCHHAMMER_FINITE 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'QSIMPCOMB_QPOCHHAMMER_FINITE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE QSIMPCOMB_QPOCHHAMMER_FINITE (U)
    (PROG (K F F1 JJ)
      (SETQ K (CADDR U))
      (SETQ F (SIMP 1))
      (COND ((|:ZEROP| K) (RETURN F)))
      (SETQ JJ (GENSYM))
      (SETQ F1
              (SIMP
               (LIST 'DIFFERENCE 1
                     (LIST 'TIMES (CAR U) (LIST 'EXPT (CADR U) JJ)))))
      (COND
       ((|:MINUSP| K)
        (PROG (J)
          (SETQ J K)
         LAB
          (COND ((MINUSP (DIFFERENCE (MINUS 1) J)) (RETURN NIL)))
          (SETQ F (MULTSQ F (INVSQ (SUBSQ F1 (LIST (CONS JJ J))))))
          (SETQ J (PLUS2 J 1))
          (GO LAB)))
       (T
        (PROGN
         (SETQ K (REVAL1 (LIST 'DIFFERENCE K 1) T))
         (PROG (J)
           (SETQ J 0)
          LAB
           (COND ((MINUSP (DIFFERENCE K J)) (RETURN NIL)))
           (SETQ F (MULTSQ F (SUBSQ F1 (LIST (CONS JJ J)))))
           (SETQ J (PLUS2 J 1))
           (GO LAB))
         NIL)))
      (RETURN F))) 
(PUT 'QSIMPCOMB_QPOCHHAMMER_INFINITY 'NUMBER-OF-ARGS 6) 
(PUT 'QSIMPCOMB_QPOCHHAMMER_INFINITY 'DEFINED-ON-LINE '862) 
(PUT 'QSIMPCOMB_QPOCHHAMMER_INFINITY 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'QSIMPCOMB_QPOCHHAMMER_INFINITY 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE QSIMPCOMB_QPOCHHAMMER_INFINITY (U A Q QE K M)
    (PROG (JJ F F2)
      (COND
       ((OR (EQ K (SIMP (LIST 'MINUS 'INFINITY))) (|:ZEROP| M))
        (RETURN (MKSQ (CONS 'QPOCHHAMMER U) 1)))
       ((NEQ K (SIMP 'INFINITY)) (REDERR "Invalid arguments in qpochhammer.")))
      (SETQ F (SIMP 1))
      (SETQ JJ (GENSYM))
      (SETQ A
              (PREPSQ
               (MULTSQ A (INVSQ (SIMP (LIST 'EXPT Q (LIST 'TIMES QE M)))))))
      (SETQ F2
              (SIMP
               (LIST 'DIFFERENCE 1
                     (LIST 'TIMES A (LIST 'EXPT Q (LIST 'TIMES QE JJ))))))
      (COND
       ((|:MINUSP| M)
        (PROG (J)
          (SETQ J M)
         LAB
          (COND ((MINUSP (DIFFERENCE (MINUS 1) J)) (RETURN NIL)))
          (SETQ F (MULTSQ F (SUBSQ F2 (LIST (CONS JJ J)))))
          (SETQ J (PLUS2 J 1))
          (GO LAB)))
       (T
        (PROG (J)
          (SETQ J 0)
         LAB
          (COND ((MINUSP (DIFFERENCE (DIFFERENCE M 1) J)) (RETURN NIL)))
          (SETQ F (MULTSQ F (INVSQ (SUBSQ F2 (LIST (CONS JJ J))))))
          (SETQ J (PLUS2 J 1))
          (GO LAB))))
      (SETQ F (MULTSQ F (MKSQ (LIST 'QPOCHHAMMER A (CADR U) (CADDR U)) 1)))
      (RETURN F))) 
(PUT 'QSIMPCOMB_QPOCHHAMMER 'NUMBER-OF-ARGS 1) 
(PUT 'QSIMPCOMB_QPOCHHAMMER 'DEFINED-ON-LINE '883) 
(PUT 'QSIMPCOMB_QPOCHHAMMER 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'QSIMPCOMB_QPOCHHAMMER 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE QSIMPCOMB_QPOCHHAMMER (U)
    (PROG (A Q QQ QE K N M F JJ F1 F2)
      (COND
       ((NOT (EQN (LENGTH U) 3))
        (REDERR "Invalid number of arguments in qpochhammer")))
      (COND ((FIXP (CADDR U)) (RETURN (QSIMPCOMB_QPOCHHAMMER_FINITE U))))
      (SETQ A (SIMP (CAR U)))
      (SETQ QQ (SIMP (CADR U)))
      (SETQ Q QQ)
      (SETQ K (SIMP (CADDR U)))
      (SETQ U (LIST (PREPSQ A) (PREPSQ QQ) (PREPSQ K)))
      (COND ((IDP (CADR U)) (PROGN (SETQ QE 1) (SETQ Q (CAAAR (CAR Q))) NIL))
            ((EQN (CDR Q) 1)
             (PROGN
              (SETQ Q (CAR Q))
              (SETQ QE (CDAAR Q))
              (COND
               ((OR (NOT (EQN (CDAR Q) 1)) (NOT (IDP (CAAAR Q))))
                (REDERR "Invalid arguments in qpochhammer")))
              (SETQ Q (CAAAR Q))
              NIL))
            ((EQN (CAR Q) 1)
             (PROGN
              (SETQ Q (CDR Q))
              (SETQ QE (MINUS (CDAAR Q)))
              (COND
               ((OR (NOT (EQN (CDAR Q) 1)) (NOT (IDP (CAAAR Q))))
                (REDERR "Invalid arguments in qpochhammer.")))
              (SETQ Q (CAAAR Q))
              NIL))
            (T (REDERR "Invalid arguments in qpochhammer.")))
      (COND ((NULL A) (RETURN (SIMP 1))))
      (COND ((EQUAL A QQ) (SETQ M 0))
            (T
             (PROGN
              (SETQ M (QSIMPCOMB_STANDARD_QEXP_PART A Q QE))
              (COND
               ((AND (EQ A (SIMP (LIST 'EXPT Q (LIST 'TIMES QE M))))
                     (|:MINUSP| (|:MINUS| M)))
                (SETQ M (|:DIFFERENCE| M 1))))
              NIL)))
      (SETQ N (QSIMPCOMB_STANDARD_INTEGER_PART K))
      (COND
       ((AND (|:ZEROP| N) (|:ZEROP| M))
        (RETURN (MKSQ (CONS 'QPOCHHAMMER U) 1))))
      (COND
       ((NOT (FREEOF K 'INFINITY))
        (RETURN (QSIMPCOMB_QPOCHHAMMER_INFINITY U A Q QE K M))))
      (SETQ F (SIMP 1))
      (SETQ JJ (GENSYM))
      (SETQ QQ (CADR U))
      (SETQ A
              (PREPSQ
               (MULTSQ A (INVSQ (SIMP (LIST 'EXPT Q (LIST 'TIMES M QE)))))))
      (SETQ K (PREPSQ (ADDSQ K (NEGSQ (SIMP N)))))
      (SETQ F1
              (SIMP
               (LIST 'DIFFERENCE 1
                     (LIST 'TIMES A
                           (LIST 'EXPT Q
                                 (LIST 'TIMES QE (LIST 'PLUS JJ K)))))))
      (SETQ F2
              (SIMP
               (LIST 'DIFFERENCE 1
                     (LIST 'TIMES A (LIST 'EXPT Q (LIST 'TIMES QE JJ))))))
      (COND
       ((|:MINUSP| (|:PLUS| N M))
        (COND
         ((|:MINUSP| M)
          (PROGN
           (PROG (J)
             (SETQ J (PLUS M N))
            LAB
             (COND ((MINUSP (DIFFERENCE (MINUS 1) J)) (RETURN NIL)))
             (SETQ F (MULTSQ F (INVSQ (SUBSQ F1 (LIST (CONS JJ J))))))
             (SETQ J (PLUS2 J 1))
             (GO LAB))
           (PROG (J)
             (SETQ J M)
            LAB
             (COND ((MINUSP (DIFFERENCE (MINUS 1) J)) (RETURN NIL)))
             (SETQ F (MULTSQ F (SUBSQ F2 (LIST (CONS JJ J)))))
             (SETQ J (PLUS2 J 1))
             (GO LAB))
           NIL))
         (T
          (PROGN
           (PROG (J)
             (SETQ J (PLUS M N))
            LAB
             (COND ((MINUSP (DIFFERENCE (MINUS 1) J)) (RETURN NIL)))
             (SETQ F (MULTSQ F (INVSQ (SUBSQ F1 (LIST (CONS JJ J))))))
             (SETQ J (PLUS2 J 1))
             (GO LAB))
           (PROG (J)
             (SETQ J 0)
            LAB
             (COND ((MINUSP (DIFFERENCE (DIFFERENCE M 1) J)) (RETURN NIL)))
             (SETQ F (MULTSQ F (INVSQ (SUBSQ F2 (LIST (CONS JJ J))))))
             (SETQ J (PLUS2 J 1))
             (GO LAB))
           NIL))))
       ((|:MINUSP| M)
        (PROGN
         (PROG (J)
           (SETQ J 0)
          LAB
           (COND
            ((MINUSP (DIFFERENCE (PLUS N (DIFFERENCE M 1)) J)) (RETURN NIL)))
           (SETQ F (MULTSQ F (SUBSQ F1 (LIST (CONS JJ J)))))
           (SETQ J (PLUS2 J 1))
           (GO LAB))
         (PROG (J)
           (SETQ J M)
          LAB
           (COND ((MINUSP (DIFFERENCE (MINUS 1) J)) (RETURN NIL)))
           (SETQ F (MULTSQ F (SUBSQ F2 (LIST (CONS JJ J)))))
           (SETQ J (PLUS2 J 1))
           (GO LAB))
         NIL))
       (T
        (PROGN
         (PROG (J)
           (SETQ J 0)
          LAB
           (COND
            ((MINUSP (DIFFERENCE (PLUS N (DIFFERENCE M 1)) J)) (RETURN NIL)))
           (SETQ F (MULTSQ F (SUBSQ F1 (LIST (CONS JJ J)))))
           (SETQ J (PLUS2 J 1))
           (GO LAB))
         (PROG (J)
           (SETQ J 0)
          LAB
           (COND ((MINUSP (DIFFERENCE (DIFFERENCE M 1) J)) (RETURN NIL)))
           (SETQ F (MULTSQ F (INVSQ (SUBSQ F2 (LIST (CONS JJ J))))))
           (SETQ J (PLUS2 J 1))
           (GO LAB))
         NIL)))
      (SETQ U (MULTSQ F (MKSQ (LIST 'QPOCHHAMMER A QQ K) 1)))
      (RETURN U))) 
(PUT 'QSIMPCOMB_BINOMIAL 'NUMBER-OF-ARGS 1) 
(PUT 'QSIMPCOMB_BINOMIAL 'DEFINED-ON-LINE '968) 
(PUT 'QSIMPCOMB_BINOMIAL 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'QSIMPCOMB_BINOMIAL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE QSIMPCOMB_BINOMIAL (U)
    (PROG (F N K)
      (COND
       ((NOT (AND (FIXP (CADR U)) (GEQ (CADR U) 0)))
        (RETURN (MKSQ (LIST 'BINOMIAL (CAR U) (CADR U)) 1))))
      (SETQ N (SIMP (CAR U)))
      (SETQ K (CADR U))
      (COND ((EQN K 0) (RETURN (SIMP 1))))
      (SETQ F (SIMP 1))
      (PROG (J)
        (SETQ J 0)
       LAB
        (COND ((MINUSP (DIFFERENCE (|:DIFFERENCE| K 1) J)) (RETURN NIL)))
        (SETQ F (MULTSQ F (ADDSQ N (NEGSQ (SIMP J)))))
        (SETQ J (PLUS2 J 1))
        (GO LAB))
      (SETQ F (MULTSQ F (INVSQ (SIMP (LIST 'FACTORIAL K)))))
      (RETURN F))) 
(PUT 'QSIMPCOMB_QBINOMIAL 'NUMBER-OF-ARGS 1) 
(PUT 'QSIMPCOMB_QBINOMIAL 'DEFINED-ON-LINE '984) 
(PUT 'QSIMPCOMB_QBINOMIAL 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'QSIMPCOMB_QBINOMIAL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE QSIMPCOMB_QBINOMIAL (U)
    (PROG (N K Q)
      (SETQ N (CAR U))
      (SETQ K (CADR U))
      (SETQ Q (CADDR U))
      (SETQ U
              (LIST 'QUOTIENT (LIST 'QPOCHHAMMER Q Q N)
                    (LIST 'TIMES (LIST 'QPOCHHAMMER Q Q K)
                          (LIST 'QPOCHHAMMER Q Q (LIST 'DIFFERENCE N K)))))
      (RETURN (MKSQ U 1)))) 
(PUT 'QSIMPCOMB_QBRACKETS 'NUMBER-OF-ARGS 1) 
(PUT 'QSIMPCOMB_QBRACKETS 'DEFINED-ON-LINE '997) 
(PUT 'QSIMPCOMB_QBRACKETS 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'QSIMPCOMB_QBRACKETS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE QSIMPCOMB_QBRACKETS (U)
    (PROG (N Q)
      (SETQ N (CAR U))
      (SETQ Q (CADR U))
      (SETQ U
              (LIST 'QUOTIENT (LIST 'DIFFERENCE (LIST 'EXPT Q N) 1)
                    (LIST 'DIFFERENCE Q 1)))
      (RETURN (MKSQ U 1)))) 
(PUT 'QSIMPCOMB_QFACTORIAL 'NUMBER-OF-ARGS 1) 
(PUT 'QSIMPCOMB_QFACTORIAL 'DEFINED-ON-LINE '1008) 
(PUT 'QSIMPCOMB_QFACTORIAL 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'QSIMPCOMB_QFACTORIAL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE QSIMPCOMB_QFACTORIAL (U)
    (PROG (N Q)
      (SETQ N (CAR U))
      (SETQ Q (CADR U))
      (SETQ U
              (LIST 'QUOTIENT (LIST 'QPOCHHAMMER Q Q N)
                    (LIST 'EXPT (LIST 'DIFFERENCE 1 Q) N)))
      (RETURN (MKSQ U 1)))) 
(PUT 'QSIMPCOMB_QFAC 'NUMBER-OF-ARGS 1) 
(PUT 'QSIMPCOMB_QFAC 'DEFINED-ON-LINE '1020) 
(PUT 'QSIMPCOMB_QFAC 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'QSIMPCOMB_QFAC 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE QSIMPCOMB_QFAC (U) (PROG () (RETURN (MKSQ (CONS 'QPOCHHAMMER U) 1)))) 
(PUT 'QSIMPLIFY 'NUMBER-OF-ARGS 1) 
(PUT 'QSIMPLIFY 'DEFINED-ON-LINE '1026) 
(PUT 'QSIMPLIFY 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'QSIMPLIFY 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE QSIMPLIFY (F)
    (PROG (*PRECISE *FACTOR *EXP *MCD *GCD *RATIONAL REDEFMODE ORIG_BINO
           ORIG_QBIN ORIG_QBRA ORIG_QFCT ORIG_QFAC ORIG_QPOC *QSUM-SIMPEXPT)
      (SETQ *QSUM-SIMPEXPT T)
      (ON (LIST 'FACTOR 'MCD 'GCD))
      (OFF (LIST 'RATIONAL 'PRECISE))
      (COND
       ((NEQ (LENGTH F) 1)
        (REDERR
         (LIST "qsimpcomb called with" (LENGTH F) "arguments instead of 1"))))
      (SETQ ORIG_BINO (GET 'BINOMIAL 'SIMPFN))
      (PUT 'BINOMIAL 'SIMPFN 'QSIMPCOMB_BINOMIAL)
      (SETQ F (REVAL1 (CAR F) NIL))
      (SETQ ORIG_QBIN (GET 'QBINOMIAL 'SIMPFN))
      (SETQ ORIG_QBRA (GET 'QBRACKETS 'SIMPFN))
      (SETQ ORIG_QFCT (GET 'QFACTORIAL 'SIMPFN))
      (SETQ ORIG_QFAC (GET 'QFAC 'SIMPFN))
      (SETQ ORIG_QPOC (GET 'QPOCHHAMMER 'SIMPFN))
      (PUT 'QBINOMIAL 'SIMPFN 'QSIMPCOMB_QBINOMIAL)
      (PUT 'QBRACKETS 'SIMPFN 'QSIMPCOMB_QBRACKETS)
      (PUT 'QFACTORIAL 'SIMPFN 'QSIMPCOMB_QFACTORIAL)
      (PUT 'QFAC 'SIMPFN 'QSIMPCOMB_QPOCHHAMMER)
      (PUT 'QPOCHHAMMER 'SIMPFN 'QSIMPCOMB_QPOCHHAMMER)
      (RMSUBS)
      (SETQ F (MK*SQ (SIMP (REVAL1 F T))))
      (PUT 'BINOMIAL 'SIMPFN ORIG_BINO)
      (PUT 'QBINOMIAL 'SIMPFN ORIG_QBIN)
      (PUT 'QBRACKETS 'SIMPFN ORIG_QBRA)
      (PUT 'QFACTORIAL 'SIMPFN ORIG_QFCT)
      (PUT 'QFAC 'SIMPFN ORIG_QFAC)
      (PUT 'QPOCHHAMMER 'SIMPFN ORIG_QPOC)
      (RETURN F))) 
(PUT 'QSIMPCOMB 'PSOPFN 'QSIMPLIFY) 
(PUT 'DOWN_QRATIO 'NUMBER-OF-ARGS 2) 
(FLAG '(DOWN_QRATIO) 'OPFN) 
(PUT 'DOWN_QRATIO 'DEFINED-ON-LINE '1075) 
(PUT 'DOWN_QRATIO 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'DOWN_QRATIO 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE DOWN_QRATIO (A K)
    (PROG ()
      (SETQ A
              (AEVAL
               (LIST 'QSIMPCOMB
                     (LIST 'QUOTIENT A
                           (LIST 'SUB (LIST 'EQUAL K (LIST 'DIFFERENCE K 1))
                                 A)))))
      (RETURN (AEVAL A)))) 
(PUT 'UP_QRATIO 'NUMBER-OF-ARGS 2) 
(FLAG '(UP_QRATIO) 'OPFN) 
(PUT 'UP_QRATIO 'DEFINED-ON-LINE '1083) 
(PUT 'UP_QRATIO 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'UP_QRATIO 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE UP_QRATIO (A K)
    (PROG ()
      (SETQ A
              (AEVAL
               (LIST 'QSIMPCOMB
                     (LIST 'QUOTIENT
                           (LIST 'SUB (LIST 'EQUAL K (LIST 'PLUS K 1)) A) A))))
      (RETURN (AEVAL A)))) 
(PUT 'QRATIO 'NUMBER-OF-ARGS 2) 
(FLAG '(QRATIO) 'OPFN) 
(PUT 'QRATIO 'DEFINED-ON-LINE '1091) 
(PUT 'QRATIO 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'QRATIO 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE QRATIO (A K)
    (PROG ()
      (SETQ A
              (AEVAL
               (LIST 'QSIMPCOMB
                     (LIST 'QUOTIENT
                           (LIST 'SUB (LIST 'EQUAL K (LIST 'PLUS K 1)) A) A))))
      (RETURN (AEVAL A)))) 
(PUT 'TYPE_HOMOGENEOUS 'NUMBER-OF-ARGS 2) 
(FLAG '(TYPE_HOMOGENEOUS) 'OPFN) 
(PUT 'TYPE_HOMOGENEOUS 'DEFINED-ON-LINE '1100) 
(PUT 'TYPE_HOMOGENEOUS 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'TYPE_HOMOGENEOUS 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE TYPE_HOMOGENEOUS (F Z)
    (PROG (*EXP *FACTOR *MCD C DEG_F)
      (AEVAL (ON (LIST 'EXP 'MCD)))
      (COND ((NOT (TYPE_RATPOLY (REVALX F) (REVALX Z))) (RETURN (AEVAL 'NIL))))
      (SETQ DEG_F (AEVAL (LIST 'LAURENTDEGREE F Z)))
      (SETQ C (AEVAL (LIST 'LAURENTCOEFFN F Z DEG_F)))
      (COND
       ((AND
         (EVALEQUAL
          (AEVAL (LIST 'DIFFERENCE F (LIST 'TIMES C (LIST 'EXPT Z DEG_F)))) 0)
         (FREEOF (REVALX C) (REVALX Z)))
        (RETURN (AEVAL 'T))))
      (RETURN (AEVAL 'NIL)))) 
(PUT 'QGOSPER_QPRIMEDISPERSION 'NUMBER-OF-ARGS 4) 
(FLAG '(QGOSPER_QPRIMEDISPERSION) 'OPFN) 
(PUT 'QGOSPER_QPRIMEDISPERSION 'DEFINED-ON-LINE '1113) 
(PUT 'QGOSPER_QPRIMEDISPERSION 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'QGOSPER_QPRIMEDISPERSION 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE QGOSPER_QPRIMEDISPERSION (F G Q QK)
    (PROG (*EXP *FACTOR *GCD *MCD N M A B C D J)
      (AEVAL (ON (LIST 'EXP 'MCD)))
      (AEVAL (OFF (LIST 'GCD)))
      (SETQ F (AEVAL F))
      (SETQ N (AEVAL (LIST 'LAURENTDEGREE F QK)))
      (COND
       ((OR (EVALEQUAL (AEVAL N) 0)
            (EVALNEQ (AEVAL N) (AEVAL (LIST 'LAURENTDEGREE G QK))))
        (RETURN (AEVAL (LIST 'LIST)))))
      (SETQ M (AEVAL (LIST 'LAURENTLDEGREE F QK)))
      (COND
       ((OR (EVALEQUAL (AEVAL M) (AEVAL N))
            (EVALNEQ (AEVAL M) (AEVAL (LIST 'LAURENTLDEGREE G QK))))
        (RETURN (AEVAL (LIST 'LIST)))))
      (SETQ A (AEVAL (LIST 'LAURENTCOEFFN F QK N)))
      (SETQ B (AEVAL (LIST 'LAURENTCOEFFN F QK M)))
      (SETQ C (AEVAL (LIST 'LAURENTCOEFFN G QK N)))
      (SETQ D (AEVAL (LIST 'LAURENTCOEFFN G QK M)))
      (AEVAL (ON (LIST 'GCD)))
      (SETQ J (AEVAL (LIST 'TIMES A (LIST 'QUOTIENT D (LIST 'TIMES B C)))))
      (AEVAL (OFF (LIST 'GCD)))
      (COND
       ((NOT (BOOLVALUE* (REVALX (LIST 'TYPE_HOMOGENEOUS J Q))))
        (RETURN (AEVAL (LIST 'LIST)))))
      (SETQ J
              (AEVAL
               (LIST 'QUOTIENT (LIST 'LAURENTDEGREE J Q)
                     (LIST 'DIFFERENCE N M))))
      (COND
       ((NOT (AND (FIXP (REVALX J)) (EVALLESSP (MINUS 1) (AEVAL J))))
        (RETURN (AEVAL (LIST 'LIST)))))
      (SETQ M
              (AEVAL
               (LIST 'SUB (LIST 'EQUAL QK (LIST 'TIMES QK (LIST 'EXPT Q J)))
                     G)))
      (SETQ C (AEVAL (LIST 'LAURENTCOEFFN M QK N)))
      (COND
       ((EVALEQUAL
         (AEVAL (LIST 'DIFFERENCE (LIST 'TIMES C F) (LIST 'TIMES A M))) 0)
        (RETURN (AEVAL J))))
      (RETURN (AEVAL (LIST 'LIST))))) 
(PUT 'QGOSPER_QDISPERSIONSET_SIMPLE_FACTORLIST 'NUMBER-OF-ARGS 2) 
(FLAG '(QGOSPER_QDISPERSIONSET_SIMPLE_FACTORLIST) 'OPFN) 
(PUT 'QGOSPER_QDISPERSIONSET_SIMPLE_FACTORLIST 'DEFINED-ON-LINE '1140) 
(PUT 'QGOSPER_QDISPERSIONSET_SIMPLE_FACTORLIST 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'QGOSPER_QDISPERSIONSET_SIMPLE_FACTORLIST 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE QGOSPER_QDISPERSIONSET_SIMPLE_FACTORLIST (P X)
    (PROG (*EXP *FACTOR *GCD *LIMITEDFACTORS *MCD)
      (AEVAL (ON (LIST 'FACTOR 'MCD)))
      (AEVAL (OFF (LIST 'GCD 'LIMITEDFACTORS)))
      (SETQ P (AEVAL (LIST 'PRODUCT2LIST P)))
      (SETQ P
              (PROG (J FORALL-RESULT FORALL-ENDPTR)
                (SETQ J (GETRLIST (AEVAL P)))
                (COND ((NULL J) (RETURN (MAKELIST NIL))))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS
                                 ((LAMBDA (J)
                                    (COND
                                     ((AND
                                       (EVALGREATERP
                                        (AEVAL (LIST 'ARGLENGTH J)) (MINUS 1))
                                       (EVALEQUAL (AEVAL (LIST 'PART J 0))
                                                  (AEVAL 'EXPT))
                                       (FIXP (REVALX (LIST 'PART J 2))))
                                      (AEVAL (LIST 'PART J 1)))
                                     (T (AEVAL J))))
                                  (CAR J))
                                 NIL)))
               LOOPLABEL
                (SETQ J (CDR J))
                (COND ((NULL J) (RETURN (CONS 'LIST FORALL-RESULT))))
                (RPLACD FORALL-ENDPTR
                        (CONS
                         ((LAMBDA (J)
                            (COND
                             ((AND
                               (EVALGREATERP (AEVAL (LIST 'ARGLENGTH J))
                                             (MINUS 1))
                               (EVALEQUAL (AEVAL (LIST 'PART J 0))
                                          (AEVAL 'EXPT))
                               (FIXP (REVALX (LIST 'PART J 2))))
                              (AEVAL (LIST 'PART J 1)))
                             (T (AEVAL J))))
                          (CAR J))
                         NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (SETQ P
              (AEVAL
               (LIST 'SELECT (LIST 'NOT (LIST 'FREEOF (LIST '~ 'Z) X)) P)))
      (RETURN (AEVAL P)))) 
(PUT 'QGOSPER_QDISPERSIONSET 'NUMBER-OF-ARGS 4) 
(FLAG '(QGOSPER_QDISPERSIONSET) 'OPFN) 
(PUT 'QGOSPER_QDISPERSIONSET 'DEFINED-ON-LINE '1153) 
(PUT 'QGOSPER_QDISPERSIONSET 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'QGOSPER_QDISPERSIONSET 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE QGOSPER_QDISPERSIONSET (QQ RR Q QK)
    (PROG (DISP J)
      (AEVAL (LIST 'TIMING 'QDISPERSIONSET))
      (SETQ QQ (AEVAL (LIST 'QGOSPER_QDISPERSIONSET_SIMPLE_FACTORLIST QQ QK)))
      (SETQ RR (AEVAL (LIST 'QGOSPER_QDISPERSIONSET_SIMPLE_FACTORLIST RR QK)))
      (SETQ DISP (AEVAL (LIST 'LIST)))
      (PROG (F)
        (SETQ F (GETRLIST (AEVAL QQ)))
       LAB
        (COND ((NULL F) (RETURN NIL)))
        ((LAMBDA (F)
           (PROG (G)
             (SETQ G (GETRLIST (AEVAL RR)))
            LAB
             (COND ((NULL G) (RETURN NIL)))
             ((LAMBDA (G)
                (PROG ()
                  (SETQ J (AEVAL (LIST 'QGOSPER_QPRIMEDISPERSION F G Q QK)))
                  (COND
                   ((AND (EVALNEQ (AEVAL J) (AEVAL (LIST 'LIST)))
                         (NOT (MEMBER (REVALX J) (REVALX DISP))))
                    (SETQ DISP (AEVAL (LIST 'CONS J DISP)))))))
              (CAR G))
             (SETQ G (CDR G))
             (GO LAB)))
         (CAR F))
        (SETQ F (CDR F))
        (GO LAB))
      (AEVAL (LIST 'TRACE_QSUM "dispersionset:" DISP))
      (AEVAL (LIST 'TIMING 'QDISPERSIONSET))
      (RETURN (AEVAL DISP)))) 
(PUT 'QGOSPER_QUPDATE 'NUMBER-OF-ARGS 5) 
(FLAG '(QGOSPER_QUPDATE) 'OPFN) 
(PUT 'QGOSPER_QUPDATE 'DEFINED-ON-LINE '1172) 
(PUT 'QGOSPER_QUPDATE 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'QGOSPER_QUPDATE 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE QGOSPER_QUPDATE (PP QQ RR Q QK)
    (PROG (*FACTOR *EXP *MCD *DIV *GCD *LIMITEDFACTORS DISP G)
      (AEVAL (LIST 'TIMING 'QUPDATE))
      (AEVAL (ON (LIST 'FACTOR 'MCD 'DIV)))
      (AEVAL (OFF (LIST 'LIMITEDFACTORS)))
      (SETQ DISP (AEVAL (LIST 'QGOSPER_QDISPERSIONSET QQ RR Q QK)))
      (PROG (J)
        (SETQ J (GETRLIST (AEVAL DISP)))
       LAB
        (COND ((NULL J) (RETURN NIL)))
        ((LAMBDA (J)
           (PROG ()
             (AEVAL (ON (LIST 'EXP)))
             (SETQ G
                     (AEVAL
                      (LIST 'GCD QQ
                            (LIST 'SUB
                                  (LIST 'EQUAL QK
                                        (LIST 'TIMES QK (LIST 'EXPT Q J)))
                                  RR))))
             (AEVAL (ON (LIST 'FACTOR)))
             (COND
              ((NOT (FREEOF (REVALX G) (REVALX QK)))
               (PROG ()
                 (SETQ QQ (AEVAL (LIST 'QUOTIENT QQ G)))
                 (SETQ RR
                         (AEVAL
                          (LIST 'QUOTIENT RR
                                (LIST 'SUB
                                      (LIST 'EQUAL QK
                                            (LIST 'QUOTIENT QK
                                                  (LIST 'EXPT Q J)))
                                      G))))
                 (SETQ PP
                         (AEVAL
                          (LIST 'TIMES PP
                                (PROG (L FORALL-RESULT)
                                  (SETQ L 0)
                                  (SETQ FORALL-RESULT 1)
                                 LAB1
                                  (COND
                                   ((|AMINUSP:|
                                     (LIST 'DIFFERENCE
                                           (AEVAL* (LIST 'DIFFERENCE J 1)) L))
                                    (RETURN FORALL-RESULT)))
                                  (SETQ FORALL-RESULT
                                          (AEVAL*
                                           (LIST 'TIMES
                                                 (AEVAL*
                                                  (LIST 'SUB
                                                        (LIST 'EQUAL QK
                                                              (LIST 'QUOTIENT
                                                                    QK
                                                                    (LIST 'EXPT
                                                                          Q
                                                                          L)))
                                                        G))
                                                 FORALL-RESULT)))
                                  (SETQ L
                                          ((LAMBDA (FORALL-RESULT)
                                             (AEVAL*
                                              (LIST 'PLUS FORALL-RESULT 1)))
                                           L))
                                  (GO LAB1))))))))))
         (CAR J))
        (SETQ J (CDR J))
        (GO LAB))
      (AEVAL
       (LIST 'TRACE_QSUM "q-Gosper representation:" (LIST 'LIST PP QQ RR)))
      (AEVAL (LIST 'TIMING 'QUPDATE))
      (RETURN (AEVAL (LIST 'LIST PP QQ RR))))) 
(PUT 'QGOSPER_QDEGREEBOUND_Q_EXPONENT 'NUMBER-OF-ARGS 2) 
(FLAG '(QGOSPER_QDEGREEBOUND_Q_EXPONENT) 'OPFN) 
(PUT 'QGOSPER_QDEGREEBOUND_Q_EXPONENT 'DEFINED-ON-LINE '1195) 
(PUT 'QGOSPER_QDEGREEBOUND_Q_EXPONENT 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'QGOSPER_QDEGREEBOUND_Q_EXPONENT 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE QGOSPER_QDEGREEBOUND_Q_EXPONENT (F Q)
    (PROG (*EXP *FACTOR *MCD *GCD *COMBINELOGS *EXPANDLOGS)
      (AEVAL (ON (LIST 'EXPANDLOGS 'EXP 'MCD 'GCD)))
      (AEVAL (OFF (LIST 'COMBINELOGS)))
      (RETURN (AEVAL (LIST 'QUOTIENT (LIST 'LOG F) (LIST 'LOG Q)))))) 
(PUT 'QGOSPER_QDEGREEBOUND 'NUMBER-OF-ARGS 5) 
(FLAG '(QGOSPER_QDEGREEBOUND) 'OPFN) 
(PUT 'QGOSPER_QDEGREEBOUND 'DEFINED-ON-LINE '1204) 
(PUT 'QGOSPER_QDEGREEBOUND 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'QGOSPER_QDEGREEBOUND 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE QGOSPER_QDEGREEBOUND (PP QQ RR Q QK)
    (PROG (*MCD *FACTOR *EXP *GCD LDEGPP LDEGQQ LDEGRR LDEGFF DD EE DEGPP DEGQQ
           DEGRR DEGFF)
      (AEVAL (LIST 'TIMING 'QDEGREEBOUND))
      (AEVAL (ON (LIST 'EXP 'MCD)))
      (AEVAL (OFF (LIST 'GCD)))
      (SETQ LDEGPP (AEVAL (LIST 'LAURENTLDEGREE PP QK)))
      (SETQ LDEGQQ (AEVAL (LIST 'LAURENTLDEGREE QQ QK)))
      (SETQ LDEGRR (AEVAL (LIST 'LAURENTLDEGREE RR QK)))
      (COND
       ((EVALNEQ (AEVAL LDEGQQ) (AEVAL LDEGRR))
        (SETQ LDEGFF
                (AEVAL (LIST 'DIFFERENCE LDEGPP (LIST 'MIN LDEGQQ LDEGRR)))))
       (T
        (PROG ()
          (SETQ DD (AEVAL (LIST 'LAURENTCOEFFN QQ QK LDEGQQ)))
          (SETQ EE (AEVAL (LIST 'LAURENTCOEFFN RR QK LDEGQQ)))
          (SETQ EE
                  (AEVAL
                   (LIST 'QGOSPER_QDEGREEBOUND_Q_EXPONENT
                         (LIST 'QUOTIENT EE DD) Q)))
          (COND
           ((FIXP (REVALX EE))
            (SETQ LDEGFF
                    (AEVAL (LIST 'DIFFERENCE (LIST 'MIN EE LDEGPP) LDEGQQ))))
           (T (SETQ LDEGFF (AEVAL (LIST 'DIFFERENCE LDEGPP LDEGQQ))))))))
      (SETQ DEGPP (AEVAL (LIST 'LAURENTDEGREE PP QK)))
      (SETQ DEGQQ (AEVAL (LIST 'LAURENTDEGREE QQ QK)))
      (SETQ DEGRR (AEVAL (LIST 'LAURENTDEGREE RR QK)))
      (COND
       ((EVALNEQ (AEVAL DEGQQ) (AEVAL DEGRR))
        (SETQ DEGFF (AEVAL (LIST 'DIFFERENCE DEGPP (LIST 'MAX DEGQQ DEGRR)))))
       (T
        (PROG ()
          (SETQ DD (AEVAL (LIST 'LAURENTCOEFFN QQ QK DEGQQ)))
          (SETQ EE (AEVAL (LIST 'LAURENTCOEFFN RR QK DEGQQ)))
          (SETQ EE
                  (AEVAL
                   (LIST 'QGOSPER_QDEGREEBOUND_Q_EXPONENT
                         (LIST 'QUOTIENT EE DD) Q)))
          (COND
           ((FIXP (REVALX EE))
            (SETQ DEGFF (AEVAL (LIST 'DIFFERENCE (LIST 'MAX EE DEGPP) DEGQQ))))
           (T (SETQ DEGFF (AEVAL (LIST 'DIFFERENCE DEGPP DEGQQ))))))))
      (AEVAL (LIST 'TIMING 'QDEGREEBOUND))
      (COND
       ((EVALLESSP (AEVAL DEGFF) (AEVAL LDEGFF))
        (RETURN (AEVAL (LIST 'LIST)))))
      (RETURN (AEVAL (LIST 'LIST LDEGFF DEGFF))))) 
(PUT 'QSUMRECURSION_INDS2ARBCMPLX 'NUMBER-OF-ARGS 1) 
(PUT 'QSUMRECURSION_INDS2ARBCMPLX 'DEFINED-ON-LINE '1247) 
(PUT 'QSUMRECURSION_INDS2ARBCMPLX 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'QSUMRECURSION_INDS2ARBCMPLX 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE QSUMRECURSION_INDS2ARBCMPLX (U)
    (PROG (SOLU VAR ARBSUBS GL TMP J)
      (SETQ SOLU (CAR U))
      (COND ((NOT (FREEOF SOLU 'ARBCOMPLEX)) (RETURN SOLU)))
      (COND ((NULL (CDR SOLU)) (RETURN (CONS 'LIST NIL))))
      (COND ((EQ (CAADR SOLU) 'LIST) (SETQ SOLU (CONS 'LIST (CDADR SOLU)))))
      (SETQ SOLU (CDR SOLU))
      (SETQ VAR (CDR (REVAL1 (CADR U) T)))
      (SETQ ARBSUBS NIL)
      (PROG (GL)
        (SETQ GL SOLU)
       LAB
        (COND ((NULL GL) (RETURN NIL)))
        ((LAMBDA (GL)
           (PROGN
            (SETQ TMP VAR)
            (PROG ()
             WHILELABEL
              (COND ((NOT (NEQ TMP NIL)) (RETURN NIL)))
              (PROGN
               (SETQ J (CAR TMP))
               (SETQ TMP (CDR TMP))
               (COND
                ((AND (PAIRP GL) (NOT (FREEOF (CADDR GL) J)))
                 (PROGN
                  (SETQ ARBSUBS
                          (CONS
                           (LIST 'EQUAL J (PREPSQ (CONS (MAKEARBCOMPLEX) 1)))
                           ARBSUBS))
                  (SETQ VAR (DELETE J VAR))
                  NIL)))
               NIL)
              (GO WHILELABEL))
            NIL))
         (CAR GL))
        (SETQ GL (CDR GL))
        (GO LAB))
      (COND ((EQ ARBSUBS NIL) (RETURN (CAR U))))
      (SETQ ARBSUBS (CONS 'LIST ARBSUBS))
      (SETQ TMP NIL)
      (PROG ()
       WHILELABEL
        (COND ((NOT (NEQ SOLU NIL)) (RETURN NIL)))
        (PROGN
         (SETQ GL (CAR SOLU))
         (SETQ SOLU (CDR SOLU))
         (COND
          ((PAIRP GL)
           (SETCAR (CDDR GL) (REVAL1 (LIST 'SUB ARBSUBS (CADDR GL)) T))))
         (SETQ TMP (CONS GL TMP))
         NIL)
        (GO WHILELABEL))
      (SETQ TMP (CONS 'LIST TMP))
      (RETURN TMP))) 
(PUT 'QSUMRECURSION_INDETS2ARBCOMPLEX 'PSOPFN 'QSUMRECURSION_INDS2ARBCMPLX) 
(PUT 'QGOSPER_QFINDF 'NUMBER-OF-ARGS 3) 
(FLAG '(QGOSPER_QFINDF) 'OPFN) 
(PUT 'QGOSPER_QFINDF 'DEFINED-ON-LINE '1286) 
(PUT 'QGOSPER_QFINDF 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'QGOSPER_QFINDF 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE QGOSPER_QFINDF (PQR Q QK)
    (PROG (*EXP *FACTOR *MCD *CRAMER PP QQ RR D VAR F A I EQN SOLU)
      (AEVAL (LIST 'TIMING 'QFINDF))
      (AEVAL (ON (LIST 'EXP 'MCD)))
      (SETQ PP (AEVAL (LIST 'PART PQR 1)))
      (SETQ QQ (AEVAL (LIST 'PART PQR 2)))
      (SETQ RR (AEVAL (LIST 'PART PQR 3)))
      (SETQ D (AEVAL (LIST 'QGOSPER_QDEGREEBOUND PP QQ RR Q QK)))
      (AEVAL (LIST 'TRACE_QSUM "degreebounds:" D))
      (COND
       ((EVALEQUAL (AEVAL D) (AEVAL (LIST 'LIST)))
        (RETURN (PROGN (AEVAL (LIST 'TIMING 'QFINDF)) (AEVAL (LIST 'LIST))))))
      (SETQ VAR
              (PROG (J FORALL-RESULT FORALL-ENDPTR)
                (SETQ J (AEVAL* (LIST 'PART D 1)))
                (COND
                 ((|AMINUSP:| (LIST 'DIFFERENCE (AEVAL* (LIST 'PART D 2)) J))
                  (RETURN (MAKELIST NIL))))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR (CONS (AEVAL* (GENSYM)) NIL)))
               LOOPLABEL
                (SETQ J
                        ((LAMBDA (FORALL-RESULT)
                           (AEVAL* (LIST 'PLUS FORALL-RESULT 1)))
                         J))
                (COND
                 ((|AMINUSP:| (LIST 'DIFFERENCE (AEVAL* (LIST 'PART D 2)) J))
                  (RETURN (CONS 'LIST FORALL-RESULT))))
                (RPLACD FORALL-ENDPTR (CONS (AEVAL* (GENSYM)) NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (SETQ F
              (PROG (J FORALL-RESULT)
                (SETQ J (AEVAL* (LIST 'PART D 1)))
                (SETQ FORALL-RESULT 0)
               LAB1
                (COND
                 ((|AMINUSP:| (LIST 'DIFFERENCE (AEVAL* (LIST 'PART D 2)) J))
                  (RETURN FORALL-RESULT)))
                (SETQ FORALL-RESULT
                        (AEVAL*
                         (LIST 'PLUS
                               (AEVAL*
                                (LIST 'TIMES
                                      (LIST 'PART VAR
                                            (LIST 'PLUS
                                                  (LIST 'DIFFERENCE J
                                                        (LIST 'PART D 1))
                                                  1))
                                      (LIST 'EXPT QK J)))
                               FORALL-RESULT)))
                (SETQ J
                        ((LAMBDA (FORALL-RESULT)
                           (AEVAL* (LIST 'PLUS FORALL-RESULT 1)))
                         J))
                (GO LAB1)))
      (SETQ EQN
              (AEVAL
               (LIST 'DIFFERENCE
                     (LIST 'DIFFERENCE
                           (LIST 'TIMES
                                 (LIST 'SUB (LIST 'EQUAL QK (LIST 'TIMES QK Q))
                                       QQ)
                                 F)
                           (LIST 'TIMES RR
                                 (LIST 'SUB
                                       (LIST 'EQUAL QK (LIST 'QUOTIENT QK Q))
                                       F)))
                     PP)))
      (SETQ EQN (AEVAL (LIST 'LAURENTCOEFF EQN QK)))
      (AEVAL (ON (LIST 'CRAMER)))
      (AEVAL (LIST 'TIMING 'SOLVE))
      (COND
       ((BOOLVALUE* (REVALX *QSUM_NULLSPACE))
        (SETQ SOLU (AEVAL (LIST 'NULLSPACESOLVE EQN VAR))))
       (T (SETQ SOLU (AEVAL (LIST 'SOLVE EQN VAR)))))
      (AEVAL (LIST 'TIMING 'SOLVE))
      (AEVAL (ON (LIST 'FACTOR)))
      (COND
       ((EVALEQUAL (AEVAL SOLU) (AEVAL (LIST 'LIST)))
        (RETURN (PROGN (AEVAL (LIST 'TIMING 'QFINDF)) (AEVAL (LIST 'LIST))))))
      (SETQ SOLU (AEVAL (LIST 'QSUMRECURSION_INDETS2ARBCOMPLEX SOLU VAR)))
      (SETQ F (AEVAL (LIST 'SUB SOLU F)))
      (PROG (J)
        (SETQ J (GETRLIST (AEVAL VAR)))
       LAB
        (COND ((NULL J) (RETURN NIL)))
        ((LAMBDA (J)
           (COND
            ((NOT (FREEOF (REVALX F) (REVALX J)))
             (AEVAL
              (LIST 'SUB (LIST 'EQUAL J (MK*SQ (CONS (MAKEARBCOMPLEX) 1)))
                    F)))))
         (CAR J))
        (SETQ J (CDR J))
        (GO LAB))
      (AEVAL (LIST 'TIMING 'QFINDF))
      (RETURN (AEVAL F)))) 
(PUT 'QSUMRECURSION_QFINDF_EQUATIONS 'NUMBER-OF-ARGS 7) 
(FLAG '(QSUMRECURSION_QFINDF_EQUATIONS) 'OPFN) 
(PUT 'QSUMRECURSION_QFINDF_EQUATIONS 'DEFINED-ON-LINE '1327) 
(PUT 'QSUMRECURSION_QFINDF_EQUATIONS 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'QSUMRECURSION_QFINDF_EQUATIONS 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL GENERAL GENERAL GENERAL)
       GENERAL)) 
(DE QSUMRECURSION_QFINDF_EQUATIONS (PP QQ RR D Q QK SIGMA_VAR)
    (PROG (*EXP *FACTOR *LIMITEDFACTORS *MCD *CRAMER VAR F EQN SOLU LD)
      (AEVAL (ON (LIST 'EXP 'MCD)))
      (SETQ VAR
              (PROG (J FORALL-RESULT FORALL-ENDPTR)
                (SETQ J (AEVAL* (LIST 'PART D 1)))
                (COND
                 ((|AMINUSP:| (LIST 'DIFFERENCE (AEVAL* (LIST 'PART D 2)) J))
                  (RETURN (MAKELIST NIL))))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR (CONS (AEVAL* (GENSYM)) NIL)))
               LOOPLABEL
                (SETQ J
                        ((LAMBDA (FORALL-RESULT)
                           (AEVAL* (LIST 'PLUS FORALL-RESULT 1)))
                         J))
                (COND
                 ((|AMINUSP:| (LIST 'DIFFERENCE (AEVAL* (LIST 'PART D 2)) J))
                  (RETURN (CONS 'LIST FORALL-RESULT))))
                (RPLACD FORALL-ENDPTR (CONS (AEVAL* (GENSYM)) NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (COND
       ((EVALLESSP (AEVAL (LIST 'PART D 1)) 0)
        (PROG ()
          (SETQ F
                  (PROG (J FORALL-RESULT)
                    (SETQ J 0)
                    (SETQ FORALL-RESULT 0)
                   LAB1
                    (COND
                     ((|AMINUSP:|
                       (LIST 'DIFFERENCE
                             (AEVAL*
                              (LIST 'DIFFERENCE (LIST 'PART D 2)
                                    (LIST 'PART D 1)))
                             J))
                      (RETURN FORALL-RESULT)))
                    (SETQ FORALL-RESULT
                            (AEVAL*
                             (LIST 'PLUS
                                   (AEVAL*
                                    (LIST 'TIMES (LIST 'PART VAR (PLUS J 1))
                                          (LIST 'EXPT QK J)))
                                   FORALL-RESULT)))
                    (SETQ J
                            ((LAMBDA (FORALL-RESULT)
                               (AEVAL* (LIST 'PLUS FORALL-RESULT 1)))
                             J))
                    (GO LAB1)))
          (SETQ LD (AEVAL (LIST 'MINUS (LIST 'PART D 1))))
          (SETQ EQN
                  (AEVAL
                   (LIST 'DIFFERENCE
                         (LIST 'DIFFERENCE
                               (LIST 'TIMES
                                     (LIST 'SUB
                                           (LIST 'EQUAL QK
                                                 (LIST 'TIMES QK
                                                       (LIST 'EXPT Q 2)))
                                           QQ)
                                     (LIST 'SUB
                                           (LIST 'EQUAL QK (LIST 'TIMES QK Q))
                                           F))
                               (LIST 'TIMES
                                     (LIST 'SUB
                                           (LIST 'EQUAL QK (LIST 'TIMES QK Q))
                                           RR)
                                     F (LIST 'EXPT Q LD)))
                         (LIST 'TIMES
                               (LIST 'SUB (LIST 'EQUAL QK (LIST 'TIMES QK Q))
                                     PP)
                               (LIST 'EXPT QK LD) (LIST 'EXPT Q LD)))))))
       (T
        (PROG ()
          (SETQ F
                  (PROG (J FORALL-RESULT)
                    (SETQ J (AEVAL* (LIST 'PART D 1)))
                    (SETQ FORALL-RESULT 0)
                   LAB1
                    (COND
                     ((|AMINUSP:|
                       (LIST 'DIFFERENCE (AEVAL* (LIST 'PART D 2)) J))
                      (RETURN FORALL-RESULT)))
                    (SETQ FORALL-RESULT
                            (AEVAL*
                             (LIST 'PLUS
                                   (AEVAL*
                                    (LIST 'TIMES
                                          (LIST 'PART VAR
                                                (LIST 'PLUS J (LIST 'PART D 1)
                                                      1))
                                          (LIST 'EXPT QK J)))
                                   FORALL-RESULT)))
                    (SETQ J
                            ((LAMBDA (FORALL-RESULT)
                               (AEVAL* (LIST 'PLUS FORALL-RESULT 1)))
                             J))
                    (GO LAB1)))
          (SETQ EQN
                  (AEVAL
                   (LIST 'DIFFERENCE
                         (LIST 'DIFFERENCE
                               (LIST 'TIMES
                                     (LIST 'SUB
                                           (LIST 'EQUAL QK
                                                 (LIST 'TIMES QK
                                                       (LIST 'EXPT Q 2)))
                                           QQ)
                                     (LIST 'SUB
                                           (LIST 'EQUAL QK (LIST 'TIMES QK Q))
                                           F))
                               (LIST 'TIMES
                                     (LIST 'SUB
                                           (LIST 'EQUAL QK (LIST 'TIMES QK Q))
                                           RR)
                                     F))
                         (LIST 'SUB (LIST 'EQUAL QK (LIST 'TIMES QK Q))
                               PP)))))))
      (SETQ VAR (AEVAL (LIST 'APPEND SIGMA_VAR VAR)))
      (AEVAL (LIST 'TIMING 'SOLVE))
      (COND
       ((BOOLVALUE* (REVALX *QSUM_NULLSPACE))
        (PROG ()
          (SETQ EQN (AEVAL (LIST 'COEFF EQN QK)))
          (PROG (I)
            (SETQ I (GETRLIST (AEVAL VAR)))
           LAB
            (COND ((NULL I) (RETURN NIL)))
            ((LAMBDA (I) (AEVAL (FACTOR (LIST I)))) (CAR I))
            (SETQ I (CDR I))
            (GO LAB))
          (AEVAL (ON (LIST 'FACTOR 'MCD)))
          (SETQ EQN (AEVAL EQN))
          (SETQ SOLU (AEVAL (LIST 'NULLSPACESOLVE EQN VAR)))
          (PROG (I)
            (SETQ I (GETRLIST (AEVAL VAR)))
           LAB
            (COND ((NULL I) (RETURN NIL)))
            ((LAMBDA (I) (AEVAL (REMFAC (LIST I)))) (CAR I))
            (SETQ I (CDR I))
            (GO LAB))))
       (T
        (PROG ()
          (AEVAL (ON (LIST 'CRAMER)))
          (SETQ EQN (AEVAL (LIST 'COEFF EQN QK)))
          (SETQ SOLU (AEVAL (LIST 'SOLVE EQN VAR))))))
      (AEVAL (LIST 'TIMING 'SOLVE))
      (COND
       ((EVALEQUAL (AEVAL SOLU) (AEVAL (LIST 'LIST)))
        (RETURN (AEVAL (LIST 'LIST)))))
      (SETQ SOLU (AEVAL (LIST 'QSUMRECURSION_INDETS2ARBCOMPLEX SOLU VAR)))
      (COND
       ((BOOLVALUE* (REVALX *QSUMRECURSION_CERTIFICATE))
        (PROGN (SETQ F (AEVAL (LIST 'SUB SOLU F))) (AEVAL 'NIL)))
       (T (SETQ F (AEVAL 'NIL))))
      (SETQ SOLU
              (AEVAL
               (LIST 'LIST F
                     (LIST 'SELECT
                           (LIST 'QSUMRECURSION_HAS (LIST '~ 'W) SIGMA_VAR)
                           SOLU))))
      (COND
       ((AND (BOOLVALUE* (REVALX *QSUMRECURSION_EXP))
             (NOT (BOOLVALUE* (REVALX *QSUM_NULLSPACE))))
        (AEVAL (ON (LIST 'EXP))))
       (T (AEVAL (ON (LIST 'FACTOR)))))
      (SETQ SOLU (AEVAL (LIST 'REVAL SOLU)))
      (RETURN (AEVAL SOLU)))) 
(PUT 'QSUMRECURSION_HAS 'NUMBER-OF-ARGS 2) 
(PUT 'QSUMRECURSION_HAS 'DEFINED-ON-LINE '1378) 
(PUT 'QSUMRECURSION_HAS 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'QSUMRECURSION_HAS 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE QSUMRECURSION_HAS (Z VARLIST)
    (PROG (HAS)
      (SETQ HAS NIL)
      (PROG ()
       REPEATLABEL
        (PROGN
         (SETQ VARLIST (CDR VARLIST))
         (SETQ HAS (NOT (FREEOF Z (CAR VARLIST))))
         NIL)
        (COND ((NOT (OR (NULL (CDR VARLIST)) HAS)) (GO REPEATLABEL))))
      (RETURN HAS))) 
(FLAG '(QSUMRECURSION_HAS) 'OPFN) 
(PUT 'QSUMRECURSION_QFINDF 'NUMBER-OF-ARGS 4) 
(FLAG '(QSUMRECURSION_QFINDF) 'OPFN) 
(PUT 'QSUMRECURSION_QFINDF 'DEFINED-ON-LINE '1393) 
(PUT 'QSUMRECURSION_QFINDF 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'QSUMRECURSION_QFINDF 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE QSUMRECURSION_QFINDF (PQR Q QK SIGMA_VAR)
    (PROG (*FACTOR *EXP *LIMITEDFACTORS *MCD *CRAMER PP QQ RR D VAR F A I EQN
           SOLU)
      (AEVAL (LIST 'TIMING 'QFINDF))
      (AEVAL (ON (LIST 'EXP 'MCD)))
      (SETQ PP (AEVAL (LIST 'PART PQR 1)))
      (SETQ QQ (AEVAL (LIST 'PART PQR 2)))
      (SETQ RR (AEVAL (LIST 'PART PQR 3)))
      (SETQ D (AEVAL (LIST 'QGOSPER_QDEGREEBOUND PP QQ RR Q QK)))
      (AEVAL (LIST 'TRACE_QSUM "degreebounds:" D))
      (COND
       ((EVALEQUAL (AEVAL D) (AEVAL (LIST 'LIST)))
        (RETURN (PROGN (AEVAL (LIST 'TIMING 'QFINDF)) (AEVAL (LIST 'LIST))))))
      (SETQ SOLU
              (AEVAL
               (LIST 'QSUMRECURSION_QFINDF_EQUATIONS PP QQ RR D Q QK
                     SIGMA_VAR)))
      (AEVAL (LIST 'TIMING 'QFINDF))
      (RETURN (AEVAL SOLU)))) 
(PUT 'QSUMRECURSION_RANGE 'NUMBER-OF-ARGS 1) 
(PUT 'QSUMRECURSION_RANGE 'DEFINED-ON-LINE '1412) 
(PUT 'QSUMRECURSION_RANGE 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'QSUMRECURSION_RANGE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE QSUMRECURSION_RANGE (X)
    (PROG (LO HI)
      (COND
       ((OR (NEQ (LENGTH QSUMRECURSION_RECRANGE*) 3)
            (NOT
             (AND (PAIRP QSUMRECURSION_RECRANGE*)
                  (EQUAL (CAR QSUMRECURSION_RECRANGE*) 'LIST))))
        (PROGN
         (PROGN
          (PRIN2 "Global variable qsumrecursion_recrange!* must be a list")
          NIL)
         (PROGN (PRIN2 "of two positive integers: {lo,hi} with lo<=hi.") NIL)
         (REDERR "Invalid value of qsumrecursion_recrange!*")
         NIL)))
      (SETQ LO (CADR QSUMRECURSION_RECRANGE*))
      (SETQ HI (CADDR QSUMRECURSION_RECRANGE*))
      (COND
       ((NOT (AND (FIXP LO) (FIXP HI) (LESSP 0 LO) (LEQ LO HI)))
        (PROGN
         (PROGN
          (PRIN2 "Global variable qsumrecursion_recrange!* must be a list")
          NIL)
         (PROGN (PRIN2 "of two positive integers: {lo,hi} with lo<=hi.") NIL)
         (REDERR "Invalid value of qsumrecursion_recrange!*")
         NIL)))
      (COND ((NULL X) (RETURN (LIST 'LIST LO HI))))
      (COND ((NEQ (LENGTH X) 1) (REDERR "Wrong type of arguments.")))
      (SETQ X (CAR X))
      (COND ((AND (FIXP X) (GREATERP X 0)) (RETURN (LIST 'LIST X X))))
      (COND
       ((OR (ATOM X) (NEQ (CAR X) 'LIST) (NEQ (LENGTH X) 3))
        (REDERR "Wrong type of arguments.")))
      (SETQ X (CDR X))
      (SETQ LO (CAR X))
      (SETQ HI (CDR X))
      (COND
       ((NOT (AND (FIXP LO) (FIXP HI) (LEQ LO HI) (LESSP 0 LO)))
        (REDERR "Wrong type of arguments.")))
      (RETURN (LIST 'LIST LO HI)))) 
(PUT 'QSUMRECURSION_QHYPER 'NUMBER-OF-ARGS 1) 
(PUT 'QSUMRECURSION_QHYPER 'DEFINED-ON-LINE '1445) 
(PUT 'QSUMRECURSION_QHYPER 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'QSUMRECURSION_QHYPER 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE QSUMRECURSION_QHYPER (ARG)
    (PROG (NU DE Q Z N)
      (COND ((LESSP (LENGTH ARG) 5) (RETURN NIL)))
      (SETQ NU (CAR ARG))
      (COND ((OR (ATOM NU) (NEQ (CAR NU) 'LIST)) (RETURN NIL)))
      (SETQ DE (CADR ARG))
      (COND ((OR (ATOM DE) (NEQ (CAR DE) 'LIST)) (RETURN NIL)))
      (SETQ ARG (CDDR ARG))
      (SETQ Q (CAR ARG))
      (COND
       ((NOT (IDP Q))
        (COND
         ((OR (AND (ATOM Q) (NEQ (CAR Q) 'EXPT)) (NOT (IDP (CADR Q)))
              (NOT (FIXP (CADDR Q))))
          (RETURN NIL)))))
      (SETQ Z (CADR ARG))
      (SETQ N (CADDR ARG))
      (COND
       ((NOT
         (OR (IDP N) (AND (EQUAL (LENGTH N) 2) (IDP (CAR N)) (IDP (CADR N)))))
        (RETURN NIL)))
      (RETURN T))) 
(PUT 'QSUMRECURSION 'NUMBER-OF-ARGS 1) 
(PUT 'QSUMRECURSION 'DEFINED-ON-LINE '1467) 
(PUT 'QSUMRECURSION 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'QSUMRECURSION 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE QSUMRECURSION (ARG)
    (PROG (NARGS F Q K N RECRANGE PREFAC NU DE Z FUNC)
      (SETQ ARG
              (PROG (J FORALL-RESULT FORALL-ENDPTR)
                (SETQ J ARG)
                (COND ((NULL J) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS ((LAMBDA (J) (REVAL1 J T)) (CAR J))
                                      NIL)))
               LOOPLABEL
                (SETQ J (CDR J))
                (COND ((NULL J) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        (CONS ((LAMBDA (J) (REVAL1 J T)) (CAR J)) NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (SETQ NARGS (LENGTH ARG))
      (COND
       ((OR (LESSP NARGS 4) (LESSP 7 NARGS))
        (REDERR "Wrong number of arguments.")))
      (SETQ Q (CADR ARG))
      (COND
       ((IDP Q)
        (PROG ()
          (SETQ F (CAR ARG))
          (SETQ ARG (CDDR ARG))
          (SETQ K (CAR ARG))
          (SETQ N (CADR ARG))
          (COND
           ((AND (NOT (IDP K))
                 (NOT
                  (OR (IDP N)
                      (AND (EQUAL (LENGTH N) 2) (IDP (CAR N))
                           (IDP (CADR N))))))
            (REDERR "Wrong type of arguments.")))
          (COND ((IDP N) (SETQ FUNC 'SUMM))
                (T (PROG () (SETQ FUNC (CAR N)) (SETQ N (CADR N)))))
          (SETQ RECRANGE (QSUMRECURSION_RANGE (CDDR ARG)))))
       ((QSUMRECURSION_QHYPER ARG)
        (PROG ()
          (SETQ NU (CAR ARG))
          (SETQ DE (CADR ARG))
          (SETQ Q (CADDR ARG))
          (SETQ ARG (CDDDR ARG))
          (SETQ Z (CAR ARG))
          (SETQ K (GENSYM))
          (SETQ N (CADR ARG))
          (COND ((IDP N) (SETQ FUNC 'SUMM))
                (T (PROG () (SETQ FUNC (CAR N)) (SETQ N (CADR N)))))
          (SETQ F (QPHIHYPERTERM NU DE Q Z K))
          (COND ((NOT (IDP Q)) (SETQ Q (CADR Q))))
          (SETQ RECRANGE (QSUMRECURSION_RANGE (CDDR ARG)))))
       ((QSUMRECURSION_QHYPER (CDR ARG))
        (PROG ()
          (SETQ PREFAC (CAR ARG))
          (SETQ ARG (CDR ARG))
          (SETQ NU (CAR ARG))
          (SETQ DE (CADR ARG))
          (SETQ Q (CADDR ARG))
          (SETQ ARG (CDDDR ARG))
          (SETQ Z (CAR ARG))
          (SETQ K (GENSYM))
          (SETQ N (CADR ARG))
          (COND ((IDP N) (SETQ FUNC 'SUMM))
                (T (PROG () (SETQ FUNC (CAR N)) (SETQ N (CADR N)))))
          (SETQ F (QPHIHYPERTERM NU DE Q Z K))
          (SETQ F (REVAL1 (LIST 'TIMES PREFAC F) NIL))
          (COND ((NOT (IDP Q)) (SETQ Q (CADR Q))))
          (SETQ RECRANGE (QSUMRECURSION_RANGE (CDDR ARG)))))
       (T (REDERR "Wrong type of arguments.")))
      (SETQ F (QSUMRECURSION_EVAL F Q K FUNC N RECRANGE))
      (RETURN F))) 
(PUT 'QSUMRECURSION 'PSOPFN 'QSUMRECURSION) 
(PUT 'QGOSPER 'NUMBER-OF-ARGS 1) 
(PUT 'QGOSPER 'DEFINED-ON-LINE '1541) 
(PUT 'QGOSPER 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'QGOSPER 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE QGOSPER (ARG)
    (PROG (F Q K M N)
      (SETQ ARG
              (PROG (J FORALL-RESULT FORALL-ENDPTR)
                (SETQ J ARG)
                (COND ((NULL J) (RETURN NIL)))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS ((LAMBDA (J) (REVAL1 J T)) (CAR J))
                                      NIL)))
               LOOPLABEL
                (SETQ J (CDR J))
                (COND ((NULL J) (RETURN FORALL-RESULT)))
                (RPLACD FORALL-ENDPTR
                        (CONS ((LAMBDA (J) (REVAL1 J T)) (CAR J)) NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (COND
       ((AND (NEQ (LENGTH ARG) 3) (NEQ (LENGTH ARG) 5))
        (REDERR "Wrong number of arguments.")))
      (SETQ F (CAR ARG))
      (SETQ Q (CADR ARG))
      (SETQ K (CADDR ARG))
      (COND
       ((OR (NOT (IDP Q)) (NOT (IDP K))) (REDERR "Wrong type of arguments.")))
      (COND
       ((FREEOF F K)
        (PROGN
         (PROGN
          (PRIN2 "WARNING: Summand is independent of summation variable.")
          NIL)
         (REDERR "No q-hypergeometric antidifference exists.")
         NIL)))
      (SETQ ARG (CDDDR ARG))
      (COND
       ((NOT (NULL ARG)) (PROG () (SETQ M (CAR ARG)) (SETQ N (CADR ARG)))))
      (SETQ F (QGOSPER_EVAL F Q K))
      (COND
       ((NOT (NULL ARG))
        (PROG ()
          (SETQ F (SIMP F))
          (COND
           (*QGOSPER_DOWN (SETQ M (REVAL1 (LIST 'PLUS M (LIST 'MINUS 1)) NIL)))
           (T (SETQ N (REVAL1 (LIST 'PLUS N 1) NIL))))
          (SETQ F
                  (ADDSQ (SUBSQ F (LIST (CONS K N)))
                         (NEGSQ (SUBSQ F (LIST (CONS K M))))))
          (SETQ F (MK*SQ F)))))
      (RETURN F))) 
(PUT 'QGOSPER 'PSOPFN 'QGOSPER) 
(PUT 'QGOSPER_EVAL 'NUMBER-OF-ARGS 3) 
(FLAG '(QGOSPER_EVAL) 'OPFN) 
(PUT 'QGOSPER_EVAL 'DEFINED-ON-LINE '1580) 
(PUT 'QGOSPER_EVAL 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'QGOSPER_EVAL 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE QGOSPER_EVAL (A Q K)
    (PROG (*PRECISE *EXP *FACTOR *MCD QK PQR F *QSUM-SIMPEXT)
      (SETQ *QSUM-SIMPEXT (AEVAL 'T))
      (AEVAL (ON (LIST 'FACTOR 'MCD)))
      (AEVAL (OFF (LIST 'PRECISE)))
      (SETQ QK (AEVAL (GENSYM)))
      (SETQ F (AEVAL (LIST 'DOWN_QRATIO A K)))
      (COND
       ((BOOLVALUE* (REVALX *QSUM_TRACE))
        (PROGN
         (ASSGNPRI (AEVAL "Applied substitution: ") NIL 'FIRST)
         (ASSGNPRI (AEVAL (LIST 'EQUAL (LIST 'EXPT Q K) K)) NIL 'LAST))))
      (SETQ *QSUMRECURSION@SUB
              (PROGN
               (SETQ ALGLIST* (CONS NIL NIL))
               (AEVAL (LIST 'LIST (LIST 'EQUAL QK K)))))
      (AEVAL
       (LIST 'TRACE_QSUM "down ratio wrt. k:"
             (LIST 'SUB (LIST 'EQUAL QK K) F)))
      (SETQ F
              (AEVAL
               (LIST 'WHEREEXP
                     (LIST 'LIST (LIST 'REPLACEBY (LIST 'EXPT Q K) QK)) F)))
      (COND
       ((NOT (FREEOF (REVALX F) (REVALX K)))
        (AEVAL
         (REDERR (REVALX "Input term is probably not q-hypergeometric.")))))
      (SETQ PQR
              (AEVAL
               (LIST 'QGOSPER_QUPDATE 1 (LIST 'NUM F) (LIST 'DEN F) Q QK)))
      (SETQ F (AEVAL (LIST 'QGOSPER_QFINDF PQR Q QK)))
      (COND
       ((EVALEQUAL (AEVAL F) (AEVAL (LIST 'LIST)))
        (AEVAL
         (REDERR (REVALX "No q-hypergeometric antidifference exists.")))))
      (COND
       ((BOOLVALUE* (REVALX *QGOSPER_DOWN))
        (SETQ F
                (AEVAL
                 (LIST 'TIMES
                       (LIST 'SUB
                             (LIST 'EQUAL QK (LIST 'EXPT Q (LIST 'PLUS K 1)))
                             (LIST 'PART PQR 2))
                       (LIST 'SUB (LIST 'EQUAL QK (LIST 'EXPT Q K))
                             (LIST 'QUOTIENT F (LIST 'PART PQR 1)))
                       A))))
       (T
        (SETQ F
                (AEVAL
                 (LIST 'TIMES
                       (LIST 'SUB (LIST 'EQUAL QK (LIST 'EXPT Q K))
                             (LIST 'QUOTIENT (LIST 'PART PQR 3)
                                   (LIST 'PART PQR 1)))
                       (LIST 'SUB
                             (LIST 'EQUAL QK
                                   (LIST 'EXPT Q (LIST 'DIFFERENCE K 1)))
                             F)
                       A)))))
      (COND
       ((BOOLVALUE* (REVALX *QGOSPER_SPECIALSOL))
        (SETQ F
                (AEVAL
                 (LIST 'WHEREEXP
                       (LIST 'LIST
                             (LIST 'REPLACEBY (LIST 'ARBCOMPLEX (LIST '~ 'Z))
                                   0))
                       F)))))
      (RETURN (AEVAL F)))) 
(PUT 'QSUMRECURSION_DENOM_LCM 'NUMBER-OF-ARGS 1) 
(FLAG '(QSUMRECURSION_DENOM_LCM) 'OPFN) 
(PUT 'QSUMRECURSION_DENOM_LCM 'DEFINED-ON-LINE '1616) 
(PUT 'QSUMRECURSION_DENOM_LCM 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'QSUMRECURSION_DENOM_LCM 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE QSUMRECURSION_DENOM_LCM (DL)
    (PROG (*FACTOR *EXP *GCD *MCD G)
      (AEVAL (ON (LIST 'FACTOR 'MCD 'GCD)))
      (SETQ G
              (AEVAL
               (LIST 'TIMES (LIST 'PART DL 1)
                     (LIST 'QUOTIENT (LIST 'PART DL 2)
                           (LIST 'GCD (LIST 'PART DL 1) (LIST 'PART DL 2))))))
      (COND ((EVALEQUAL (AEVAL (LIST 'LENGTH DL)) 2) (RETURN (AEVAL G))))
      (SETQ DL
              (PROG (J FORALL-RESULT FORALL-ENDPTR)
                (SETQ J 3)
                (COND
                 ((|AMINUSP:| (LIST 'DIFFERENCE (AEVAL* (LIST 'LENGTH DL)) J))
                  (RETURN (MAKELIST NIL))))
                (SETQ FORALL-RESULT (SETQ FORALL-ENDPTR (CONS J NIL)))
               LOOPLABEL
                (SETQ J
                        ((LAMBDA (FORALL-RESULT)
                           (AEVAL* (LIST 'PLUS FORALL-RESULT 1)))
                         J))
                (COND
                 ((|AMINUSP:| (LIST 'DIFFERENCE (AEVAL* (LIST 'LENGTH DL)) J))
                  (RETURN (CONS 'LIST FORALL-RESULT))))
                (RPLACD FORALL-ENDPTR (CONS J NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (RETURN (AEVAL (LIST 'QSUMRECURSION_DENOM_LCM (LIST 'CONS G DL)))))) 
(PUT 'QSUMRECURSION_DENOM 'NUMBER-OF-ARGS 2) 
(FLAG '(QSUMRECURSION_DENOM) 'OPFN) 
(PUT 'QSUMRECURSION_DENOM 'DEFINED-ON-LINE '1628) 
(PUT 'QSUMRECURSION_DENOM 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'QSUMRECURSION_DENOM 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE QSUMRECURSION_DENOM (REQ VARS)
    (PROG (*FACTOR *EXP *GCD *MCD NUMER DENOM)
      (AEVAL (ON (LIST 'FACTOR 'MCD 'GCD)))
      (SETQ NUMER
              (PROG (J FORALL-RESULT FORALL-ENDPTR)
                (SETQ J (GETRLIST (AEVAL VARS)))
                (COND ((NULL J) (RETURN (MAKELIST NIL))))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS
                                 ((LAMBDA (J)
                                    (AEVAL
                                     (LIST 'TIMES (LIST 'COEFFN REQ J 1) J)))
                                  (CAR J))
                                 NIL)))
               LOOPLABEL
                (SETQ J (CDR J))
                (COND ((NULL J) (RETURN (CONS 'LIST FORALL-RESULT))))
                (RPLACD FORALL-ENDPTR
                        (CONS
                         ((LAMBDA (J)
                            (AEVAL (LIST 'TIMES (LIST 'COEFFN REQ J 1) J)))
                          (CAR J))
                         NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (SETQ DENOM
              (PROG (J FORALL-RESULT FORALL-ENDPTR)
                (SETQ J (GETRLIST (AEVAL NUMER)))
                (COND ((NULL J) (RETURN (MAKELIST NIL))))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS
                                 ((LAMBDA (J) (AEVAL (LIST 'DEN J))) (CAR J))
                                 NIL)))
               LOOPLABEL
                (SETQ J (CDR J))
                (COND ((NULL J) (RETURN (CONS 'LIST FORALL-RESULT))))
                (RPLACD FORALL-ENDPTR
                        (CONS ((LAMBDA (J) (AEVAL (LIST 'DEN J))) (CAR J))
                              NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (SETQ DENOM (AEVAL (LIST 'QSUMRECURSION_DENOM_LCM DENOM)))
      (SETQ NUMER
              (PROG (J FORALL-RESULT FORALL-ENDPTR)
                (SETQ J (GETRLIST (AEVAL NUMER)))
                (COND ((NULL J) (RETURN (MAKELIST NIL))))
                (SETQ FORALL-RESULT
                        (SETQ FORALL-ENDPTR
                                (CONS
                                 ((LAMBDA (J) (AEVAL (LIST 'TIMES J DENOM)))
                                  (CAR J))
                                 NIL)))
               LOOPLABEL
                (SETQ J (CDR J))
                (COND ((NULL J) (RETURN (CONS 'LIST FORALL-RESULT))))
                (RPLACD FORALL-ENDPTR
                        (CONS
                         ((LAMBDA (J) (AEVAL (LIST 'TIMES J DENOM))) (CAR J))
                         NIL))
                (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                (GO LOOPLABEL)))
      (AEVAL (OFF (LIST 'FACTOR)))
      (AEVAL (OFF (LIST 'EXP)))
      (RETURN
       (PROG (J FORALL-RESULT)
         (SETQ J (GETRLIST (AEVAL NUMER)))
         (SETQ FORALL-RESULT 0)
        LAB1
         (COND ((NULL J) (RETURN FORALL-RESULT)))
         (SETQ FORALL-RESULT
                 (AEVAL*
                  (LIST 'PLUS ((LAMBDA (J) (AEVAL J)) (CAR J)) FORALL-RESULT)))
         (SETQ J (CDR J))
         (GO LAB1))))) 
(PUT 'QSUMRECURSION_QRATIOS 'NUMBER-OF-ARGS 6) 
(FLAG '(QSUMRECURSION_QRATIOS) 'OPFN) 
(PUT 'QSUMRECURSION_QRATIOS 'DEFINED-ON-LINE '1642) 
(PUT 'QSUMRECURSION_QRATIOS 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'QSUMRECURSION_QRATIOS 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE QSUMRECURSION_QRATIOS (F Q K QK N QN)
    (PROG (*FACTOR *EXP *MCD *GCD *LIMITEDFACTORS KN_RATIO)
      (AEVAL (ON (LIST 'FACTOR 'MCD)))
      (AEVAL (OFF (LIST 'GCD 'LIMITEDFACTORS)))
      (AEVAL (LIST 'TIMING 'QRATIOS))
      (SETQ KN_RATIO
              (AEVAL (LIST 'LIST (LIST 'DOWN_QRATIO F K) (LIST 'QRATIO F N))))
      (SETQ KN_RATIO
              (AEVAL
               (LIST 'WHEREEXP
                     (LIST 'LIST
                           (LIST 'LIST (LIST 'REPLACEBY (LIST 'EXPT Q K) QK)
                                 (LIST 'REPLACEBY (LIST 'EXPT Q N) QN)))
                     KN_RATIO)))
      (SETQ *QSUMRECURSION@SUB
              (PROGN
               (SETQ ALGLIST* (CONS NIL NIL))
               (AEVAL (LIST 'LIST (LIST 'EQUAL QK K) (LIST 'EQUAL QN N)))))
      (COND
       ((NOT (FREEOF (REVALX KN_RATIO) (REVALX K)))
        (AEVAL
         (REDERR (REVALX "Input term is probably not q-hypergeometric.")))))
      (AEVAL
       (LIST 'TRACE_QSUM "Applied the substitutions:"
             (LIST 'LIST (LIST 'REPLACEBY (LIST 'EXPT Q K) K)
                   (LIST 'REPLACEBY (LIST 'EXPT Q N) N))))
      (AEVAL (LIST 'TRACE_QSUM "down ratio wrt. k:" (LIST 'PART KN_RATIO 1)))
      (AEVAL (LIST 'TRACE_QSUM "up ratio wrt. n:" (LIST 'PART KN_RATIO 2)))
      (AEVAL (LIST 'TIMING 'QRATIOS))
      (RETURN (AEVAL KN_RATIO)))) 
(PUT 'QSUMRECURSION_EVAL 'NUMBER-OF-ARGS 6) 
(FLAG '(QSUMRECURSION_EVAL) 'OPFN) 
(PUT 'QSUMRECURSION_EVAL 'DEFINED-ON-LINE '1663) 
(PUT 'QSUMRECURSION_EVAL 'DEFINED-IN-FILE 'QSUM/QSUM.RED) 
(PUT 'QSUMRECURSION_EVAL 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE QSUMRECURSION_EVAL (F Q K SUMM N RECRANGE)
    (PROG (*PRECISE *FACTOR *EXP *MCD *GCD *LIMITEDFACTORS QK QN RK RN LO HI A
           POLY SIGMALIST RECORD PQR FPOL SOLU CERT *QSUM-SIMPEXPT)
      (SETQ *QSUM-SIMPEXPT (AEVAL 'T))
      (AEVAL (LIST 'TIMING 'START))
      (AEVAL (LIST 'TIMING 'QSUMRECURSION))
      (AEVAL (ON (LIST 'FACTOR 'MCD)))
      (AEVAL (OFF (LIST 'PRECISE 'GCD 'LIMITEDFACTORS)))
      (SETQ LO (AEVAL (LIST 'PART RECRANGE 1)))
      (SETQ HI (AEVAL (LIST 'PART RECRANGE 2)))
      (SETQ QK (AEVAL (GENSYM)))
      (SETQ QN (AEVAL (GENSYM)))
      (SETQ RN (AEVAL (LIST 'QSUMRECURSION_QRATIOS F Q K QK N QN)))
      (SETQ RK (AEVAL (LIST 'PART RN 1)))
      (COND
       ((BOOLVALUE* (REVALX *QSUMRECURSION_DOWN))
        (SETQ RN
                (AEVAL
                 (LIST 'QUOTIENT 1
                       (LIST 'SUB (LIST 'EQUAL N (LIST 'DIFFERENCE N 1))
                             (LIST 'EQUAL QN (LIST 'QUOTIENT QN Q))
                             (LIST 'PART RN 2))))))
       (T (SETQ RN (AEVAL (LIST 'PART RN 2)))))
      (SETQ POLY (AEVAL 1))
      (SETQ RECORD (AEVAL 0))
      (SETQ SIGMALIST (AEVAL (LIST 'LIST)))
      (REPEAT
       (PROG ()
         (SETQ RECORD (AEVAL* (LIST 'PLUS RECORD 1)))
         (SETQ SIGMALIST
                 (AEVAL*
                  (LIST 'APPEND SIGMALIST (LIST 'LIST (INTERN (GENSYM))))))
         (COND
          ((BOOLVALUE* (REVALX *QSUMRECURSION_DOWN))
           (SETQ A
                   (PROG (L FORALL-RESULT)
                     (SETQ L 0)
                     (SETQ FORALL-RESULT 1)
                    LAB1
                     (COND
                      ((|AMINUSP:|
                        (LIST 'DIFFERENCE (AEVAL* (LIST 'DIFFERENCE RECORD 1))
                              L))
                       (RETURN FORALL-RESULT)))
                     (SETQ FORALL-RESULT
                             (AEVAL*
                              (LIST 'TIMES
                                    (AEVAL*
                                     (LIST 'SUB
                                           (LIST 'LIST
                                                 (LIST 'EQUAL N
                                                       (LIST 'DIFFERENCE N L))
                                                 (LIST 'EQUAL QN
                                                       (LIST 'QUOTIENT QN
                                                             (LIST 'EXPT Q
                                                                   L))))
                                           RN))
                                    FORALL-RESULT)))
                     (SETQ L
                             ((LAMBDA (FORALL-RESULT)
                                (AEVAL* (LIST 'PLUS FORALL-RESULT 1)))
                              L))
                     (GO LAB1))))
          (T
           (SETQ A
                   (PROG (L FORALL-RESULT)
                     (SETQ L 0)
                     (SETQ FORALL-RESULT 1)
                    LAB1
                     (COND
                      ((|AMINUSP:|
                        (LIST 'DIFFERENCE (AEVAL* (LIST 'DIFFERENCE RECORD 1))
                              L))
                       (RETURN FORALL-RESULT)))
                     (SETQ FORALL-RESULT
                             (AEVAL*
                              (LIST 'TIMES
                                    (AEVAL*
                                     (LIST 'SUB
                                           (LIST 'LIST
                                                 (LIST 'EQUAL N
                                                       (LIST 'PLUS N L))
                                                 (LIST 'EQUAL QN
                                                       (LIST 'TIMES QN
                                                             (LIST 'EXPT Q
                                                                   L))))
                                           RN))
                                    FORALL-RESULT)))
                     (SETQ L
                             ((LAMBDA (FORALL-RESULT)
                                (AEVAL* (LIST 'PLUS FORALL-RESULT 1)))
                              L))
                     (GO LAB1)))))
         (AEVAL* (ON (LIST 'GCD)))
         (SETQ POLY
                 (AEVAL*
                  (LIST 'PLUS POLY
                        (LIST 'TIMES (LIST 'PART SIGMALIST RECORD) A))))
         (SETQ FPOL (AEVAL* (LIST 'LIST)))
         (COND
          ((EVALGEQ (AEVAL* RECORD) (AEVAL* LO))
           (PROG ()
             (SETQ A
                     (AEVAL*
                      (LIST 'TIMES RK
                            (LIST 'QUOTIENT
                                  (LIST 'SUB
                                        (LIST 'EQUAL QK (LIST 'QUOTIENT QK Q))
                                        (LIST 'DEN POLY))
                                  (LIST 'DEN POLY)))))
             (AEVAL* (OFF (LIST 'GCD)))
             (SETQ PQR
                     (AEVAL*
                      (LIST 'QGOSPER_QUPDATE (LIST 'NUM POLY) (LIST 'NUM A)
                            (LIST 'DEN A) Q QK)))
             (SETQ FPOL
                     (AEVAL*
                      (LIST 'QSUMRECURSION_QFINDF PQR Q QK SIGMALIST)))))))
       (OR (EVALNEQ (AEVAL* FPOL) (AEVAL* (LIST 'LIST)))
           (EVALEQUAL (AEVAL* RECORD) (AEVAL* HI))))
      (COND
       ((EVALEQUAL (AEVAL FPOL) (AEVAL (LIST 'LIST)))
        (AEVAL (REDERR (REVALX "Found no recursion. Use higher order.")))))
      (SETQ SOLU (AEVAL (LIST 'PART FPOL 2)))
      (SETQ FPOL (AEVAL (LIST 'PART FPOL 1)))
      (COND
       ((BOOLVALUE* (REVALX *QSUMRECURSION_DOWN))
        (SETK 'REC
              (AEVAL
               (LIST 'PLUS (LIST SUMM N)
                     (PROG (J FORALL-RESULT)
                       (SETQ J 1)
                       (SETQ FORALL-RESULT 0)
                      LAB1
                       (COND
                        ((|AMINUSP:| (LIST 'DIFFERENCE (AEVAL* RECORD) J))
                         (RETURN FORALL-RESULT)))
                       (SETQ FORALL-RESULT
                               (AEVAL*
                                (LIST 'PLUS
                                      (AEVAL*
                                       (LIST 'TIMES (LIST 'PART SIGMALIST J)
                                             (LIST SUMM
                                                   (LIST 'DIFFERENCE N J))))
                                      FORALL-RESULT)))
                       (SETQ J
                               ((LAMBDA (FORALL-RESULT)
                                  (AEVAL* (LIST 'PLUS FORALL-RESULT 1)))
                                J))
                       (GO LAB1))))))
       (T
        (SETK 'REC
              (AEVAL
               (LIST 'PLUS (LIST SUMM N)
                     (PROG (J FORALL-RESULT)
                       (SETQ J 1)
                       (SETQ FORALL-RESULT 0)
                      LAB1
                       (COND
                        ((|AMINUSP:| (LIST 'DIFFERENCE (AEVAL* RECORD) J))
                         (RETURN FORALL-RESULT)))
                       (SETQ FORALL-RESULT
                               (AEVAL*
                                (LIST 'PLUS
                                      (AEVAL*
                                       (LIST 'TIMES (LIST 'PART SIGMALIST J)
                                             (LIST SUMM (LIST 'PLUS N J))))
                                      FORALL-RESULT)))
                       (SETQ J
                               ((LAMBDA (FORALL-RESULT)
                                  (AEVAL* (LIST 'PLUS FORALL-RESULT 1)))
                                J))
                       (GO LAB1)))))))
      (COND ((BOOLVALUE* (REVALX *QSUMRECURSION_EXP)) (AEVAL (ON (LIST 'EXP))))
            (T (AEVAL (ON (LIST 'FACTOR)))))
      (AEVAL (FACTOR (LIST SUMM)))
      (SETK 'REC (AEVAL (LIST 'SUB SOLU 'REC)))
      (COND
       ((BOOLVALUE* (REVALX *QSUMRECURSION_CERTIFICATE))
        (PROG ()
          (SETQ PQR (AEVAL (LIST 'SUB SOLU PQR)))
          (SETQ CERT
                  (AEVAL (LIST 'TIMES (LIST 'DEN 'REC) (LIST 'SUB SOLU POLY))))
          (COND
           ((BOOLVALUE* (REVALX *QGOSPER_DOWN))
            (PROGN
             (SETQ CERT
                     (AEVAL
                      (LIST 'TIMES CERT
                            (LIST 'SUB (LIST 'EQUAL QK (LIST 'TIMES QK Q))
                                  (LIST 'PART PQR 2))
                            (LIST 'QUOTIENT FPOL (LIST 'PART PQR 1)))))
             (SETQ A (AEVAL 'DOWNWARD_ANTIDIFFERENCE))
             (AEVAL 'NIL)))
           (T
            (PROGN
             (SETQ CERT
                     (AEVAL
                      (LIST 'TIMES CERT
                            (LIST 'QUOTIENT (LIST 'PART PQR 3)
                                  (LIST 'PART PQR 1))
                            (LIST 'SUB (LIST 'EQUAL QK (LIST 'QUOTIENT QK Q))
                                  FPOL))))
             (SETQ A (AEVAL 'UPWARD_ANTIDIFFERENCE))
             (AEVAL 'NIL))))
          (SETK 'REC (AEVAL (LIST 'LIST (LIST 'NUM 'REC) CERT F K A)))))
       (T (SETK 'REC (AEVAL (LIST 'NUM 'REC)))))
      (AEVAL (LIST 'TIMING 'QSUMRECURSION))
      (COND
       ((BOOLVALUE* (REVALX *QSUMRECURSION_PROFILE))
        (AEVAL (LIST 'QSUMRECURSION_QPROFILE))))
      (RETURN
       (AEVAL
        (LIST 'SUB (LIST 'EQUAL QN (LIST 'EXPT Q N))
              (LIST 'EQUAL QK (LIST 'EXPT Q K)) 'REC))))) 
(SETQ *REDEFMSG (NTH *QSUMRECURSION@SUB 1)) 
(SETQ *ECHO (NTH *QSUMRECURSION@SUB 2)) 
(SETQ *OUTPUT (NTH *QSUMRECURSION@SUB 3)) 
(ENDMODULE) 