(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'HF)) 
(PUT 'CALI 'HF=HF 'HF=WHILB1) 
(FLAG '(HFTESTVERSION) 'OPFN) 
(PUT 'HFTESTVERSION 'NUMBER-OF-ARGS 1) 
(PUT 'HFTESTVERSION 'DEFINED-ON-LINE '58) 
(PUT 'HFTESTVERSION 'DEFINED-IN-FILE 'CALI/HF.RED) 
(PUT 'HFTESTVERSION 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE HFTESTVERSION (N)
    (COND ((MEMBER N (LIST 1 2)) (PUT 'CALI 'HF=HF (MKID 'HF=WHILB N))))) 
(PUT 'HF=WHILB1 'NUMBER-OF-ARGS 2) 
(PUT 'HF=WHILB1 'DEFINED-ON-LINE '64) 
(PUT 'HF=WHILB1 'DEFINED-IN-FILE 'CALI/HF.RED) 
(PUT 'HF=WHILB1 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE HF=WHILB1 (M W)
    (COND ((NULL M) (DP_FI 1))
          (T
           (PROG (M1 M2)
             (PROG (X)
               (SETQ X M)
              LAB
               (COND ((NULL X) (RETURN NIL)))
               ((LAMBDA (X)
                  (COND ((MO_LINEAR X) (SETQ M1 (CONS X M1)))
                        (T (SETQ M2 (CONS X M2)))))
                (CAR X))
               (SETQ X (CDR X))
               (GO LAB))
             (COND ((NULL M2) (RETURN (HF=WHILBMON M1 W)))
                   ((NULL (CDR M2))
                    (RETURN (HF=WHILBMON (CONS (CAR M2) M1) W)))
                   ((HF=POWERS M2) (RETURN (HF=WHILBMON (APPEND M1 M2) W)))
                   (T
                    (RETURN
                     (DP_PROD (HF=WHILBMON M1 W)
                      (DP_DIFF (HF=WHILB1 (CDR M2) W)
                       (DP_TIMES_MO (MO_WCONVERT (CAR M2) W)
                        (HF=WHILB1 (MOID_QUOT (CDR M2) (CAR M2)) W))))))))))) 
(PUT 'HF=WHILBMON 'NUMBER-OF-ARGS 2) 
(PUT 'HF=WHILBMON 'DEFINED-ON-LINE '80) 
(PUT 'HF=WHILBMON 'DEFINED-IN-FILE 'CALI/HF.RED) 
(PUT 'HF=WHILBMON 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE HF=WHILBMON (M W)
    (COND ((NULL M) (DP_FI 1))
          (T
           (PROG (P)
             (SETQ M
                     (PROG (X FORALL-RESULT FORALL-ENDPTR)
                       (SETQ X M)
                       (COND ((NULL X) (RETURN NIL)))
                       (SETQ FORALL-RESULT
                               (SETQ FORALL-ENDPTR
                                       (CONS
                                        ((LAMBDA (X)
                                           (DP_SUM (DP_FI 1)
                                            (LIST
                                             (DP_TERM (CALI_BC_FI (MINUS 1))
                                              (MO_WCONVERT X W)))))
                                         (CAR X))
                                        NIL)))
                      LOOPLABEL
                       (SETQ X (CDR X))
                       (COND ((NULL X) (RETURN FORALL-RESULT)))
                       (RPLACD FORALL-ENDPTR
                               (CONS
                                ((LAMBDA (X)
                                   (DP_SUM (DP_FI 1)
                                    (LIST
                                     (DP_TERM (CALI_BC_FI (MINUS 1))
                                      (MO_WCONVERT X W)))))
                                 (CAR X))
                                NIL))
                       (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                       (GO LOOPLABEL)))
             (SETQ P (CAR M))
             (PROG (X)
               (SETQ X (CDR M))
              LAB
               (COND ((NULL X) (RETURN NIL)))
               ((LAMBDA (X) (SETQ P (DP_PROD P X))) (CAR X))
               (SETQ X (CDR X))
               (GO LAB))
             (RETURN P))))) 
(PUT 'HF=POWERS 'NUMBER-OF-ARGS 1) 
(PUT 'HF=POWERS 'DEFINED-ON-LINE '92) 
(PUT 'HF=POWERS 'DEFINED-IN-FILE 'CALI/HF.RED) 
(PUT 'HF=POWERS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE HF=POWERS (M)
    (COND ((NULL M) T)
          (T
           (AND (LESSP (LENGTH (MO_SUPPORT (CAR M))) 2) (HF=POWERS (CDR M)))))) 
(PUT 'HF=WHILB2 'NUMBER-OF-ARGS 2) 
(PUT 'HF=WHILB2 'DEFINED-ON-LINE '109) 
(PUT 'HF=WHILB2 'DEFINED-IN-FILE 'CALI/HF.RED) 
(PUT 'HF=WHILB2 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE HF=WHILB2 (M W)
    (COND ((NULL M) (DP_FI 1))
          (T
           (PROG (M1 M2 X P)
             (PROG (X)
               (SETQ X M)
              LAB
               (COND ((NULL X) (RETURN NIL)))
               ((LAMBDA (X)
                  (COND ((MO_LINEAR X) (SETQ M1 (CONS X M1)))
                        (T (SETQ M2 (CONS X M2)))))
                (CAR X))
               (SETQ X (CDR X))
               (GO LAB))
             (COND ((NULL M2) (RETURN (HF=WHILBMON M1 W)))
                   ((NULL (CDR M2))
                    (RETURN (HF=WHILBMON (CONS (CAR M2) M1) W)))
                   ((HF=POWERS M2) (RETURN (HF=WHILBMON (APPEND M1 M2) W)))
                   (T
                    (PROG (X)
                      (SETQ X (MO_FROM_A (CAR (MO_SUPPORT (CAR M2)))))
                      (SETQ P
                              (DP_PROD (HF=WHILBMON M1 W)
                               (DP_SUM (HF=WHILB2 (MOID_RED (CONS X M2)) W)
                                (DP_TIMES_MO (MO_WCONVERT X W)
                                 (HF=WHILB2 (MOID_QUOT M2 X) W))))))))
             (RETURN P))))) 
(PUT 'HF_WHILB3 'NUMBER-OF-ARGS 2) 
(PUT 'HF_WHILB3 'DEFINED-ON-LINE '129) 
(PUT 'HF_WHILB3 'DEFINED-IN-FILE 'CALI/HF.RED) 
(PUT 'HF_WHILB3 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE HF_WHILB3 (U W)
    (PROG (SGN P)
      (SETQ SGN T)
      (PROG (X)
        (SETQ X U)
       LAB
        (COND ((NULL X) (RETURN NIL)))
        ((LAMBDA (X)
           (PROGN
            (COND (SGN (SETQ P (DP_SUM P (HF=WHILB3 X W))))
                  (T (SETQ P (DP_DIFF P (HF=WHILB3 X W)))))
            (SETQ SGN (NOT SGN))
            NIL))
         (CAR X))
        (SETQ X (CDR X))
        (GO LAB))
      (RETURN P))) 
(PUT 'HF=WHILB3 'NUMBER-OF-ARGS 2) 
(PUT 'HF=WHILB3 'DEFINED-ON-LINE '140) 
(PUT 'HF=WHILB3 'DEFINED-IN-FILE 'CALI/HF.RED) 
(PUT 'HF=WHILB3 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE HF=WHILB3 (U W)
    ((LAMBDA (C)
       (COND
        ((EQUAL (LENGTH C) (DPMAT_COLS U))
         (PROG (P)
           (PROG (X)
             (SETQ X C)
            LAB
             (COND ((NULL X) (RETURN NIL)))
             ((LAMBDA (X)
                (SETQ P
                        (DP_SUM P
                         (LIST
                          (DP_TERM (CALI_BC_FI 1) (MO_WCONVERT (CDR X) W))))))
              (CAR X))
             (SETQ X (CDR X))
             (GO LAB))
           (RETURN P)))
        (T (DP_FI (MAX 1 (DPMAT_COLS U))))))
     (DPMAT_COLDEGS U))) 
(PUT 'HF_WHILB 'NUMBER-OF-ARGS 2) 
(PUT 'HF_WHILB 'DEFINED-ON-LINE '152) 
(PUT 'HF_WHILB 'DEFINED-IN-FILE 'CALI/HF.RED) 
(PUT 'HF_WHILB 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE HF_WHILB (M WT)
    ((LAMBDA (CALI=DEGREES)
       (PROG (FN W LT P P1 I)
         (SETQ I 0)
         (COND
          ((NULL (SETQ FN (GET 'CALI 'HF=HF)))
           (REDERR "No version for the Hilbert function algorithm chosen")))
         (COND
          ((EQUAL (DPMAT_COLS M) 0)
           (RETURN (APPLY2 FN (MOID_FROM_BAS (DPMAT_LIST M)) WT))))
         (SETQ LT (MOID_FROM_DPMAT M))
         (PROG (I)
           (SETQ I 1)
          LAB
           (COND ((MINUSP (DIFFERENCE (DPMAT_COLS M) I)) (RETURN NIL)))
           (PROGN
            (SETQ P1 (ATSOC I LT))
            (COND ((NULL P1) (REDERR "WHILB with wrong leading term list"))
                  (T (SETQ P1 (APPLY2 FN (CDR P1) WT))))
            (SETQ W (ATSOC I CALI=DEGREES))
            (COND (W (SETQ P1 (DP_TIMES_MO (MO_WCONVERT (CDR W) WT) P1))))
            (SETQ P (DP_SUM P P1))
            NIL)
           (SETQ I (PLUS2 I 1))
           (GO LAB))
         (RETURN P)))
     (DPMAT_COLDEGS M))) 
(PUT 'HF=WHILB2HS 'NUMBER-OF-ARGS 2) 
(PUT 'HF=WHILB2HS 'DEFINED-ON-LINE '173) 
(PUT 'HF=WHILB2HS 'DEFINED-IN-FILE 'CALI/HF.RED) 
(PUT 'HF=WHILB2HS 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE HF=WHILB2HS (H W)
    (PROG (A G DEN NUM)
      (SETQ NUM (CAR (SIMP (DP_2A H))))
      (SETQ DEN 1)
      (PROG (X)
        (SETQ X (RING_NAMES CALI=BASERING))
       LAB
        (COND ((NULL X) (RETURN NIL)))
        ((LAMBDA (X)
           (PROGN
            (SETQ A (CAR (SIMP (DP_2A (HF=WHILBMON (LIST (MO_FROM_A X)) W)))))
            (SETQ G (GCDF* NUM A))
            (SETQ NUM ((LAMBDA (*EXP) (QUOTF1 NUM G)) T))
            (SETQ DEN
                    ((LAMBDA (G542)
                       (COND (*PHYSOP-LOADED (PHYSOP-MULTF DEN G542))
                             (T (POLY-MULTF DEN G542))))
                     ((LAMBDA (*EXP) (QUOTF1 A G)) T)))
            NIL))
         (CAR X))
        (SETQ X (CDR X))
        (GO LAB))
      (RETURN (CONS NUM DEN)))) 
(PUT 'WEIGHTEDHILBERTSERIES* 'NUMBER-OF-ARGS 2) 
(PUT 'WEIGHTEDHILBERTSERIES* 'DEFINED-ON-LINE '188) 
(PUT 'WEIGHTEDHILBERTSERIES* 'DEFINED-IN-FILE 'CALI/HF.RED) 
(PUT 'WEIGHTEDHILBERTSERIES* 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE WEIGHTEDHILBERTSERIES* (M W) (HF=WHILB2HS (HF_WHILB M W) W)) 
(PUT 'HF_WHS_FROM_RESOLUTION 'NUMBER-OF-ARGS 2) 
(PUT 'HF_WHS_FROM_RESOLUTION 'DEFINED-ON-LINE '192) 
(PUT 'HF_WHS_FROM_RESOLUTION 'DEFINED-IN-FILE 'CALI/HF.RED) 
(PUT 'HF_WHS_FROM_RESOLUTION 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE HF_WHS_FROM_RESOLUTION (U W) (HF=WHILB2HS (HF_WHILB3 U W) W)) 
(PUT 'HILBERTSERIES* 'NUMBER-OF-ARGS 1) 
(PUT 'HILBERTSERIES* 'DEFINED-ON-LINE '196) 
(PUT 'HILBERTSERIES* 'DEFINED-IN-FILE 'CALI/HF.RED) 
(PUT 'HILBERTSERIES* 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE HILBERTSERIES* (M)
    (WEIGHTEDHILBERTSERIES* M (LIST (RING_ECART CALI=BASERING)))) 
(PUT 'HF_MULT 'NUMBER-OF-ARGS 1) 
(PUT 'HF_MULT 'DEFINED-ON-LINE '202) 
(PUT 'HF_MULT 'DEFINED-IN-FILE 'CALI/HF.RED) 
(PUT 'HF_MULT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE HF_MULT (N) (PREPF (ABSF (HF=SUM_UP (CAR N))))) 
(PUT 'HF=SUM_UP 'NUMBER-OF-ARGS 1) 
(PUT 'HF=SUM_UP 'DEFINED-ON-LINE '207) 
(PUT 'HF=SUM_UP 'DEFINED-IN-FILE 'CALI/HF.RED) 
(PUT 'HF=SUM_UP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE HF=SUM_UP (F)
    (COND ((NUMBERP F) F)
          (T (HF=SUM_UP (CAR (SUBF F (LIST (CONS (CAAAR F) 1)))))))) 
(PUT 'HF_DIM 'NUMBER-OF-ARGS 1) 
(PUT 'HF_DIM 'DEFINED-ON-LINE '210) 
(PUT 'HF_DIM 'DEFINED-IN-FILE 'CALI/HF.RED) 
(PUT 'HF_DIM 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE HF_DIM (F)
    (COND ((OR (ATOM (CDR F)) (ATOM (CAR (CDR F)))) 0)
          (T
           (PROG (G X D N)
             (SETQ N 0)
             (SETQ F (CDR F))
             (SETQ X (CAAAR F))
             (SETQ N 0)
             (SETQ D (CONS (CONS (CONS X 1) (MINUS 1)) 1))
             (PROG ()
              WHILELABEL
               (COND ((NOT (NULL (CDR (SETQ G (QREMF F D))))) (RETURN NIL)))
               (PROGN (SETQ N (PLUS N 1)) (SETQ F (CAR G)))
               (GO WHILELABEL))
             (RETURN N))))) 
(PUT 'DEGREE* 'NUMBER-OF-ARGS 1) 
(PUT 'DEGREE* 'DEFINED-ON-LINE '220) 
(PUT 'DEGREE* 'DEFINED-IN-FILE 'CALI/HF.RED) 
(PUT 'DEGREE* 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE DEGREE* (M) (HF_MULT (HILBERTSERIES* M))) 
(FLAG '(WEIGHTEDHILBERTSERIES) 'OPFN) 
(PUT 'WEIGHTEDHILBERTSERIES 'NUMBER-OF-ARGS 2) 
(PUT 'WEIGHTEDHILBERTSERIES 'DEFINED-ON-LINE '225) 
(PUT 'WEIGHTEDHILBERTSERIES 'DEFINED-IN-FILE 'CALI/HF.RED) 
(PUT 'WEIGHTEDHILBERTSERIES 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE WEIGHTEDHILBERTSERIES (M W)
    (COND
     ((EQUAL *MODE 'ALGEBRAIC)
      (PROG (W1 L)
        (SETQ W1
                (PROG (X FORALL-RESULT FORALL-ENDPTR)
                  (SETQ X (CDR (REVAL1 W T)))
                  (COND ((NULL X) (RETURN NIL)))
                  (SETQ FORALL-RESULT
                          (SETQ FORALL-ENDPTR
                                  (CONS ((LAMBDA (X) (CDR X)) (CAR X)) NIL)))
                 LOOPLABEL
                  (SETQ X (CDR X))
                  (COND ((NULL X) (RETURN FORALL-RESULT)))
                  (RPLACD FORALL-ENDPTR
                          (CONS ((LAMBDA (X) (CDR X)) (CAR X)) NIL))
                  (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                  (GO LOOPLABEL)))
        (SETQ L (LENGTH (RING_NAMES CALI=BASERING)))
        (PROG (X)
          (SETQ X W1)
         LAB
          (COND ((NULL X) (RETURN NIL)))
          ((LAMBDA (X)
             (COND
              ((OR (NOT (NUMBERLISTP X)) (NEQ (LENGTH X) L))
               (TYPERR W "weight list"))))
           (CAR X))
          (SETQ X (CDR X))
          (GO LAB))
        (SETQ M (DPMAT_FROM_A (REVAL1 M T)))
        (SETQ L (MK*SQ (WEIGHTEDHILBERTSERIES* M W1)))
        (RETURN L)))
     (T (WEIGHTEDHILBERTSERIES* M W)))) 
(ENDMODULE) 