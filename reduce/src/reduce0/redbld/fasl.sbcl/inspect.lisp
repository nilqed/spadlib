(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'INSPECT)) 
(PUT 'DESCRIBE 'NUMBER-OF-ARGS 1) 
(PUT 'DESCRIBE 'DEFINED-ON-LINE '51) 
(PUT 'DESCRIBE 'DEFINED-IN-FILE 'RLISP88/INSPECT.RED) 
(PUT 'DESCRIBE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE DESCRIBE (X)
    (COND ((PAIRP X) (PROGN (PRIN2T "A dotted-pair or list") NIL))
          ((VECTORP X)
           (COND ((I&RECORDINSTP X) (I&RECORDINST X))
                 (T
                  (PROGN
                   (PRIN2 "A vector with ")
                   (PRIN1 (ADD1 (UPBV X)))
                   (PRIN2T " elements")
                   NIL))))
          ((CODEP X) (PROGN (PRIN2T "A code-pointer") NIL))
          ((NUMBERP X)
           (COND ((FIXP X) (PROGN (PRIN2T "A fixed number") NIL))
                 ((FLOATP X) (PROGN (PRIN2T "A floating-point number") NIL))
                 (T (PROGN (PRIN2T "An unknown type of number") NIL))))
          ((STRINGP X) (PROGN (PRIN2T "A string") NIL))
          ((IDP X)
           (COND ((I&RECORDP X) (I&RECORD X)) ((I&FUNCTIONP X) (I&FUNCTION X))
                 ((I&CONSTANTP X) (I&CONSTANT X)) ((I&MODULEP X) (I&MODULE X))
                 ((GET X 'NEWNAM) (I&IDNEWNAM X)) (T (I&ID X))))
          (T
           (PROGN (PRIN2T "Can't inspect data structures of this type") NIL)))) 
(PUT 'I&IDNEWNAM 'NUMBER-OF-ARGS 1) 
(PUT 'I&IDNEWNAM 'DEFINED-ON-LINE '74) 
(PUT 'I&IDNEWNAM 'DEFINED-IN-FILE 'RLISP88/INSPECT.RED) 
(PUT 'I&IDNEWNAM 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE I&IDNEWNAM (X)
    (PROGN
     (PRIN1 X)
     (PRIN2 " is a constant defined as ")
     (PRINT (GET X 'NEWNAM))
     (COND
      ((SETQ X (GET X 'ACTIVE-ANNOTATION))
       (COND ((PAIRP X) (I&DUMP (CAR X))) (T (I&DUMP X))))))) 
(PUT 'I&RECORDP 'NUMBER-OF-ARGS 1) 
(PUT 'I&RECORDP 'DEFINED-ON-LINE '82) 
(PUT 'I&RECORDP 'DEFINED-IN-FILE 'RLISP88/INSPECT.RED) 
(PUT 'I&RECORDP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE I&RECORDP (X) (EQ (GET X 'FORMFN) 'FORM_RECORD_CONSTRUCTOR)) 
(PUT 'I&RECORD 'NUMBER-OF-ARGS 1) 
(PUT 'I&RECORD 'DEFINED-ON-LINE '87) 
(PUT 'I&RECORD 'DEFINED-IN-FILE 'RLISP88/INSPECT.RED) 
(PUT 'I&RECORD 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE I&RECORD (X)
    (PROGN
     (PRIN1 X)
     (PRIN2T " is a record constructor with the following fields")
     (PRIN2T "** not implemented. **")
     NIL)) 
(PUT 'I&RECORDINSTP 'NUMBER-OF-ARGS 1) 
(PUT 'I&RECORDINSTP 'DEFINED-ON-LINE '95) 
(PUT 'I&RECORDINSTP 'DEFINED-IN-FILE 'RLISP88/INSPECT.RED) 
(PUT 'I&RECORDINSTP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE I&RECORDINSTP (X)
    (PROG (TMP)
      (COND ((NOT (IDP (GETV X 0))) (RETURN NIL)))
      (COND ((NOT (SETQ TMP (GETD (GETV X 0)))) (RETURN NIL)))
      (COND ((NOT (EQCAR (GETD (GETV X 0)) 'MACRO)) (RETURN NIL)))
      (COND
       ((ATOM (SETQ TMP (ERRORSET (LIST (GETV X 0)) NIL NIL))) (RETURN NIL)))
      (COND ((NEQ (UPBV X) (UPBV (CAR TMP))) (RETURN NIL)))
      (RETURN T))) 
(PUT 'I&RECORDINST 'NUMBER-OF-ARGS 1) 
(PUT 'I&RECORDINST 'DEFINED-ON-LINE '107) 
(PUT 'I&RECORDINST 'DEFINED-IN-FILE 'RLISP88/INSPECT.RED) 
(PUT 'I&RECORDINST 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE I&RECORDINST (X)
    (PROGN
     (PRIN2 "A ")
     (PRIN1 (GETV X 0))
     (PRIN2T " record with ")
     (PROG (I)
       (SETQ I 1)
      LAB
       (COND ((MINUSP (DIFFERENCE (UPBV X) I)) (RETURN NIL)))
       (PROGN (PRIN2 "   ") (PRIN1 I) (PRIN2 ": ") (PRINT (GETV X I)))
       (SETQ I (PLUS2 I 1))
       (GO LAB))
     NIL)) 
(PUT 'I&FUNCTIONP 'NUMBER-OF-ARGS 1) 
(PUT 'I&FUNCTIONP 'DEFINED-ON-LINE '114) 
(PUT 'I&FUNCTIONP 'DEFINED-IN-FILE 'RLISP88/INSPECT.RED) 
(PUT 'I&FUNCTIONP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE I&FUNCTIONP (X) (OR (GET X 'INLINE) (GET X 'SMACRO) (GETD X))) 
(PUT 'I&FUNCTION 'NUMBER-OF-ARGS 1) 
(PUT 'I&FUNCTION 'DEFINED-ON-LINE '119) 
(PUT 'I&FUNCTION 'DEFINED-IN-FILE 'RLISP88/INSPECT.RED) 
(PUT 'I&FUNCTION 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE I&FUNCTION (X)
    (COND ((OR (GET X 'INLINE) (GET X 'SMACRO)) (I&FUNCTION-INLINE X))
          (T
           ((LAMBDA (W)
              (COND ((EQCAR W 'MACRO) (I&FUNCTION-MACRO X (CDR W)))
                    ((EQCAR W 'EXPR) (I&FUNCTION-EXPR X (CDR W)))
                    ((EQCAR W 'FEXPR) (I&FUNCTION-FEXPR X (CDR W)))
                    (T (I&FUNCTION-UNKNOWN X W))))
            (GETD X))))) 
(PUT 'I&FUNCTION-INLINE 'NUMBER-OF-ARGS 1) 
(PUT 'I&FUNCTION-INLINE 'DEFINED-ON-LINE '128) 
(PUT 'I&FUNCTION-INLINE 'DEFINED-IN-FILE 'RLISP88/INSPECT.RED) 
(PUT 'I&FUNCTION-INLINE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE I&FUNCTION-INLINE (X)
    (PROG (TMP D)
      (SETQ D (GET X 'INLINE))
      (COND ((NULL D) (SETQ D (GET X 'SMACRO))))
      (PRIN1 X)
      (PRIN2 " is an SMACRO with ")
      (COND
       ((NOT (SETQ TMP (GET X 'NUMBER-OF-ARGS)))
        (COND ((AND (EQCAR D 'LAMBDA) (CDR D)) (SETQ TMP (LENGTH (CADR D))))
              (T (SETQ TMP NIL)))))
      (COND ((ONEP TMP) (PRIN2T "one argument"))
            ((NOT TMP) (PRIN2T "an unknown number of arguments"))
            (T (PROGN (PRIN1 TMP) (PRIN2T " arguments"))))
      (COND
       ((SETQ TMP (GET X 'ACTIVE-ANNOTATION))
        (PROGN
         (I&WHEREIS TMP)
         (I&DUMP (COND ((PAIRP TMP) (CAR TMP)) (T TMP)))))))) 
(PUT 'I&FUNCTION-EXPR 'NUMBER-OF-ARGS 2) 
(PUT 'I&FUNCTION-EXPR 'DEFINED-ON-LINE '148) 
(PUT 'I&FUNCTION-EXPR 'DEFINED-IN-FILE 'RLISP88/INSPECT.RED) 
(PUT 'I&FUNCTION-EXPR 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE I&FUNCTION-EXPR (X D)
    (PROG (TMP)
      (PRIN1 X)
      (PRIN2 " is an EXPR with ")
      (COND
       ((NOT (SETQ TMP (GET X 'NUMBER-OF-ARGS)))
        (COND ((AND (EQCAR D 'LAMBDA) (CDR D)) (SETQ TMP (LENGTH (CADR D))))
              (T (SETQ TMP NIL)))))
      (COND ((ONEP TMP) (PRIN2T "one argument"))
            ((NOT TMP) (PRIN2T "an unknown number of arguments"))
            (T (PROGN (PRIN1 TMP) (PRIN2T " arguments"))))
      (COND
       ((SETQ TMP (GET X 'ACTIVE-ANNOTATION))
        (PROGN
         (I&WHEREIS TMP)
         (I&DUMP (COND ((PAIRP TMP) (CAR TMP)) (T TMP)))))))) 
(PUT 'I&FUNCTION-FEXPR 'NUMBER-OF-ARGS 2) 
(PUT 'I&FUNCTION-FEXPR 'DEFINED-ON-LINE '164) 
(PUT 'I&FUNCTION-FEXPR 'DEFINED-IN-FILE 'RLISP88/INSPECT.RED) 
(PUT 'I&FUNCTION-FEXPR 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE I&FUNCTION-FEXPR (X D)
    (PROG (TMP)
      (PRIN1 X)
      (PRIN2T " is an FEXPR")
      (COND
       ((SETQ TMP (GET X 'ACTIVE-ANNOTATION))
        (PROGN
         (I&WHEREIS TMP)
         (I&DUMP (COND ((PAIRP TMP) (CAR TMP)) (T TMP)))))))) 
(PUT 'I&FUNCTION-MACRO 'NUMBER-OF-ARGS 2) 
(PUT 'I&FUNCTION-MACRO 'DEFINED-ON-LINE '174) 
(PUT 'I&FUNCTION-MACRO 'DEFINED-IN-FILE 'RLISP88/INSPECT.RED) 
(PUT 'I&FUNCTION-MACRO 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE I&FUNCTION-MACRO (X D)
    (PROG (TMP)
      (PRIN1 X)
      (PRIN2T " is a MACRO")
      (COND
       ((SETQ TMP (GET X 'ACTIVE-ANNOTATION))
        (PROGN
         (I&WHEREIS TMP)
         (I&DUMP (COND ((PAIRP TMP) (CAR TMP)) (T TMP)))))))) 
(PUT 'I&WHEREIS 'NUMBER-OF-ARGS 1) 
(PUT 'I&WHEREIS 'DEFINED-ON-LINE '184) 
(PUT 'I&WHEREIS 'DEFINED-IN-FILE 'RLISP88/INSPECT.RED) 
(PUT 'I&WHEREIS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE I&WHEREIS (X)
    (COND
     ((EQUAL (LENGTH X) 3)
      (PROGN
       (PRIN2 "Function ends on line ")
       (PRIN1 (CADR X))
       (PRIN2 " in file ")
       (PRIN2T (CADDR X)))))) 
(PUT 'I&CONSTANTP 'NUMBER-OF-ARGS 1) 
(PUT 'I&CONSTANTP 'DEFINED-ON-LINE '192) 
(PUT 'I&CONSTANTP 'DEFINED-IN-FILE 'RLISP88/INSPECT.RED) 
(PUT 'I&CONSTANTP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE I&CONSTANTP (X) (CONSTANTP X)) 
(PUT 'I&ID 'NUMBER-OF-ARGS 1) 
(PUT 'I&ID 'DEFINED-ON-LINE '196) 
(PUT 'I&ID 'DEFINED-IN-FILE 'RLISP88/INSPECT.RED) 
(PUT 'I&ID 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE I&ID (X)
    (COND ((GLOBALP X) (I&ID1 X 'GLOBAL)) ((FLUIDP X) (I&ID1 X 'FLUID))
          (T (PROGN (PRIN2 "Don't know anything about ") (PRINT X) NIL)))) 
(PUT 'I&ID1 'NUMBER-OF-ARGS 2) 
(PUT 'I&ID1 'DEFINED-ON-LINE '202) 
(PUT 'I&ID1 'DEFINED-IN-FILE 'RLISP88/INSPECT.RED) 
(PUT 'I&ID1 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE I&ID1 (X TY)
    (PROG (A)
      (PRIN2 "Identifier '")
      (PRIN1 X)
      (PRIN2 "' is ")
      (PRIN2 TY)
      (COND
       ((SETQ A (GET X 'ACTIVE-ANNOTATION))
        (COND
         ((EQUAL (LENGTH A) 3)
          (PROGN
           (PRIN2 " defined line ")
           (PRIN1 (CADR A))
           (PRIN2 " in file ")
           (PRIN2T (CADDR A))
           (I&DUMP (CAR A))))
         (T (I&DUMP A))))
       (T (TERPRI))))) 
(PUT 'I&CONSTANT 'NUMBER-OF-ARGS 1) 
(PUT 'I&CONSTANT 'DEFINED-ON-LINE '216) 
(PUT 'I&CONSTANT 'DEFINED-IN-FILE 'RLISP88/INSPECT.RED) 
(PUT 'I&CONSTANT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE I&CONSTANT (X) (PROGN (PRIN1 X) (PRIN2T " is a constant"))) 
(PUT 'I&MODULEP 'NUMBER-OF-ARGS 1) 
(PUT 'I&MODULEP 'DEFINED-ON-LINE '221) 
(PUT 'I&MODULEP 'DEFINED-IN-FILE 'RLISP88/INSPECT.RED) 
(PUT 'I&MODULEP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE I&MODULEP (X) (FLAGP X 'MODULE)) 
(PUT 'I&MODULE 'NUMBER-OF-ARGS 1) 
(PUT 'I&MODULE 'DEFINED-ON-LINE '225) 
(PUT 'I&MODULE 'DEFINED-IN-FILE 'RLISP88/INSPECT.RED) 
(PUT 'I&MODULE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE I&MODULE (X)
    ((LAMBDA (R88 RD)
       (COND ((FILEP R88) (I&MODULE1 X (I&MODULEB X) R88))
             ((FILEP RD) (I&MODULE1 X (I&MODULEB X) RD)) (T (I&MODULE2 X))))
     (STRING-DOWNCASE
      (COMPRESS (NCONC (CONS '|"| (EXPLODE2 X)) '(|.| R |8| |8| |"|))))
     (STRING-DOWNCASE
      (COMPRESS (NCONC (CONS '|"| (EXPLODE2 X)) '(|.| R E D |"|)))))) 
(PUT 'I&MODULE1 'NUMBER-OF-ARGS 3) 
(PUT 'I&MODULE1 'DEFINED-ON-LINE '236) 
(PUT 'I&MODULE1 'DEFINED-IN-FILE 'RLISP88/INSPECT.RED) 
(PUT 'I&MODULE1 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE I&MODULE1 (MNAME BFILE SFILE)
    (PROG (SFS BFS)
      (COND (SFILE (SETQ SFS (FILESTATUS SFILE))))
      (COND (BFILE (SETQ BFS (FILESTATUS BFILE))))
      (COND
       (SFILE
        (COND
         (BFILE
          (PROGN
           (PRIN2 "Module ")
           (PRIN1 MNAME)
           (PRIN2 " source file ")
           (PRIN2 SFILE)
           (PRIN2 " fasl file ")
           (PRIN2 BFILE)
           (PRIN2 " and is ")
           (PRINT (I&DCOMP SFS BFS))))
         (T
          (PROGN
           (PRIN2 "Module ")
           (PRIN1 MNAME)
           (PRIN2 " has source file ")
           (PRIN2 SFILE)
           (PRIN2 " written ")
           (PRIN2T (I&SDT SFS))))))
       (BFILE
        (PROGN
         (PRIN2 "Module ")
         (PRIN1 MNAME)
         (PRIN2 " has fasl file ")
         (PRIN2 BFILE)
         (PRIN2 " written ")
         (PRIN2T (I&SDT BFS))))
       (T
        (PROGN
         (PRIN2 "Module ")
         (PRIN1 MNAME)
         (PRIN2T ", can't find any files."))))
      (COND
       ((SETQ SFS (GET MNAME 'ACTIVE-ANNOTATION))
        (COND ((PAIRP SFS) (I&DUMP (CAR SFS))) (T (I&DUMP SFS))))))) 
(PUT 'I&MODULE2 'NUMBER-OF-ARGS 1) 
(PUT 'I&MODULE2 'DEFINED-ON-LINE '275) 
(PUT 'I&MODULE2 'DEFINED-IN-FILE 'RLISP88/INSPECT.RED) 
(PUT 'I&MODULE2 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE I&MODULE2 (MNAME)
    ((LAMBDA (SFS)
       (PROGN
        (PRIN2 "Can't find source or fasl file for module ")
        (PRINT MNAME)
        (COND (SFS (COND ((PAIRP SFS) (I&DUMP (CAR SFS))) (T (I&DUMP SFS)))))))
     (GET MNAME 'ACTIVE-ANNOTATION))) 
(PUT 'I&DCOMP 'NUMBER-OF-ARGS 2) 
(PUT 'I&DCOMP 'DEFINED-ON-LINE '283) 
(PUT 'I&DCOMP 'DEFINED-IN-FILE 'RLISP88/INSPECT.RED) 
(PUT 'I&DCOMP 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE I&DCOMP (S1 S2)
    (COND ((GREATERP (I&DT S1) (I&DT S2)) " out of date.") (T " up to date."))) 
(PUT 'I&DT 'NUMBER-OF-ARGS 1) 
(PUT 'I&DT 'DEFINED-ON-LINE '288) 
(PUT 'I&DT 'DEFINED-IN-FILE 'RLISP88/INSPECT.RED) 
(PUT 'I&DT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE I&DT (X) ((LAMBDA (W) (COND (W (CDDR W)) (T 0))) (ATSOC 'WRITETIME X))) 
(PUT 'I&SDT 'NUMBER-OF-ARGS 1) 
(PUT 'I&SDT 'DEFINED-ON-LINE '291) 
(PUT 'I&SDT 'DEFINED-IN-FILE 'RLISP88/INSPECT.RED) 
(PUT 'I&SDT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE I&SDT (X)
    ((LAMBDA (W) (COND (W (CADR W)) (T "no date"))) (ATSOC 'WRITETIME X))) 
(PUT 'I&MODULEB 'NUMBER-OF-ARGS 1) 
(PUT 'I&MODULEB 'DEFINED-ON-LINE '294) 
(PUT 'I&MODULEB 'DEFINED-IN-FILE 'RLISP88/INSPECT.RED) 
(PUT 'I&MODULEB 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE I&MODULEB (X)
    (PROG (FS FN)
      (SETQ FS
              (LOADDIRECTORIES*
               (PROG ()
                WHILELABEL
                 (COND ((NOT (PAIRP FS)) (RETURN NIL)))
                 (PROGN
                  (SETQ FN
                          (STRING-DOWNCASE
                           (NCONC (CONS '|"| (EXPLODE2 (CAR FS)))
                                  (NCONC (EXPLODE2 X) '(|.| B |"|)))))
                  (COND ((FILEP FN) (SETQ FS FN)) (T (SETQ FS (CDR FS)))))
                 (GO WHILELABEL))))
      (RETURN FS))) 
(PUT 'I&DUMP 'NUMBER-OF-ARGS 1) 
(PUT 'I&DUMP 'DEFINED-ON-LINE '314) 
(PUT 'I&DUMP 'DEFINED-IN-FILE 'RLISP88/INSPECT.RED) 
(PUT 'I&DUMP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE I&DUMP (X)
    (PROG (LNES MINSP V)
      (SETQ LNES (REVERSIP (I&MAKELINES (EXPLODE2 X) (LIST NIL))))
      (SETQ MINSP 5000)
      (PROG (X)
        (SETQ X (CDR LNES))
       LAB
        (COND ((NULL X) (RETURN NIL)))
        ((LAMBDA (X)
           (COND ((LESSP (SETQ V (I&SPCOUNT X)) MINSP) (SETQ MINSP V))))
         (CAR X))
        (SETQ X (CDR X))
        (GO LAB))
      (I&PRN (I&DELSPACE 5000 (CAR LNES)))
      (PROG (L)
        (SETQ L (CDR LNES))
       LAB
        (COND ((NULL L) (RETURN NIL)))
        ((LAMBDA (L) (I&PRN (I&DELSPACE MINSP L))) (CAR L))
        (SETQ L (CDR L))
        (GO LAB)))) 
(PUT 'I&MAKELINES 'NUMBER-OF-ARGS 2) 
(PUT 'I&MAKELINES 'DEFINED-ON-LINE '326) 
(PUT 'I&MAKELINES 'DEFINED-IN-FILE 'RLISP88/INSPECT.RED) 
(PUT 'I&MAKELINES 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE I&MAKELINES (X L)
    (COND ((NULL X) (CONS (REVERSIP (CAR L)) (CDR L)))
          ((EQCAR X $EOL$)
           (I&MAKELINES (CDR X) (CONS NIL (CONS (REVERSIP (CAR L)) (CDR L)))))
          (T
           (PROGN (SETCAR L (CONS (CAR X) (CAR L))) (I&MAKELINES (CDR X) L))))) 
(PUT 'I&SPCOUNT 'NUMBER-OF-ARGS 1) 
(PUT 'I&SPCOUNT 'DEFINED-ON-LINE '334) 
(PUT 'I&SPCOUNT 'DEFINED-IN-FILE 'RLISP88/INSPECT.RED) 
(PUT 'I&SPCOUNT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE I&SPCOUNT (L)
    (COND ((NULL L) 0) ((EQCAR L BLANK) (ADD1 (I&SPCOUNT (CDR L)))) (T 0))) 
(PUT 'I&DELSPACE 'NUMBER-OF-ARGS 2) 
(PUT 'I&DELSPACE 'DEFINED-ON-LINE '340) 
(PUT 'I&DELSPACE 'DEFINED-IN-FILE 'RLISP88/INSPECT.RED) 
(PUT 'I&DELSPACE 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE I&DELSPACE (N L)
    (COND ((NULL L) NIL) ((ZEROP N) L)
          ((EQCAR L BLANK) (I&DELSPACE (DIFFERENCE N 1) (CDR L))) (T L))) 
(PUT 'I&PRN 'NUMBER-OF-ARGS 1) 
(PUT 'I&PRN 'DEFINED-ON-LINE '349) 
(PUT 'I&PRN 'DEFINED-IN-FILE 'RLISP88/INSPECT.RED) 
(PUT 'I&PRN 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE I&PRN (X)
    (PROGN
     (PROG (C)
       (SETQ C X)
      LAB
       (COND ((NULL C) (RETURN NIL)))
       ((LAMBDA (C) (PRIN2 C)) (CAR C))
       (SETQ C (CDR C))
       (GO LAB))
     (TERPRI))) 
(FLUID '(*SAVEACTIVES)) 
(SWITCH (LIST 'SAVEACTIVES)) 
(PUT 'I&MAKECOMMENT 'NUMBER-OF-ARGS 0) 
(PUT 'I&MAKECOMMENT 'DEFINED-ON-LINE '363) 
(PUT 'I&MAKECOMMENT 'DEFINED-IN-FILE 'RLISP88/INSPECT.RED) 
(PUT 'I&MAKECOMMENT 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE I&MAKECOMMENT NIL
    (MKQUOTE
     (LIST (CADR COMMENT*) CURLINE* (COND (IFL* (CAR IFL*)) (T "unknown"))))) 
(PUT 'NFORMPROC 'NUMBER-OF-ARGS 3) 
(PUT 'NFORMPROC 'DEFINED-ON-LINE '370) 
(PUT 'NFORMPROC 'DEFINED-IN-FILE 'RLISP88/INSPECT.RED) 
(PUT 'NFORMPROC 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE NFORMPROC (A B C)
    (PROG (V W)
      (SETQ V
              (COND
               ((AND *SAVEACTIVES COMMENT*)
                (PROGN
                 (SETQ W (I&MAKECOMMENT))
                 (PUT (CADR A) 'ACTIVE-ANNOTATION (EVAL W))
                 (LIST 'PROGN
                       (LIST 'COND
                             (LIST '*SAVEACTIVES
                                   (LIST 'PUT (MKQUOTE (CADR A))
                                         (MKQUOTE 'ACTIVE-ANNOTATION) W)))
                       (FORMPROC A B C))))
               (T (FORMPROC A B C))))
      (SETQ COMMENT* NIL)
      (RETURN V))) 
(PUT 'PROCEDURE 'FORMFN 'NFORMPROC) 
(PUT 'FORMMODULE 'NUMBER-OF-ARGS 3) 
(PUT 'FORMMODULE 'DEFINED-ON-LINE '390) 
(PUT 'FORMMODULE 'DEFINED-IN-FILE 'RLISP88/INSPECT.RED) 
(PUT 'FORMMODULE 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE FORMMODULE (U VARS MODE)
    (PROG (X)
      (SETQ X
              (COND
               ((AND *SAVEACTIVES COMMENT*)
                (LIST 'PROGN
                      (LIST 'COND
                            (LIST '*SAVEACTIVES
                                  (LIST 'PUT (MKQUOTE (CADR U))
                                        (MKQUOTE 'ACTIVE-ANNOTATION)
                                        (I&MAKECOMMENT))))
                      (LIST 'FLAG (MKQUOTE (LIST (CADR U))) (MKQUOTE 'MODULE))
                      (LIST 'MODULE (MKQUOTE (LIST (CDR U))))))
               (T (LIST 'MODULE (MKQUOTE (CDR U))))))
      (SETQ COMMENT* NIL)
      (RETURN X))) 
(PUT 'FORMGLOBALFLUID 'NUMBER-OF-ARGS 3) 
(PUT 'FORMGLOBALFLUID 'DEFINED-ON-LINE '409) 
(PUT 'FORMGLOBALFLUID 'DEFINED-IN-FILE 'RLISP88/INSPECT.RED) 
(PUT 'FORMGLOBALFLUID 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE FORMGLOBALFLUID (U VARS MODE)
    (COND
     ((AND *SAVEACTIVES COMMENT*)
      (LIST
       (LIST 'LAMBDA (LIST '$V$)
             (LIST 'PROGN
                   (LIST 'COND
                         (LIST '*SAVEACTIVES
                               (LIST 'MAPCAR '$V$
                                     (LIST 'FUNCTION
                                           (LIST 'LAMBDA (LIST '$U$)
                                                 (LIST 'PUT '$U$
                                                       (MKQUOTE
                                                        'ACTIVE-ANNOTATION)
                                                       (I&MAKECOMMENT)))))))
                   (LIST (CAR U) '$V$)))
       (FORMC (CADR U) VARS MODE)))
     (T (LIST (CAR U) (FORMC (CADR U) VARS MODE))))) 
(PUT 'FMTCMT 'NUMBER-OF-ARGS 3) 
(PUT 'FMTCMT 'DEFINED-ON-LINE '429) 
(PUT 'FMTCMT 'DEFINED-IN-FILE 'RLISP88/INSPECT.RED) 
(PUT 'FMTCMT 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE FMTCMT (ANO IND RM)
    (PROG (LA IND3 TCS C COLL COLLE CURBL CBL)
      (SETQ LA (EXPLODE2 ANO))
      (COND
       ((GREATERP (SETQ IND3 (PLUS IND 3)) (DIFFERENCE RM 10))
        (ERROR 0 "margins too small")))
      (SETQ TCS (DIFFERENCE RM IND3))
      (SPACES IND)
      (PRIN2 "/* ")
     LOOP
      (COND ((NULL LA) (RETURN (PRIN2 " */"))))
      (COND
       ((SETQ C (FMTFULLLINEOF (CAR LA) LA))
        (PROGN
         (SETQ LA (FMTREMOVELINE LA))
         (PROG (I)
           (SETQ I 1)
          LAB
           (COND ((MINUSP (DIFFERENCE TCS I)) (RETURN NIL)))
           (PRIN2 C)
           (SETQ I (PLUS2 I 1))
           (GO LAB))
         (TERPRI)
         (SPACES IND3)
         (GO LOOP)))
       ((FMTBLANKLINE LA)
        (PROGN
         (COND ((GREATERP (POSN) IND3) (TERPRI)))
         (TERPRI)
         (SPACES IND3)
         (SETQ LA (FMTREMOVELINE LA))
         (GO LOOP)))
       ((EQCAR LA $EOL$) (PROGN (TERPRI) (SPACES IND3) (GO LOOP)))
       ((EQCAR LA BLANK) (GO STATE4)))
     STATE2
      (SETQ COLL (SETQ COLLE (LIST (CAR LA))))
      (SETQ LA (CDR LA))
     STATE2A
      (COND ((NULL LA) (PROGN (FMTDUMPTOK COLL IND3 RM) (GO LOOP)))
            ((EQCAR LA $EOL$)
             (PROGN (FMTDUMPTOK COLL IND3 RM) (SETQ LA (CDR LA)) (GO LOOP)))
            ((EQCAR LA BLANK) (PROGN (FMTDUMPTOK COLL IND3 RM) (GO STATE3))))
      (SETCDR COLLE (LIST (CAR LA)))
      (SETQ COLLE (CDR COLLE))
      (SETQ LA (CDR LA))
      (GO STATE2A)
     STATE3
      (COND ((NULL LA) (GO LOOP))
            ((EQCAR LA $EOL$) (PROGN (SETQ LA (CDR LA)) (GO LOOP)))
            ((EQCAR LA BLANK) (PROGN (SETQ LA (CDR LA)) (GO STATE3)))
            (T (GO STATE2)))
     STATE4
      (SETQ CURBL 0)
      (SETQ CBL T)
     STATE4A
      (PRIN2 (CAR LA))
      (COND ((AND CBL (EQCAR LA BLANK)) (SETQ CURBL (ADD1 CURBL)))
            (T (SETQ CBL NIL)))
      (SETQ LA (CDR LA))
      (COND ((NULL LA) (GO LOOP)))
      (COND
       ((EQCAR LA $EOL$)
        (PROGN (TERPRI) (SPACES IND3) (SETQ LA (CDR LA)) (GO LOOP))))
      (COND ((GEQ (POSN) RM) (PROGN (TERPRI) (SPACES (PLUS 1 IND3 CURBL)))))
      (GO STATE4A))) 
(PUT 'FMTBLANKLINE 'NUMBER-OF-ARGS 1) 
(PUT 'FMTBLANKLINE 'DEFINED-ON-LINE '499) 
(PUT 'FMTBLANKLINE 'DEFINED-IN-FILE 'RLISP88/INSPECT.RED) 
(PUT 'FMTBLANKLINE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FMTBLANKLINE (L)
    (COND ((OR (NULL L) (EQCAR L $EOL$)) T)
          ((EQCAR L BLANK) (FMTBLANKLINE (CDR L))))) 
(PUT 'FMTFULLLINEOF 'NUMBER-OF-ARGS 2) 
(PUT 'FMTFULLLINEOF 'DEFINED-ON-LINE '506) 
(PUT 'FMTFULLLINEOF 'DEFINED-IN-FILE 'RLISP88/INSPECT.RED) 
(PUT 'FMTFULLLINEOF 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE FMTFULLLINEOF (C LA)
    (COND ((NULL LA) C) ((EQCAR LA C) (FMTFULLLINEOF C (CDR LA)))
          ((EQCAR LA $EOL$) C) (T NIL))) 
(PUT 'FMTREMOVELINE 'NUMBER-OF-ARGS 1) 
(PUT 'FMTREMOVELINE 'DEFINED-ON-LINE '516) 
(PUT 'FMTREMOVELINE 'DEFINED-IN-FILE 'RLISP88/INSPECT.RED) 
(PUT 'FMTREMOVELINE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FMTREMOVELINE (LA)
    (COND ((AND LA (NOT (EQCAR LA $EOL$))) (FMTREMOVELINE (CDR LA)))
          (T (CDR LA)))) 
(PUT 'FMTDUMPTOK 'NUMBER-OF-ARGS 3) 
(PUT 'FMTDUMPTOK 'DEFINED-ON-LINE '522) 
(PUT 'FMTDUMPTOK 'DEFINED-IN-FILE 'RLISP88/INSPECT.RED) 
(PUT 'FMTDUMPTOK 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE FMTDUMPTOK (L IND RM)
    (COND
     ((GREATERP (PLUS (LENGTH L) (POSN)) RM)
      (PROGN
       (TERPRI)
       (SPACES IND)
       (PROG (X)
         (SETQ X L)
        LAB
         (COND ((NULL X) (RETURN NIL)))
         ((LAMBDA (X) (PRIN2 X)) (CAR X))
         (SETQ X (CDR X))
         (GO LAB))
       (PRIN2 " ")))
     (T
      (PROGN
       (PROG (X)
         (SETQ X L)
        LAB
         (COND ((NULL X) (RETURN NIL)))
         ((LAMBDA (X) (PRIN2 X)) (CAR X))
         (SETQ X (CDR X))
         (GO LAB))
       (COND ((LEQ (POSN) RM) (PRIN2 " "))))))) 
(ENDMODULE) 