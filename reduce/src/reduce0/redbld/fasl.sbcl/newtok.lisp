(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'NEWTOK)) 
(FLUID '(*MSG *REDEFLG*)) 
(GLOBAL '(PRECLIS* FIXEDPRECLIS*)) 
(SETQ FIXEDPRECLIS* '(WHERE *COMMA* SETQ)) 
(SETQ PRECLIS*
        '(OR AND MEMBER MEMQ EQUAL NEQ EQ GEQ GREATERP LEQ LESSP FREEOF PLUS
             DIFFERENCE TIMES QUOTIENT EXPT CONS)) 
(DEFLIST
 '((PLUS PLUS) (DIFFERENCE MINUS) (MINUS MINUS) (TIMES TIMES) (QUOTIENT RECIP)
   (RECIP RECIP))
 'UNARY) 
(FLAG '(AND OR *COMMA* PLUS TIMES) 'NARY) 
(FLAG '(CONS SETQ PLUS TIMES) 'RIGHT) 
(DEFLIST '((MINUS PLUS) (RECIP TIMES)) 'ALT) 
(PUT 'MKPREC 'NUMBER-OF-ARGS 0) 
(PUT 'MKPREC 'DEFINED-ON-LINE '64) 
(PUT 'MKPREC 'DEFINED-IN-FILE 'RLISP/NEWTOK.RED) 
(PUT 'MKPREC 'PROCEDURE_TYPE '(ARROW UNIT GENERAL)) 
(DE MKPREC NIL
    (PROG (X Y Z)
      (SETQ X (APPEND FIXEDPRECLIS* PRECLIS*))
      (SETQ Y 1)
     A
      (COND ((NULL X) (RETURN NIL)))
      (PUT (CAR X) 'INFIX Y)
      (PUT (CAR X) 'OP (LIST (LIST Y Y)))
      (COND ((SETQ Z (GET (CAR X) 'UNARY)) (PUT Z 'INFIX Y)))
      (COND ((AND Z (NULL (FLAGP Z 'NARY))) (PUT Z 'OP (LIST NIL Y))))
      (SETQ X (CDR X))
      (SETQ Y (ADD1 Y))
      (GO A))) 
(MKPREC) 
(PUT 'NEWTOK 'NUMBER-OF-ARGS 1) 
(PUT 'NEWTOK 'DEFINED-ON-LINE '87) 
(PUT 'NEWTOK 'DEFINED-IN-FILE 'RLISP/NEWTOK.RED) 
(PUT 'NEWTOK 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE NEWTOK (U)
    (PROG (*REDEFLG* X Y)
      (COND
       ((OR (ATOM U) (ATOM (CAR U)) (NULL (IDP (CAAR U))))
        (TYPERR U "NEWTOK argument")))
      (PUT (CAAR U) 'SWITCH*
           (CDR (NEWTOK1 (CAR U) (CADR U) (GET (CAAR U) 'SWITCH*))))
      (SETQ Y (INTERN (LIST2WIDESTRING (CAR U))))
      (COND
       ((AND (NOT (EQUAL (GET (CADR U) 'PRTCH) Y)) *REDEFLG*)
        (LPRIM (LIST Y "redefined"))))
      (PUT (CADR U) 'PRTCH Y)
      (COND ((SETQ X (GET (CADR U) 'UNARY)) (PUT X 'PRTCH Y))))) 
(PUT 'NEWTOK1 'NUMBER-OF-ARGS 3) 
(PUT 'NEWTOK1 'DEFINED-ON-LINE '104) 
(PUT 'NEWTOK1 'DEFINED-IN-FILE 'RLISP/NEWTOK.RED) 
(PUT 'NEWTOK1 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE NEWTOK1 (CHARLIST NAME PROPY)
    (COND ((NULL PROPY) (LSTCHR CHARLIST NAME))
          ((NULL (CDR CHARLIST))
           (PROG ()
             (COND ((AND (CDR PROPY) *MSG) (SETQ *REDEFLG* T)))
             (RETURN (LIST (CAR CHARLIST) (CAR PROPY) NAME))))
          (T
           (CONS (CAR CHARLIST)
                 (CONS (NEWTOK2 (CDR CHARLIST) NAME (CAR PROPY))
                       (CDR PROPY)))))) 
(PUT 'NEWTOK2 'NUMBER-OF-ARGS 3) 
(PUT 'NEWTOK2 'DEFINED-ON-LINE '114) 
(PUT 'NEWTOK2 'DEFINED-IN-FILE 'RLISP/NEWTOK.RED) 
(PUT 'NEWTOK2 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE NEWTOK2 (CHARLIST NAME ASSOCLIST)
    (COND ((NULL ASSOCLIST) (LIST (LSTCHR CHARLIST NAME)))
          ((EQ (CAR CHARLIST) (CAAR ASSOCLIST))
           (CONS (NEWTOK1 CHARLIST NAME (CDAR ASSOCLIST)) (CDR ASSOCLIST)))
          (T (CONS (CAR ASSOCLIST) (NEWTOK2 CHARLIST NAME (CDR ASSOCLIST)))))) 
(PUT 'CONSESCC 'NUMBER-OF-ARGS 1) 
(PUT 'CONSESCC 'DEFINED-ON-LINE '120) 
(PUT 'CONSESCC 'DEFINED-IN-FILE 'RLISP/NEWTOK.RED) 
(PUT 'CONSESCC 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE CONSESCC (U)
    (COND ((NULL U) NIL) (T (CONS '! (CONS (CAR U) (CONSESCC (CDR U))))))) 
(PUT 'LSTCHR 'NUMBER-OF-ARGS 2) 
(PUT 'LSTCHR 'DEFINED-ON-LINE '123) 
(PUT 'LSTCHR 'DEFINED-IN-FILE 'RLISP/NEWTOK.RED) 
(PUT 'LSTCHR 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE LSTCHR (U V)
    (COND ((NULL (CDR U)) (LIST (CAR U) NIL V))
          (T (LIST (CAR U) (LIST (LSTCHR (CDR U) V)))))) 
(NEWTOK '(($) *SEMICOL*)) 
(NEWTOK '((|;|) *SEMICOL*)) 
(NEWTOK '((+) PLUS)) 
(NEWTOK '((-) DIFFERENCE)) 
(NEWTOK '((*) TIMES)) 
(NEWTOK '((^) EXPT)) 
(NEWTOK '((* *) EXPT)) 
(NEWTOK '((/) QUOTIENT)) 
(NEWTOK '((=) EQUAL)) 
(NEWTOK '((|,|) *COMMA*)) 
(NEWTOK '((|(|) *LPAR*)) 
(NEWTOK '((|)|) *RPAR*)) 
(NEWTOK '((|:|) *COLON*)) 
(NEWTOK '((|:| =) SETQ)) 
(NEWTOK '((|.|) CONS)) 
(NEWTOK '((<) LESSP)) 
(NEWTOK '((< =) LEQ)) 
(NEWTOK '(([) *LSQBKT*)) 
(NEWTOK '((< <) *STARTGROUP*)) 
(NEWTOK '((>) GREATERP)) 
(NEWTOK '((> =) GEQ)) 
(NEWTOK '((]) *RSQBKT*)) 
(NEWTOK '((> >) *ENDGROUP*)) 
(NEWTOK '((/ *) *COMMENT*)) 
(NEWTOK '((- - >) REPD)) 
(NEWTOK '((|#|) HASH)) 
(NEWTOK '((|#| -) IDIFFERENCE)) 
(NEWTOK '((|#| *) ITIMES2)) 
(NEWTOK '((|#| /) IQUOTIENT)) 
(NEWTOK '((|#| +) IPLUS2)) 
(NEWTOK '((|#| <) ILESSP)) 
(NEWTOK '((|#| =) IEQUAL)) 
(NEWTOK '((|#| >) IGREATERP)) 
(NEWTOK '((* * *) LPDOTIMES)) 
(NEWTOK '((* |.|) LDOT)) 
(NEWTOK '((|.| * *) TO)) 
(NEWTOK '((|.| * |.|) CROSSPROD)) 
(NEWTOK '((|.| *) MULT)) 
(NEWTOK '((|.| |.| =) MYEQUAL)) 
(NEWTOK '((|.| /) OVER)) 
(NEWTOK '((|.| |:|) ID-QUOTIENT)) 
(NEWTOK '((|.| ^) TO)) 
(NEWTOK '((|.| ~ *) INT_MULT)) 
(NEWTOK '((|.| ~ +) INT_ADD)) 
(NEWTOK '((|.| +) ADD)) 
(NEWTOK '((|.| =) ID-EQUAL)) 
(NEWTOK '((/ /) SLASH)) 
(NEWTOK '((/ |\\|) |,| WEDGE)) 
(NEWTOK '((|:| |:| -) RSETD)) 
(NEWTOK '((|:| |:| = |:|) LRSETQ)) 
(NEWTOK '((|:| |:| =) LSETQ)) 
(NEWTOK '((|:| |:|) RANGE)) 
(NEWTOK '((|:| = |:|) RSETQ)) 
(NEWTOK '((@) PARTDF)) 
(NEWTOK '((^ ^) SUPER_PRODUCT)) 
(NEWTOK '(({) *LCBKT*)) 
(NEWTOK '((}) *RCBKT*)) 
(NEWTOK '((= >) REPLACEBY)) 
(NEWTOK '((> <) VECTORCROSS)) 
(PUT 'EXPT 'PRTCH '**) 
(FLAG '(DIFFERENCE MINUS PLUS SETQ) 'SPACED) 
(FLAG '(NEWTOK) 'EVAL) 
(ENDMODULE) 