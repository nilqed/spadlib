(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'CONTFR)) 
(PUT 'CONTFRACT2 'NUMBER-OF-ARGS 4) 
(PUT 'CONTFRACT2 'DEFINED-ON-LINE '35) 
(PUT 'CONTFRACT2 'DEFINED-IN-FILE 'RATAPRX/CONTFR.RED) 
(PUT 'CONTFRACT2 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE CONTFRACT2 (U INEXACT B1 N)
    (PROG (B0 L A B C G GG GGG H HH HHH COUNT)
      (SETQ A (CAR U))
      (SETQ B (CDR U))
      (SETQ G 0)
      (SETQ GG 1)
      (SETQ H 1)
      (SETQ HH 0)
      (COND
       ((AND (OR (NULL B1) (EQUAL B1 0)) INEXACT)
        (SETQ B0 (QUOTIENT (TIMES (EXPT 10 (PRECISION 0)) B) (ABS A)))))
      (COND (N (SETQ COUNT N)))
      (SETQ C (DIVIDE A B))
      (COND
       ((LESSP A 0) (SETQ C (CONS (DIFFERENCE (CAR C) 1) (PLUS (CDR C) B)))))
     LOOP
      (SETQ A (CAR C))
      (SETQ GGG (PLUS (TIMES A GG) G))
      (SETQ HHH (PLUS (TIMES A HH) H))
      (COND ((AND B1 (GREATERP B1 0) (GREATERP (ABS HHH) B1)) (GO RET)))
      (SETQ G GG)
      (SETQ GG GGG)
      (SETQ H HH)
      (SETQ HH HHH)
      (COND (L (SETQ L (CONS (LIST 'LIST 1 A) L))) (T (SETQ L (CONS A L))))
      (COND
       (N
        (PROGN
         (SETQ COUNT (DIFFERENCE COUNT 1))
         (COND ((LEQ COUNT 0) (GO RET))))))
      (SETQ A B)
      (SETQ B (CDR C))
      (COND ((OR (EQUAL B 0) (AND B0 (GREATERP (TIMES HH HHH) B0))) (GO RET)))
      (SETQ C (DIVIDE A B))
      (GO LOOP)
     RET
      (RETURN (CONS (CONS GG HH) (REVERSIP L))))) 
(PUT 'CONTFRACT1 'NUMBER-OF-ARGS 3) 
(PUT 'CONTFRACT1 'DEFINED-ON-LINE '73) 
(PUT 'CONTFRACT1 'DEFINED-IN-FILE 'RATAPRX/CONTFR.RED) 
(PUT 'CONTFRACT1 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE CONTFRACT1 (U B N)
    (PROG (OLDMODE V W)
      (COND ((EQCAR U '|:RD:|) (GO C)))
      (COND ((FIXP U) (RETURN (CONS (CONS U 1) (LIST U)))))
      (COND
       ((AND (EQCAR U 'QUOTIENT) (FIXP (CADR U)) (FIXP (CADDR U)))
        (RETURN (CONTFRACT2 (CONS (CADR U) (CADDR U)) NIL B N))))
      (COND
       ((EQCAR U '*SQ)
        (PROGN
         (SETQ V (CADR U))
         (COND
          (((LAMBDA (U) (OR (ATOM U) (ATOM (CAR U)))) (SETQ W (CAR V)))
           (COND
            ((AND (FIXP W) (FIXP (CDR V))) (RETURN (CONTFRACT2 V NIL B N)))
            ((AND (EQCAR W '|:RN:|) (EQUAL (CDR V) 1))
             (RETURN (CONTFRACT2 (CDR W) NIL B N)))
            ((AND (EQCAR W '|:RD:|) (EQUAL (CDR V) 1))
             (PROGN (SETQ V W) (GO C)))))))))
      (SETQ OLDMODE (CONS (GET DMODE* 'DNAME) *ROUNDED))
      (COND ((CAR OLDMODE) (SETDMODE (CAR OLDMODE) NIL)))
      (SETDMODE 'ROUNDED T)
      (SETQ *ROUNDED T)
      (SETQ V (REVAL1 U T))
      (SETDMODE 'ROUNDED NIL)
      (COND ((CAR OLDMODE) (SETDMODE (CAR OLDMODE) T)))
      (SETQ *ROUNDED (CDR OLDMODE))
      (COND
       ((AND (EQCAR V 'MINUS) (OR (NUMBERP (CADR V)) (EQCAR (CADR V) '|:RD:|)))
        (SETQ V (|:MINUS| (CADR V)))))
      (COND ((FIXP V) (RETURN (CONS (CONS V 1) (LIST V)))))
      (COND ((NOT (EQCAR V '|:RD:|)) (TYPERR U "continued fraction argument")))
     C
      (SETQ V (RD2RN1 V))
      (RETURN (CONTFRACT2 V T B N)))) 
(PUT 'SIMPCF 'NUMBER-OF-ARGS 1) 
(PUT 'SIMPCF 'DEFINED-ON-LINE '113) 
(PUT 'SIMPCF 'DEFINED-IN-FILE 'RATAPRX/CONTFR.RED) 
(PUT 'SIMPCF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE SIMPCF (U)
    (PROG (ARG2)
      (SETQ ARG2 (REVAL1 (CADR U) NIL))
      (SETQ U (LIST 'CONTFRAC (CAR U) ARG2 (CADDR U)))
      (RETURN (CONS (LIST (CONS (CONS U 1) 1)) 1)))) 
(PUT 'CONTFRAC 'SIMPFN 'SIMPIDEN) 
(PUT 'CONT-FRACT 'NUMBER-OF-ARGS 1) 
(PUT 'CONT-FRACT 'DEFINED-ON-LINE '122) 
(PUT 'CONT-FRACT 'DEFINED-IN-FILE 'RATAPRX/CONTFR.RED) 
(PUT 'CONT-FRACT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE CONT-FRACT (U)
    (PROG (CFR V)
      (SETQ V
              (CONTFRACT1 (CAR U) (COND ((CDR U) (IEVAL (CADR U))))
               (COND ((AND (CDR U) (CDDR U)) (IEVAL (CADDR U))))))
      (SETQ CFR
              (LIST (CAR U) (LIST 'QUOTIENT (CAAR V) (CDAR V))
                    (CONS 'LIST (CDR V))))
      (RETURN (CONS 'CONTFRAC CFR)))) 
(PUT 'CF 'PSOPFN 'CONT-FRACT) 
(PUT 'CONTINUED_FRACTION 'PSOPFN 'CONT-FRACT) 
(ENDMODULE) 