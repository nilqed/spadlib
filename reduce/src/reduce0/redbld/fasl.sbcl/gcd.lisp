(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'GCD)) 
(FLUID '(*EXP *ANYGCD *EZGCD *GCD *HEU-GCD *MCD ASYMPLIS* DMODE* *COMBINEEXPT)) 
(SWITCH (LIST (LIST 'EQUAL 'ANYGCD 'ON) 'EZGCD 'HEUGCD)) 
(PUT 'COMFAC 'NUMBER-OF-ARGS 1) 
(PUT 'COMFAC 'DEFINED-ON-LINE '46) 
(PUT 'COMFAC 'DEFINED-IN-FILE 'POLY/GCD.RED) 
(PUT 'COMFAC 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE COMFAC (P)
    (PROG (X Y)
      (COND
       ((AND (FLAGP DMODE* 'FIELD) (NEQ (SETQ X (LNC P)) 1))
        (SETQ P (MULTD (|:RECIP| X) P))))
      (COND ((NULL (CDR P)) (RETURN (CAR P))))
      (SETQ X (CDAR P))
      (SETQ Y (CAAAR P))
     A
      (SETQ P (CDR P))
      (COND
       ((EQUAL (DEGR P Y) 0)
        (RETURN
         (CONS NIL
               (COND
                ((OR (OR (ATOM P) (ATOM (CAR P)))
                     (NOT
                      (AND (AND *NCMP (NONCOMP1 Y))
                           (AND *NCMP (NONCOMP1 (CAAAR P))))))
                 (GCDF X P))
                (T 1)))))
       ((NULL (CDR P)) (RETURN (CONS (CAAR P) (GCDF X (CDAR P)))))
       (T (SETQ X (GCDF (CDAR P) X))))
      (GO A))) 
(PUT 'DEGR 'NUMBER-OF-ARGS 2) 
(PUT 'DEGR 'DEFINED-ON-LINE '70) 
(PUT 'DEGR 'DEFINED-IN-FILE 'POLY/GCD.RED) 
(PUT 'DEGR 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE DEGR (U VAR)
    (COND ((OR (OR (ATOM U) (ATOM (CAR U))) (NOT (EQ (CAAAR U) VAR))) 0)
          (T (CDAAR U)))) 
(PUT 'GCD 'POLYFN 'GCDF*) 
(PUT 'GCD 'NUMBER-OF-ARGS 2) 
(PUT 'GCDF* 'NUMBER-OF-ARGS 2) 
(PUT 'GCDF* 'DEFINED-ON-LINE '77) 
(PUT 'GCDF* 'DEFINED-IN-FILE 'POLY/GCD.RED) 
(PUT 'GCDF* 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE GCDF* (U V) (PROG (*GCD) (SETQ *GCD T) (RETURN (GCDF U V)))) 
(PUT 'GCDF 'NUMBER-OF-ARGS 2) 
(PUT 'GCDF 'DEFINED-ON-LINE '80) 
(PUT 'GCDF 'DEFINED-IN-FILE 'POLY/GCD.RED) 
(PUT 'GCDF 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE GCDF (U V)
    (PROG (*EXP *ROUNDED MCDSAVED)
      (SETQ MCDSAVED *MCD)
      (SETQ *EXP T)
      (SETQ U
              (COND
               ((OR (OR (ATOM U) (ATOM (CAR U))) (OR (ATOM V) (ATOM (CAR V)))
                    (NOT *EZGCD) DMODE* (FREE-POWERP U) (FREE-POWERP V))
                (PROGN (COND (*COMBINEEXPT (SETQ *MCD T))) (GCDF1 U V)))
               (T (EZGCDF U V))))
      (SETQ *MCD MCDSAVED)
      (RETURN (COND ((MINUSF U) (NEGF U)) (T U))))) 
(PUT 'FREE-POWERP 'NUMBER-OF-ARGS 1) 
(PUT 'FREE-POWERP 'DEFINED-ON-LINE '103) 
(PUT 'FREE-POWERP 'DEFINED-IN-FILE 'POLY/GCD.RED) 
(PUT 'FREE-POWERP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FREE-POWERP (U)
    (AND (NOT (OR (ATOM U) (ATOM (CAR U))))
         (OR (NOT (FIXP (CDAAR U))) (FREE-POWERP (CDAR U))
             (FREE-POWERP (CDR U))))) 
(PUT 'GCDF1 'NUMBER-OF-ARGS 2) 
(PUT 'GCDF1 'DEFINED-ON-LINE '107) 
(PUT 'GCDF1 'DEFINED-IN-FILE 'POLY/GCD.RED) 
(PUT 'GCDF1 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE GCDF1 (U V)
    (PROG (W)
      (COND ((NULL U) (RETURN V)) ((NULL V) (RETURN U))
            ((OR (EQUAL U 1) (EQUAL V 1)) (RETURN 1))
            ((OR (ATOM U) (ATOM (CAR U))) (RETURN (GCDFD U V)))
            ((OR (ATOM V) (ATOM (CAR V))) (RETURN (GCDFD V U)))
            ((OR (NOT *ANYGCD) (NOT (NUM-EXPONENTS U)) (NOT (NUM-EXPONENTS V)))
             (RETURN 1))
            ((QUOTF1 U V) (RETURN V)) ((QUOTF1 V U) (RETURN U)))
      (SETQ W (GCDF2 U V))
      (COND
       ((AND *GCD (NOT (MEMQ DMODE* '(|:RD:| |:CR:|)))
             (OR (NULL (QUOTF1 U W)) (NULL (QUOTF1 V W))))
        (COND
         ((OR (AND *NCMP (NONCOMFP1 U)) (AND *NCMP (NONCOMFP1 V))) (RETURN 1))
         (T (ERRACH (LIST "gcdf failed" (PREPF U) (PREPF V)))))))
      (RETURN W))) 
(PUT 'GCDF2 'NUMBER-OF-ARGS 2) 
(PUT 'GCDF2 'DEFINED-ON-LINE '129) 
(PUT 'GCDF2 'DEFINED-IN-FILE 'POLY/GCD.RED) 
(PUT 'GCDF2 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE GCDF2 (U V)
    (PROG (ASYMPLIS* W Z)
      (COND
       ((OR (NOT *ANYGCD) (NOT (NUM-EXPONENTS U)) (NOT (NUM-EXPONENTS V)))
        (RETURN 1)))
      (COND
       ((AND *GCD (GREATERP (LENGTH (SETQ W (KERNORD U V))) 1))
        (PROGN
         (SETQ W (LIST (SETKORDER W)))
         (SETQ U (REORDER U))
         (SETQ V (REORDER V))))
       (T (SETQ W NIL)))
      (COND
       ((EQ (CAAAR U) (CAAAR V))
        (PROG (X Y)
          (SETQ X (COMFAC U))
          (SETQ Y (COMFAC V))
          (SETQ Z (GCDF1 (CDR X) (CDR Y)))
          (SETQ U (QUOTF1 U (COMFAC-TO-POLY X)))
          (SETQ V (QUOTF1 V (COMFAC-TO-POLY Y)))
          (COND
           (*GCD
            (SETQ Z
                    ((LAMBDA (G569)
                       (COND (*PHYSOP-LOADED (PHYSOP-MULTF G569 Z))
                             (T (POLY-MULTF G569 Z))))
                     (GCDK U V))))
           ((AND V (QUOTF1 U V))
            (SETQ Z
                    (COND (*PHYSOP-LOADED (PHYSOP-MULTF V Z))
                          (T (POLY-MULTF V Z)))))
           ((AND U (QUOTF1 V U))
            (SETQ Z
                    (COND (*PHYSOP-LOADED (PHYSOP-MULTF U Z))
                          (T (POLY-MULTF U Z))))))
          (COND
           ((AND (CAR X) (CAR Y))
            (COND
             ((GREATERP (CDR (CAR X)) (CDR (CAR Y)))
              (SETQ Z
                      ((LAMBDA (G544)
                         (COND (*PHYSOP-LOADED (PHYSOP-MULTF G544 Z))
                               (T (POLY-MULTF G544 Z))))
                       (LIST (CONS (CAR Y) 1)))))
             (T
              (SETQ Z
                      ((LAMBDA (G544)
                         (COND (*PHYSOP-LOADED (PHYSOP-MULTF G544 Z))
                               (T (POLY-MULTF G544 Z))))
                       (LIST (CONS (CAR X) 1))))))))))
       ((AND (AND *NCMP (NONCOMP1 (CAAAR U))) (AND *NCMP (NONCOMP1 (CAAAR V))))
        (SETQ Z (GCDFNC U V (CAAAR V))))
       ((ORDOP (CAAAR U) (CAAAR V)) (SETQ Z (GCDF1 (CDR (COMFAC U)) V)))
       (T (SETQ Z (GCDF1 (CDR (COMFAC V)) U))))
      (COND (W (PROGN (SETKORDER (CAR W)) (SETQ Z (REORDER Z)))))
      (RETURN Z))) 
(PUT 'GCDFNC 'NUMBER-OF-ARGS 3) 
(PUT 'GCDFNC 'DEFINED-ON-LINE '167) 
(PUT 'GCDFNC 'DEFINED-IN-FILE 'POLY/GCD.RED) 
(PUT 'GCDFNC 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE GCDFNC (X P Y)
    (COND
     ((OR (OR (ATOM X) (ATOM (CAR X))) (NOT (AND *NCMP (NONCOMP1 (CAAAR X)))))
      (GCDF1 X P))
     ((NULL (CDR X)) (GCDFNC (CDAR X) P Y))
     (T (GCDF1 (GCDFNC (CDAR X) P Y) (GCDFNC (CDR X) P Y))))) 
(PUT 'NUM-EXPONENTS 'NUMBER-OF-ARGS 1) 
(PUT 'NUM-EXPONENTS 'DEFINED-ON-LINE '172) 
(PUT 'NUM-EXPONENTS 'DEFINED-IN-FILE 'POLY/GCD.RED) 
(PUT 'NUM-EXPONENTS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE NUM-EXPONENTS (U)
    (OR (OR (ATOM U) (ATOM (CAR U)))
        (AND (FIXP (CDAAR U)) (NUM-EXPONENTS (CDAR U))
             (NUM-EXPONENTS (CDR U))))) 
(PUT 'GCDFD 'NUMBER-OF-ARGS 2) 
(PUT 'GCDFD 'DEFINED-ON-LINE '178) 
(PUT 'GCDFD 'DEFINED-IN-FILE 'POLY/GCD.RED) 
(PUT 'GCDFD 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE GCDFD (U V) (COND ((FLAGP DMODE* 'FIELD) 1) (T (GCDFD1 U V)))) 
(PUT 'GCDFD1 'NUMBER-OF-ARGS 2) 
(PUT 'GCDFD1 'DEFINED-ON-LINE '184) 
(PUT 'GCDFD1 'DEFINED-IN-FILE 'POLY/GCD.RED) 
(PUT 'GCDFD1 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE GCDFD1 (U V)
    (COND ((NULL V) U) ((OR (ATOM V) (ATOM (CAR V))) (GCDDD U V))
          (T (GCDFD1 (GCDFD1 U (CDAR V)) (CDR V))))) 
(PUT 'GCDDD 'NUMBER-OF-ARGS 2) 
(PUT 'GCDDD 'DEFINED-ON-LINE '189) 
(PUT 'GCDDD 'DEFINED-IN-FILE 'POLY/GCD.RED) 
(PUT 'GCDDD 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE GCDDD (U V)
    (COND ((OR (EQUAL U 1) (EQUAL V 1)) 1)
          ((ATOM U)
           (COND ((ATOM V) (GCDN U V)) ((FIELDP V) 1) (T (DCOMBINE U V 'GCD))))
          ((ATOM V) (COND ((FLAGP (CAR U) 'FIELD) 1) (T (DCOMBINE U V 'GCD))))
          ((OR (FLAGP (CAR U) 'FIELD) (FLAGP (CAR V) 'FIELD)) 1)
          (T (DCOMBINE U V 'GCD)))) 
(PUT 'GCDK 'NUMBER-OF-ARGS 2) 
(PUT 'GCDK 'DEFINED-ON-LINE '202) 
(PUT 'GCDK 'DEFINED-IN-FILE 'POLY/GCD.RED) 
(PUT 'GCDK 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE GCDK (U V)
    (PROG (LCLST VAR W X)
      (COND ((EQUAL U V) (RETURN U))
            ((OR (OR (ATOM U) (ATOM (CAR U)))
                 (EQUAL (DEGR V (SETQ VAR (CAAAR U))) 0))
             (RETURN 1))
            ((LESSP (CDAAR U) (CDAAR V))
             (PROGN (SETQ W U) (SETQ U V) (SETQ V W))))
      (COND ((QUOTF1 U V) (RETURN V))
            ((AND *HEUGCD (NOT *EZGCD) (SETQ X (HEU-GCD U V))) (RETURN X))
            ((OR (EQUAL (CDAAR V) 1)
                 (AND (GETD 'MODULAR-MULTICHECK) (MODULAR-MULTICHECK U V VAR))
                 (NOT *MCD))
             (RETURN 1)))
     A
      (SETQ W (REMK U V))
      (COND ((NULL W) (RETURN V)) ((EQUAL (DEGR W VAR) 0) (RETURN 1)))
      (SETQ LCLST (ADDLC V LCLST))
      (COND ((SETQ X (QUOTF1 W (CDAR W))) (SETQ W X))
            (T
             (PROG (Y)
               (SETQ Y LCLST)
              LAB
               (COND ((NULL Y) (RETURN NIL)))
               ((LAMBDA (Y)
                  (COND
                   ((OR (AND (ATOM Y) (NOT (FLAGP DMODE* 'FIELD)))
                        (NOT
                         (AND (OR (ATOM Y) (ATOM (CAR Y)))
                              (OR (FLAGP DMODE* 'FIELD)
                                  (AND (SETQ X (GET (CAR Y) 'UNITS))
                                       (MEMBER Y
                                               (PROG (Z FORALL-RESULT
                                                      FORALL-ENDPTR)
                                                 (SETQ Z X)
                                                 (COND ((NULL Z) (RETURN NIL)))
                                                 (SETQ FORALL-RESULT
                                                         (SETQ FORALL-ENDPTR
                                                                 (CONS
                                                                  ((LAMBDA (Z)
                                                                     (CAR Z))
                                                                   (CAR Z))
                                                                  NIL)))
                                                LOOPLABEL
                                                 (SETQ Z (CDR Z))
                                                 (COND
                                                  ((NULL Z)
                                                   (RETURN FORALL-RESULT)))
                                                 (RPLACD FORALL-ENDPTR
                                                         (CONS
                                                          ((LAMBDA (Z) (CAR Z))
                                                           (CAR Z))
                                                          NIL))
                                                 (SETQ FORALL-ENDPTR
                                                         (CDR FORALL-ENDPTR))
                                                 (GO LOOPLABEL))))))))
                    (PROG ()
                     WHILELABEL
                      (COND ((NOT (SETQ X (QUOTF1 W Y))) (RETURN NIL)))
                      (SETQ W X)
                      (GO WHILELABEL)))))
                (CAR Y))
               (SETQ Y (CDR Y))
               (GO LAB))))
      (SETQ U V)
      (SETQ V (PRIM-PART W))
      (COND ((EQUAL (DEGR V VAR) 0) (RETURN 1)) (T (GO A))))) 
(PUT 'ADDLC 'NUMBER-OF-ARGS 2) 
(PUT 'ADDLC 'DEFINED-ON-LINE '235) 
(PUT 'ADDLC 'DEFINED-IN-FILE 'POLY/GCD.RED) 
(PUT 'ADDLC 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE ADDLC (U V)
    (COND ((EQUAL U 1) V)
          (T
           ((LAMBDA (X)
              (COND
               ((OR (EQUAL X 1) (EQUAL X (MINUS 1))
                    (AND (NOT (ATOM X)) (FLAGP (CAR X) 'FIELD)))
                V)
               (T (CONS X V))))
            (CDAR U))))) 
(PUT 'DELALLASC 'NUMBER-OF-ARGS 2) 
(PUT 'DELALLASC 'DEFINED-ON-LINE '242) 
(PUT 'DELALLASC 'DEFINED-IN-FILE 'POLY/GCD.RED) 
(PUT 'DELALLASC 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE DELALLASC (U V)
    (COND ((NULL V) NIL) ((EQ U (CAAR V)) (DELALLASC U (CDR V)))
          (T (CONS (CAR V) (DELALLASC U (CDR V)))))) 
(PUT 'KERNORD 'NUMBER-OF-ARGS 2) 
(PUT 'KERNORD 'DEFINED-ON-LINE '247) 
(PUT 'KERNORD 'DEFINED-IN-FILE 'POLY/GCD.RED) 
(PUT 'KERNORD 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE KERNORD (U V)
    (PROGN
     (SETQ U (KERNORD-SPLIT U V))
     (APPEND (KERNORD-SORT (CAR U)) (KERNORD-SORT (CDR U))))) 
(PUT 'KERNORD-SPLIT 'NUMBER-OF-ARGS 2) 
(PUT 'KERNORD-SPLIT 'DEFINED-ON-LINE '251) 
(PUT 'KERNORD-SPLIT 'DEFINED-IN-FILE 'POLY/GCD.RED) 
(PUT 'KERNORD-SPLIT 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE KERNORD-SPLIT (U V)
    (PROG (X Y)
      (SETQ U (POWERS U))
      (SETQ V (POWERS V))
      (PROG (J)
        (SETQ J U)
       LAB
        (COND ((NULL J) (RETURN NIL)))
        ((LAMBDA (J)
           (COND ((ASSOC (CAR J) V) (SETQ Y (CONS J Y)))
                 (T (SETQ X (CONS J X)))))
         (CAR J))
        (SETQ J (CDR J))
        (GO LAB))
      (PROG (J)
        (SETQ J V)
       LAB
        (COND ((NULL J) (RETURN NIL)))
        ((LAMBDA (J)
           (COND ((ASSOC (CAR J) U) (SETQ Y (CONS J Y)))
                 (T (SETQ X (CONS J X)))))
         (CAR J))
        (SETQ J (CDR J))
        (GO LAB))
      (RETURN (CONS (REVERSIP X) (REVERSIP Y))))) 
(PUT 'KERNORD-SORT 'NUMBER-OF-ARGS 1) 
(PUT 'KERNORD-SORT 'DEFINED-ON-LINE '264) 
(PUT 'KERNORD-SORT 'DEFINED-IN-FILE 'POLY/GCD.RED) 
(PUT 'KERNORD-SORT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE KERNORD-SORT (U)
    (PROG (X Y)
      (PROG ()
       WHILELABEL
        (COND ((NOT U) (RETURN NIL)))
        (PROGN
         (SETQ X (MAXDEG (CDR U) (CAR U)))
         (SETQ U (DELALLASC (CAR X) U))
         (SETQ Y (CONS (CAR X) Y)))
        (GO WHILELABEL))
      (RETURN Y))) 
(PUT 'MAXDEG 'NUMBER-OF-ARGS 2) 
(PUT 'MAXDEG 'DEFINED-ON-LINE '275) 
(PUT 'MAXDEG 'DEFINED-IN-FILE 'POLY/GCD.RED) 
(PUT 'MAXDEG 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MAXDEG (U V)
    (COND ((NULL U) V) ((GREATERP (CDAR U) (CDR V)) (MAXDEG (CDR U) (CAR U)))
          (T (MAXDEG (CDR U) V)))) 
(PUT 'POWERS 'NUMBER-OF-ARGS 1) 
(PUT 'POWERS 'DEFINED-ON-LINE '280) 
(PUT 'POWERS 'DEFINED-IN-FILE 'POLY/GCD.RED) 
(PUT 'POWERS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE POWERS (FORM) (POWERS0 FORM NIL)) 
(PUT 'POWERS0 'NUMBER-OF-ARGS 2) 
(PUT 'POWERS0 'DEFINED-ON-LINE '285) 
(PUT 'POWERS0 'DEFINED-IN-FILE 'POLY/GCD.RED) 
(PUT 'POWERS0 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE POWERS0 (FORM POWLST)
    (COND ((OR (NULL FORM) (OR (ATOM FORM) (ATOM (CAR FORM)))) POWLST)
          (T
           (PROG (X)
             (COND
              ((SETQ X (ATSOC (CAAAR FORM) POWLST))
               (COND
                ((GREATERP (CDAAR FORM) (CDR X))
                 (SETQ POWLST (REPASC (CAAAR FORM) (CDAAR FORM) POWLST)))))
              (T (SETQ POWLST (CONS (CONS (CAAAR FORM) (CDAAR FORM)) POWLST))))
             (RETURN (POWERS0 (CDR FORM) (POWERS0 (CDAR FORM) POWLST))))))) 
(PUT 'LCM 'POLYFN 'LCM*) 
(PUT 'LCM 'NUMBER-OF-ARGS 2) 
(PUT 'LCM* 'NUMBER-OF-ARGS 2) 
(PUT 'LCM* 'DEFINED-ON-LINE '300) 
(PUT 'LCM* 'DEFINED-IN-FILE 'POLY/GCD.RED) 
(PUT 'LCM* 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE LCM* (U V) (PROG (*GCD) (SETQ *GCD T) (RETURN (LCM U V)))) 
(PUT 'LCM 'NUMBER-OF-ARGS 2) 
(PUT 'LCM 'DEFINED-ON-LINE '303) 
(PUT 'LCM 'DEFINED-IN-FILE 'POLY/GCD.RED) 
(PUT 'LCM 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE LCM (U V)
    (COND ((OR (NULL U) (NULL V)) NIL) ((EQUAL U 1) V) ((EQUAL V 1) U)
          (T
           ((LAMBDA (G572)
              (COND (*PHYSOP-LOADED (PHYSOP-MULTF U G572))
                    (T (POLY-MULTF U G572))))
            (QUOTF-FAIL V (GCDF U V)))))) 
(PUT 'REMK 'NUMBER-OF-ARGS 2) 
(PUT 'REMK 'DEFINED-ON-LINE '310) 
(PUT 'REMK 'DEFINED-IN-FILE 'POLY/GCD.RED) 
(PUT 'REMK 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE REMK (U V)
    (PROG (F1 VAR X K N)
      (SETQ K 0)
      (SETQ N 0)
      (SETQ F1 (CDAR V))
      (SETQ VAR (CAAAR V))
      (SETQ N (CDAAR V))
      (PROG ()
       WHILELABEL
        (COND
         ((NOT (GEQ (SETQ K (DIFFERENCE (DEGR U VAR) N)) 0)) (RETURN NIL)))
        (PROGN
         (SETQ X
                 (NEGF
                  (COND (*PHYSOP-LOADED (PHYSOP-MULTF (CDAR U) (CDR V)))
                        (T (POLY-MULTF (CDAR U) (CDR V))))))
         (COND
          ((GREATERP K 0)
           (SETQ X
                   ((LAMBDA (G544)
                      (COND (*PHYSOP-LOADED (PHYSOP-MULTF G544 X))
                            (T (POLY-MULTF G544 X))))
                    (LIST (CONS (CONS VAR K) 1))))))
         (SETQ U
                 (ADDF
                  (COND (*PHYSOP-LOADED (PHYSOP-MULTF F1 (CDR U)))
                        (T (POLY-MULTF F1 (CDR U))))
                  X)))
        (GO WHILELABEL))
      (RETURN U))) 
(PUT 'PRIM-PART 'NUMBER-OF-ARGS 1) 
(PUT 'PRIM-PART 'DEFINED-ON-LINE '324) 
(PUT 'PRIM-PART 'DEFINED-IN-FILE 'POLY/GCD.RED) 
(PUT 'PRIM-PART 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PRIM-PART (U) (QUOTF1 U (COMFAC-TO-POLY (COMFAC U)))) 
(PUT 'COMFAC-TO-POLY 'NUMBER-OF-ARGS 1) 
(PUT 'COMFAC-TO-POLY 'DEFINED-ON-LINE '328) 
(PUT 'COMFAC-TO-POLY 'DEFINED-IN-FILE 'POLY/GCD.RED) 
(PUT 'COMFAC-TO-POLY 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE COMFAC-TO-POLY (U) (COND ((NULL (CAR U)) (CDR U)) (T (LIST U)))) 
(ENDMODULE) 