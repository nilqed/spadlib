(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'INTERFAC)) 
(FLUID '(M-IMAGE-VARIABLE POLY-VECTOR POLYZERO UNKNOWNS-LIST VARLIST)) 
(PUT 'ASSOC-ALPHA 'NUMBER-OF-ARGS 2) 
(PUT 'ASSOC-ALPHA 'DEFINED-ON-LINE '52) 
(PUT 'ASSOC-ALPHA 'DEFINED-IN-FILE 'FACTOR/INTERFAC.RED) 
(PUT 'ASSOC-ALPHA 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE ASSOC-ALPHA (POLY ALIST) (ASSOC POLY ALIST)) 
(PUT 'TERMVECTOR2SF 'NUMBER-OF-ARGS 1) 
(PUT 'TERMVECTOR2SF 'DEFINED-ON-LINE '59) 
(PUT 'TERMVECTOR2SF 'DEFINED-IN-FILE 'FACTOR/INTERFAC.RED) 
(PUT 'TERMVECTOR2SF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE TERMVECTOR2SF (V)
    (PROG (R W)
      (PROG (I)
        (SETQ I (CAR (GETV V 0)))
       LAB
        (COND ((MINUSP (TIMES (MINUS 1) (DIFFERENCE 1 I))) (RETURN NIL)))
        (PROGN
         (SETQ W (GETV V I))
         (SETQ R
                 (COND ((EQUAL (CAR W) 0) (CDR W))
                       (T
                        (CONS
                         (CONS (GETPOWER (FKERN M-IMAGE-VARIABLE) (CAR W))
                               (CDR W))
                         R)))))
        (SETQ I (PLUS2 I (MINUS 1)))
        (GO LAB))
      (RETURN R))) 
(PUT 'FORCE-LC 'NUMBER-OF-ARGS 2) 
(PUT 'FORCE-LC 'DEFINED-ON-LINE '70) 
(PUT 'FORCE-LC 'DEFINED-IN-FILE 'FACTOR/INTERFAC.RED) 
(PUT 'FORCE-LC 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE FORCE-LC (A N) (CONS (CONS (CAAR A) N) (CDR A))) 
(PUT 'MERGE-TERMS 'NUMBER-OF-ARGS 2) 
(PUT 'MERGE-TERMS 'DEFINED-ON-LINE '74) 
(PUT 'MERGE-TERMS 'DEFINED-IN-FILE 'FACTOR/INTERFAC.RED) 
(PUT 'MERGE-TERMS 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MERGE-TERMS (U V) (MERGE-TERMS1 1 U V (CAR (GETV V 0)))) 
(PUT 'MERGE-TERMS1 'NUMBER-OF-ARGS 4) 
(PUT 'MERGE-TERMS1 'DEFINED-ON-LINE '77) 
(PUT 'MERGE-TERMS1 'DEFINED-IN-FILE 'FACTOR/INTERFAC.RED) 
(PUT 'MERGE-TERMS1 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE MERGE-TERMS1 (I U V N)
    (COND ((IGREATERP I N) U)
          (T
           (PROG (A B)
             (SETQ A (GETV V I))
             (COND
              ((OR (OR (ATOM U) (ATOM (CAR U)))
                   (NOT (EQUAL (CAAAR U) M-IMAGE-VARIABLE)))
               (COND
                ((NOT (EQUAL (CAR A) 0))
                 (ERRORF (LIST "merging coeffts failed" U A)))
                ((CDR A) (RETURN (CDR A))) (T (RETURN U)))))
             (SETQ B (CAR U))
             (COND
              ((EQUAL (CDAR B) (CAR A))
               (RETURN
                (CONS (COND ((CDR A) (CONS (CAR B) (CDR A))) (T B))
                      (MERGE-TERMS1 (IPLUS2 I 1) (CDR U) V N))))
              ((IGREATERP (CDAR B) (CAR A))
               (RETURN (CONS B (MERGE-TERMS1 I (CDR U) V N))))
              (T (ERRORF (LIST "merging coeffts failed" U A)))))))) 
(PUT 'LIST-TERMS-IN-FACTOR 'NUMBER-OF-ARGS 1) 
(PUT 'LIST-TERMS-IN-FACTOR 'DEFINED-ON-LINE '93) 
(PUT 'LIST-TERMS-IN-FACTOR 'DEFINED-IN-FILE 'FACTOR/INTERFAC.RED) 
(PUT 'LIST-TERMS-IN-FACTOR 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE LIST-TERMS-IN-FACTOR (U)
    (COND ((OR (ATOM U) (ATOM (CAR U))) (LIST (CONS 0 NIL)))
          (T (CONS (CONS (CDAAR U) NIL) (LIST-TERMS-IN-FACTOR (CDR U)))))) 
(PUT 'TRY-OTHER-COEFFTS 'NUMBER-OF-ARGS 3) 
(PUT 'TRY-OTHER-COEFFTS 'DEFINED-ON-LINE '98) 
(PUT 'TRY-OTHER-COEFFTS 'DEFINED-IN-FILE 'FACTOR/INTERFAC.RED) 
(PUT 'TRY-OTHER-COEFFTS 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE TRY-OTHER-COEFFTS (R UNKNOWNS-LIST UV)
    (PROG (LDEG-R LC-R W)
      (PROG ()
       WHILELABEL
        (COND
         ((NOT
           (AND (NOT (OR (ATOM R) (ATOM (CAR R)))) (SETQ R (CDR R))
                (NOT (EQUAL W 'COMPLETE))))
          (RETURN NIL)))
        (PROGN
         (COND
          ((NOT
            ((LAMBDA (|##Z|)
               (AND (NOT (OR (ATOM |##Z|) (ATOM (CAR |##Z|))))
                    (EQUAL (CAAAR |##Z|) M-IMAGE-VARIABLE)))
             R))
           (PROGN (SETQ LDEG-R 0) (SETQ LC-R R)))
          (T (PROGN (SETQ LDEG-R (CDAAR R)) (SETQ LC-R (CDAR R)))))
         (SETQ W (SOLVE-NEXT-COEFFT LDEG-R LC-R UNKNOWNS-LIST UV)))
        (GO WHILELABEL)))) 
(PUT 'DERIVATIVE-WRT-MAIN-VARIABLE 'NUMBER-OF-ARGS 2) 
(PUT 'DERIVATIVE-WRT-MAIN-VARIABLE 'DEFINED-ON-LINE '112) 
(PUT 'DERIVATIVE-WRT-MAIN-VARIABLE 'DEFINED-IN-FILE 'FACTOR/INTERFAC.RED) 
(PUT 'DERIVATIVE-WRT-MAIN-VARIABLE 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE DERIVATIVE-WRT-MAIN-VARIABLE (P VAR)
    (COND ((OR (OR (ATOM P) (ATOM (CAR P))) (NEQ (CAAAR P) VAR)) NIL)
          (T
           (PROG (DEGREE)
             (SETQ DEGREE (CDAAR P))
             (COND ((EQUAL DEGREE 1) (RETURN (CDAR P))))
             (RETURN
              (CONS
               (CONS (GETPOWER (FKERN (CAAAR P)) (DIFFERENCE DEGREE 1))
                     (COND (*PHYSOP-LOADED (PHYSOP-MULTF DEGREE (CDAR P)))
                           (T (POLY-MULTF DEGREE (CDAR P)))))
               (DERIVATIVE-WRT-MAIN-VARIABLE (CDR P) VAR))))))) 
(PUT 'FAC-UNIVARIATEP 'NUMBER-OF-ARGS 1) 
(PUT 'FAC-UNIVARIATEP 'DEFINED-ON-LINE '125) 
(PUT 'FAC-UNIVARIATEP 'DEFINED-IN-FILE 'FACTOR/INTERFAC.RED) 
(PUT 'FAC-UNIVARIATEP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FAC-UNIVARIATEP (U)
    (OR (OR (ATOM U) (ATOM (CAR U))) (NOT (MULTIVARIATEP U (CAAAR U))))) 
(PUT 'VARIABLES.IN.FORM 'NUMBER-OF-ARGS 2) 
(PUT 'VARIABLES.IN.FORM 'DEFINED-ON-LINE '129) 
(PUT 'VARIABLES.IN.FORM 'DEFINED-IN-FILE 'FACTOR/INTERFAC.RED) 
(PUT 'VARIABLES.IN.FORM 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE VARIABLES.IN.FORM (A SOFAR)
    (COND ((OR (ATOM A) (ATOM (CAR A))) SOFAR)
          (T
           (PROGN
            (COND
             ((NOT (MEMQ (CAAAR A) SOFAR))
              (SETQ SOFAR (CONS (CAAAR A) SOFAR))))
            (VARIABLES.IN.FORM (CDR A) (VARIABLES.IN.FORM (CDAR A) SOFAR)))))) 
(PUT 'DEGREE-IN-VARIABLE 'NUMBER-OF-ARGS 2) 
(PUT 'DEGREE-IN-VARIABLE 'DEFINED-ON-LINE '138) 
(PUT 'DEGREE-IN-VARIABLE 'DEFINED-IN-FILE 'FACTOR/INTERFAC.RED) 
(PUT 'DEGREE-IN-VARIABLE 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE DEGREE-IN-VARIABLE (P V)
    (COND ((OR (ATOM P) (ATOM (CAR P))) 0)
          ((EQUAL (CDAR P) 0)
           (ERRORF "Polynomial with a zero coefficient found"))
          ((EQUAL V (CAAAR P)) (CDAAR P))
          (T
           (MAX (DEGREE-IN-VARIABLE (CDAR P) V)
                (DEGREE-IN-VARIABLE (CDR P) V))))) 
(PUT 'GET-HEIGHT 'NUMBER-OF-ARGS 1) 
(PUT 'GET-HEIGHT 'DEFINED-ON-LINE '148) 
(PUT 'GET-HEIGHT 'DEFINED-IN-FILE 'FACTOR/INTERFAC.RED) 
(PUT 'GET-HEIGHT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE GET-HEIGHT (POLY)
    (COND ((NULL POLY) 0) ((NUMBERP POLY) (ABS POLY))
          (T (MAX (GET-HEIGHT (CDAR POLY)) (GET-HEIGHT (CDR POLY)))))) 
(PUT 'POLY-MINUSP 'NUMBER-OF-ARGS 1) 
(PUT 'POLY-MINUSP 'DEFINED-ON-LINE '155) 
(PUT 'POLY-MINUSP 'DEFINED-IN-FILE 'FACTOR/INTERFAC.RED) 
(PUT 'POLY-MINUSP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE POLY-MINUSP (A)
    (COND ((EQUAL A NIL) NIL) ((OR (ATOM A) (ATOM (CAR A))) (MINUSP A))
          (T (POLY-MINUSP (CDAR A))))) 
(PUT 'POLY-ABS 'NUMBER-OF-ARGS 1) 
(PUT 'POLY-ABS 'DEFINED-ON-LINE '160) 
(PUT 'POLY-ABS 'DEFINED-IN-FILE 'FACTOR/INTERFAC.RED) 
(PUT 'POLY-ABS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE POLY-ABS (A) (COND ((POLY-MINUSP A) (NEGF A)) (T A))) 
(PUT 'FAC-PRINTFACTORS 'NUMBER-OF-ARGS 1) 
(PUT 'FAC-PRINTFACTORS 'DEFINED-ON-LINE '164) 
(PUT 'FAC-PRINTFACTORS 'DEFINED-IN-FILE 'FACTOR/INTERFAC.RED) 
(PUT 'FAC-PRINTFACTORS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE FAC-PRINTFACTORS (L)
    (PROGN
     (TERPRI)
     (COND ((NOT (EQUAL (CAR L) 1)) (PRINTSF (CAR L))))
     (PROG (ITEM)
       (SETQ ITEM (CDR L))
      LAB
       (COND ((NULL ITEM) (RETURN NIL)))
       ((LAMBDA (ITEM)
          (PRINTSF
           (LIST (CONS (GETPOWER (FKERN (PREPF (CAR ITEM))) (CDR ITEM)) 1))))
        (CAR ITEM))
       (SETQ ITEM (CDR ITEM))
       (GO LAB)))) 
(PUT 'INVERT.POLY 'NUMBER-OF-ARGS 2) 
(PUT 'INVERT.POLY 'DEFINED-ON-LINE '180) 
(PUT 'INVERT.POLY 'DEFINED-IN-FILE 'FACTOR/INTERFAC.RED) 
(PUT 'INVERT.POLY 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE INVERT.POLY (U VAR)
    (PROG (W INVERT-SIGN)
      (SETQ W (INVERT.POLY1 (CDR U) (CDAAR U) (CDAR U) VAR))
      (COND
       ((POLY-MINUSP (CDAR W))
        (PROGN (SETQ W (NEGF W)) (SETQ INVERT-SIGN (MINUS 1))))
       (T (SETQ INVERT-SIGN 1)))
      (RETURN (CONS INVERT-SIGN W)))) 
(PUT 'INVERT.POLY1 'NUMBER-OF-ARGS 4) 
(PUT 'INVERT.POLY1 'DEFINED-ON-LINE '196) 
(PUT 'INVERT.POLY1 'DEFINED-IN-FILE 'FACTOR/INTERFAC.RED) 
(PUT 'INVERT.POLY1 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE INVERT.POLY1 (U D V VAR)
    (COND
     ((OR (OR (ATOM U) (ATOM (CAR U))) (NOT (EQUAL (CAAAR U) VAR)))
      (CONS (CONS (CONS VAR D) U) V))
     (T
      (INVERT.POLY1 (CDR U) D
       (CONS (CONS (CONS VAR (DIFFERENCE D (CDAAR U))) (CDAR U)) V) VAR)))) 
(PUT 'TRAILING.COEFFT 'NUMBER-OF-ARGS 2) 
(PUT 'TRAILING.COEFFT 'DEFINED-ON-LINE '204) 
(PUT 'TRAILING.COEFFT 'DEFINED-IN-FILE 'FACTOR/INTERFAC.RED) 
(PUT 'TRAILING.COEFFT 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE TRAILING.COEFFT (U VAR)
    (COND ((OR (ATOM U) (ATOM (CAR U))) U)
          ((EQUAL (CAAAR U) VAR) (TRAILING.COEFFT (CDR U) VAR)) (T U))) 
(PUT 'MAKE-IMAGE-LC-LIST 'NUMBER-OF-ARGS 2) 
(PUT 'MAKE-IMAGE-LC-LIST 'DEFINED-ON-LINE '216) 
(PUT 'MAKE-IMAGE-LC-LIST 'DEFINED-IN-FILE 'FACTOR/INTERFAC.RED) 
(PUT 'MAKE-IMAGE-LC-LIST 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MAKE-IMAGE-LC-LIST (U IMSET)
    (REVERSIP
     (MAKE-IMAGE-LC-LIST1 U IMSET
      (PROG (X FORALL-RESULT FORALL-ENDPTR)
        (SETQ X IMSET)
        (COND ((NULL X) (RETURN NIL)))
        (SETQ FORALL-RESULT
                (SETQ FORALL-ENDPTR (CONS ((LAMBDA (X) (CAR X)) (CAR X)) NIL)))
       LOOPLABEL
        (SETQ X (CDR X))
        (COND ((NULL X) (RETURN FORALL-RESULT)))
        (RPLACD FORALL-ENDPTR (CONS ((LAMBDA (X) (CAR X)) (CAR X)) NIL))
        (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
        (GO LOOPLABEL))))) 
(PUT 'MAKE-IMAGE-LC-LIST1 'NUMBER-OF-ARGS 3) 
(PUT 'MAKE-IMAGE-LC-LIST1 'DEFINED-ON-LINE '220) 
(PUT 'MAKE-IMAGE-LC-LIST1 'DEFINED-IN-FILE 'FACTOR/INTERFAC.RED) 
(PUT 'MAKE-IMAGE-LC-LIST1 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE MAKE-IMAGE-LC-LIST1 (U IMSET VARLIST)
    (COND ((NULL IMSET) NIL)
          ((OR (ATOM U) (ATOM (CAR U))) (LIST (CONS (*D2N U) (CDR VARLIST))))
          ((EQUAL (CAAAR U) (CAAR IMSET))
           (PROG (W)
             (SETQ W
                     (CONS
                      (HORNER-RULE-FOR-ONE-VAR U (CAAR IMSET) (CDAR IMSET)
                       POLYZERO (CDAAR U))
                      (CDR VARLIST)))
             (RETURN
              (COND ((NULL (CAR W)) (LIST (CONS 0 (CDR W))))
                    (T
                     (CONS W
                           (MAKE-IMAGE-LC-LIST1 (CAR W) (CDR IMSET)
                            (CDR VARLIST))))))))
          (T (MAKE-IMAGE-LC-LIST1 U (CDR IMSET) (CDR VARLIST))))) 
(PUT 'HORNER-RULE-FOR-ONE-VAR 'NUMBER-OF-ARGS 5) 
(PUT 'HORNER-RULE-FOR-ONE-VAR 'DEFINED-ON-LINE '241) 
(PUT 'HORNER-RULE-FOR-ONE-VAR 'DEFINED-IN-FILE 'FACTOR/INTERFAC.RED) 
(PUT 'HORNER-RULE-FOR-ONE-VAR 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE HORNER-RULE-FOR-ONE-VAR (U X VAL C DEGG)
    (COND
     ((OR (OR (ATOM U) (ATOM (CAR U))) (NOT (EQUAL (CAAAR U) X)))
      (COND ((ZEROP VAL) U)
            (T
             (ADDF U
                   ((LAMBDA (G570)
                      (COND (*PHYSOP-LOADED (PHYSOP-MULTF C G570))
                            (T (POLY-MULTF C G570))))
                    ((LAMBDA (U) (COND ((ZEROP U) NIL) (T U)))
                     (EXPT VAL DEGG)))))))
     (T
      (PROG (NEWDEG)
        (SETQ NEWDEG (CDAAR U))
        (RETURN
         (HORNER-RULE-FOR-ONE-VAR (CDR U) X VAL
          (COND ((ZEROP VAL) (CDAR U))
                (T
                 (ADDF (CDAR U)
                       ((LAMBDA (G572)
                          (COND (*PHYSOP-LOADED (PHYSOP-MULTF C G572))
                                (T (POLY-MULTF C G572))))
                        ((LAMBDA (U) (COND ((ZEROP U) NIL) (T U)))
                         (EXPT VAL (IDIFFERENCE DEGG NEWDEG)))))))
          NEWDEG)))))) 
(PUT 'MAKE-IMAGE 'NUMBER-OF-ARGS 2) 
(PUT 'MAKE-IMAGE 'DEFINED-ON-LINE '253) 
(PUT 'MAKE-IMAGE 'DEFINED-IN-FILE 'FACTOR/INTERFAC.RED) 
(PUT 'MAKE-IMAGE 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MAKE-IMAGE (U IMSET)
    (COND ((OR (ATOM U) (ATOM (CAR U))) U)
          ((EQUAL (CAAAR U) M-IMAGE-VARIABLE)
           ((LAMBDA (G574 G575)
              (COND ((NULL G574) G575) (T (CONS (CONS (CAAR U) G574) G575))))
            ((LAMBDA (U) (COND ((ZEROP U) NIL) (T U)))
             (EVALUATE-IN-ORDER (CDAR U) IMSET))
            (MAKE-IMAGE (CDR U) IMSET)))
          (T
           ((LAMBDA (U) (COND ((ZEROP U) NIL) (T U)))
            (EVALUATE-IN-ORDER U IMSET))))) 
(PUT 'EVALUATE-IN-ORDER 'NUMBER-OF-ARGS 2) 
(PUT 'EVALUATE-IN-ORDER 'DEFINED-ON-LINE '261) 
(PUT 'EVALUATE-IN-ORDER 'DEFINED-IN-FILE 'FACTOR/INTERFAC.RED) 
(PUT 'EVALUATE-IN-ORDER 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE EVALUATE-IN-ORDER (U IMSET)
    (COND ((OR (ATOM U) (ATOM (CAR U))) (*D2N U))
          ((EQUAL (CAAAR U) (CAAR IMSET))
           (HORNER-RULE (EVALUATE-IN-ORDER (CDAR U) (CDR IMSET)) (CDAAR U)
            (CDR U) IMSET))
          (T (EVALUATE-IN-ORDER U (CDR IMSET))))) 
(PUT 'HORNER-RULE 'NUMBER-OF-ARGS 4) 
(PUT 'HORNER-RULE 'DEFINED-ON-LINE '270) 
(PUT 'HORNER-RULE 'DEFINED-IN-FILE 'FACTOR/INTERFAC.RED) 
(PUT 'HORNER-RULE 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE HORNER-RULE (C DEGG A VSET)
    (COND
     ((OR (ATOM A) (ATOM (CAR A)))
      (COND ((ZEROP (CDAR VSET)) (*D2N A))
            (T (PLUS (*D2N A) (TIMES C (EXPT (CDAR VSET) DEGG))))))
     ((NOT (EQUAL (CAAAR A) (CAAR VSET)))
      (COND ((ZEROP (CDAR VSET)) (EVALUATE-IN-ORDER A (CDR VSET)))
            (T
             (PLUS (EVALUATE-IN-ORDER A (CDR VSET))
                   (TIMES C (EXPT (CDAR VSET) DEGG))))))
     (T
      (PROG (NEWDEG)
        (SETQ NEWDEG (CDAAR A))
        (RETURN
         (HORNER-RULE
          (COND ((ZEROP (CDAR VSET)) (EVALUATE-IN-ORDER (CDAR A) (CDR VSET)))
                (T
                 (PLUS (EVALUATE-IN-ORDER (CDAR A) (CDR VSET))
                       (TIMES C
                              (EXPT (CDAR VSET) (IDIFFERENCE DEGG NEWDEG))))))
          NEWDEG (CDR A) VSET)))))) 
(PUT 'MAX-DEGREE 'NUMBER-OF-ARGS 2) 
(PUT 'MAX-DEGREE 'DEFINED-ON-LINE '291) 
(PUT 'MAX-DEGREE 'DEFINED-IN-FILE 'FACTOR/INTERFAC.RED) 
(PUT 'MAX-DEGREE 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MAX-DEGREE (U N)
    (COND ((OR (ATOM U) (ATOM (CAR U))) N)
          ((IGREATERP N (CDAAR U))
           (MAX-DEGREE (CDR U) (MAX-DEGREE (CDAR U) N)))
          (T (MAX-DEGREE (CDR U) (MAX-DEGREE (CDAR U) (CDAAR U)))))) 
(PUT 'MAX-COEFFICIENT-DEGREE 'NUMBER-OF-ARGS 1) 
(PUT 'MAX-COEFFICIENT-DEGREE 'DEFINED-ON-LINE '298) 
(PUT 'MAX-COEFFICIENT-DEGREE 'DEFINED-IN-FILE 'FACTOR/INTERFAC.RED) 
(PUT 'MAX-COEFFICIENT-DEGREE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MAX-COEFFICIENT-DEGREE (U)
    (PROG (R)
      (SETQ R 1)
      (PROG ()
       WHILELABEL
        (COND ((NOT (NOT (OR (ATOM U) (ATOM (CAR U))))) (RETURN NIL)))
        (PROGN (SETQ R (MAX-DEGREE (CDAR U) R)) (SETQ U (CDR U)))
        (GO WHILELABEL))
      (RETURN R))) 
(PUT 'DIFF-OVER-K-MOD-P 'NUMBER-OF-ARGS 3) 
(PUT 'DIFF-OVER-K-MOD-P 'DEFINED-ON-LINE '310) 
(PUT 'DIFF-OVER-K-MOD-P 'DEFINED-IN-FILE 'FACTOR/INTERFAC.RED) 
(PUT 'DIFF-OVER-K-MOD-P 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE DIFF-OVER-K-MOD-P (U K V)
    (COND ((OR (ATOM U) (ATOM (CAR U))) NIL)
          ((EQUAL (CAAAR U) V)
           (COND
            ((EQUAL (CDAAR U) 1) (QUOTFAIL-MOD-P (CDAR U) (MODULAR-NUMBER K)))
            (T
             ((LAMBDA (G577 G578)
                (COND ((NULL G577) G578)
                      (T
                       (CONS (CONS (GETPOWER (FKERN V) (ISUB1 (CDAAR U))) G577)
                             G578))))
              (QUOTFAIL-MOD-P (TIMES-MOD-P (MODULAR-NUMBER (CDAAR U)) (CDAR U))
               (MODULAR-NUMBER K))
              (DIFF-OVER-K-MOD-P (CDR U) K V)))))
          (T
           ((LAMBDA (G580 G581)
              (COND ((NULL G580) G581) (T (CONS (CONS (CAAR U) G580) G581))))
            (DIFF-OVER-K-MOD-P (CDAR U) K V) (DIFF-OVER-K-MOD-P (CDR U) K V))))) 
(PUT 'DIFF-K-TIMES-MOD-P 'NUMBER-OF-ARGS 3) 
(PUT 'DIFF-K-TIMES-MOD-P 'DEFINED-ON-LINE '324) 
(PUT 'DIFF-K-TIMES-MOD-P 'DEFINED-IN-FILE 'FACTOR/INTERFAC.RED) 
(PUT 'DIFF-K-TIMES-MOD-P 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE DIFF-K-TIMES-MOD-P (U K V)
    (COND ((OR (ATOM U) (ATOM (CAR U))) NIL)
          ((EQUAL (CAAAR U) V)
           (COND ((LESSP (CDAAR U) K) NIL) ((EQUAL (CDAAR U) K) (CDAR U))
                 (T
                  ((LAMBDA (G583 G584)
                     (COND ((NULL G583) G584)
                           (T
                            (CONS
                             (CONS
                              (GETPOWER (FKERN V) (DIFFERENCE (CDAAR U) K))
                              G583)
                             G584))))
                   (TIMES-MOD-P (BINOMIAL-COEFFT-MOD-P (CDAAR U) K) (CDAR U))
                   (DIFF-K-TIMES-MOD-P (CDR U) K V)))))
          (T
           ((LAMBDA (G586 G587)
              (COND ((NULL G586) G587) (T (CONS (CONS (CAAR U) G586) G587))))
            (DIFF-K-TIMES-MOD-P (CDAR U) K V)
            (DIFF-K-TIMES-MOD-P (CDR U) K V))))) 
(PUT 'SPREADVAR 'NUMBER-OF-ARGS 3) 
(PUT 'SPREADVAR 'DEFINED-ON-LINE '339) 
(PUT 'SPREADVAR 'DEFINED-IN-FILE 'FACTOR/INTERFAC.RED) 
(PUT 'SPREADVAR 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE SPREADVAR (U V SLIST)
    (COND ((OR (ATOM U) (ATOM (CAR U))) SLIST)
          (T
           (PROGN
            (COND
             ((AND (EQUAL (CAAAR U) V) (NOT (MEMBER (CDAAR U) SLIST)))
              (SETQ SLIST (CONS (CDAAR U) SLIST))))
            (SPREADVAR (CDR U) V (SPREADVAR (CDAR U) V SLIST)))))) 
(PUT 'ROOT-SQUARES 'NUMBER-OF-ARGS 2) 
(PUT 'ROOT-SQUARES 'DEFINED-ON-LINE '352) 
(PUT 'ROOT-SQUARES 'DEFINED-IN-FILE 'FACTOR/INTERFAC.RED) 
(PUT 'ROOT-SQUARES 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE ROOT-SQUARES (U SOFAR)
    (COND ((NULL U) (PMAM-SQRT SOFAR))
          ((OR (ATOM U) (ATOM (CAR U))) (PMAM-SQRT (PLUS SOFAR (TIMES U U))))
          (T (ROOT-SQUARES (CDR U) (PLUS SOFAR (TIMES (CDAR U) (CDAR U))))))) 
(PUT 'POLY-TO-VECTOR 'NUMBER-OF-ARGS 1) 
(PUT 'POLY-TO-VECTOR 'DEFINED-ON-LINE '361) 
(PUT 'POLY-TO-VECTOR 'DEFINED-IN-FILE 'FACTOR/INTERFAC.RED) 
(PUT 'POLY-TO-VECTOR 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE POLY-TO-VECTOR (P)
    (COND ((OR (ATOM P) (ATOM (CAR P))) (PUTV POLY-VECTOR 0 (*D2N P)))
          (T
           (PROGN
            (PUTV POLY-VECTOR (CDAAR P) (CDAR P))
            (POLY-TO-VECTOR (CDR P)))))) 
(PUT 'VECTOR-TO-POLY 'NUMBER-OF-ARGS 3) 
(PUT 'VECTOR-TO-POLY 'DEFINED-ON-LINE '368) 
(PUT 'VECTOR-TO-POLY 'DEFINED-IN-FILE 'FACTOR/INTERFAC.RED) 
(PUT 'VECTOR-TO-POLY 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE VECTOR-TO-POLY (P D V)
    (PROG (R)
      (COND ((ILESSP D 0) (RETURN NIL)))
      (SETQ R ((LAMBDA (U) (COND ((ZEROP U) NIL) (T U))) (GETV P 0)))
      (PROG (I)
        (SETQ I 1)
       LAB
        (COND ((MINUSP (DIFFERENCE D I)) (RETURN NIL)))
        (COND
         ((NEQ (GETV P I) 0) (SETQ R (CONS (CONS (CONS V I) (GETV P I)) R))))
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (RETURN R))) 
(ENDMODULE) 