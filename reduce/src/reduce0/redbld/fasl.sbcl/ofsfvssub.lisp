(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'OFSFVSSUB)) 
(REVISION 'OFSFVSSUB
          "$Id: ofsfvssub.red 5986 2021-08-28 13:35:27Z thomas-sturm $") 
(COPYRIGHT 'OFSFVSSUB "(c) 2015-2017 M. Kosta, T. Sturm") 
(PUT 'VSVS_ARP 'NUMBER-OF-ARGS 1) 
(DE VSVS_ARP (VS) (VSARP VS)) 
(PUT 'VSVS_DGP 'NUMBER-OF-ARGS 1) 
(DE VSVS_DGP (VS) (VSDGP VS)) 
(PUT 'VSVS_TSP 'NUMBER-OF-ARGS 1) 
(DE VSVS_TSP (VS) (VSTSP VS)) 
(PUT 'VSVS_V 'NUMBER-OF-ARGS 1) 
(DE VSVS_V (VS) (NTH VS 2)) 
(PUT 'VSAR_MK 'NUMBER-OF-ARGS 1) 
(DE VSAR_MK (X) (LIST 'VSAR X)) 
(PUT 'VSDG_MK 'NUMBER-OF-ARGS 3) 
(DE VSDG_MK (X G SV) (LIST 'VSDG X G SV)) 
(PUT 'VSDG_G 'NUMBER-OF-ARGS 1) 
(DE VSDG_G (VS) (NTH VS 3)) 
(PUT 'VSDG_SV 'NUMBER-OF-ARGS 1) 
(DE VSDG_SV (VS) (NTH VS 4)) 
(PUT 'VSTS_MK 'NUMBER-OF-ARGS 2) 
(DE VSTS_MK (X TP) (LIST 'VSTS X TP)) 
(PUT 'VSTS_TP 'NUMBER-OF-ARGS 1) 
(DE VSTS_TP (VS) (NTH VS 3)) 
(PUT 'VSVS_REORDER 'NUMBER-OF-ARGS 1) 
(DE VSVS_REORDER (VS)
    (COND ((VSVS_TSP VS) (LIST 'VSTS (VSVS_V VS) (VSTP_REORDER (VSTS_TP VS))))
          (T VS))) 
(PUT 'VSDS_NEW 'NUMBER-OF-ARGS 0) 
(DE VSDS_NEW NIL
    (PROG (DS)
      (SETQ DS (MKVECT 6))
      (PUTV DS 0 'VSDS)
      (PUTV DS 1 'UNDEFINED)
      (PUTV DS 2 'UNDEFINED)
      (PUTV DS 3 'UNDEFINED)
      (PUTV DS 4 'UNDEFINED)
      (PUTV DS 5 'UNDEFINED)
      (PUTV DS 6 'UNDEFINED)
      (RETURN DS))) 
(PUT 'VSDS_VS 'NUMBER-OF-ARGS 1) 
(PUT 'VSDS_VS 'DEFINED-ON-LINE '99) 
(PUT 'VSDS_VS 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFVSSUB.RED) 
(PUT 'VSDS_VS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE VSDS_VS (DS) (GETV DS 1)) 
(PUT 'VSDS_F 'NUMBER-OF-ARGS 1) 
(PUT 'VSDS_F 'DEFINED-ON-LINE '100) 
(PUT 'VSDS_F 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFVSSUB.RED) 
(PUT 'VSDS_F 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE VSDS_F (DS) (GETV DS 2)) 
(PUT 'VSDS_BVL 'NUMBER-OF-ARGS 1) 
(PUT 'VSDS_BVL 'DEFINED-ON-LINE '101) 
(PUT 'VSDS_BVL 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFVSSUB.RED) 
(PUT 'VSDS_BVL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE VSDS_BVL (DS) (GETV DS 3)) 
(PUT 'VSDS_PTHEO 'NUMBER-OF-ARGS 1) 
(PUT 'VSDS_PTHEO 'DEFINED-ON-LINE '102) 
(PUT 'VSDS_PTHEO 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFVSSUB.RED) 
(PUT 'VSDS_PTHEO 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE VSDS_PTHEO (DS) (GETV DS 4)) 
(PUT 'VSDS_TTHEO 'NUMBER-OF-ARGS 1) 
(PUT 'VSDS_TTHEO 'DEFINED-ON-LINE '103) 
(PUT 'VSDS_TTHEO 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFVSSUB.RED) 
(PUT 'VSDS_TTHEO 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE VSDS_TTHEO (DS) (GETV DS 5)) 
(PUT 'VSDS_RES 'NUMBER-OF-ARGS 1) 
(PUT 'VSDS_RES 'DEFINED-ON-LINE '104) 
(PUT 'VSDS_RES 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFVSSUB.RED) 
(PUT 'VSDS_RES 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE VSDS_RES (DS) (GETV DS 6)) 
(PUT 'VSDS_PUTVS 'NUMBER-OF-ARGS 2) 
(PUT 'VSDS_PUTVS 'DEFINED-ON-LINE '106) 
(PUT 'VSDS_PUTVS 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFVSSUB.RED) 
(PUT 'VSDS_PUTVS 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE VSDS_PUTVS (DS VS) (PUTV DS 1 VS)) 
(PUT 'VSDS_PUTF 'NUMBER-OF-ARGS 2) 
(PUT 'VSDS_PUTF 'DEFINED-ON-LINE '107) 
(PUT 'VSDS_PUTF 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFVSSUB.RED) 
(PUT 'VSDS_PUTF 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE VSDS_PUTF (DS F) (PUTV DS 2 F)) 
(PUT 'VSDS_PUTBVL 'NUMBER-OF-ARGS 2) 
(PUT 'VSDS_PUTBVL 'DEFINED-ON-LINE '108) 
(PUT 'VSDS_PUTBVL 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFVSSUB.RED) 
(PUT 'VSDS_PUTBVL 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE VSDS_PUTBVL (DS BVL) (PUTV DS 3 BVL)) 
(PUT 'VSDS_PUTPTHEO 'NUMBER-OF-ARGS 2) 
(PUT 'VSDS_PUTPTHEO 'DEFINED-ON-LINE '109) 
(PUT 'VSDS_PUTPTHEO 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFVSSUB.RED) 
(PUT 'VSDS_PUTPTHEO 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE VSDS_PUTPTHEO (DS PTHEO) (PUTV DS 4 PTHEO)) 
(PUT 'VSDS_PUTTTHEO 'NUMBER-OF-ARGS 2) 
(PUT 'VSDS_PUTTTHEO 'DEFINED-ON-LINE '110) 
(PUT 'VSDS_PUTTTHEO 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFVSSUB.RED) 
(PUT 'VSDS_PUTTTHEO 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE VSDS_PUTTTHEO (DS TTHEO) (PUTV DS 5 TTHEO)) 
(PUT 'VSDS_PUTRES 'NUMBER-OF-ARGS 2) 
(PUT 'VSDS_PUTRES 'DEFINED-ON-LINE '111) 
(PUT 'VSDS_PUTRES 'DEFINED-IN-FILE 'REDLOG/OFSF/OFSFVSSUB.RED) 
(PUT 'VSDS_PUTRES 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE VSDS_PUTRES (DS RES) (PUTV DS 6 RES)) 
(PUT 'VSDS_MK 'NUMBER-OF-ARGS 5) 
(DE VSDS_MK (VS F BVL PTHEO TTHEO)
    (PROG (DS)
      (SETQ DS (VSDS_NEW))
      (VSDS_PUTVS DS VS)
      (VSDS_PUTF DS F)
      (VSDS_PUTBVL DS BVL)
      (VSDS_PUTPTHEO DS PTHEO)
      (VSDS_PUTTTHEO DS TTHEO)
      (VSDS_PUTRES DS NIL)
      (RETURN DS))) 
(PUT 'VSDS_MKFROM 'NUMBER-OF-ARGS 1) 
(DE VSDS_MKFROM (DS)
    (PROG (NDS)
      (SETQ NDS (VSDS_NEW))
      (VSDS_PUTVS NDS (VSDS_VS DS))
      (VSDS_PUTF NDS (VSDS_F DS))
      (VSDS_PUTBVL NDS (VSDS_BVL DS))
      (VSDS_PUTPTHEO NDS (VSDS_PTHEO DS))
      (VSDS_PUTTTHEO NDS (VSDS_TTHEO DS))
      (VSDS_PUTRES NDS (VSDS_RES DS))
      (RETURN NDS))) 
(PUT 'QFF_APPLYVS 'NUMBER-OF-ARGS 4) 
(DE QFF_APPLYVS (VS F BVL THEO)
    (PROG (DS FF)
      (SETQ DS (VSDS_MK VS F BVL THEO NIL))
      (VSDS_APPLYVS DS)
      (SETQ FF (VSDS_RES DS))
      (RETURN (VS_SPLITOR FF)))) 
(PUT 'VSDS_APPLYVS 'NUMBER-OF-ARGS 1) 
(DE VSDS_APPLYVS (DS)
    (PROG (VS)
      (SETQ VS (VSDS_VS DS))
      (COND ((VSVS_ARP VS) (VSDS_APPLYVSAR DS)))
      (COND ((VSVS_DGP VS) (VSDS_APPLYVSDG DS)))
      (COND ((VSVS_TSP VS) (VS_APPLYFN 'FN_APPLYVSTS (LIST DS)))))) 
(PUT 'VSDS_APPLYVSAR 'NUMBER-OF-ARGS 1) 
(DE VSDS_APPLYVSAR (DS) (PROGN (COND (NIL NIL)) (VSDS_PUTRES DS (VSDS_F DS)))) 
(PUT 'VSDS_APPLYVSDG 'NUMBER-OF-ARGS 1) 
(DE VSDS_APPLYVSDG (DS)
    (PROG (VS F)
      (SETQ VS (VSDS_VS DS))
      (SETQ F (VSDS_F DS))
      (SETQ F
              (CL_APPLY2ATS1 F 'VSDG_DECDEG
                             (LIST (VSVS_V VS) (VSDG_G VS) (VSDG_SV VS))))
      (COND
       ((EVENP (VSDG_G VS))
        (SETQ F
                (LIST 'AND
                      (LIST 'GEQ (LIST (CONS (CONS (VSDG_SV VS) 1) 1)) NIL)
                      F))))
      (VSDS_PUTRES DS F))) 
(PUT 'VSDG_DECDEG 'NUMBER-OF-ARGS 4) 
(DE VSDG_DECDEG (AT X G Y)
    (PROG (F)
      (SETQ F (CADR AT))
      (SETQ F (SFTO_DECDEGF F X G))
      (RETURN
       (LIST (COND ((ATOM AT) AT) (T (CAR AT))) (SFTO_RENAMEF F X Y) NIL)))) 
(PUT 'VSDS_APPLYVSTS 'NUMBER-OF-ARGS 1) 
(DE VSDS_APPLYVSTS (DS)
    (PROG (VS F TP TTHEO THEO G)
      (SETQ VS (VSDS_VS DS))
      (SETQ F (VSDS_F DS))
      (SETQ TP (VSTS_TP VS))
      (SETQ TTHEO (VSDS_TTHEO DS))
      (SETQ THEO (APPEND (VSDS_PTHEO DS) TTHEO))
      (PROG (G555)
        (SETQ G555 (VSDS_G2GTT (VSTP_GUARD TP) THEO TTHEO))
        (SETQ G (CAR G555))
        (SETQ TTHEO (CDR G555))
        (RETURN G555))
      (COND ((EQ G 'FALSE) (PROGN (VSDS_PUTRES DS 'FALSE) (RETURN NIL))))
      (VSDS_PUTTTHEO DS TTHEO)
      (SETQ F (QFF_REPLACEL F (VSTP_GPL TP) 'FALSE))
      (COND
       (*RLVERBOSE
        (PROGN
         (IOTO_TPRIN2 (LIST "+++++ VSUB " (VSVS_V VS) " "))
         (IOTO_PRIN2 "[condense"))))
      (SETQ F (QFF_CONDENSE F (VSTP_P TP)))
      (COND (*RLVERBOSE (PROGN (IOTO_PRIN2 "]") (IOTO_PRIN2 "[substitute"))))
      (SETQ F (CL_APPLY2ATS1 F 'VSDS_APPLYVSTS-AT (LIST DS)))
      (COND (*RLVERBOSE (PROGN (IOTO_PRIN2 "]") (IOTO_PRIN2 "[simplify"))))
      (SETQ F (CL_SIMPL (LIST 'AND G F) THEO (MINUS 1)))
      (COND (*RLVERBOSE (IOTO_PRIN2T "]")))
      (VSDS_PUTRES DS F))) 
(PUT 'VSDS_G2GTT 'NUMBER-OF-ARGS 3) 
(DE VSDS_G2GTT (G THEO TTHEO)
    (PROG (OP)
      (SETQ G (CL_SIMPL G THEO (MINUS 1)))
      (COND ((OR (EQ G 'TRUE) (EQ G 'FALSE)) (RETURN (CONS G TTHEO))))
      (SETQ OP (COND ((ATOM G) G) (T (CAR G))))
      (COND
       ((NOT
         (OR (OR (OR (EQ OP 'OR) (EQ OP 'AND)) (EQ OP 'NOT))
             (OR (EQ OP 'IMPL) (EQ OP 'REPL) (EQ OP 'EQUIV))))
        (RETURN (CONS G (APPEND TTHEO (LIST G))))))
      (COND
       ((EQ OP 'AND)
        (PROGN
         (RETURN
          (CONS G
                (APPEND TTHEO
                        (PROG (F FORALL-RESULT FORALL-ENDPTR)
                          (SETQ F (CDR G))
                         STARTOVER
                          (COND ((NULL F) (RETURN NIL)))
                          (SETQ FORALL-RESULT
                                  ((LAMBDA (F)
                                     (COND
                                      ((NOT
                                        ((LAMBDA (X)
                                           (OR
                                            (OR (OR (EQ X 'OR) (EQ X 'AND))
                                                (EQ X 'NOT))
                                            (OR (EQ X 'IMPL) (EQ X 'REPL)
                                                (EQ X 'EQUIV))))
                                         (COND ((ATOM F) F) (T (CAR F)))))
                                       (LIST F))))
                                   (CAR F)))
                          (SETQ FORALL-ENDPTR (LASTPAIR FORALL-RESULT))
                          (SETQ F (CDR F))
                          (COND ((ATOM FORALL-ENDPTR) (GO STARTOVER)))
                         LOOPLABEL
                          (COND ((NULL F) (RETURN FORALL-RESULT)))
                          (RPLACD FORALL-ENDPTR
                                  ((LAMBDA (F)
                                     (COND
                                      ((NOT
                                        ((LAMBDA (X)
                                           (OR
                                            (OR (OR (EQ X 'OR) (EQ X 'AND))
                                                (EQ X 'NOT))
                                            (OR (EQ X 'IMPL) (EQ X 'REPL)
                                                (EQ X 'EQUIV))))
                                         (COND ((ATOM F) F) (T (CAR F)))))
                                       (LIST F))))
                                   (CAR F)))
                          (SETQ FORALL-ENDPTR (LASTPAIR FORALL-ENDPTR))
                          (SETQ F (CDR F))
                          (GO LOOPLABEL))))))))
      (RETURN (CONS G TTHEO)))) 
(PUT 'QFF_CONDENSE 'NUMBER-OF-ARGS 2) 
(DE QFF_CONDENSE (F P)
    (PROG (OP NCL N I)
      (SETQ N 0)
      (SETQ I 0)
      (COND ((NULL P) (RETURN F)))
      (SETQ OP (COND ((ATOM F) F) (T (CAR F))))
      (COND (NIL NIL))
      (SETQ N (CAR P))
      (COND
       ((EQ OP 'AND)
        (PROGN
         (PROG (C)
           (SETQ C (CDR F))
          LAB
           (COND ((NULL C) (RETURN NIL)))
           ((LAMBDA (C)
              (PROGN
               (SETQ I (PLUS I 1))
               (COND
                ((EQN I N)
                 (PROG (W1)
                   (SETQ W1 (QFF_CONDENSE C (CDR P)))
                   (SETQ NCL (CONS W1 NCL))
                   (RETURN W1)))
                (T (PROGN (SETQ NCL (CONS C NCL)) C)))))
            (CAR C))
           (SETQ C (CDR C))
           (GO LAB))
         (RETURN (CONS OP (REVERSIP NCL))))))
      (PROG (C)
        (SETQ C (CDR F))
       LAB
        (COND ((NULL C) (RETURN NIL)))
        ((LAMBDA (C)
           (PROGN
            (SETQ I (PLUS I 1))
            (COND
             ((EQN I N)
              (PROG (W1)
                (SETQ W1 (QFF_CONDENSE C (CDR P)))
                (SETQ NCL (CONS W1 NCL))
                (RETURN W1)))
             (T (PROGN (SETQ NCL (CONS 'FALSE NCL)) 'FALSE)))))
         (CAR C))
        (SETQ C (CDR C))
        (GO LAB))
      (RETURN (CONS OP (REVERSIP NCL))))) 
(PUT 'VSDS_APPLYVSTS-AT 'NUMBER-OF-ARGS 2) 
(DE VSDS_APPLYVSTS-AT (AT DS)
    (PROG (X NP W PR THEO)
      (SETQ X (VSVS_V (VSDS_VS DS)))
      (SETQ NP (VSTP_NP (VSTS_TP (VSDS_VS DS))))
      (SETQ W
              (COND ((MEMQ NP '(MINF PINF)) (VSDS_EXPAND-AT-INF AT X NP))
                    ((MEMQ NP '(MEPS PEPS)) (VSDS_EXPAND-AT-EPS AT X NP))
                    (T AT)))
      (COND ((MEMQ NP '(MINF PINF)) (RETURN W)))
      (SETQ PR (VSTP_PR (VSTS_TP (VSDS_VS DS))))
      (SETQ THEO (APPEND (VSDS_PTHEO DS) (VSDS_TTHEO DS)))
      (RETURN (CL_APPLY2ATS1 W 'VSDS_APPLYVSTS-AT-PR (LIST PR THEO))))) 
(PUT 'VSDS_EXPAND-AT-INF 'NUMBER-OF-ARGS 3) 
(DE VSDS_EXPAND-AT-INF (AT X NP)
    (PROG (G OP)
      (COND (NIL NIL))
      (COND ((OR (EQ AT 'TRUE) (EQ AT 'FALSE)) (RETURN AT)))
      (SETQ G (CADR AT))
      (COND ((NOT (SFTO_MVARTEST G X)) (RETURN AT)))
      (SETQ OP (COND ((ATOM AT) AT) (T (CAR AT))))
      (COND
       ((EQ OP 'EQUAL)
        (RETURN
         (CONS 'AND
               (PROG (C FORALL-RESULT FORALL-ENDPTR)
                 (SETQ C (COEFFS G))
                 (COND ((NULL C) (RETURN NIL)))
                 (SETQ FORALL-RESULT
                         (SETQ FORALL-ENDPTR
                                 (CONS
                                  ((LAMBDA (C) (LIST 'EQUAL C NIL)) (CAR C))
                                  NIL)))
                LOOPLABEL
                 (SETQ C (CDR C))
                 (COND ((NULL C) (RETURN FORALL-RESULT)))
                 (RPLACD FORALL-ENDPTR
                         (CONS ((LAMBDA (C) (LIST 'EQUAL C NIL)) (CAR C)) NIL))
                 (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                 (GO LOOPLABEL))))))
      (COND
       ((EQ OP 'NEQ)
        (RETURN
         (CONS 'OR
               (PROG (C FORALL-RESULT FORALL-ENDPTR)
                 (SETQ C (COEFFS G))
                 (COND ((NULL C) (RETURN NIL)))
                 (SETQ FORALL-RESULT
                         (SETQ FORALL-ENDPTR
                                 (CONS ((LAMBDA (C) (LIST 'NEQ C NIL)) (CAR C))
                                       NIL)))
                LOOPLABEL
                 (SETQ C (CDR C))
                 (COND ((NULL C) (RETURN FORALL-RESULT)))
                 (RPLACD FORALL-ENDPTR
                         (CONS ((LAMBDA (C) (LIST 'NEQ C NIL)) (CAR C)) NIL))
                 (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                 (GO LOOPLABEL))))))
      (RETURN (VSDS_EXPAND-AT-INF1 OP G X NP)))) 
(PUT 'VSDS_EXPAND-AT-INF1 'NUMBER-OF-ARGS 4) 
(DE VSDS_EXPAND-AT-INF1 (OP G X NP)
    (PROG (W)
      (COND (NIL NIL))
      (COND ((NOT (SFTO_MVARTEST G X)) (RETURN (LIST OP G NIL))))
      (SETQ W
              (COND
               ((AND (EQ NP 'MINF) (NOT (EVENP (CDAAR G)))) (NEGF (CDAR G)))
               (T (CDAR G))))
      (RETURN
       (CONS 'OR
             (LIST (LIST (OFSF_MKSTRICT OP) W NIL)
                   (CONS 'AND
                         (LIST (LIST 'EQUAL W NIL)
                               (VSDS_EXPAND-AT-INF1 OP (CDR G) X NP)))))))) 
(PUT 'VSDS_EXPAND-AT-EPS 'NUMBER-OF-ARGS 3) 
(DE VSDS_EXPAND-AT-EPS (AT X NP)
    (PROG (G OP)
      (COND (NIL NIL))
      (COND ((OR (EQ AT 'TRUE) (EQ AT 'FALSE)) (RETURN AT)))
      (SETQ G (CADR AT))
      (COND ((NOT (SFTO_MVARTEST G X)) (RETURN AT)))
      (SETQ OP (COND ((ATOM AT) AT) (T (CAR AT))))
      (COND
       ((EQ OP 'EQUAL)
        (RETURN
         (CONS 'AND
               (PROG (C FORALL-RESULT FORALL-ENDPTR)
                 (SETQ C (COEFFS G))
                 (COND ((NULL C) (RETURN NIL)))
                 (SETQ FORALL-RESULT
                         (SETQ FORALL-ENDPTR
                                 (CONS
                                  ((LAMBDA (C) (LIST 'EQUAL C NIL)) (CAR C))
                                  NIL)))
                LOOPLABEL
                 (SETQ C (CDR C))
                 (COND ((NULL C) (RETURN FORALL-RESULT)))
                 (RPLACD FORALL-ENDPTR
                         (CONS ((LAMBDA (C) (LIST 'EQUAL C NIL)) (CAR C)) NIL))
                 (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                 (GO LOOPLABEL))))))
      (COND
       ((EQ OP 'NEQ)
        (RETURN
         (CONS 'OR
               (PROG (C FORALL-RESULT FORALL-ENDPTR)
                 (SETQ C (COEFFS G))
                 (COND ((NULL C) (RETURN NIL)))
                 (SETQ FORALL-RESULT
                         (SETQ FORALL-ENDPTR
                                 (CONS ((LAMBDA (C) (LIST 'NEQ C NIL)) (CAR C))
                                       NIL)))
                LOOPLABEL
                 (SETQ C (CDR C))
                 (COND ((NULL C) (RETURN FORALL-RESULT)))
                 (RPLACD FORALL-ENDPTR
                         (CONS ((LAMBDA (C) (LIST 'NEQ C NIL)) (CAR C)) NIL))
                 (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                 (GO LOOPLABEL))))))
      (RETURN (VSDS_EXPAND-AT-EPS1 OP G X NP)))) 
(PUT 'VSDS_EXPAND-AT-EPS1 'NUMBER-OF-ARGS 4) 
(DE VSDS_EXPAND-AT-EPS1 (OP G X NP)
    (PROG (DG)
      (COND (NIL NIL))
      (COND ((NOT (SFTO_MVARTEST G X)) (RETURN (LIST OP G NIL))))
      (SETQ DG (COND ((EQ NP 'PEPS) (DIFF G X)) (T (NEGF (DIFF G X)))))
      (RETURN
       (CONS 'OR
             (LIST (LIST (OFSF_MKSTRICT OP) G NIL)
                   (CONS 'AND
                         (LIST (LIST 'EQUAL G NIL)
                               (VSDS_EXPAND-AT-EPS1 OP DG X NP)))))))) 
(PUT 'VSDS_APPLYVSTS-AT-PR 'NUMBER-OF-ARGS 3) 
(DE VSDS_APPLYVSTS-AT-PR (AT PR THEO)
    (PROG (G X F)
      (COND ((OR (EQ AT 'TRUE) (EQ AT 'FALSE)) (RETURN AT)))
      (SETQ G (CADR AT))
      (SETQ X (VSPR_V PR))
      (COND ((NOT (SFTO_MVARTEST G X)) (RETURN AT)))
      (SETQ F (VSPR_F PR))
      (SETQ G (SFTO_PSREM-SGN G F X THEO))
      (RETURN
       (VSUB_VSUB (LIST (COND ((ATOM AT) AT) (T (CAR AT))) G NIL) PR THEO)))) 
(PUT 'SFTO_PSREM-SGN 'NUMBER-OF-ARGS 4) 
(DE SFTO_PSREM-SGN (G F X THEO)
    (PROG (LCF SRP SRM W LCG QLC DEGF DEGG)
      (SETQ DEGF 0)
      (SETQ DEGG 0)
      (COND (NIL NIL))
      (SETQ DEGF (CDAAR F))
      (SETQ LCF (CDAR F))
      (SETQ SRP (OFSF_SUREP (LIST 'GEQ LCF NIL) THEO))
      (SETQ SRM (OFSF_SUREP (LIST 'LEQ LCF NIL) THEO))
      (SETQ DEGG (SFTO_VARDEG G X))
      (PROG ()
       WHILELABEL
        (COND ((NOT (GEQ DEGG DEGF)) (RETURN NIL)))
        (PROGN
         (SETQ W
                 ((LAMBDA (G556)
                    (COND (*PHYSOP-LOADED (PHYSOP-MULTF G556 (CDR F)))
                          (T (POLY-MULTF G556 (CDR F)))))
                  (SFTO_KEXP X (DIFFERENCE DEGG DEGF))))
         (SETQ LCG (CDAR G))
         (SETQ QLC ((LAMBDA (*EXP) (QUOTF1 LCG LCF)) T))
         (SETQ G
                 (COND
                  (QLC
                   (ADDF (CDR G)
                         (NEGF
                          (COND (*PHYSOP-LOADED (PHYSOP-MULTF QLC W))
                                (T (POLY-MULTF QLC W))))))
                  (SRP
                   (ADDF
                    (COND (*PHYSOP-LOADED (PHYSOP-MULTF LCF (CDR G)))
                          (T (POLY-MULTF LCF (CDR G))))
                    (NEGF
                     (COND (*PHYSOP-LOADED (PHYSOP-MULTF LCG W))
                           (T (POLY-MULTF LCG W))))))
                  (SRM
                   (NEGF
                    (ADDF
                     (COND (*PHYSOP-LOADED (PHYSOP-MULTF LCF (CDR G)))
                           (T (POLY-MULTF LCF (CDR G))))
                     (NEGF
                      (COND (*PHYSOP-LOADED (PHYSOP-MULTF LCG W))
                            (T (POLY-MULTF LCG W)))))))
                  (T
                   (ADDF
                    ((LAMBDA (G558)
                       (COND (*PHYSOP-LOADED (PHYSOP-MULTF G558 (CDR G)))
                             (T (POLY-MULTF G558 (CDR G)))))
                     (COND (*PHYSOP-LOADED (PHYSOP-MULTF LCF LCF))
                           (T (POLY-MULTF LCF LCF))))
                    (NEGF
                     ((LAMBDA (G560)
                        (COND (*PHYSOP-LOADED (PHYSOP-MULTF G560 W))
                              (T (POLY-MULTF G560 W))))
                      (COND (*PHYSOP-LOADED (PHYSOP-MULTF LCF LCG))
                            (T (POLY-MULTF LCF LCG)))))))))
         (SETQ DEGG (SFTO_VARDEG G X)))
        (GO WHILELABEL))
      (RETURN G))) 
(PUT 'VS_SPLITOR 'NUMBER-OF-ARGS 1) 
(DE VS_SPLITOR (F)
    (COND ((EQ (COND ((ATOM F) F) (T (CAR F))) 'OR) (CDR F)) (T (LIST F)))) 
(PUT 'VSVS_PRINTS 'NUMBER-OF-ARGS 1) 
(DE VSVS_PRINTS (VS)
    (PROGN
     (IOTO_PRIN2 (LIST "VSvs: "))
     (COND
      ((VSVS_TSP VS)
       (PROGN
        (IOTO_PRIN2T (LIST (VSVS_V VS) " = tp"))
        (VSTP_PRINTS (VSTS_TP VS))))
      ((VSVS_DGP VS)
       (IOTO_PRIN2T
        (LIST (VSVS_V VS) " = " (VSDG_G VS) "-th root of " (VSDG_SV VS))))
      ((VSVS_ARP VS) (IOTO_PRIN2T (LIST (VSVS_V VS) " = arbitrary")))))) 
(ENDMODULE) 