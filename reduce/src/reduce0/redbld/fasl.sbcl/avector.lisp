(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'AVECTOR)) 
(CREATE-PACKAGE '(AVECTOR) '(CONTRIB AVECTOR)) 
(GLOBAL '(AVECTOR-LOADED*)) 
(SETQ AVECTOR-LOADED* T) 
(FLUID '(*COORDS *CSYSTEMS *VECTORFUNCTIONLIST *VTRACE *VECTORTRACELEVEL*)) 
(SWITCH (LIST 'VTRACE)) 
(PUT 'VECP 'NUMBER-OF-ARGS 1) 
(PUT 'VECP 'DEFINED-ON-LINE '87) 
(PUT 'VECP 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'VECP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE VECP (U)
    (PROG (X)
      (RETURN
       (COND ((OR (NULL U) (NUMBERP U)) NIL)
             ((ATOM U) (OR (EQUAL (GET U 'RTYPE) '3VECTOR) (THREEVECTORP U)))
             ((THREEVECTORP U) T)
             ((AND (ATOM (SETQ X (CAR U))) (EQUAL (GET X 'RTYPE) '3VECTOR))
              (ISVECTORINDEX (CADR U)))
             ((FLAGP X 'VECTORFN) T)
             ((OR (FLAGP X 'VARITHOP) (FLAGP X 'VECTORMAPPING))
              (HASONEVECTOR (CDR U)))
             (T NIL))))) 
(PUT 'THREEVECTORP 'NUMBER-OF-ARGS 1) 
(PUT 'THREEVECTORP 'DEFINED-ON-LINE '103) 
(PUT 'THREEVECTORP 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'THREEVECTORP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE THREEVECTORP (U) (AND (VECTORP U) (EQUAL (UPBV U) 2))) 
(PUT 'HASONEVECTOR 'NUMBER-OF-ARGS 1) 
(PUT 'HASONEVECTOR 'DEFINED-ON-LINE '108) 
(PUT 'HASONEVECTOR 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'HASONEVECTOR 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE HASONEVECTOR (U)
    (COND ((NULL U) NIL) (T (OR (VECP (CAR U)) (HASONEVECTOR (CDR U)))))) 
(PUT 'AREALLVECTORS 'NUMBER-OF-ARGS 1) 
(PUT 'AREALLVECTORS 'DEFINED-ON-LINE '114) 
(PUT 'AREALLVECTORS 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'AREALLVECTORS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE AREALLVECTORS (U)
    (COND ((NULL U) NIL) ((NULL (CDR U)) (VECP (CAR U)))
          (T (AND (VECP (CAR U)) (AREALLVECTORS (CDR U)))))) 
(PUT 'ISVECTORINDEX 'NUMBER-OF-ARGS 1) 
(PUT 'ISVECTORINDEX 'DEFINED-ON-LINE '122) 
(PUT 'ISVECTORINDEX 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'ISVECTORINDEX 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE ISVECTORINDEX (U) (NOT (NULL (GETVECTORINDEX U T)))) 
(PUT 'GETVECTORINDEX 'NUMBER-OF-ARGS 2) 
(PUT 'GETVECTORINDEX 'DEFINED-ON-LINE '129) 
(PUT 'GETVECTORINDEX 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'GETVECTORINDEX 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE GETVECTORINDEX (U FLG)
    (PROG (VINDX)
      (SETQ VINDX U)
      (COND ((NOT (FIXP VINDX)) (SETQ VINDX (LOCATE VINDX *COORDS))))
      (COND
       ((AND
         (OR (NULL VINDX)
             (AND (FIXP VINDX) (OR (LESSP VINDX 0) (GREATERP VINDX 2))))
         FLG)
        (RERROR 'AVECTOR 1 (LIST U "not a valid vector index"))))
      (RETURN VINDX))) 
(PUT 'LOCATE 'NUMBER-OF-ARGS 2) 
(PUT 'LOCATE 'DEFINED-ON-LINE '141) 
(PUT 'LOCATE 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'LOCATE 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE LOCATE (U V)
    (COND ((NOT (MEMQ U V)) NIL) ((EQUAL U (CAR V)) 0)
          (T (PLUS 1 (LOCATE U (CDR V)))))) 
(REMFLAG '(GETRTYPE1 GETRTYPE2) 'LOSE) 
(PUT 'GETRTYPE1 'NUMBER-OF-ARGS 1) 
(PUT 'GETRTYPE1 'DEFINED-ON-LINE '157) 
(PUT 'GETRTYPE1 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'GETRTYPE1 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE GETRTYPE1 (U) (COND ((THREEVECTORP U) '3VECTOR) (T NIL))) 
(PUT 'GETRTYPE2 'NUMBER-OF-ARGS 1) 
(PUT 'GETRTYPE2 'DEFINED-ON-LINE '160) 
(PUT 'GETRTYPE2 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'GETRTYPE2 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE GETRTYPE2 (U)
    (PROG (X)
      (RETURN
       (COND ((VECP U) '3VECTOR)
             ((AND (SETQ X (GET (CAR U) 'RTYPE)) (SETQ X (GET X 'RTYPEFN)))
              (APPLY1 X (CDR U)))
             ((SETQ X (GET (CAR U) 'RTYPEFN)) (APPLY1 X (CDR U)))
             ((AND (FLAGP (CAR U) 'MATMAPFN) (CDR U)
                   (EQ (GETRTYPE (CADR U)) 'MATRIX))
              'MATRIX)
             (T NIL))))) 
(PUT 'VEC 'NUMBER-OF-ARGS 1) 
(PUT 'VEC 'DEFINED-ON-LINE '175) 
(PUT 'VEC 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'VEC 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE VEC (U)
    (PROG (Y)
      (PROG (X)
        (SETQ X U)
       LAB
        (COND ((NULL X) (RETURN NIL)))
        ((LAMBDA (X)
           (PROGN
            (COND
             ((NOT (ATOM X))
              (PROGN
               (PRIN2 "Cannot declare ")
               (PRIN2 X)
               (PRIN2 " as a vector")
               NIL))
             (T
              (PROGN
               (SETQ Y (GETTYPE X))
               (COND
                ((MEMQ Y '(ARRAY PROCEDURE MATRIX OPERATOR))
                 (PROGN
                  (PRIN2 "Object ")
                  (PRIN2 X)
                  (PRIN2 " has already been declared as ")
                  (PRIN2 Y)
                  NIL))
                (T (MAKENEWVECTOR X))))))
            NIL))
         (CAR X))
        (SETQ X (CDR X))
        (GO LAB))
      (RETURN NIL))) 
(DEFLIST '((VEC RLIS)) 'STAT) 
(PUT 'MAKENEWVECTOR 'NUMBER-OF-ARGS 1) 
(PUT 'MAKENEWVECTOR 'DEFINED-ON-LINE '195) 
(PUT 'MAKENEWVECTOR 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'MAKENEWVECTOR 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE MAKENEWVECTOR (U)
    (PROG ()
      (PUT U 'RTYPE '3VECTOR)
      (PUT U 'AVALUE (LIST 'VECTOR (MKVECT 2)))
      (RETURN NIL))) 
(PUT '3VECTOR 'LETFN 'VECLET) 
(PUT '3VECTOR 'NAME '3VECTOR) 
(PUT '3VECTOR 'EVFN '*VECSM*) 
(PUT '3VECTOR 'PRIFN 'VECPRI*) 
(FLAG '(3VECTOR) 'SPRIFN) 
(PUT 'VECPRI* 'NUMBER-OF-ARGS 3) 
(PUT 'VECPRI* 'DEFINED-ON-LINE '213) 
(PUT 'VECPRI* 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'VECPRI* 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE VECPRI* (U V W) (VECPRI U V)) 
(PUT 'VECPRI 'NUMBER-OF-ARGS 2) 
(PUT 'VECPRI 'DEFINED-ON-LINE '219) 
(PUT 'VECPRI 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'VECPRI 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE VECPRI (U X)
    (PROG (Y V0 V1 V2 XX)
      (SETQ Y (COND ((VECTORP U) U) (T (GETAVALUE U))))
      (SETQ XX X)
      (COND ((NULL Y) (RETURN NIL)))
      (SETQ XX 'VEC)
      (SETQ V0 (GETV Y 0))
      (SETQ V1 (GETV Y 1))
      (SETQ V2 (GETV Y 2))
      (SETQ V0 (REVAL1 V0 NIL))
      (SETQ V1 (REVAL1 V1 NIL))
      (SETQ V2 (REVAL1 V2 NIL))
      (ASSGNPRI V0 (LIST (LIST XX (FIRST *COORDS))) 'ONLY)
      (ASSGNPRI V1 (LIST (LIST XX (SECOND *COORDS))) 'ONLY)
      (ASSGNPRI V2 (LIST (LIST XX (THIRD *COORDS))) 'ONLY)
      (TERPRI* T))) 
(PUT 'GETAVALUE 'NUMBER-OF-ARGS 1) 
(PUT 'GETAVALUE 'DEFINED-ON-LINE '236) 
(PUT 'GETAVALUE 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'GETAVALUE 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE GETAVALUE (U) ((LAMBDA (X) (COND (X (CADR X)) (T NIL))) (GET U 'AVALUE))) 
(PUT 'INDEXEDVECTORP 'NUMBER-OF-ARGS 1) 
(PUT 'INDEXEDVECTORP 'DEFINED-ON-LINE '239) 
(PUT 'INDEXEDVECTORP 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'INDEXEDVECTORP 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE INDEXEDVECTORP (U) (AND (VECP (CAR U)) (ISVECTORINDEX (CADR U)))) 
(PUT '3VECTOR 'SETELEMFN 'SETVECTORELEMENT) 
(PUT 'SETVECTORELEMENT 'NUMBER-OF-ARGS 2) 
(PUT 'SETVECTORELEMENT 'DEFINED-ON-LINE '246) 
(PUT 'SETVECTORELEMENT 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'SETVECTORELEMENT 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE SETVECTORELEMENT (U V)
    (PROG (VINDX)
      (SETQ VINDX (GETVECTORINDEX (CADR U) T))
      (PUTV (GETAVALUE (CAR U)) VINDX V)
      (RETURN NIL))) 
(PUT 'VECLET 'NUMBER-OF-ARGS 5) 
(PUT 'VECLET 'DEFINED-ON-LINE '256) 
(PUT 'VECLET 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'VECLET 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE VECLET (U V UTYPE B VTYPE)
    (PROG ()
      (COND ((ZEROP V) (RETURN (SETVECTORTOZERO U UTYPE))))
      (COND
       ((NOT (EQUAL VTYPE '3VECTOR))
        (RERROR 'AVECTOR 2 "RHS is not a vector")))
      (COND ((EQUAL UTYPE '3VECTOR) (PUT U 'AVALUE (LIST '3VECTOR V)))
            ((MEMQ UTYPE '(ARRAY MATRIX))
             (RERROR 'AVECTOR 3 (LIST U "already defined as " UTYPE)))
            (T
             (PROGN
              (VEC (LIST U))
              (PROGN
               (PRIN2 "*** ")
               (PRIN2 U)
               (PRIN2 " re-defined as vector")
               NIL)
              (TERPRI)
              (PUT U 'AVALUE (LIST 'VECTOR V)))))
      (RETURN V))) 
(PUT 'SETVECTORTOZERO 'NUMBER-OF-ARGS 2) 
(PUT 'SETVECTORTOZERO 'DEFINED-ON-LINE '275) 
(PUT 'SETVECTORTOZERO 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'SETVECTORTOZERO 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE SETVECTORTOZERO (U UTYPE)
    (PROG (X)
      (SETQ X (MKVECT 2))
      (PROG (K)
        (SETQ K 0)
       LAB
        (COND ((MINUSP (DIFFERENCE 2 K)) (RETURN NIL)))
        (PUTV X K (REVAL1 0 NIL))
        (SETQ K (PLUS2 K 1))
        (GO LAB))
      (RETURN (VECLET U X UTYPE T '3VECTOR)))) 
(PUT '*VECSM* 'NUMBER-OF-ARGS 2) 
(PUT '*VECSM* 'DEFINED-ON-LINE '292) 
(PUT '*VECSM* 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT '*VECSM* 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE *VECSM* (U V) (VECSM* U)) 
(SETQ *VECTORTRACELEVEL* 0) 
(PUT 'PRTBLANKS 'NUMBER-OF-ARGS 1) 
(PUT 'PRTBLANKS 'DEFINED-ON-LINE '307) 
(PUT 'PRTBLANKS 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'PRTBLANKS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PRTBLANKS (N)
    (PROG (K)
      (SETQ K 1)
     LAB
      (COND ((MINUSP (DIFFERENCE (MIN N 15) K)) (RETURN NIL)))
      (PROGN (PRIN2 "  ") NIL)
      (SETQ K (PLUS2 K 1))
      (GO LAB))) 
(PUT 'VECSIMP* 'NUMBER-OF-ARGS 1) 
(PUT 'VECSIMP* 'DEFINED-ON-LINE '310) 
(PUT 'VECSIMP* 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'VECSIMP* 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE VECSIMP* (U) (COND ((VECP U) (VECSM* U)) (T U))) 
(PUT 'VECSM* 'NUMBER-OF-ARGS 1) 
(PUT 'VECSM* 'DEFINED-ON-LINE '313) 
(PUT 'VECSM* 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'VECSM* 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE VECSM* (U)
    (PROG (Y VECOPR VARGS V)
      (SETQ *VECTORTRACELEVEL* (PLUS *VECTORTRACELEVEL* 1))
      (COND
       (*VTRACE
        (PROGN
         (PRTBLANKS *VECTORTRACELEVEL*)
         (PROGN (PRIN2 "VECSM called with args ") (PRIN2 U) NIL)
         (TERPRI))))
      (COND ((ATOM U) (SETQ V (COND ((VECTORP U) U) (T (GETAVALUE U)))))
            ((THREEVECTORP U) (SETQ V U))
            ((AND (ATOM (SETQ Y (CAR U))) (EQUAL (GET Y 'RTYPE) '3VECTOR))
             (SETQ V (GETV (GETAVALUE Y) (GETVECTORINDEX (CADR U) T))))
            (T
             (PROGN
              (SETQ VECOPR (CAR U))
              (SETQ VARGS
                      (PROG (J FORALL-RESULT FORALL-ENDPTR)
                        (SETQ J (CDR U))
                        (COND ((NULL J) (RETURN NIL)))
                        (SETQ FORALL-RESULT
                                (SETQ FORALL-ENDPTR
                                        (CONS
                                         ((LAMBDA (J) (VECSIMP* J)) (CAR J))
                                         NIL)))
                       LOOPLABEL
                        (SETQ J (CDR J))
                        (COND ((NULL J) (RETURN FORALL-RESULT)))
                        (RPLACD FORALL-ENDPTR
                                (CONS ((LAMBDA (J) (VECSIMP* J)) (CAR J)) NIL))
                        (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                        (GO LOOPLABEL)))
              (COND
               ((SETQ Y (GET VECOPR 'VECTORFUNCTION))
                (PROGN
                 (COND
                  ((OR (FLAGP VECOPR 'VECTORFN)
                       (AND (FLAGP VECOPR 'VARITHOP) (HASONEVECTOR VARGS)))
                   (SETQ V (APPLY Y (LIST VARGS))))
                  (T (SETQ V (REVAL1 (APPEND (LIST VECOPR) VARGS) NIL))))))
               ((FLAGP VECOPR 'VECTORMAPPING)
                (PROGN
                 (SETQ Y (CAR VARGS))
                 (SETQ V
                         (COND
                          ((THREEVECTORP Y) (VECTORAPPLY VECOPR Y (CDR VARGS)))
                          (T (SCALARAPPLY VECOPR Y (CDR VARGS)))))))
               (T
                (PROGN
                 (SETQ *VECTORTRACELEVEL* 0)
                 (RERROR 'AVECTOR 4
                         (LIST VECOPR "is not a valid vector operator")))))
              NIL)))
      (COND
       (*VTRACE
        (PROGN
         (SETQ Y (THREEVECTORP V))
         (PRTBLANKS *VECTORTRACELEVEL*)
         (PROGN
          (PRIN2 (COND (Y "** Vector") (T "** Scalar")))
          (PRIN2 " result is ")
          (PRIN2 V)
          NIL)
         (TERPRI))))
      (SETQ *VECTORTRACELEVEL* (DIFFERENCE *VECTORTRACELEVEL* 1))
      (RETURN V))) 
(PUT 'VECTORMAPPING 'NUMBER-OF-ARGS 1) 
(PUT 'VECTORMAPPING 'DEFINED-ON-LINE '364) 
(PUT 'VECTORMAPPING 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'VECTORMAPPING 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE VECTORMAPPING (U) (FLAG U 'VECTORMAPPING)) 
(DEFLIST '((VECTORMAPPING RLIS)) 'STAT) 
(VECTORMAPPING (LIST 'SIN 'COS 'LOG 'EXP 'TAN 'ASIN 'ATAN 'SINH 'COSH 'TANH)) 
(VECTORMAPPING (LIST 'QUOTIENT 'MINUS 'DF 'INT 'SQRT)) 
(FLAG '(SUB MINUS DIFFERENCE QUOTIENT PLUS TIMES EXPT) 'VARITHOP) 
(FLAG '(AVEC CROSS DOT VMOD GRAD DIV CURL DELSQ) 'VECTORFN) 
(DE VECTORFN (OPER VFN) (PUT OPER 'VECTORFUNCTION VFN)) 
(PUT 'VECTORFN 'NUMBER-OF-ARGS 2) 
(PUT 'VECTORFN 'DEFINED-ON-LINE '383) 
(PUT 'VECTORFN 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'VECTORFN 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(PUTC 'VECTORFN 'INLINE '(LAMBDA (OPER VFN) (PUT OPER 'VECTORFUNCTION VFN))) 
(PUT 'TIMES 'VECTORFUNCTION 'VECTORMULTIPLY) 
(PUT 'VECTORMULTIPLY 'NUMBER-OF-ARGS 1) 
(PUT 'VECTORMULTIPLY 'DEFINED-ON-LINE '389) 
(PUT 'VECTORMULTIPLY 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'VECTORMULTIPLY 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE VECTORMULTIPLY (VARGS)
    (PROG (LHT RHT LHTYPE RHTYPE)
      (SETQ LHT (REVAL1 (CAR VARGS) NIL))
      (PROG (V)
        (SETQ V (CDR VARGS))
       LAB
        (COND ((NULL V) (RETURN NIL)))
        ((LAMBDA (V)
           (PROGN
            (SETQ RHT (COND ((VECP V) (VECSM* V)) (T V)))
            (SETQ LHTYPE (*TYPEOF LHT))
            (SETQ RHTYPE (*TYPEOF RHT))
            (SETQ LHT
                    (COND
                     ((NOT
                       (OR (EQUAL LHTYPE '3VECTOR) (EQUAL RHTYPE '3VECTOR)))
                      (REVAL1 (LIST 'TIMES LHT RHT) NIL))
                     ((EQUAL LHTYPE '3VECTOR)
                      (COND ((NULL RHTYPE) (VECTORAPPLY 'TIMES LHT (LIST RHT)))
                            (T
                             (RERROR 'AVECTOR 5
                                     "Illegal operation vec*vec or vec*mat"))))
                     ((NULL LHTYPE) (VECTORAPPLY 'TIMES RHT (LIST LHT)))
                     (T (MATRIXTIMESVECTOR LHT RHT))))))
         (CAR V))
        (SETQ V (CDR V))
        (GO LAB))
      (RETURN LHT))) 
(PUT 'MATRIXTIMESVECTOR 'NUMBER-OF-ARGS 2) 
(PUT 'MATRIXTIMESVECTOR 'DEFINED-ON-LINE '418) 
(PUT 'MATRIXTIMESVECTOR 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'MATRIXTIMESVECTOR 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE MATRIXTIMESVECTOR (MYMAT MYVEC)
    (PROG (ROWS MYROW X)
      (COND
       ((AND (ATOM MYMAT) (IDP MYMAT) (NULL (GETAVALUE MYMAT)))
        (RERROR 'AVECTOR 6 "Unset matrix in vector multiplication")))
      (SETQ ROWS (COND ((IDP MYMAT) (CDR (GETAVALUE MYMAT))) (T (CDR MYMAT))))
      (COND
       ((NOT (AND (EQUAL (LENGTH ROWS) 3) (EQUAL (LENGTH (CAR ROWS)) 3)))
        (RERROR 'AVECTOR 7 "Matrix must be 3x3 for vector multplication")))
      (SETQ X (MKVECT 2))
      (PROG (K)
        (SETQ K 0)
       LAB
        (COND ((MINUSP (DIFFERENCE 2 K)) (RETURN NIL)))
        (PROGN
         (SETQ MYROW (CAR ROWS))
         (PUTV X K
               (REVAL1
                (LIST 'PLUS (LIST 'TIMES (FIRST MYROW) (GETV MYVEC 0))
                      (LIST 'TIMES (SECOND MYROW) (GETV MYVEC 1))
                      (LIST 'TIMES (THIRD MYROW) (GETV MYVEC 2)))
                NIL))
         (SETQ ROWS (CDR ROWS)))
        (SETQ K (PLUS2 K 1))
        (GO LAB))
      (RETURN X))) 
(PUT '*TYPEOF 'NUMBER-OF-ARGS 1) 
(PUT '*TYPEOF 'DEFINED-ON-LINE '438) 
(PUT '*TYPEOF 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT '*TYPEOF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE *TYPEOF (U) (GETRTYPE U)) 
(PUT 'PLUS 'VECTORFUNCTION 'VECTORPLUS) 
(PUT 'VECTORPLUS 'NUMBER-OF-ARGS 1) 
(PUT 'VECTORPLUS 'DEFINED-ON-LINE '448) 
(PUT 'VECTORPLUS 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'VECTORPLUS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE VECTORPLUS (VARGS)
    (PROG (X)
      (SETQ X (VECSM* (CAR VARGS)))
      (PROG (V)
        (SETQ V (CDR VARGS))
       LAB
        (COND ((NULL V) (RETURN NIL)))
        ((LAMBDA (V) (SETQ X (VECTORADD X (VECSM* V)))) (CAR V))
        (SETQ V (CDR V))
        (GO LAB))
      (RETURN X))) 
(PUT 'VECTORADD 'NUMBER-OF-ARGS 2) 
(PUT 'VECTORADD 'DEFINED-ON-LINE '456) 
(PUT 'VECTORADD 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'VECTORADD 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE VECTORADD (U V)
    (PROG (X UISVEC VISVEC)
      (SETQ UISVEC (VECP U))
      (SETQ VISVEC (VECP V))
      (COND
       ((AND UISVEC VISVEC)
        (PROGN
         (SETQ X (MKVECT 2))
         (PROG (K)
           (SETQ K 0)
          LAB
           (COND ((MINUSP (DIFFERENCE 2 K)) (RETURN NIL)))
           (PUTV X K (REVAL1 (LIST 'PLUS (GETV U K) (GETV V K)) NIL))
           (SETQ K (PLUS2 K 1))
           (GO LAB))
         (RETURN X)))
       ((NOT (OR UISVEC VISVEC))
        (PROGN (RETURN (REVAL1 (LIST 'PLUS U V) NIL))))
       (T (RERROR 'AVECTOR 8 "Type mismatch in VECTORADD"))))) 
(PUT 'DIFFERENCE 'VECTORFUNCTION 'VECTORDIFF) 
(PUT 'VECTORDIFF 'NUMBER-OF-ARGS 1) 
(PUT 'VECTORDIFF 'DEFINED-ON-LINE '476) 
(PUT 'VECTORDIFF 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'VECTORDIFF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE VECTORDIFF (VARGS)
    (PROG (X Y)
      (SETQ X (VECSM* (CAR VARGS)))
      (SETQ Y (VECSM* (LIST 'MINUS (CADR VARGS))))
      (RETURN (VECTORADD X Y)))) 
(PUT 'QUOTIENT 'VECTORFUNCTION 'VECTORQUOT) 
(PUT 'VECTORQUOT 'NUMBER-OF-ARGS 1) 
(PUT 'VECTORQUOT 'DEFINED-ON-LINE '487) 
(PUT 'VECTORQUOT 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'VECTORQUOT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE VECTORQUOT (VARGS)
    (PROG (VDIVISOR VDIVIDEND)
      (SETQ VDIVISOR (REVAL1 (CADR VARGS) NIL))
      (COND
       ((VECP VDIVISOR) (RERROR 'AVECTOR 9 "Attempt to divide by a vector")))
      (SETQ VDIVIDEND (REVAL1 (CAR VARGS) NIL))
      (COND
       ((THREEVECTORP VDIVIDEND)
        (RETURN (VECTORAPPLY 'QUOTIENT VDIVIDEND (LIST VDIVISOR))))
       (T (RETURN (REVAL1 (LIST 'QUOTIENT VDIVIDEND VDIVISOR) NIL)))))) 
(PUT 'CROSS 'VECTORFUNCTION 'VECTORCROSSPROD) 
(PUT 'VECTORCROSSPROD 'NUMBER-OF-ARGS 1) 
(PUT 'VECTORCROSSPROD 'DEFINED-ON-LINE '507) 
(PUT 'VECTORCROSSPROD 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'VECTORCROSSPROD 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE VECTORCROSSPROD (VARGS)
    (PROG (X Y U0 U1 U2 V0 V1 V2 W0 W1 W2)
      (SETQ X (VECSM* (CAR VARGS)))
      (SETQ Y (VECSM* (CADR VARGS)))
      (SETQ U0 (GETV X 0))
      (SETQ U1 (GETV X 1))
      (SETQ U2 (GETV X 2))
      (SETQ V0 (GETV Y 0))
      (SETQ V1 (GETV Y 1))
      (SETQ V2 (GETV Y 2))
      (SETQ W0
              (REVAL1
               (LIST 'DIFFERENCE (LIST 'TIMES U1 V2) (LIST 'TIMES U2 V1)) NIL))
      (SETQ W1
              (REVAL1
               (LIST 'DIFFERENCE (LIST 'TIMES U2 V0) (LIST 'TIMES U0 V2)) NIL))
      (SETQ W2
              (REVAL1
               (LIST 'DIFFERENCE (LIST 'TIMES U0 V1) (LIST 'TIMES U1 V0)) NIL))
      (SETQ X (MKVECT 2))
      (PUTV X 0 W0)
      (PUTV X 1 W1)
      (PUTV X 2 W2)
      (RETURN X))) 
(PUT 'VMOD 'VECTORFUNCTION 'VECTORMOD) 
(PUT 'VECTORMOD 'NUMBER-OF-ARGS 1) 
(PUT 'VECTORMOD 'DEFINED-ON-LINE '544) 
(PUT 'VECTORMOD 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'VECTORMOD 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE VECTORMOD (U)
    (PROG (V)
      (SETQ V (REVAL1 (LIST 'DOT (CAR U) (CAR U)) NIL))
      (COND ((ZEROP V) (RETURN 0)) (T (RETURN (REVAL1 (LIST 'SQRT V) NIL)))))) 
(PUT 'DOT 'VECTORFUNCTION 'VECTORDOT) 
(PUT 'VECTORDOT 'NUMBER-OF-ARGS 1) 
(PUT 'VECTORDOT 'DEFINED-ON-LINE '554) 
(PUT 'VECTORDOT 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'VECTORDOT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE VECTORDOT (VARGS)
    (PROG (X Y U0 U1 U2 V0 V1 V2)
      (SETQ X (CAR VARGS))
      (SETQ Y (CADR VARGS))
      (SETQ U0 (GETV X 0))
      (SETQ U1 (GETV X 1))
      (SETQ U2 (GETV X 2))
      (SETQ V0 (GETV Y 0))
      (SETQ V1 (GETV Y 1))
      (SETQ V2 (GETV Y 2))
      (RETURN
       (REVAL1
        (LIST 'PLUS (LIST 'TIMES U0 V0) (LIST 'TIMES U1 V1)
              (LIST 'TIMES U2 V2))
        NIL)))) 
(PUT 'AVEC 'VECTORFUNCTION 'VECTORAVEC) 
(DEFLIST '((OPER VFN)) 'VECTORFUNCTION) 
(PUT 'VECTORAVEC 'NUMBER-OF-ARGS 1) 
(PUT 'VECTORAVEC 'DEFINED-ON-LINE '573) 
(PUT 'VECTORAVEC 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'VECTORAVEC 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE VECTORAVEC (VARGS)
    (PROG (X)
      (COND
       ((NOT (EQN (LENGTH VARGS) 3))
        (RERROR 'AVECTOR 10 "Incorrect number of args in AVEC")))
      (SETQ X (MKVECT 2))
      (PUTV X 0 (REVAL1 (FIRST VARGS) NIL))
      (PUTV X 1 (REVAL1 (SECOND VARGS) NIL))
      (PUTV X 2 (REVAL1 (THIRD VARGS) NIL))
      (RETURN X))) 
(PUT 'GRAD 'VECTORFUNCTION 'VECTORGRAD) 
(PUT 'VECTORGRAD 'NUMBER-OF-ARGS 1) 
(PUT 'VECTORGRAD 'DEFINED-ON-LINE '588) 
(PUT 'VECTORGRAD 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'VECTORGRAD 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE VECTORGRAD (VARGS)
    (PROG (X Y)
      (SETQ X (MKVECT 2))
      (SETQ Y (REVAL1 (CAR VARGS) NIL))
      (PUTV X 0
            (REVAL1 (LIST 'QUOTIENT (LIST 'DF Y (FIRST *COORDS)) (*HFAC 0))
                    NIL))
      (PUTV X 1
            (REVAL1 (LIST 'QUOTIENT (LIST 'DF Y (SECOND *COORDS)) (*HFAC 1))
                    NIL))
      (PUTV X 2
            (REVAL1 (LIST 'QUOTIENT (LIST 'DF Y (THIRD *COORDS)) (*HFAC 2))
                    NIL))
      (RETURN X))) 
(PUT 'DIV 'VECTORFUNCTION 'VECTORDIV) 
(PUT 'VECTORDIV 'NUMBER-OF-ARGS 1) 
(PUT 'VECTORDIV 'DEFINED-ON-LINE '607) 
(PUT 'VECTORDIV 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'VECTORDIV 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE VECTORDIV (VARGS)
    (PROG (X U0 U1 U2)
      (SETQ X (VECSM* (CAR VARGS)))
      (SETQ U0 (GETV X 0))
      (SETQ U1 (GETV X 1))
      (SETQ U2 (GETV X 2))
      (SETQ U0 (REVAL1 (LIST 'TIMES U0 (*HFAC 1) (*HFAC 2)) NIL))
      (SETQ U1 (REVAL1 (LIST 'TIMES U1 (*HFAC 0) (*HFAC 2)) NIL))
      (SETQ U2 (REVAL1 (LIST 'TIMES U2 (*HFAC 0) (*HFAC 1)) NIL))
      (SETQ X
              (REVAL1
               (LIST 'PLUS (LIST 'DF U0 (FIRST *COORDS))
                     (LIST 'DF U1 (SECOND *COORDS))
                     (LIST 'DF U2 (THIRD *COORDS)))
               NIL))
      (SETQ X
              (REVAL1
               (LIST 'QUOTIENT X (LIST 'TIMES (*HFAC 0) (*HFAC 1) (*HFAC 2)))
               NIL))
      (RETURN X))) 
(PUT 'CURL 'VECTORFUNCTION 'VECTORCURL) 
(PUT 'VECTORCURL 'NUMBER-OF-ARGS 1) 
(PUT 'VECTORCURL 'DEFINED-ON-LINE '626) 
(PUT 'VECTORCURL 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'VECTORCURL 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE VECTORCURL (VARGS)
    (PROG (X U0 U1 U2 V0 V1 V2 W0 W1 W2)
      (SETQ X (VECSM* (CAR VARGS)))
      (SETQ U0 (REVAL1 (LIST 'TIMES (GETV X 0) (*HFAC 0)) NIL))
      (SETQ U1 (REVAL1 (LIST 'TIMES (GETV X 1) (*HFAC 1)) NIL))
      (SETQ U2 (REVAL1 (LIST 'TIMES (GETV X 2) (*HFAC 2)) NIL))
      (SETQ V0 (FIRST *COORDS))
      (SETQ V1 (SECOND *COORDS))
      (SETQ V2 (THIRD *COORDS))
      (SETQ X (MKVECT 2))
      (SETQ W0
              (REVAL1
               (LIST 'TIMES
                     (LIST 'DIFFERENCE (LIST 'DF U2 V1) (LIST 'DF U1 V2))
                     (*HFAC 0))
               NIL))
      (SETQ W1
              (REVAL1
               (LIST 'TIMES
                     (LIST 'DIFFERENCE (LIST 'DF U0 V2) (LIST 'DF U2 V0))
                     (*HFAC 1))
               NIL))
      (SETQ W2
              (REVAL1
               (LIST 'TIMES
                     (LIST 'DIFFERENCE (LIST 'DF U1 V0) (LIST 'DF U0 V1))
                     (*HFAC 2))
               NIL))
      (PUTV X 0 W0)
      (PUTV X 1 W1)
      (PUTV X 2 W2)
      (SETQ X
              (REVAL1
               (LIST 'QUOTIENT X (LIST 'TIMES (*HFAC 0) (*HFAC 1) (*HFAC 2)))
               NIL))
      (RETURN X))) 
(PUT 'DELSQ 'VECTORFUNCTION 'VECTORDELSQ) 
(PUT 'VECTORDELSQ 'NUMBER-OF-ARGS 1) 
(PUT 'VECTORDELSQ 'DEFINED-ON-LINE '659) 
(PUT 'VECTORDELSQ 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'VECTORDELSQ 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE VECTORDELSQ (VARGS)
    (PROG (X Y V0 V1 V2 W0 W1 W2)
      (SETQ X (VECSM* (CAR VARGS)))
      (COND
       ((VECP X)
        (RETURN
         (REVAL1
          (LIST 'DIFFERENCE (LIST 'GRAD (LIST 'DIV X))
                (LIST 'CURL (LIST 'CURL X)))
          NIL)))
       (T
        (PROGN
         (COND ((NULL X) (SETQ X (CAR VARGS))))
         (SETQ Y (REVAL1 (LIST 'TIMES (*HFAC 0) (*HFAC 1) (*HFAC 2)) NIL))
         (SETQ V0 (FIRST *COORDS))
         (SETQ V1 (SECOND *COORDS))
         (SETQ V2 (THIRD *COORDS))
         (SETQ W0
                 (REVAL1
                  (LIST 'DF
                        (LIST 'QUOTIENT
                              (LIST 'TIMES (*HFAC 1) (*HFAC 2) (LIST 'DF X V0))
                              (*HFAC 0))
                        V0)
                  NIL))
         (SETQ W1
                 (REVAL1
                  (LIST 'DF
                        (LIST 'QUOTIENT
                              (LIST 'TIMES (*HFAC 2) (*HFAC 0) (LIST 'DF X V1))
                              (*HFAC 1))
                        V1)
                  NIL))
         (SETQ W2
                 (REVAL1
                  (LIST 'DF
                        (LIST 'QUOTIENT
                              (LIST 'TIMES (*HFAC 0) (*HFAC 1) (LIST 'DF X V2))
                              (*HFAC 2))
                        V2)
                  NIL))
         (RETURN (REVAL1 (LIST 'QUOTIENT (LIST 'PLUS W0 W1 W2) Y) NIL))))))) 
(PUT 'SUB 'VECTORFUNCTION 'VECTORSUB) 
(PUT 'VECTORSUB 'NUMBER-OF-ARGS 1) 
(PUT 'VECTORSUB 'DEFINED-ON-LINE '714) 
(PUT 'VECTORSUB 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'VECTORSUB 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE VECTORSUB (VARGS)
    (PROG (SUBSLIST VEXPR X)
      (SETQ VEXPR (CAR (REVERSE VARGS)))
      (SETQ SUBSLIST (REVERSE (CDR (REVERSE VARGS))))
      (SETQ X (MKVECT 2))
      (PROG (K)
        (SETQ K 0)
       LAB
        (COND ((MINUSP (DIFFERENCE 2 K)) (RETURN NIL)))
        (PUTV X K
              (REVAL1 (APPEND '(SUB) (APPEND SUBSLIST (LIST (GETV VEXPR K))))
                      NIL))
        (SETQ K (PLUS2 K 1))
        (GO LAB))
      (RETURN X))) 
(PUT 'VECTORAPPLY 'NUMBER-OF-ARGS 3) 
(PUT 'VECTORAPPLY 'DEFINED-ON-LINE '728) 
(PUT 'VECTORAPPLY 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'VECTORAPPLY 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE VECTORAPPLY (VECOPR V ARGS)
    (PROG (VV X Y)
      (SETQ X (MKVECT 2))
      (SETQ VV (COND ((NOT (VECTORP V)) (VECSM* V)) (T V)))
      (PROG (K)
        (SETQ K 0)
       LAB
        (COND ((MINUSP (DIFFERENCE 2 K)) (RETURN NIL)))
        (PROGN
         (SETQ Y (GETV VV K))
         (SETQ Y
                 (COND ((NULL ARGS) (REVAL1 (LIST VECOPR Y) NIL))
                       (T (REVAL1 (APPEND (LIST VECOPR Y) ARGS) NIL))))
         (PUTV X K Y)
         NIL)
        (SETQ K (PLUS2 K 1))
        (GO LAB))
      (RETURN X))) 
(PUT 'SCALARAPPLY 'NUMBER-OF-ARGS 3) 
(PUT 'SCALARAPPLY 'DEFINED-ON-LINE '745) 
(PUT 'SCALARAPPLY 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'SCALARAPPLY 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE SCALARAPPLY (OP V ARGS)
    (COND ((NULL ARGS) (REVAL1 (LIST OP V) NIL))
          (T (REVAL1 (APPEND (LIST OP V) ARGS) NIL)))) 
(PUT 'COORDINATES 'NUMBER-OF-ARGS 1) 
(PUT 'COORDINATES 'DEFINED-ON-LINE '758) 
(PUT 'COORDINATES 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'COORDINATES 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE COORDINATES (U)
    (PROG (X)
      (COND
       ((NOT (EQN (LENGTH U) 3)) (RERROR 'AVECTOR 11 "Wrong number of args")))
      (PROG (Y)
        (SETQ Y U)
       LAB
        (COND ((NULL Y) (RETURN NIL)))
        ((LAMBDA (Y)
           (COND
            ((AND (SETQ X (GETTYPE Y)) (NOT (EQ X 'OPERATOR)))
             (RERROR 'AVECTOR 12
                     (LIST "Name declared as coordinate is not a kernel:" Y
                           "type" X)))))
         (CAR Y))
        (SETQ Y (CDR Y))
        (GO LAB))
      (REMFLAG *COORDS 'RESERVED)
      (SETQ *COORDS U)
      (SETQ X (REVAL1 (LIST 'AVEC (FIRST U) (SECOND U) (THIRD U)) NIL))
      (REMFLAG '(COORDS) 'RESERVED)
      (SETK 'COORDS X)
      (FLAG '(COORDS) 'RESERVED)
      (RETURN U))) 
(FLAG '(COORDINATES) 'OPFN) 
(REMFLAG '(DVOLUME HFACTORS) 'RESERVED) 
(PUT 'SCALEFACTORS 'NUMBER-OF-ARGS 3) 
(FLAG '(SCALEFACTORS) 'OPFN) 
(PUT 'SCALEFACTORS 'DEFINED-ON-LINE '780) 
(PUT 'SCALEFACTORS 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'SCALEFACTORS 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE SCALEFACTORS (H1 H2 H3)
    (PROG ()
      (AEVAL (REMFLAG '(DVOLUME HFACTORS) 'RESERVED))
      (SETK 'HFACTORS (AEVAL (LIST 'AVEC H1 H2 H3)))
      (SETK 'DVOLUME (AEVAL (LIST 'TIMES H1 H2 H3)))
      (AEVAL (FLAG '(DVOLUME HFACTORS) 'RESERVED)))) 
(FLAG '(DVOLUME HFACTORS) 'RESERVED) 
(PUT '*HFAC 'NUMBER-OF-ARGS 1) 
(PUT '*HFAC 'DEFINED-ON-LINE '792) 
(PUT '*HFAC 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT '*HFAC 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE *HFAC (N)
    (COND
     ((OR (NOT (FIXP N)) (LESSP N 0) (GREATERP N 2))
      (RERROR 'AVECTOR 13 "Invalid index"))
     (T (GETV (GETAVALUE 'HFACTORS) N)))) 
(PUT 'GETCSYSTEM 'NUMBER-OF-ARGS 1) 
(PUT 'GETCSYSTEM 'DEFINED-ON-LINE '799) 
(PUT 'GETCSYSTEM 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'GETCSYSTEM 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE GETCSYSTEM (U)
    (PROG (X Y)
      (COND
       ((NOT (ATOM U))
        (RERROR 'AVECTOR 14 "Invalid name for coordinate system")))
      (COND
       ((NOT (FLAGP U 'COORDINATESYSTEM))
        (RERROR 'AVECTOR 15 "Unknown system")))
      (SETQ X (GET U 'COORDINATES))
      (SETQ Y (GET U 'SCALEFACTORS))
      (COND
       ((AND X Y)
        (PROGN
         (REMFLAG *COORDS 'RESERVED)
         (SETQ *COORDS X)
         (REMFLAG '(COORDS) 'RESERVED)
         (SETK 'COORDS
               (REVAL1 (LIST 'AVEC (FIRST X) (SECOND X) (THIRD X)) NIL))
         (FLAG '(COORDS) 'RESERVED)
         (PUT 'HFACTORS 'AVALUE (LIST '3VECTOR Y))
         (REMFLAG '(DVOLUME) 'RESERVED)
         (SETK 'DVOLUME
               (REVAL1 (LIST 'TIMES (*HFAC 0) (*HFAC 1) (*HFAC 2)) NIL))
         (FLAG '(DVOLUME) 'RESERVED)
         (RETURN X)))
       (T (RERROR 'AVECTOR 16 "Incompletely specified coordinate system"))))) 
(PUT 'PUTCSYSTEM 'NUMBER-OF-ARGS 1) 
(PUT 'PUTCSYSTEM 'DEFINED-ON-LINE '824) 
(PUT 'PUTCSYSTEM 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'PUTCSYSTEM 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE PUTCSYSTEM (U)
    (PROG ()
      (COND
       ((NOT (ATOM U))
        (RERROR 'AVECTOR 17 "Invalid name for coordinate system")))
      (FLAG (LIST U) 'COORDINATESYSTEM)
      (PUT U 'COORDINATES *COORDS)
      (PUT U 'SCALEFACTORS (GETAVALUE 'HFACTORS))
      (SETQ *CSYSTEMS (UNION (LIST U) *CSYSTEMS))
      (RETURN U))) 
(DEFLIST '((COORDINATES RLIS)) 'STAT) 
(SETQ *COORDS '(X Y Z)) 
(SETQ *CSYSTEMS NIL) 
(FLAG '(VECDF) 'VECTORFN) 
(PUT 'VECDF 'VECTORFUNCTION 'VECTORDF) 
(PUT 'VECTORDF 'NUMBER-OF-ARGS 1) 
(PUT 'VECTORDF 'DEFINED-ON-LINE '852) 
(PUT 'VECTORDF 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'VECTORDF 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE VECTORDF (U)
    (PROG (V IDV X)
      (SETQ V (VECSM* (CAR U)))
      (SETQ IDV (CADR U))
      (COND ((NOT (VECP V)) (RERROR 'AVECTOR 18 "First arg is not a vector")))
      (COND
       ((NOT (ATOM IDV)) (RERROR 'AVECTOR 19 "Second arg is not an atom")))
      (SETQ X (MKVECT 2))
      (PROG (K)
        (SETQ K 0)
       LAB
        (COND ((MINUSP (DIFFERENCE 2 K)) (RETURN NIL)))
        (PROGN
         (PUTV X K
               (REVAL1 (LIST 'TIMES (*HFAC K) (LIST 'DF (GETV V K) IDV)) NIL)))
        (SETQ K (PLUS2 K 1))
        (GO LAB))
      (RETURN X))) 
(AEVAL (NULL (SETQ *MODE 'ALGEBRAIC))) 
(VEC (LIST 'COORDS 'HFACTORS)) 
(MKOP 'DOT) 
(MKOP 'CROSS) 
(INFIX (LIST 'DOT 'CROSS)) 
(PRECEDENCE (LIST 'DOT 'TIMES)) 
(PRECEDENCE (LIST 'CROSS 'TIMES)) 
(COORDINATES (LIST 'X 'Y 'Z)) 
(AEVAL (LIST 'SCALEFACTORS 1 1 1)) 
(PUTCSYSTEM 'CARTESIAN) 
(COORDINATES (LIST 'R 'THETA 'PHI)) 
(AEVAL (LIST 'SCALEFACTORS 1 'R (LIST 'TIMES 'R (LIST 'SIN 'THETA)))) 
(PUTCSYSTEM 'SPHERICAL) 
(COORDINATES (LIST 'R 'Z 'PHI)) 
(AEVAL (LIST 'SCALEFACTORS 1 1 'R)) 
(PUTCSYSTEM 'CYLINDRICAL) 
(GETCSYSTEM 'CARTESIAN) 
(PUT 'DEFINT 'NUMBER-OF-ARGS 4) 
(FLAG '(DEFINT) 'OPFN) 
(PUT 'DEFINT 'DEFINED-ON-LINE '900) 
(PUT 'DEFINT 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'DEFINT 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE DEFINT (FN X XLOWER XUPPER)
    (PROG (INDEFINT)
      (SETQ INDEFINT (AEVAL (LIST 'INT FN X)))
      (RETURN
       (AEVAL
        (LIST 'DIFFERENCE (LIST 'SUB (LIST 'EQUAL X XUPPER) INDEFINT)
              (LIST 'SUB (LIST 'EQUAL X XLOWER) INDEFINT)))))) 
(VECTORMAPPING (LIST 'DEFINT)) 
(PUT 'COMPONENT 'NUMBER-OF-ARGS 2) 
(PUT 'COMPONENT 'DEFINED-ON-LINE '911) 
(PUT 'COMPONENT 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'COMPONENT 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE COMPONENT (V N)
    (COND ((NOT (VECP V)) (RERROR 'AVECTOR 20 "Argument is not a vector"))
          (T (GETV (VECSM* V) N)))) 
(FLAG '(COMPONENT VECP) 'OPFN) 
(PUT 'VOLINTEGRAL 'NUMBER-OF-ARGS 3) 
(FLAG '(VOLINTEGRAL) 'OPFN) 
(PUT 'VOLINTEGRAL 'DEFINED-ON-LINE '917) 
(PUT 'VOLINTEGRAL 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'VOLINTEGRAL 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE VOLINTEGRAL (FN VLOWER VUPPER)
    (PROG (INTEGRAND IDPVAR XLOWER XUPPER KINDEX)
      (SETQ INTEGRAND
              (AEVAL
               (LIST 'TIMES FN (LIST 'HFACTORS 0) (LIST 'HFACTORS 1)
                     (LIST 'HFACTORS 2))))
      (PROG (K)
        (SETQ K 0)
       LAB
        (COND ((MINUSP (DIFFERENCE 2 K)) (RETURN NIL)))
        (PROGN
         (SETQ KINDEX (AEVAL* (LIST 'VOLINTORDER K)))
         (SETQ IDPVAR (AEVAL* (LIST 'COORDS KINDEX)))
         (SETQ XLOWER (AEVAL* (LIST 'COMPONENT VLOWER KINDEX)))
         (SETQ XUPPER (AEVAL* (LIST 'COMPONENT VUPPER KINDEX)))
         (SETQ INTEGRAND
                 (AEVAL* (LIST 'DEFINT INTEGRAND IDPVAR XLOWER XUPPER)))
         (AEVAL* 'NIL))
        (SETQ K (PLUS2 K 1))
        (GO LAB))
      (RETURN (AEVAL INTEGRAND)))) 
(SETK 'VOLINTORDER (AEVAL (LIST 'AVEC 0 1 2))) 
(PUT 'LINEINT 'NUMBER-OF-ARGS 3) 
(FLAG '(LINEINT) 'OPFN) 
(PUT 'LINEINT 'DEFINED-ON-LINE '938) 
(PUT 'LINEINT 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'LINEINT 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE LINEINT (V CURVE IVAR)
    (PROG (SCALFN VCOMP HCOMP DCURVE)
      (SETQ SCALFN (AEVAL 0))
      (PROG (K)
        (SETQ K 0)
       LAB
        (COND ((MINUSP (DIFFERENCE 2 K)) (RETURN NIL)))
        (PROGN
         (SETQ VCOMP (AEVAL* (LIST 'COMPONENT V K)))
         (SETQ HCOMP (AEVAL* (LIST 'HFACTORS K)))
         (SETQ DCURVE (AEVAL* (LIST 'DF (LIST 'COMPONENT CURVE K) IVAR)))
         (SETQ SCALFN
                 (AEVAL*
                  (LIST 'PLUS SCALFN (LIST 'TIMES VCOMP HCOMP DCURVE)))))
        (SETQ K (PLUS2 K 1))
        (GO LAB))
      (SETQ SCALFN (AEVAL (LIST 'VECSUB 'COORDS CURVE SCALFN)))
      (RETURN (AEVAL (LIST 'INT SCALFN IVAR))))) 
(PUT 'DEFLINEINT 'NUMBER-OF-ARGS 5) 
(FLAG '(DEFLINEINT) 'OPFN) 
(PUT 'DEFLINEINT 'DEFINED-ON-LINE '952) 
(PUT 'DEFLINEINT 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'DEFLINEINT 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE DEFLINEINT (V CURVE IVAR ILB IUB)
    (PROG (INDFINT)
      (SETQ INDFINT (AEVAL (LIST 'LINEINT V CURVE IVAR)))
      (RETURN
       (AEVAL
        (LIST 'DIFFERENCE (LIST 'SUB (LIST 'EQUAL IVAR IUB) INDFINT)
              (LIST 'SUB (LIST 'EQUAL IVAR ILB) INDFINT)))))) 
(NULL (SETQ *MODE 'SYMBOLIC)) 
(REMFLAG '(RCONS) 'LOSE) 
(PUT 'RCONS 'NUMBER-OF-ARGS 1) 
(PUT 'RCONS 'DEFINED-ON-LINE '980) 
(PUT 'RCONS 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'RCONS 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RCONS (U)
    (PROG (X Y Z)
      (ARGNOCHK (CONS 'CONS U))
      (COND
       ((EQ (SETQ Y (GETRTYPEOR (SETQ X (REVLIS U)))) 'HVECTOR)
        (RETURN
         (COND
          ((AND (GET 'CONS 'OPMTCH) (SETQ Z (OPMTCH (CONS 'CONS X))))
           (REVAL1 Z T))
          (T (PREPSQ (SUBS2 (SIMPDOT X)))))))
       ((EQ Y '3VECTOR)
        (RETURN
         (APPLY 'VECTORDOT
                (LIST
                 (PROG (J FORALL-RESULT FORALL-ENDPTR)
                   (SETQ J U)
                   (COND ((NULL J) (RETURN NIL)))
                   (SETQ FORALL-RESULT
                           (SETQ FORALL-ENDPTR
                                   (CONS ((LAMBDA (J) (VECSIMP* J)) (CAR J))
                                         NIL)))
                  LOOPLABEL
                   (SETQ J (CDR J))
                   (COND ((NULL J) (RETURN FORALL-RESULT)))
                   (RPLACD FORALL-ENDPTR
                           (CONS ((LAMBDA (J) (VECSIMP* J)) (CAR J)) NIL))
                   (SETQ FORALL-ENDPTR (CDR FORALL-ENDPTR))
                   (GO LOOPLABEL))))))
       ((NOT (EQ (GETRTYPE (CADR X)) 'LIST)) (TYPERR X "list"))
       (T (RETURN (CONS 'LIST (CONS (CAR X) (CDADR X)))))))) 
(PUT 'CONS 'VECTORFUNCTION 'VECTORDOT) 
(FLAG '(SURFINT VECSUB) 'VECTORFN) 
(PUT 'SURFINT 'VECTORFUNCTION 'VSURFINT) 
(PUT 'VSURFINT 'NUMBER-OF-ARGS 1) 
(PUT 'VSURFINT 'DEFINED-ON-LINE '1001) 
(PUT 'VSURFINT 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'VSURFINT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE VSURFINT (VARGS)
    (PROG (SIVAR1 SIVAR2 SIVAR3 SIVAR4 SIVAR5)
      (COND
       ((NOT (EQUAL (LENGTH VARGS) 8))
        (RERROR 'AVECTOR 21 "Wrong number of args to SURFINT")))
      (COND
       ((NOT
         (AND (VECP (SETQ SIVAR1 (CAR VARGS)))
              (VECP (SETQ SIVAR2 (CADR VARGS)))
              (IDP (CAR (SETQ SIVAR3 (CDDR VARGS))))
              (IDP (CAR (SETQ SIVAR4 (CDDDR SIVAR3))))))
        (RERROR 'AVECTOR 22 "Wrong type(s) of arguments supplied to SURFINT")))
      (SETQ SIVAR2 (VECSM* SIVAR2))
      (SETQ SIVAR3 (REVERSE (CDDDR (REVERSE SIVAR3))))
      (SETQ SIVAR5
              (REVAL1
               (LIST 'CROSS (LIST 'VECDF SIVAR2 (CAR SIVAR3))
                     (LIST 'VECDF SIVAR2 (CAR SIVAR4)))
               NIL))
      (SETQ SIVAR1 (VECSM* SIVAR1))
      (SETQ SIVAR5 (REVAL1 (LIST 'DOT SIVAR1 SIVAR5) NIL))
      (SETQ SIVAR5 (REVAL1 (LIST 'VECSUB 'COORDS SIVAR2 SIVAR5) NIL))
      (RETURN
       (REVAL1
        (APPEND (LIST 'DEFINT (APPEND (LIST 'DEFINT SIVAR5) SIVAR3)) SIVAR4)
        NIL)))) 
(PUT 'VECSUB 'VECTORFUNCTION 'VVECSUB) 
(PUT 'VVECSUB 'NUMBER-OF-ARGS 1) 
(PUT 'VVECSUB 'DEFINED-ON-LINE '1025) 
(PUT 'VVECSUB 'DEFINED-IN-FILE 'AVECTOR/AVECTOR.RED) 
(PUT 'VVECSUB 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE VVECSUB (VARGS)
    (PROG (VSARG1 VSARG2 VSARG3)
      (COND
       ((NOT (EQUAL (LENGTH VARGS) 3))
        (RERROR 'AVECTOR 23 "Wrong number of arguments to VECSUB")))
      (COND
       ((NOT (AND (VECP (CAR VARGS)) (VECP (CADR VARGS))))
        (RERROR 'AVECTOR 24 "First two arguments to VECSUBS must be vectors")))
      (SETQ VSARG1 (VECSM* (CAR VARGS)))
      (SETQ VSARG2 (VECSM* (CADR VARGS)))
      (SETQ VSARG3 (CADDR VARGS))
      (COND ((NOT (VECP VSARG3)) (SETQ VSARG3 (PREPSQ (CADR VSARG3)))))
      (RETURN
       (REVAL1
        (LIST 'SUB
              (LIST 'EQUAL (*A2K (COMPONENT VSARG1 0)) (COMPONENT VSARG2 0))
              (LIST 'EQUAL (*A2K (COMPONENT VSARG1 1)) (COMPONENT VSARG2 1))
              (LIST 'EQUAL (*A2K (COMPONENT VSARG1 2)) (COMPONENT VSARG2 2))
              VSARG3)
        NIL)))) 
(ENDMODULE) 