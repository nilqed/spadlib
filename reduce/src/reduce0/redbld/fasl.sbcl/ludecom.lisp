(cl:declaim (cl:optimize cl:debug cl:safety))
(cl:declaim (sb-ext:muffle-conditions sb-ext:compiler-note cl:style-warning))
(MODULE (LIST 'LUDECOM)) 
(PUT 'GET_NUM_PART 'NUMBER-OF-ARGS 1) 
(PUT 'GET_NUM_PART 'DEFINED-ON-LINE '52) 
(PUT 'GET_NUM_PART 'DEFINED-IN-FILE 'LINALG/LUDECOM.RED) 
(PUT 'GET_NUM_PART 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE GET_NUM_PART (F)
    (COND ((EQUAL F 0) F) ((NUMBERP F) (FLOAT F)) ((ATOM F) F)
          ((EQCAR F '|:RD:|) (COND ((ATOM (CDR F)) (CDR F)) (T (BF2FLR F))))
          ((EQCAR F '|:DN:|) (RDWRAP2 (CDR F)))
          ((EQCAR F 'MINUS)
           (PROG (X)
             (SETQ X (GET_NUM_PART (CADR F)))
             (RETURN
              (COND ((NUMBERP X) (MINUS (FLOAT X))) (T (LIST 'MINUS X))))))
          ((EQCAR F 'EXPT) (RDWRAP-EXPT F))
          (T (CONS (GET_NUM_PART (CAR F)) (GET_NUM_PART (CDR F)))))) 
(PUT 'RDWRAP-EXPT 'NUMBER-OF-ARGS 1) 
(PUT 'RDWRAP-EXPT 'DEFINED-ON-LINE '77) 
(PUT 'RDWRAP-EXPT 'DEFINED-IN-FILE 'LINALG/LUDECOM.RED) 
(PUT 'RDWRAP-EXPT 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RDWRAP-EXPT (F)
    (COND ((FIXP (CADDR F)) (LIST 'EXPT-INT (GET_NUM_PART (CADR F)) (CADDR F)))
          (T (LIST 'EXPT (GET_NUM_PART (CADR F)) (GET_NUM_PART (CADDR F)))))) 
(PUT 'RDWRAP2 'NUMBER-OF-ARGS 1) 
(PUT 'RDWRAP2 'DEFINED-ON-LINE '84) 
(PUT 'RDWRAP2 'DEFINED-IN-FILE 'LINALG/LUDECOM.RED) 
(PUT 'RDWRAP2 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RDWRAP2 (F)
    (COND ((ATOM F) F) (T (TIMES (FLOAT (CAR F)) (EXPT 10 (CDR F)))))) 
(PUT 'RDWRAP* 'NUMBER-OF-ARGS 1) 
(PUT 'RDWRAP* 'DEFINED-ON-LINE '90) 
(PUT 'RDWRAP* 'DEFINED-IN-FILE 'LINALG/LUDECOM.RED) 
(PUT 'RDWRAP* 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE RDWRAP* (F) (COND ((NULL F) 0.0) (T (GET_NUM_PART F)))) 
(PUT 'EXPT-INT 'NUMBER-OF-ARGS 2) 
(PUT 'EXPT-INT 'DEFINED-ON-LINE '97) 
(PUT 'EXPT-INT 'DEFINED-IN-FILE 'LINALG/LUDECOM.RED) 
(PUT 'EXPT-INT 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE EXPT-INT (A B) (EXPT A (FIX B))) 
(PUT 'LU_DECOM 'NUMBER-OF-ARGS 1) 
(PUT 'LU_DECOM 'DEFINED-ON-LINE '106) 
(PUT 'LU_DECOM 'DEFINED-IN-FILE 'LINALG/LUDECOM.RED) 
(PUT 'LU_DECOM 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE LU_DECOM (IN_MAT)
    (PROG (ANS I_TURNED_ROUNDED_ON SQ_SIZE)
      (SETQ SQ_SIZE 0)
      (COND
       ((NOT (MATRIXP IN_MAT))
        (REDERR "Error in lu_decom: non matrix input.")))
      (COND
       ((NOT (SQUAREP IN_MAT))
        (REDERR "Error in lu_decom: input matrix should be square.")))
      (COND
       ((NOT *ROUNDED)
        (PROGN (SETQ I_TURNED_ROUNDED_ON T) (ON (LIST 'ROUNDED)) NIL)))
      (SETQ SQ_SIZE (FIRST (SIZE_OF_MATRIX IN_MAT)))
      (COND ((CX_TEST IN_MAT SQ_SIZE) (SETQ ANS (COMPDET IN_MAT)))
            (T (SETQ ANS (UNSYMDET IN_MAT))))
      (COND (I_TURNED_ROUNDED_ON (OFF (LIST 'ROUNDED))))
      (RETURN ANS))) 
(FLAG '(LU_DECOM) 'OPFN) 
(PUT 'CX_TEST 'NUMBER-OF-ARGS 2) 
(PUT 'CX_TEST 'DEFINED-ON-LINE '129) 
(PUT 'CX_TEST 'DEFINED-IN-FILE 'LINALG/LUDECOM.RED) 
(PUT 'CX_TEST 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE CX_TEST (IN_MAT SQ_SIZE)
    (PROG (BOOL ELT I J)
      (SETQ I 0)
      (SETQ J 0)
      (SETQ I 1)
      (PROG ()
       WHILELABEL
        (COND ((NOT (AND (NOT BOOL) (LEQ I SQ_SIZE))) (RETURN NIL)))
        (PROGN
         (SETQ J 1)
         (PROG ()
          WHILELABEL
           (COND ((NOT (AND (NOT BOOL) (LEQ J SQ_SIZE))) (RETURN NIL)))
           (PROGN
            (SETQ ELT (GETMAT IN_MAT I J))
            (COND ((NEQ (AEVAL* (LIST 'IMPART ELT)) 0) (SETQ BOOL T)))
            (SETQ J (PLUS J 1))
            NIL)
           (GO WHILELABEL))
         (SETQ I (PLUS I 1))
         NIL)
        (GO WHILELABEL))
      (RETURN BOOL))) 
(FLAG '(CX_TEST) 'BOOLEAN) 
(PUT 'UNSYMDET 'NUMBER-OF-ARGS 1) 
(PUT 'UNSYMDET 'DEFINED-ON-LINE '155) 
(PUT 'UNSYMDET 'DEFINED-IN-FILE 'LINALG/LUDECOM.RED) 
(PUT 'UNSYMDET 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE UNSYMDET (MAT1)
    (PROG (X Y IN_MAT TMP INT_VEC U I J K L N)
      (SETQ I 0)
      (SETQ J 0)
      (SETQ K 0)
      (SETQ L 0)
      (SETQ N 0)
      (SETQ J 1)
      (SETQ IN_MAT (COPY_MAT MAT1))
      (SETQ N (FIRST (SIZE_OF_MATRIX IN_MAT)))
      (SETQ INT_VEC (MKVECT (DIFFERENCE N 1)))
      (PROG (I)
        (SETQ I 1)
       LAB
        (COND ((MINUSP (DIFFERENCE N I)) (RETURN NIL)))
        (PROGN
         (SETQ Y (INNERPROD 1 1 N 0 (ROW_VEC IN_MAT I N) (ROW_VEC IN_MAT I N)))
         (PUTV INT_VEC (DIFFERENCE I 1) (LIST 'QUOTIENT 1 (LIST 'SQRT Y)))
         NIL)
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (PROG (K)
        (SETQ K 1)
       LAB
        (COND ((MINUSP (DIFFERENCE N K)) (RETURN NIL)))
        (PROGN
         (SETQ L K)
         (SETQ X 0)
         (PROG (I)
           (SETQ I K)
          LAB
           (COND ((MINUSP (DIFFERENCE N I)) (RETURN NIL)))
           (PROGN
            (SETQ Y
                    (INNERPROD 1 1 (DIFFERENCE K 1)
                     (LIST 'MINUS (GETMAT IN_MAT I K)) (ROW_VEC IN_MAT I N)
                     (COL_VEC IN_MAT K N)))
            (SETMAT IN_MAT I K (LIST 'MINUS Y))
            (SETQ Y
                    (ABS
                     (GET_NUM_PART
                      (REVAL1 (LIST 'TIMES Y (GETV INT_VEC (DIFFERENCE I 1)))
                              T))))
            (COND
             ((GREATERP Y (GET_NUM_PART (COND ((FIXP X) X) (T (REVAL1 X T)))))
              (PROGN (SETQ X Y) (SETQ L I) NIL)))
            NIL)
           (SETQ I (PLUS2 I 1))
           (GO LAB))
         (COND
          ((NEQ L K)
           (PROGN
            (PROG (J)
              (SETQ J 1)
             LAB
              (COND ((MINUSP (DIFFERENCE N J)) (RETURN NIL)))
              (PROGN
               (SETQ Y (GETMAT IN_MAT K J))
               (SETMAT IN_MAT K J (GETMAT IN_MAT L J))
               (SETMAT IN_MAT L J Y)
               NIL)
              (SETQ J (PLUS2 J 1))
              (GO LAB))
            (PUTV INT_VEC (DIFFERENCE L 1) (GETV INT_VEC (DIFFERENCE K 1)))
            NIL
            NIL)))
         (PUTV INT_VEC (DIFFERENCE K 1) L)
         (COND
          ((LESSP (GET_NUM_PART (COND ((FIXP X) X) (T (REVAL1 X T))))
                  (GET_NUM_PART (REVAL1 (LIST 'TIMES 8 RD-TOLERANCE*) T)))
           (REDERR
            "Error in lu_decom: matrix is singular. LU decomposition not possible.")))
         (SETQ X (LIST 'QUOTIENT (LIST 'MINUS 1) (GETMAT IN_MAT K K)))
         (PROG (J)
           (SETQ J (PLUS K 1))
          LAB
           (COND ((MINUSP (DIFFERENCE N J)) (RETURN NIL)))
           (PROGN
            (SETQ Y
                    (INNERPROD 1 1 (DIFFERENCE K 1)
                     (LIST 'MINUS (GETMAT IN_MAT K J)) (ROW_VEC IN_MAT K N)
                     (COL_VEC IN_MAT J N)))
            (SETMAT IN_MAT K J (LIST 'TIMES X Y))
            NIL)
           (SETQ J (PLUS2 J 1))
           (GO LAB))
         NIL)
        (SETQ K (PLUS2 K 1))
        (GO LAB))
      (SETQ TMP (GET_L_AND_U IN_MAT N))
      (SETQ L (FIRST TMP))
      (SETQ U (SECOND TMP))
      (RETURN (LIST 'LIST L U INT_VEC)))) 
(PUT 'INNERPROD 'NUMBER-OF-ARGS 6) 
(PUT 'INNERPROD 'DEFINED-ON-LINE '241) 
(PUT 'INNERPROD 'DEFINED-IN-FILE 'LINALG/LUDECOM.RED) 
(PUT 'INNERPROD 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL GENERAL GENERAL GENERAL) GENERAL)) 
(DE INNERPROD (L S U C1 VEC_A VEC_B)
    (PROG (S1 D1)
      (SETQ S1 C1)
      (SETQ D1 S1)
      (PROG (K)
        (SETQ K L)
       LAB
        (COND ((MINUSP (TIMES S (DIFFERENCE U K))) (RETURN NIL)))
        (PROGN
         (SETQ S1 (LIST 'PLUS S1 (LIST 'TIMES (GETV VEC_A K) (GETV VEC_B K))))
         (SETQ D1 S1)
         NIL)
        (SETQ K (PLUS2 K S))
        (GO LAB))
      (RETURN D1))) 
(PUT 'ROW_VEC 'NUMBER-OF-ARGS 3) 
(PUT 'ROW_VEC 'DEFINED-ON-LINE '260) 
(PUT 'ROW_VEC 'DEFINED-IN-FILE 'LINALG/LUDECOM.RED) 
(PUT 'ROW_VEC 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE ROW_VEC (IN_MAT ROW_NO LENGTH_OF)
    (PROG (ROW_VEC I)
      (SETQ I 0)
      (SETQ ROW_VEC (MKVECT LENGTH_OF))
      (PROG (I)
        (SETQ I 1)
       LAB
        (COND ((MINUSP (DIFFERENCE LENGTH_OF I)) (RETURN NIL)))
        (PUTV ROW_VEC I (GETMAT IN_MAT ROW_NO I))
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (RETURN ROW_VEC))) 
(PUT 'COL_VEC 'NUMBER-OF-ARGS 3) 
(PUT 'COL_VEC 'DEFINED-ON-LINE '274) 
(PUT 'COL_VEC 'DEFINED-IN-FILE 'LINALG/LUDECOM.RED) 
(PUT 'COL_VEC 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE COL_VEC (IN_MAT COL_NO LENGTH_OF)
    (PROG (COL_VEC I)
      (SETQ I 0)
      (SETQ COL_VEC (MKVECT LENGTH_OF))
      (PROG (I)
        (SETQ I 1)
       LAB
        (COND ((MINUSP (DIFFERENCE LENGTH_OF I)) (RETURN NIL)))
        (PUTV COL_VEC I (GETMAT IN_MAT I COL_NO))
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (RETURN COL_VEC))) 
(PUT 'GET_L_AND_U 'NUMBER-OF-ARGS 2) 
(PUT 'GET_L_AND_U 'DEFINED-ON-LINE '288) 
(PUT 'GET_L_AND_U 'DEFINED-IN-FILE 'LINALG/LUDECOM.RED) 
(PUT 'GET_L_AND_U 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE GET_L_AND_U (IN_MAT SQ_SIZE)
    (PROG (L U I J)
      (SETQ I 0)
      (SETQ J 0)
      (SETQ L (MKMATRIX SQ_SIZE SQ_SIZE))
      (SETQ U (MKMATRIX SQ_SIZE SQ_SIZE))
      (PROG (I)
        (SETQ I 1)
       LAB
        (COND ((MINUSP (DIFFERENCE SQ_SIZE I)) (RETURN NIL)))
        (PROGN
         (PROG (J)
           (SETQ J 1)
          LAB
           (COND ((MINUSP (DIFFERENCE I J)) (RETURN NIL)))
           (PROGN (SETMAT L I J (GETMAT IN_MAT I J)) NIL)
           (SETQ J (PLUS2 J 1))
           (GO LAB))
         NIL)
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (PROG (I)
        (SETQ I 1)
       LAB
        (COND ((MINUSP (DIFFERENCE SQ_SIZE I)) (RETURN NIL)))
        (PROGN
         (SETMAT U I I 1)
         (PROG (J)
           (SETQ J (PLUS I 1))
          LAB
           (COND ((MINUSP (DIFFERENCE SQ_SIZE J)) (RETURN NIL)))
           (PROGN (SETMAT U I J (GETMAT IN_MAT I J)) NIL)
           (SETQ J (PLUS2 J 1))
           (GO LAB))
         NIL)
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (RETURN (LIST L U)))) 
(PUT 'COMPDET 'NUMBER-OF-ARGS 1) 
(PUT 'COMPDET 'DEFINED-ON-LINE '318) 
(PUT 'COMPDET 'DEFINED-IN-FILE 'LINALG/LUDECOM.RED) 
(PUT 'COMPDET 'PROCEDURE_TYPE '(ARROW GENERAL GENERAL)) 
(DE COMPDET (MAT1)
    (PROG (X Y IN_MAT TMP INT_VEC U P PP V W Z I J K L N)
      (SETQ I 0)
      (SETQ J 0)
      (SETQ K 0)
      (SETQ L 0)
      (SETQ N 0)
      (COND
       ((EQUAL (AEVAL (LIST 'DET MAT1)) 0)
        (REDERR
         "Error in lu_decom: matrix is singular. LU decomposition not possible.")))
      (SETQ J 1)
      (SETQ N (FIRST (SIZE_OF_MATRIX MAT1)))
      (SETQ IN_MAT (IM_UNCOMPRESS MAT1 N))
      (SETQ INT_VEC (MKVECT (DIFFERENCE N 1)))
      (PROG (I)
        (SETQ I 1)
       LAB
        (COND ((MINUSP (DIFFERENCE N I)) (RETURN NIL)))
        (PROGN
         (PUTV INT_VEC (DIFFERENCE I 1)
               (INNERPROD 1 1 (PLUS N N) 0 (ROW_VEC IN_MAT I (PLUS N N))
                (ROW_VEC IN_MAT I (PLUS N N))))
         NIL)
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (PROG (K)
        (SETQ K 1)
       LAB
        (COND ((MINUSP (DIFFERENCE N K)) (RETURN NIL)))
        (PROGN
         (SETQ L K)
         (SETQ P (PLUS K K))
         (SETQ PP (DIFFERENCE P 1))
         (SETQ Z 0)
         (PROG (I)
           (SETQ I K)
          LAB
           (COND ((MINUSP (DIFFERENCE N I)) (RETURN NIL)))
           (PROGN
            (SETQ TMP
                    (CXINNERPROD 1 1 (DIFFERENCE K 1) (GETMAT IN_MAT I PP)
                     (GETMAT IN_MAT I P) (RE_ROW_VEC IN_MAT I N)
                     (CX_ROW_VEC IN_MAT I N) (COL_VEC IN_MAT PP N)
                     (COL_VEC IN_MAT P N)))
            (SETQ X (FIRST TMP))
            (SETQ Y (SECOND TMP))
            (SETMAT IN_MAT I PP X)
            (SETMAT IN_MAT I P Y)
            (SETQ X
                    (LIST 'QUOTIENT
                          (LIST 'PLUS (LIST 'EXPT X 2) (LIST 'EXPT Y 2))
                          (GETV INT_VEC (DIFFERENCE I 1))))
            (COND
             ((GREATERP (GET_NUM_PART (REVAL1 X T))
                        (GET_NUM_PART (REVAL1 Z T)))
              (PROGN (SETQ Z X) (SETQ L I) NIL)))
            NIL)
           (SETQ I (PLUS2 I 1))
           (GO LAB))
         (COND
          ((NEQ L K)
           (PROGN
            (PROG (J)
              (SETQ J (PLUS N N))
             LAB
              (COND ((MINUSP (TIMES (MINUS 1) (DIFFERENCE 1 J))) (RETURN NIL)))
              (PROGN
               (SETQ Z (GETMAT IN_MAT K J))
               (SETMAT IN_MAT K J (GETMAT IN_MAT L J))
               (SETMAT IN_MAT L J Z)
               NIL)
              (SETQ J (PLUS2 J (MINUS 1)))
              (GO LAB))
            (PUTV INT_VEC (DIFFERENCE L 1) (GETV INT_VEC (DIFFERENCE K 1)))
            NIL
            NIL)))
         (PUTV INT_VEC (DIFFERENCE K 1) L)
         (SETQ X (GETMAT IN_MAT K PP))
         (SETQ Y (GETMAT IN_MAT K P))
         (SETQ Z (LIST 'PLUS (LIST 'EXPT X 2) (LIST 'EXPT Y 2)))
         (PROG (J)
           (SETQ J (PLUS K 1))
          LAB
           (COND ((MINUSP (DIFFERENCE N J)) (RETURN NIL)))
           (PROGN
            (SETQ P (PLUS J J))
            (SETQ PP (DIFFERENCE P 1))
            (SETQ TMP
                    (CXINNERPROD 1 1 (DIFFERENCE K 1) (GETMAT IN_MAT K PP)
                     (GETMAT IN_MAT K P) (RE_ROW_VEC IN_MAT K N)
                     (CX_ROW_VEC IN_MAT K N) (COL_VEC IN_MAT PP N)
                     (COL_VEC IN_MAT P N)))
            (SETQ V (FIRST TMP))
            (SETQ W (SECOND TMP))
            (SETMAT IN_MAT K PP
             (LIST 'QUOTIENT (LIST 'PLUS (LIST 'TIMES V X) (LIST 'TIMES W Y))
                   Z))
            (SETMAT IN_MAT K P
             (LIST 'QUOTIENT
                   (LIST 'PLUS (LIST 'TIMES W X)
                         (LIST 'MINUS (LIST 'TIMES V Y)))
                   Z))
            NIL)
           (SETQ J (PLUS2 J 1))
           (GO LAB))
         NIL)
        (SETQ K (PLUS2 K 1))
        (GO LAB))
      (SETQ IN_MAT (IM_COMPRESS IN_MAT N))
      (SETQ TMP (GET_L_AND_U IN_MAT N))
      (SETQ L (FIRST TMP))
      (SETQ U (SECOND TMP))
      (RETURN (LIST 'LIST L U INT_VEC)))) 
(PUT 'CXINNERPROD 'NUMBER-OF-ARGS 9) 
(PUT 'CXINNERPROD 'DEFINED-ON-LINE '436) 
(PUT 'CXINNERPROD 'DEFINED-IN-FILE 'LINALG/LUDECOM.RED) 
(PUT 'CXINNERPROD 'PROCEDURE_TYPE
     '(ARROW
       (TIMES GENERAL GENERAL GENERAL GENERAL GENERAL GENERAL GENERAL GENERAL
              GENERAL)
       GENERAL)) 
(DE CXINNERPROD (L S U CR CI VEC_AR VEC_AI VEC_BR VEC_BI)
    (PROG (H DR DI)
      (SETQ H (INNERPROD L S U (LIST 'MINUS CR) VEC_AR VEC_BR))
      (SETQ DR (INNERPROD L S U (LIST 'MINUS H) VEC_AI VEC_BI))
      (SETQ H (INNERPROD L S U (LIST 'MINUS CI) VEC_AI VEC_BR))
      (SETQ DI (LIST 'MINUS (INNERPROD L S U H VEC_AR VEC_BI)))
      (RETURN (LIST DR DI)))) 
(PUT 'CX_ROW_VEC 'NUMBER-OF-ARGS 3) 
(PUT 'CX_ROW_VEC 'DEFINED-ON-LINE '451) 
(PUT 'CX_ROW_VEC 'DEFINED-IN-FILE 'LINALG/LUDECOM.RED) 
(PUT 'CX_ROW_VEC 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE CX_ROW_VEC (IN_MAT ROW_NO LENGTH_OF)
    (PROG (CX_ROW_VEC I)
      (SETQ I 0)
      (SETQ CX_ROW_VEC (MKVECT LENGTH_OF))
      (PROG (I)
        (SETQ I 1)
       LAB
        (COND ((MINUSP (DIFFERENCE LENGTH_OF I)) (RETURN NIL)))
        (PUTV CX_ROW_VEC I (GETMAT IN_MAT ROW_NO (TIMES 2 I)))
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (RETURN CX_ROW_VEC))) 
(PUT 'RE_ROW_VEC 'NUMBER-OF-ARGS 3) 
(PUT 'RE_ROW_VEC 'DEFINED-ON-LINE '466) 
(PUT 'RE_ROW_VEC 'DEFINED-IN-FILE 'LINALG/LUDECOM.RED) 
(PUT 'RE_ROW_VEC 'PROCEDURE_TYPE
     '(ARROW (TIMES GENERAL GENERAL GENERAL) GENERAL)) 
(DE RE_ROW_VEC (IN_MAT ROW_NO LENGTH_OF)
    (PROG (RE_ROW_VEC I)
      (SETQ I 0)
      (SETQ RE_ROW_VEC (MKVECT LENGTH_OF))
      (PROG (I)
        (SETQ I 1)
       LAB
        (COND ((MINUSP (DIFFERENCE LENGTH_OF I)) (RETURN NIL)))
        (PUTV RE_ROW_VEC I (GETMAT IN_MAT ROW_NO (DIFFERENCE (TIMES 2 I) 1)))
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (RETURN RE_ROW_VEC))) 
(PUT 'IM_UNCOMPRESS 'NUMBER-OF-ARGS 2) 
(PUT 'IM_UNCOMPRESS 'DEFINED-ON-LINE '482) 
(PUT 'IM_UNCOMPRESS 'DEFINED-IN-FILE 'LINALG/LUDECOM.RED) 
(PUT 'IM_UNCOMPRESS 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE IM_UNCOMPRESS (IN_MAT N)
    (PROG (CX_MAT TMP I J)
      (SETQ I 0)
      (SETQ J 0)
      (SETQ CX_MAT (MKMATRIX N (TIMES 2 N)))
      (PROG (I)
        (SETQ I 1)
       LAB
        (COND ((MINUSP (DIFFERENCE N I)) (RETURN NIL)))
        (PROGN
         (PROG (J)
           (SETQ J 1)
          LAB
           (COND ((MINUSP (DIFFERENCE N J)) (RETURN NIL)))
           (PROGN
            (SETQ TMP (GETMAT IN_MAT I J))
            (SETMAT CX_MAT I (DIFFERENCE (TIMES 2 J) 1)
             (AEVAL* (LIST 'REPART TMP)))
            (SETQ TMP (GETMAT IN_MAT I J))
            (SETMAT CX_MAT I (TIMES 2 J) (AEVAL* (LIST 'IMPART TMP)))
            NIL)
           (SETQ J (PLUS2 J 1))
           (GO LAB))
         NIL)
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (RETURN CX_MAT))) 
(PUT 'IM_COMPRESS 'NUMBER-OF-ARGS 2) 
(PUT 'IM_COMPRESS 'DEFINED-ON-LINE '506) 
(PUT 'IM_COMPRESS 'DEFINED-IN-FILE 'LINALG/LUDECOM.RED) 
(PUT 'IM_COMPRESS 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE IM_COMPRESS (CX_MAT N)
    (PROG (COMP_MAT I J)
      (SETQ I 0)
      (SETQ J 0)
      (SETQ COMP_MAT (MKMATRIX N N))
      (PROG (I)
        (SETQ I 1)
       LAB
        (COND ((MINUSP (DIFFERENCE N I)) (RETURN NIL)))
        (PROGN
         (PROG (J)
           (SETQ J 1)
          LAB
           (COND ((MINUSP (DIFFERENCE N J)) (RETURN NIL)))
           (PROGN
            (SETMAT COMP_MAT I J
             (LIST 'PLUS (GETMAT CX_MAT I (DIFFERENCE (TIMES 2 J) 1))
                   (LIST 'TIMES 'I (GETMAT CX_MAT I (TIMES 2 J)))))
            NIL)
           (SETQ J (PLUS2 J 1))
           (GO LAB))
         NIL)
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (RETURN COMP_MAT))) 
(PUT 'CONVERT 'NUMBER-OF-ARGS 2) 
(PUT 'CONVERT 'DEFINED-ON-LINE '528) 
(PUT 'CONVERT 'DEFINED-IN-FILE 'LINALG/LUDECOM.RED) 
(PUT 'CONVERT 'PROCEDURE_TYPE '(ARROW (TIMES GENERAL GENERAL) GENERAL)) 
(DE CONVERT (IN_MAT INT_VEC)
    (PROG (NEW_MAT I)
      (SETQ I 0)
      (COND
       ((NOT (MATRIXP IN_MAT))
        (REDERR "Error in convert(first argument): should be a matrix.")))
      (SETQ NEW_MAT (COPY_MAT IN_MAT))
      (PROG (I)
        (SETQ I 1)
       LAB
        (COND ((MINUSP (DIFFERENCE (PLUS (UPBV INT_VEC) 1) I)) (RETURN NIL)))
        (PROGN
         (COND
          ((NEQ (GETV INT_VEC (DIFFERENCE I 1)) I)
           (SETQ NEW_MAT
                   (SWAP_ROWS NEW_MAT I (GETV INT_VEC (DIFFERENCE I 1))))))
         NIL)
        (SETQ I (PLUS2 I 1))
        (GO LAB))
      (RETURN NEW_MAT))) 
(FLAG '(CONVERT) 'OPFN) 
(ENDMODULE) 