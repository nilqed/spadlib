)abbrev domain TENSALG TensorAlgebra
++ Author: Kurt Pagani
++ Date Created: Thu Jan 30 23:04:02 CET 2020
++ Date Revised: Thu Sep 09 23:57:51 CET 2022
++ License: BSD
++ References:
++   https://en.wikipedia.org/wiki/Tensor_algebra
++ Description: 
++  Quote Ref:
++  -- Non-commutative polynomials 
++  -- Quotients
++  Because of the generality of the tensor algebra, many other algebras 
++  of interest can be constructed by starting with the tensor algebra and 
++  then imposing certain relations on the generators, i.e. by constructing 
++  certain quotient algebras of T(V). Examples of this are the 
++  exterior algebra, the symmetric algebra, Clifford algebras, 
++  the Weyl algebra and universal enveloping algebras.
++ --
++ Notes: Actually the algebra is over FreeModule(R,B), however, there
++ seems to be no method in FriCAS to extract the parameters R and B?
++
++
TensorAlgebra(R,B) : Exports == Implementation where

  R:Ring
  B:OrderedSet
  
  OF     ==> OutputForm
  NNI    ==> NonNegativeInteger
  FMB    ==> FreeMonoid B
  CTOF   ==> CoercibleTo OutputForm
  FMCRB  ==> FreeModuleCategory(R,FMB)
  XFABR  ==> XFreeAlgebra(B,R)
  XDPBR  ==> XDistributedPolynomial(B,R)
  TERM   ==> Record(k:FMB,c:R)  
  
  Exports == Join(FMCRB, XFABR) with
    
    coerce : B -> %
    convert : FMB -> OutputForm
	
  Implementation ==  XDPBR add 
 
    Rep := XDPBR
    
    convert(x:FMB):OutputForm ==
      x=1$FMB => empty()$OF 
      length(x)$FMB = 1 => x::OF
      length(x)$FMB = 2 => tensor(first(x)::OF,rest(x)::OF)$OF
      tensor(first(x)::OF, convert(rest x))
      
    coerce(x:%):OutputForm ==
      zero? x => outputForm(0)$OF --empty()$OF
      x=1$% => outputForm(1)$OF
      c:R:=leadingCoefficient(x)
      if c=1 then cof:=empty()$OF else cof:=c::OF 
      kof:OF:=cof * convert(leadingSupport(x))
      zero? reductum(x) => kof
      kof + reductum(x)::OF
      



)abbrev domain OOBJ OrderedObjectList
++ Description:
++   This domain implements ordered objects such that the type
++   has OrderedSet. Adapted from OrderedVariableList.
OrderedObjectList(T:Comparable, ObjectList : List T):
  Join(OrderedFinite, ConvertibleTo T) with
         object : T -> Union(%,"failed")
           ++ object(s) returns a member of the object set or failed
    == add
       ObjectList := removeDuplicates ObjectList
       Rep := PositiveInteger
       s1, s2 : %
       convert(s1) : T == ObjectList.((s1::Rep)::PositiveInteger)
       coerce(s1) : OutputForm == (convert(s1)@T)::OutputForm
       index i   == i::%
       lookup j  == j :: Rep
       size ()   == #ObjectList
       object(exp : T) ==
            for i in 1.. for exp2 in ObjectList repeat
                if exp = exp2 then return i::PositiveInteger::%
            "failed"
       s1 < s2 == s2 <$Rep s1
       s1 = s2 == s1 =$Rep s2
       latex(x : %) : String      == latex(convert(x)@T)
       hashUpdate!(hs, s) == update!(hs, SXHASH(s)$Lisp)$HashState
       
       
-- B:=OrderedObjectList(BOP, map(operator,[a,b,c]))
-- index(1)$B
-- enumerate()$B        
-- size()$B       
-- object(operator a)$B