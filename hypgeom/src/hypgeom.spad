\iffalse
)lisp (defvar |$inclAssertions| nil)
--------------------------------------
)abbrev package HYPGEOM HyperGeometric
--------------------------------------
HyperGeometric(): Exports == Implementation where
  R ==> Fraction Integer  -- must be FRAC INT not INT!!
  X ==> Expression R 
  NNI ==> NonNegativeInteger
  SMP ==> SparseMultivariatePolynomial(R, Kernel X) -- if R has IntegralDomain
  SUP ==> SparseUnivariatePolynomial SMP 
  
  EFSP   ==> ElementaryFunctionStructurePackage(R,X)
  FACSUP ==> Factored SUP
  FACREC ==> Record(factor:SUP, exponent:NNI)
  
  HYPER  ==> Record(ap:List X, bq:List X, fac:X)
  PARAM  ==> Record(ab:List SUP, const:List SUP)

  Exports == with
    polynomial? : (X,X) -> Boolean
      ++ polynomial?(p,x) returns true if p has the structure of a
      ++ univariate polynomial in the variable x. Notice that constants
      ++ are not considered as polynomials here.
    rational? : (X,X) -> Boolean
    factoredForm : (X->X) -> Fraction(FACSUP)
    getParameters : FACSUP -> PARAM
    convert : SUP -> X
    pFq : (X->X) -> HYPER
    construct: (HYPER,Symbol) -> X
    display : HYPER -> OutputForm
    hyperLookup : HYPER -> X

  Implementation == add

    polynomial?(p:X,x:X):Boolean ==
      xs:=retract(x)@Symbol -- first variables x, ifCan
      not member?(xs, variables p) => false
      up:=univariate(p, kernel xs)
      nup:=numer up
      cnup:=coefficients nup 
      lb:=[freeOf?(s,x) for s in cnup]
      reduce(_and,lb)

    rational?(r:X,x:X):Boolean ==
      nr:X:=numerator r
      not(polynomial?(nr,x) or freeOf?(nr,x)) => false
      dr:X:=denominator r
      not(polynomial?(dr,x) or freeOf?(dr,x)) => false
      true

    factoredForm(f:X->X):Fraction(FACSUP) ==
      ns:X:=(nsym:=new()$Symbol)::X
      q:=f(ns+1)/f(ns)
      nq:=normalize(q)$EFSP
      not rational?(nq,ns) => error "Not rational"
      dnq:=denom nq
      nnq:=numer nq
      unnq:=univariate(nnq,kernel nsym)
      udnq:=univariate(dnq,kernel nsym)
      funnq:=factor unnq
      fudnq:=factor udnq
      funnq/fudnq
      

    getParameters x ==
      qm:=create()$SingletonAsOrderedSet
      r:List FACREC:=factors x
      l1:List SUP:=[]
      l2:List SUP:=[]
      for s in r repeat
        p:SUP:=s.factor
        if variables p = [qm]
        then
          q1:=p-qm::SUP
          for i in 1..s.exponent repeat
            l1:=cons(q1,l1)
        else
          q2:=p 
          for i in 1..s.exponent repeat
            l2:=cons(q2,l2)
      return [l1,l2]$PARAM


    convert(x:SUP):X ==
      k:Kernel(X):=first tower('_%::X) --'
      y:SMP:=multivariate(x,k)$SMP
      coerce(y)$X
      

    buildConst(x:List SUP):X ==
      empty?(x) => 1$X
      p:SUP:=reduce(_*,x)
      convert p

    pFq(f:X->X):HYPER ==
      ff:=factoredForm(f)
      gpn:=getParameters(numer ff)
      gpd:=getParameters(denom ff)
      a:=[convert t for t in gpn.ab]
      b:=[convert t for t in gpd.ab]
      if member?(1$X,b) then
        b:=delete(b,position(1$X,b))
      else
        a:=cons(1$X,a)
      c:=convert unit(numer ff)
      ca:=buildConst(gpn.const)
      cb:=buildConst(gpd.const)
      [a,b,c*ca/cb]$HYPER
 
    construct(x,s) ==
      v:=s::X
      a:=x.ap
      b:=x.bq
      c:=x.fac
      av:=[paren(v+t) for t in a]
      bv:=[paren(v+t) for t in b]
      num:=1$X
      den:=1$X
      if not empty? av then
        num:=reduce(_*,av)
      if not empty? bv then
        den:=reduce(_*,bv)    
      c*num/den/(v+1$X)

    display(x:HYPER):OutputForm ==
      OF ==> OutputForm
      a:=[s::OF for s in x.ap]
      b:=[s::OF for s in x.bq]
      c:=(x.fac)::OF
      p:=(#a)::OF
      q:=(#b)::OF
      A:=sub(presub('F::OF,p),q)
      if #a < #b then
        a:=append(a,['*::OF for i in 1..#b- #a])
      else
        b:=append(b,['*::OF for i in 1..#a- #b])
      --B:=binomial(blankSeparate a, blankSeparate b)
      B:=blankSeparate [A,matrix [a,b],bracket c]
      --hconcat(A,B)

    hyperLookup(x:HYPER):X ==
      a:=x.ap
      b:=x.bq
      c:=x.fac
      p:= #a
      q:= #b
      if p=1 then
        if q=0 then
          return (1-c)^(-a.1)
      0$X


)if false      
\fi
\documentclass[12pt,a4paper]{article}
\usepackage{amsmath}
\usepackage{fancyvrb}
%\def\({\left(}
%\def\){\right)}
%\def\atan{\operatorname{atan}}
\def\sp{^}\def\sb{_}\def\leqno(#1){}
%\def\erf{\mathrm{erf}}\def\sinh{\mathrm{sinh}}
\def\zag#1#2{{{\left.{#1}\right|}\over{\left|{#2}\right.}}}
%\def\csch{\mathrm{csch}}
\begin{document}
A series $\sum_{k\geq 0} s_k$ is called \textit{hypergeometric} when $s_0=1$
and the ratio $\frac{s_{k+1}}{s_k}$ is a rational function of $k$, that is
\begin{equation}
    \frac{s_{k+1}}{s_{k}} = \frac{P(k)}{Q(k)},
\end{equation}
for some polynomials $P$ and $Q$ in $k$. In this case the terms $s_k$ are 
called \textit{hypergeometric terms}. 

\begin{quote}From \cite{AEQB}:
It is important to recognize when a given series is hypergeometric, if it is, 
because the general theory of hypergeometric functions is very powerful, and 
we may gain a lot of insight into a function that concerns us by first 
recognizing that it is hyper-geometric, then identifying precisely which 
hyper-geometric function it is, and finally by using known results about such 
functions.
\end{quote}

Suppose that the polynomials $P$ and $Q$ have been completely factored, in the 
form
\begin{equation}
  \frac{s_{k+1}}{s_{k}} = \frac{P(k)}{Q(k)}=
    \frac{(a_1+k)\cdots(a_p+k)}{(b_1+k)\cdots(b_q+k)(1+k)}\,x
\end{equation}
where x is a constant, and normalized such that $s_0=1$, then the 
hyper-geometric series $\sum_{k\geq 0} s_k\,x^k$ is denoted by the
symbolic form
%
\begin{equation}
 \,{}_pF_q \left[\begin{matrix} a_1 & a_2 & \cdots & a_{p} \\ 
    b_1 & b_2 & \cdots & b_q \end{matrix};x\right].
\end{equation}
%
The factor $(1 + k)$ is for historical reasons and there is no loss of 
generality if it is artificially inserted in case of absence as long as
it cancels out.

\paragraph{The hypergeometric series lookup algorithm.} The algortithm
is described in \cite{AEQB}, and is essentially based on factoring the
polynomials in order ot read off the symbol $\,{}pF_q$.

\paragraph{Exported functions from package \texttt{HYPGEOM}.}

\begin{Verbatim}[fontsize=\tiny]
-- Example 3.6.2
f8(k) == (-1)^k * binomial(2*n,k)*binomial(2*k,k)*binomial(4*n-2*k,2*n-k)

                                                                   Type: Void
ff8:=factoredForm(f8)$HYPGEOM

   Compiling function f8 with type Expression(Fraction(Integer)) ->
      Expression(Fraction(Integer))

                    2     1
           (? - 2 n) (? + -)
                          2
   (27)  ---------------------
                    1        2
         (? - 2 n + -)(? + 1)
                    2
Type: Fraction(Factored(SparseUnivariatePolynomial
(SparseMultivariatePolynomial(Fraction(Integer),
Kernel(Expression(Fraction(Integer)))))))

pFq(f8) -->


                1                                  1
   (28)  [ap = [-, - 2 n, - 2 n], bq = [1, - 2 n + -], fac = 1]
                2                                  2
Type: Record(ap: List(Expression(Fraction(Integer))),

bq: List(Expression(Fraction(Integer))),fac: Expression(Fraction(Integer)))
(29) -> display %

              +1                  +
              |-    - 2 n    - 2 n|
              |2                  |
   (29)   F   |                   | [1]
         3  2 |           1       |
              |1  - 2 n + -    *  |
              +           2       +
                                                             Type: OutputForm
(30) -> latex %
\end{Verbatim}
%
 \[ {{{} \sb {3} \sp {{\ }}F \sb {{\ }} \sp {{\ }}} \sb {2}} \ {\left[ 
 \begin{array}{ccc} {\frac{1}{2}} & -{2 \  n} & -{2 \  n} \\ 1 & {-{2 \  n}+
 {\frac{1}{2}}} & * \end{array}  \right]} \ {\left[ 1 \right]} \]


\begin{thebibliography}{1}
%
\bibitem{AEQB} Marko Petkovsek, Herbert Wilf, and Doron Zeilberger,
  {\em A=B}, {Routledge \& CRC Press},
  {URL:https://www2.math.upenn.edu/{\textasciitilde}wilf/AeqB.pdf}.
\end{thebibliography}
%      

\end{document}
)endif
      