)abbrev package SQLITE SQLite
++ https://cl-sqlite.common-lisp.dev/
++ Assumes that "quicklisp" is installed/working at ~/quicklisp
++ Define new functions to avoid name conflicts when using "use-package"!
++ Usage: cdb := connect "path/to/file.db"  -- returns a handle
++        q1:=query cdb "sql commands ..."
++        q2:=queryToList "sql commands ..."
++ Return values are "SExpression" (string, destruct, ...)
SQLite() : Exports == Implementation where
  
  MSC ==> MoreSystemCommands
  SEX ==> SExpression
  lisp1(s) ==> systemCommand(concat ["lisp ",s])$MSC
 
  Exports == with
    connect : String -> SExpression
    disconnect : SExpression -> SExpression
    query : (SExpression,String) -> SExpression
    queryToList : (SExpression,String) -> SExpression

  Implementation == add

    connect db == 
      LOAD("~/quicklisp/setup")$Lisp
      lisp1 "(ql:quickload :sqlite)"
      lisp1 "(defun sqliteconnect (s) (sqlite::connect s))"
      lisp1 "(defun sqlitequery (h s) (sqlite::execute-single h s))"
      lisp1 "(defun sqlitequerytolist (h s) (sqlite::execute-to-list h s))"
      lisp1 "(defun sqlitedisconnect (h) (sqlite::disconnect h))"
      USE_-PACKAGE("SQLITE")$Lisp
      --IN_-PACKAGE("SQLITE")$Lisp
      SQLITECONNECT(db)$Lisp

    query(cdb,s) == SQLITEQUERY(cdb,s)$Lisp
    queryToList(cdb,s) == SQLITEQUERYTOLIST(cdb,s)$Lisp
    disconnect(cdb) == SQLITEDISCONNECT(cdb)$Lisp

