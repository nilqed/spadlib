#!/bin/sh

usage () {
    echo "build_html.sh [-HDh?]"
    echo "    -H   Use texi2html instead of makeinfo"
    echo "    -D   Enable simple debugging of this script"
    echo "    -h   This help"
    echo "    -?   This help"
    echo "Build the html version of the manual, including both the single"
    echo "page version and the multi-page version.  This also builds all the"
    echo "category information."
    exit 1
}

# Default to using makeinfo/texi2any
TEXI2HTML=makeinfo

while getopts "Hh?D" arg
do
  case $arg in
      H) TEXI2HTML="/usr/bin/env perl @abs_srcdir@/texi2html" ;;
      D) DEBUG=yes ;;
      h) usage ;;
      \?) usage ;;
  esac
done

# If output dir exists, remove it so we start clean
if [ -d tmp_html ]; then
    rm -rf tmp_html
fi
mkdir tmp_html
cd tmp_html

for f in @abs_srcdir@/*.texi
do
  filenamebase=`echo $f | @SED@ -e 's/^.*\///;s/\.texi//'`
  @SED@ -e "s/^@\(deffn\|defvr\)[x]*  *{[^}]*}  *\([^[:blank:]]*\).*/@anchor{Item: $filenamebase\/\1\/\2}\n&/;" -e "s/^@node  *\([^,]*\).*/@anchor{Item: $filenamebase\/node\/\1}\n&/" $f \
  | @AWK@ 'BEGIN { iftex = 0; } /^@iftex/ {iftex = 1;} {if (!iftex) {print;}} /^@end iftex/ {iftex = 0;}' \
  | @AWK@ '/@anchor/ {if (!(foo[$0])) {foo[$0] = 1; print;}} !/@anchor/' > $(basename $f)
done 

for f in *.texi
do
  filenamebase=`echo $f | @SED@ -e 's/^.*\///;s/\.texi//'`
  echo "filenamebase = \"$filenamebase\""
  cat $f
done | @AWK@ '!/^@c / && !/^@c$/ && (/^@deffn/ || /^@defvr/ || /^@end deffn/ || /^@end defvr/ || /@category/ || /@node/ || /^filenamebase/)' | @SED@ -f @abs_srcdir@/extract_categories1.sed | @AWK@ -f @abs_srcdir@/extract_categories1.awk > make-categories.py 
python make-categories.py 
@SED@ -e 's/^@bye/@node Documentation Categories, , Function and Variable Index\n@chapter Documentation Categories/' @abs_srcdir@/maxima.texi > maxima.texi 
( for f in Category-*.texi; do echo '@include' $f; done ; echo @bye ) >> maxima.texi 

if [ "X$DEBUG" = "Xyes" ]; then
    set -x
fi

if [ "$TEXI2HTML" = "makeinfo" ];
then
    # --no-node-files so we don't have thousands of little html files
    # --force -e 10000 because the category stuff causes lots of errors.
    TEXIOPT="--html -c INLINE_CONTENTS=0 --force -e 10000 --document-lang=en -I . -I .. -I @abs_srcdir@ --css-include=@abs_srcdir@/manual.css --init-file ../texi2html.init"
    $TEXI2HTML --split=chapter --no-node-files --output="@abs_builddir@/tmp_html" $TEXIOPT maxima.texi 
    $TEXI2HTML --no-split --output="@abs_builddir@/maxima_singlepage.html" $TEXIOPT maxima.texi 
else
    $TEXI2HTML --split chapter --lang=en --output="@abs_builddir@/tmp_html" -I . -I .. -I @abs_srcdir@ --css-include=@abs_srcdir@/manual.css --init-file ../texi2html.init maxima.texi 
    $TEXI2HTML --split none --lang=en --output="@abs_builddir@/maxima_singlepage.html" -I . -I .. -I @abs_srcdir@ --css-include=@abs_srcdir@/manual.css --init-file ../texi2html.init maxima.texi 
fi

if [ "X$DEBUG" = "Xyes" ]; then
    set +x
fi

for f in *.html
do
  cat $f | @SED@ -e 's/^&middot;$//' -e 's/<p>\(<a href=".*">Category: .*<\/a>\)/<p>Categories:\&nbsp;\&nbsp;\1/' -e 's/<a href="\(.*\)">Category: \(.*\)<\/a>/<a href="\1">\2<\/a>/' -e 's/<a href="\(.*\)">Item: \(.*\)<\/a>/<a href="\1">\2<\/a>/' >tmpfile &&
  mv tmpfile $f &&
  install -c $f "@abs_builddir@"
done 
cd ..

if [ "X$DEBUG" != "Xyes" ]; then
    rm -r -f tmp_html
fi
